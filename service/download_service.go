package DownloadService

import (
	"encoding/base64"
	"encoding/json"
	"godownloader/http"
	"io/ioutil"
	"log"
	"net/http"
	"strconv"
	"sync"
)

type DJob struct {
	Id         int
	FileName   string
	Size       int64
	Downloaded int64
	Progress   int64
	Speed      int64
}

type NewJob struct {
	Url       string
	PartCount int64
	FilePath  string
}

type DServ struct {
	dls    []*httpclient.Downloader
	oplock sync.Mutex
}

func (srv *DServ) Start(listenPort int) error {
	http.HandleFunc("/", srv.Redirect)
	http.HandleFunc("/progress.json", srv.progressJson)
	http.HandleFunc("/add_task", srv.addTask)
	http.HandleFunc("/remove_task", srv.removeTask)
	http.HandleFunc("/start_task", srv.startTask)
	http.HandleFunc("/stop_task", srv.stopTask)
	http.HandleFunc("/start_all_task", srv.startAllTask)
	http.HandleFunc("/stop_all_task", srv.stopAllTask)
	http.HandleFunc("/index.html", srv.index)
	if err := http.ListenAndServe(":"+strconv.Itoa(listenPort), nil); err != nil {
		return err
	}
	return nil
}

func (srv *DServ) SaveSettings(sf string) error {
	var ss ServiceSettings
	for _, i := range srv.dls {

		ss.Ds = append(ss.Ds, DownloadSettings{
			FI: i.Fi,
			Dp: i.GetProgress(),
		})
	}

	return ss.SaveToFile(sf)
}

func (srv *DServ) LoadSettings(sf string) error {
	ss, err := LoadFromFile(sf)
	if err != nil {
		log.Println("error: when try load settings", err)
		return err
	}
	log.Println(ss)
	for _, r := range ss.Ds {
		dl, err := httpclient.RestoreDownloader(r.FI.Url, r.FI.FileName, r.Dp)
		if err != nil {
			return err
		}
		srv.dls = append(srv.dls, dl)
	}
	return nil
}

const htmlData = "<!doctype html>

<html>

<head>
	<title>GO DOWNLOAD</title>
	<meta name="viewport" content="width=device-width">
	<script>
        (function(a, p) {
            function k(a) {
                var b = a.length,
                    f = t.type(a);
                return t.isWindow(a) ? !1 : 1 === a.nodeType && b ? !0 : "array" === f || "function" !== f && (0 === b || "number" == typeof b && 0 < b && b - 1 in a)
            }

            function D(a) {
                var b = Da[a] = {};
                return t.each(a.match(ia) || [], function(a, f) {
                    b[f] = !0
                }), b
            }

            function v() {
                Object.defineProperty(this.cache = {}, 0, {
                    get: function() {
                        return {}
                    }
                });
                this.expando = t.expando + Math.random()
            }

            function F(a, b, f) {
                var e;
                if (f === p && 1 === a.nodeType)
                    if (e = "data-" + b.replace(ta, "-$1").toLowerCase(), f = a.getAttribute(e), "string" == typeof f) {
                        try {
                            f =
                                "true" === f ? !0 : "false" === f ? !1 : "null" === f ? null : +f + "" === f ? +f : Ka.test(f) ? JSON.parse(f) : f
                        } catch (c) {}
                        Z.set(a, b, f)
                    } else f = p;
                return f
            }

            function M() {
                return !0
            }

            function I() {
                return !1
            }

            function S() {
                try {
                    return N.activeElement
                } catch (a) {}
            }

            function O(a, b) {
                for (;
                    (a = a[b]) && 1 !== a.nodeType;);
                return a
            }

            function P(a, b, f) {
                if (t.isFunction(b)) return t.grep(a, function(a, e) {
                    return !!b.call(a, e, a) !== f
                });
                if (b.nodeType) return t.grep(a, function(a) {
                    return a === b !== f
                });
                if ("string" == typeof b) {
                    if (La.test(b)) return t.filter(b, a, f);
                    b = t.filter(b,
                        a)
                }
                return t.grep(a, function(a) {
                    return 0 <= xa.call(b, a) !== f
                })
            }

            function V(a, b) {
                return t.nodeName(a, "table") && t.nodeName(1 === b.nodeType ? b : b.firstChild, "tr") ? a.getElementsByTagName("tbody")[0] || a.appendChild(a.ownerDocument.createElement("tbody")) : a
            }

            function ma(a) {
                return a.type = (null !== a.getAttribute("type")) + "/" + a.type, a
            }

            function fa(a) {
                var b = Ma.exec(a.type);
                return b ? a.type = b[1] : a.removeAttribute("type"), a
            }

            function aa(a, b) {
                for (var f = a.length, e = 0; f > e; e++) U.set(a[e], "globalEval", !b || U.get(b[e], "globalEval"))
            }

            function W(a, b) {
                var f, e, c, m, h, d;
                if (1 === b.nodeType) {
                    if (U.hasData(a) && (f = U.access(a), e = U.set(b, f), d = f.events))
                        for (c in delete e.handle, e.events = {}, d)
                            for (f = 0, e = d[c].length; e > f; f++) t.event.add(b, c, d[c][f]);
                    Z.hasData(a) && (m = Z.access(a), h = t.extend({}, m), Z.set(b, h))
                }
            }

            function b(a, b) {
                var f = a.getElementsByTagName ? a.getElementsByTagName(b || "*") : a.querySelectorAll ? a.querySelectorAll(b || "*") : [];
                return b === p || b && t.nodeName(a, b) ? t.merge([a], f) : f
            }

            function c(a, b) {
                if (b in a) return b;
                for (var f = b.charAt(0).toUpperCase() +
                        b.slice(1), e = b, c = lb.length; c--;)
                    if (b = lb[c] + f, b in a) return b;
                return e
            }

            function d(a, b) {
                return a = b || a, "none" === t.css(a, "display") || !t.contains(a.ownerDocument, a)
            }

            function g(a, b) {
                for (var f, e, c, m = [], h = 0, l = a.length; l > h; h++) e = a[h], e.style && (m[h] = U.get(e, "olddisplay"), f = e.style.display, b ? (m[h] || "none" !== f || (e.style.display = ""), "" === e.style.display && d(e) && (m[h] = U.access(e, "olddisplay", w(e.nodeName)))) : m[h] || (c = d(e), (f && "none" !== f || !c) && U.set(e, "olddisplay", c ? f : t.css(e, "display"))));
                for (h = 0; l > h; h++) e = a[h],
                    e.style && (b && "none" !== e.style.display && "" !== e.style.display || (e.style.display = b ? m[h] || "" : "none"));
                return a
            }

            function f(a, b, f) {
                return (a = va.exec(b)) ? Math.max(0, a[1] - (f || 0)) + (a[2] || "px") : b
            }

            function m(a, b, f, e, c) {
                b = f === (e ? "border" : "content") ? 4 : "width" === b ? 1 : 0;
                for (var h = 0; 4 > b; b += 2) "margin" === f && (h += t.css(a, f + ya[b], !0, c)), e ? ("content" === f && (h -= t.css(a, "padding" + ya[b], !0, c)), "margin" !== f && (h -= t.css(a, "border" + ya[b] + "Width", !0, c))) : (h += t.css(a, "padding" + ya[b], !0, c), "padding" !== f && (h += t.css(a, "border" + ya[b] +
                    "Width", !0, c)));
                return h
            }

            function h(b, f, e) {
                var h = !0,
                    c = "width" === f ? b.offsetWidth : b.offsetHeight,
                    d = a.getComputedStyle(b, null),
                    w = t.support.boxSizing && "border-box" === t.css(b, "boxSizing", !1, d);
                if (0 >= c || null == c) {
                    if (c = da(b, f, d), (0 > c || null == c) && (c = b.style[f]), Na.test(c)) return c;
                    h = w && (t.support.boxSizingReliable || c === b.style[f]);
                    c = parseFloat(c) || 0
                }
                return c + m(b, f, e || (w ? "border" : "content"), h, d) + "px"
            }

            function w(a) {
                var b = N,
                    f = Xa[a];
                return f || (f = l(a, b), "none" !== f && f || (qa = (qa || t("<iframe frameborder='0' width='0' height='0'/>").css("cssText",
                    "display:block !important")).appendTo(b.documentElement), b = (qa[0].contentWindow || qa[0].contentDocument).document, b.write("<!doctype html><html><body>"), b.close(), f = l(a, b), qa.detach()), Xa[a] = f), f
            }

            function l(a, b) {
                var f = t(b.createElement(a)).appendTo(b.body),
                    e = t.css(f[0], "display");
                return f.remove(), e
            }

            function e(a, b, f, c) {
                var h;
                if (t.isArray(b)) t.each(b, function(b, h) {
                    f || xb.test(a) ? c(a, h) : e(a + "[" + ("object" == typeof h ? b : "") + "]", h, f, c)
                });
                else if (f || "object" !== t.type(b)) c(a, b);
                else
                    for (h in b) e(a + "[" + h + "]",
                        b[h], f, c)
            }

            function n(a) {
                return function(b, f) {
                    "string" != typeof b && (f = b, b = "*");
                    var e, c = 0,
                        h = b.toLowerCase().match(ia) || [];
                    if (t.isFunction(f))
                        for (; e = h[c++];) "+" === e[0] ? (e = e.slice(1) || "*", (a[e] = a[e] || []).unshift(f)) : (a[e] = a[e] || []).push(f)
                }
            }

            function B(a, b, f, e) {
                function c(d) {
                    var w;
                    return h[d] = !0, t.each(a[d] || [], function(a, d) {
                        var l = d(b, f, e);
                        return "string" != typeof l || m || h[l] ? m ? !(w = l) : p : (b.dataTypes.unshift(l), c(l), !1)
                    }), w
                }
                var h = {},
                    m = a === bb;
                return c(b.dataTypes[0]) || !h["*"] && c("*")
            }

            function r(a, b) {
                var f, e,
                    c = t.ajaxSettings.flatOptions || {};
                for (f in b) b[f] !== p && ((c[f] ? a : e || (e = {}))[f] = b[f]);
                return e && t.extend(!0, a, e), a
            }

            function q() {
                return setTimeout(function() {
                    Ia = p
                }), Ia = t.now()
            }

            function u(a, b, f) {
                for (var e, c = (Oa[b] || []).concat(Oa["*"]), h = 0, m = c.length; m > h; h++)
                    if (e = c[h].call(f, b, a)) return e
            }

            function z(a, b, f) {
                var e, c = 0,
                    h = Ya.length,
                    m = t.Deferred().always(function() {
                        delete d.elem
                    }),
                    d = function() {
                        if (e) return !1;
                        for (var b = Ia || q(), b = Math.max(0, w.startTime + w.duration - b), f = 1 - (b / w.duration || 0), c = 0, h = w.tweens.length; h >
                            c; c++) w.tweens[c].run(f);
                        return m.notifyWith(a, [w, f, b]), 1 > f && h ? b : (m.resolveWith(a, [w]), !1)
                    },
                    w = m.promise({
                        elem: a,
                        props: t.extend({}, b),
                        opts: t.extend(!0, {
                            specialEasing: {}
                        }, f),
                        originalProperties: b,
                        originalOptions: f,
                        startTime: Ia || q(),
                        duration: f.duration,
                        tweens: [],
                        createTween: function(b, f) {
                            var e = t.Tween(a, w.opts, b, f, w.opts.specialEasing[b] || w.opts.easing);
                            return w.tweens.push(e), e
                        },
                        stop: function(b) {
                            var f = 0,
                                c = b ? w.tweens.length : 0;
                            if (e) return this;
                            for (e = !0; c > f; f++) w.tweens[f].run(1);
                            return b ? m.resolveWith(a, [w, b]) : m.rejectWith(a, [w, b]), this
                        }
                    });
                f = w.props;
                for (y(f, w.opts.specialEasing); h > c; c++)
                    if (b = Ya[c].call(w, a, f, w.opts)) return b;
                return t.map(f, u, w), t.isFunction(w.opts.start) && w.opts.start.call(a, w), t.fx.timer(t.extend(d, {
                    elem: a,
                    anim: w,
                    queue: w.opts.queue
                })), w.progress(w.opts.progress).done(w.opts.done, w.opts.complete).fail(w.opts.fail).always(w.opts.always)
            }

            function y(a, b) {
                var f, e, c, h, m;
                for (f in a)
                    if (e = t.camelCase(f), c = b[e], h = a[f], t.isArray(h) && (c = h[1], h = a[f] = h[0]), f !== e && (a[e] = h, delete a[f]), m = t.cssHooks[e],
                        m && "expand" in m)
                        for (f in h = m.expand(h), delete a[e], h) f in a || (a[f] = h[f], b[f] = c);
                    else b[e] = c
            }

            function K(a, b, f, e, c) {
                return new K.prototype.init(a, b, f, e, c)
            }

            function C(a, b) {
                var f, e = {
                        height: a
                    },
                    c = 0;
                for (b = b ? 1 : 0; 4 > c; c += 2 - b) f = ya[c], e["margin" + f] = e["padding" + f] = a;
                return b && (e.opacity = e.width = a), e
            }

            function T(a) {
                return t.isWindow(a) ? a : 9 === a.nodeType && a.defaultView
            }
            var A, x, H = typeof p,
                E = a.location,
                N = a.document,
                L = N.documentElement,
                J = a.jQuery,
                G = a.$,
                Q = {},
                ka = [],
                R = ka.concat,
                Ea = ka.push,
                ua = ka.slice,
                xa = ka.indexOf,
                Aa = Q.toString,
                cb = Q.hasOwnProperty,
                Y = "2.0.3".trim,
                t = function(a, b) {
                    return new t.fn.init(a, b, A)
                },
                ea = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,
                ia = /\S+/g,
                db = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,
                Fa = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,
                yb = /^-ms-/,
                Ga = /-([\da-z])/gi,
                zb = function(a, b) {
                    return b.toUpperCase()
                },
                na = function() {
                    N.removeEventListener("DOMContentLoaded", na, !1);
                    a.removeEventListener("load", na, !1);
                    t.ready()
                };
            t.fn = t.prototype = {
                jquery: "2.0.3",
                constructor: t,
                init: function(a, b, f) {
                    var e, c;
                    if (!a) return this;
                    if ("string" == typeof a) {
                        if (e =
                            "<" === a.charAt(0) && ">" === a.charAt(a.length - 1) && 3 <= a.length ? [null, a, null] : db.exec(a), !e || !e[1] && b) return !b || b.jquery ? (b || f).find(a) : this.constructor(b).find(a);
                        if (e[1]) {
                            if (b = b instanceof t ? b[0] : b, t.merge(this, t.parseHTML(e[1], b && b.nodeType ? b.ownerDocument || b : N, !0)), Fa.test(e[1]) && t.isPlainObject(b))
                                for (e in b) t.isFunction(this[e]) ? this[e](b[e]) : this.attr(e, b[e]);
                            return this
                        }
                        return c = N.getElementById(e[2]), c && c.parentNode && (this.length = 1, this[0] = c), this.context = N, this.selector = a, this
                    }
                    return a.nodeType ?
                        (this.context = this[0] = a, this.length = 1, this) : t.isFunction(a) ? f.ready(a) : (a.selector !== p && (this.selector = a.selector, this.context = a.context), t.makeArray(a, this))
                },
                selector: "",
                length: 0,
                toArray: function() {
                    return ua.call(this)
                },
                get: function(a) {
                    return null == a ? this.toArray() : 0 > a ? this[this.length + a] : this[a]
                },
                pushStack: function(a) {
                    a = t.merge(this.constructor(), a);
                    return a.prevObject = this, a.context = this.context, a
                },
                each: function(a, b) {
                    return t.each(this, a, b)
                },
                ready: function(a) {
                    return t.ready.promise().done(a),
                        this
                },
                slice: function() {
                    return this.pushStack(ua.apply(this, arguments))
                },
                first: function() {
                    return this.eq(0)
                },
                last: function() {
                    return this.eq(-1)
                },
                eq: function(a) {
                    var b = this.length;
                    a = +a + (0 > a ? b : 0);
                    return this.pushStack(0 <= a && b > a ? [this[a]] : [])
                },
                map: function(a) {
                    return this.pushStack(t.map(this, function(b, f) {
                        return a.call(b, f, b)
                    }))
                },
                end: function() {
                    return this.prevObject || this.constructor(null)
                },
                push: Ea,
                sort: [].sort,
                splice: [].splice
            };
            t.fn.init.prototype = t.fn;
            t.extend = t.fn.extend = function() {
                var a, b, f, e, c, h,
                    m = arguments[0] || {},
                    d = 1,
                    w = arguments.length,
                    l = !1;
                "boolean" == typeof m && (l = m, m = arguments[1] || {}, d = 2);
                "object" == typeof m || t.isFunction(m) || (m = {});
                for (w === d && (m = this, --d); w > d; d++)
                    if (null != (a = arguments[d]))
                        for (b in a) f = m[b], e = a[b], m !== e && (l && e && (t.isPlainObject(e) || (c = t.isArray(e))) ? (c ? (c = !1, h = f && t.isArray(f) ? f : []) : h = f && t.isPlainObject(f) ? f : {}, m[b] = t.extend(l, h, e)) : e !== p && (m[b] = e));
                return m
            };
            t.extend({
                expando: "jQuery" + ("2.0.3" + Math.random()).replace(/\D/g, ""),
                noConflict: function(b) {
                    return a.$ === t && (a.$ =
                        G), b && a.jQuery === t && (a.jQuery = J), t
                },
                isReady: !1,
                readyWait: 1,
                holdReady: function(a) {
                    a ? t.readyWait++ : t.ready(!0)
                },
                ready: function(a) {
                    (!0 === a ? --t.readyWait : t.isReady) || (t.isReady = !0, !0 !== a && 0 < --t.readyWait || (x.resolveWith(N, [t]), t.fn.trigger && t(N).trigger("ready").off("ready")))
                },
                isFunction: function(a) {
                    return "function" === t.type(a)
                },
                isArray: Array.isArray,
                isWindow: function(a) {
                    return null != a && a === a.window
                },
                isNumeric: function(a) {
                    return !isNaN(parseFloat(a)) && isFinite(a)
                },
                type: function(a) {
                    return null == a ? a + "" :
                        "object" == typeof a || "function" == typeof a ? Q[Aa.call(a)] || "object" : typeof a
                },
                isPlainObject: function(a) {
                    if ("object" !== t.type(a) || a.nodeType || t.isWindow(a)) return !1;
                    try {
                        if (a.constructor && !cb.call(a.constructor.prototype, "isPrototypeOf")) return !1
                    } catch (b) {
                        return !1
                    }
                    return !0
                },
                isEmptyObject: function(a) {
                    for (var b in a) return !1;
                    return !0
                },
                error: function(a) {
                    throw Error(a);
                },
                parseHTML: function(a, b, f) {
                    if (!a || "string" != typeof a) return null;
                    "boolean" == typeof b && (f = b, b = !1);
                    b = b || N;
                    var e = Fa.exec(a);
                    f = !f && [];
                    return e ? [b.createElement(e[1])] : (e = t.buildFragment([a], b, f), f && t(f).remove(), t.merge([], e.childNodes))
                },
                parseJSON: JSON.parse,
                parseXML: function(a) {
                    var b, f;
                    if (!a || "string" != typeof a) return null;
                    try {
                        f = new DOMParser, b = f.parseFromString(a, "text/xml")
                    } catch (e) {
                        b = p
                    }
                    return (!b || b.getElementsByTagName("parsererror").length) && t.error("Invalid XML: " + a), b
                },
                noop: function() {},
                globalEval: function(a) {
                    var b, f = eval;
                    (a = t.trim(a)) && (1 === a.indexOf("use strict") ? (b = N.createElement("script"), b.text = a, N.head.appendChild(b).parentNode.removeChild(b)) :
                        f(a))
                },
                camelCase: function(a) {
                    return a.replace(yb, "ms-").replace(Ga, zb)
                },
                nodeName: function(a, b) {
                    return a.nodeName && a.nodeName.toLowerCase() === b.toLowerCase()
                },
                each: function(a, b, f) {
                    var e, c = 0,
                        h = a.length,
                        m = k(a);
                    if (f)
                        if (m)
                            for (; h > c && (e = b.apply(a[c], f), !1 !== e); c++);
                        else
                            for (c in a) {
                                if (e = b.apply(a[c], f), !1 === e) break
                            } else if (m)
                                for (; h > c && (e = b.call(a[c], c, a[c]), !1 !== e); c++);
                            else
                                for (c in a)
                                    if (e = b.call(a[c], c, a[c]), !1 === e) break;
                    return a
                },
                trim: function(a) {
                    return null == a ? "" : Y.call(a)
                },
                makeArray: function(a, b) {
                    var f =
                        b || [];
                    return null != a && (k(Object(a)) ? t.merge(f, "string" == typeof a ? [a] : a) : Ea.call(f, a)), f
                },
                inArray: function(a, b, f) {
                    return null == b ? -1 : xa.call(b, a, f)
                },
                merge: function(a, b) {
                    var f = b.length,
                        e = a.length,
                        c = 0;
                    if ("number" == typeof f)
                        for (; f > c; c++) a[e++] = b[c];
                    else
                        for (; b[c] !== p;) a[e++] = b[c++];
                    return a.length = e, a
                },
                grep: function(a, b, f) {
                    var e, c = [],
                        h = 0,
                        m = a.length;
                    for (f = !!f; m > h; h++) e = !!b(a[h], h), f !== e && c.push(a[h]);
                    return c
                },
                map: function(a, b, f) {
                    var e, c = 0,
                        h = a.length,
                        m = [];
                    if (k(a))
                        for (; h > c; c++) e = b(a[c], c, f), null != e && (m[m.length] =
                            e);
                    else
                        for (c in a) e = b(a[c], c, f), null != e && (m[m.length] = e);
                    return R.apply([], m)
                },
                guid: 1,
                proxy: function(a, b) {
                    var f, e, c;
                    return "string" == typeof b && (f = a[b], b = a, a = f), t.isFunction(a) ? (e = ua.call(arguments, 2), c = function() {
                        return a.apply(b || this, e.concat(ua.call(arguments)))
                    }, c.guid = a.guid = a.guid || t.guid++, c) : p
                },
                access: function(a, b, f, e, c, h, m) {
                    var d = 0,
                        w = a.length,
                        l = null == f;
                    if ("object" === t.type(f))
                        for (d in c = !0, f) t.access(a, b, d, f[d], !0, h, m);
                    else if (e !== p && (c = !0, t.isFunction(e) || (m = !0), l && (m ? (b.call(a, e), b = null) :
                            (l = b, b = function(a, b, f) {
                                return l.call(t(a), f)
                            })), b))
                        for (; w > d; d++) b(a[d], f, m ? e : e.call(a[d], d, b(a[d], f)));
                    return c ? a : l ? b.call(a) : w ? b(a[0], f) : h
                },
                now: Date.now,
                swap: function(a, b, f, e) {
                    var c, h = {};
                    for (c in b) h[c] = a.style[c], a.style[c] = b[c];
                    f = f.apply(a, e || []);
                    for (c in b) a.style[c] = h[c];
                    return f
                }
            });
            t.ready.promise = function(b) {
                return x || (x = t.Deferred(), "complete" === N.readyState ? setTimeout(t.ready) : (N.addEventListener("DOMContentLoaded", na, !1), a.addEventListener("load", na, !1))), x.promise(b)
            };
            t.each("Boolean Number String Function Array Date RegExp Object Error".split(" "),
                function(a, b) {
                    Q["[object " + b + "]"] = b.toLowerCase()
                });
            A = t(N);
            (function(a, b) {
                function f(a, b, e, c) {
                    var h, m, d, w, l;
                    if ((b ? b.ownerDocument || b : M) !== J && ca(b), b = b || J, e = e || [], !a || "string" != typeof a) return e;
                    if (1 !== (w = b.nodeType) && 9 !== w) return [];
                    if (L && !c) {
                        if (h = ia.exec(a))
                            if (d = h[1])
                                if (9 === w) {
                                    if (m = b.getElementById(d), !m || !m.parentNode) return e;
                                    if (m.id === d) return e.push(m), e
                                } else {
                                    if (b.ownerDocument && (m = b.ownerDocument.getElementById(d)) && p(b, m) && m.id === d) return e.push(m), e
                                } else {
                            if (h[2]) return Y.apply(e, b.getElementsByTagName(a)),
                                e;
                            if ((d = h[3]) && K.getElementsByClassName && b.getElementsByClassName) return Y.apply(e, b.getElementsByClassName(d)), e
                        }
                        if (K.qsa && (!da || !da.test(a))) {
                            if (m = h = Q, d = b, l = 9 === w && a, 1 === w && "object" !== b.nodeName.toLowerCase()) {
                                w = q(a);
                                (h = b.getAttribute("id")) ? m = h.replace(ta, "\\$&"): b.setAttribute("id", m);
                                m = "[id='" + m + "'] ";
                                for (d = w.length; d--;) w[d] = m + r(w[d]);
                                d = Ua.test(a) && b.parentNode || b;
                                l = w.join(",")
                            }
                            if (l) try {
                                return Y.apply(e, d.querySelectorAll(l)), e
                            } catch (n) {} finally {
                                h || b.removeAttribute("id")
                            }
                        }
                    }
                    var g;
                    a: {
                        a = a.replace(xa,
                            "$1");
                        var ga, u;m = q(a);
                        if (!c && 1 === m.length) {
                            if (g = m[0] = m[0].slice(0), 2 < g.length && "ID" === (ga = g[0]).type && K.getById && 9 === b.nodeType && L && A.relative[g[1].type]) {
                                if (b = (A.find.ID(ga.matches[0].replace(X, ea), b) || [])[0], !b) {
                                    g = e;
                                    break a
                                }
                                a = a.slice(g.shift().value.length)
                            }
                            for (w = ba.needsContext.test(a) ? 0 : g.length; w-- && (ga = g[w], !A.relative[h = ga.type]);)
                                if ((u = A.find[h]) && (c = u(ga.matches[0].replace(X, ea), Ua.test(g[0].type) && b.parentNode || b))) {
                                    if (g.splice(w, 1), a = c.length && r(g), !a) {
                                        g = (Y.apply(e, c), e);
                                        break a
                                    }
                                    break
                                }
                        }
                        g =
                        (v(a, m)(c, b, !L, e, Ua.test(a)), e)
                    }
                    return g
                }

                function e() {
                    function a(f, e) {
                        return b.push(f += " ") > A.cacheLength && delete a[b.shift()], a[f] = e
                    }
                    var b = [];
                    return a
                }

                function c(a) {
                    return a[Q] = !0, a
                }

                function h(a) {
                    var b = J.createElement("div");
                    try {
                        return !!a(b)
                    } catch (f) {
                        return !1
                    } finally {
                        b.parentNode && b.parentNode.removeChild(b)
                    }
                }

                function m(a, b) {
                    for (var f = a.split("|"), e = a.length; e--;) A.attrHandle[f[e]] = b
                }

                function d(a, b) {
                    var f = b && a,
                        e = f && 1 === a.nodeType && 1 === b.nodeType && (~b.sourceIndex || -2147483648) - (~a.sourceIndex || -2147483648);
                    if (e) return e;
                    if (f)
                        for (; f = f.nextSibling;)
                            if (f === b) return -1;
                    return a ? 1 : -1
                }

                function w(a) {
                    return function(b) {
                        return "input" === b.nodeName.toLowerCase() && b.type === a
                    }
                }

                function l(a) {
                    return function(b) {
                        var f = b.nodeName.toLowerCase();
                        return ("input" === f || "button" === f) && b.type === a
                    }
                }

                function n(a) {
                    return c(function(b) {
                        return b = +b, c(function(f, e) {
                            for (var c, h = a([], f.length, b), m = h.length; m--;) f[c = h[m]] && (f[c] = !(e[c] = f[c]))
                        })
                    })
                }

                function g() {}

                function q(a, b) {
                    var e, c, h, m, d, w, l;
                    if (d = ka[a + " "]) return b ? 0 : d.slice(0);
                    d =
                        a;
                    w = [];
                    for (l = A.preFilter; d;) {
                        e && !(c = ya.exec(d)) || (c && (d = d.slice(c[0].length) || d), w.push(h = []));
                        e = !1;
                        (c = fb.exec(d)) && (e = c.shift(), h.push({
                            value: e,
                            type: c[0].replace(xa, " ")
                        }), d = d.slice(e.length));
                        for (m in A.filter) !(c = ba[m].exec(d)) || l[m] && !(c = l[m](c)) || (e = c.shift(), h.push({
                            value: e,
                            type: m,
                            matches: c
                        }), d = d.slice(e.length));
                        if (!e) break
                    }
                    return b ? d.length : d ? f.error(a) : ka(a, w).slice(0)
                }

                function r(a) {
                    for (var b = 0, f = a.length, e = ""; f > b; b++) e += a[b].value;
                    return e
                }

                function u(a, b, f) {
                    var e = b.dir,
                        c = f && "parentNode" ===
                        e,
                        h = D++;
                    return b.first ? function(b, f, h) {
                        for (; b = b[e];)
                            if (1 === b.nodeType || c) return a(b, f, h)
                    } : function(b, f, m) {
                        var d, w, l, n = I + " " + h;
                        if (m)
                            for (; b = b[e];) {
                                if ((1 === b.nodeType || c) && a(b, f, m)) return !0
                            } else
                                for (; b = b[e];)
                                    if (1 === b.nodeType || c)
                                        if (l = b[Q] || (b[Q] = {}), (w = l[e]) && w[0] === n) {
                                            if (!0 === (d = w[1]) || d === H) return !0 === d
                                        } else if (w = l[e] = [n], w[1] = a(b, f, m) || H, !0 === w[1]) return !0
                    }
                }

                function B(a) {
                    return 1 < a.length ? function(b, f, e) {
                        for (var c = a.length; c--;)
                            if (!a[c](b, f, e)) return !1;
                        return !0
                    } : a[0]
                }

                function y(a, b, f, e, c) {
                    for (var h,
                            m = [], d = 0, w = a.length, l = null != b; w > d; d++)(h = a[d]) && (!f || f(h, e, c)) && (m.push(h), l && b.push(d));
                    return m
                }

                function x(a, b, e, h, m, d) {
                    return h && !h[Q] && (h = x(h)), m && !m[Q] && (m = x(m, d)), c(function(c, d, w, l) {
                        var n, g, ga = [],
                            q = [],
                            r = d.length,
                            u;
                        if (!(u = c)) {
                            u = b || "*";
                            for (var B = w.nodeType ? [w] : w, x = [], t = 0, ab = B.length; ab > t; t++) f(u, B[t], x);
                            u = x
                        }
                        u = !a || !c && b ? u : y(u, ga, a, w, l);
                        B = e ? m || (c ? a : r || h) ? [] : d : u;
                        if (e && e(u, B, w, l), h)
                            for (n = y(B, q), h(n, [], w, l), w = n.length; w--;)(g = n[w]) && (B[q[w]] = !(u[q[w]] = g));
                        if (c) {
                            if (m || a) {
                                if (m) {
                                    n = [];
                                    for (w = B.length; w--;)(g =
                                        B[w]) && n.push(u[w] = g);
                                    m(null, B = [], n, l)
                                }
                                for (w = B.length; w--;)(g = B[w]) && -1 < (n = m ? ha.call(c, g) : ga[w]) && (c[n] = !(d[n] = g))
                            }
                        } else B = y(B === d ? B.splice(r, B.length) : B), m ? m(null, d, B, l) : Y.apply(d, B)
                    })
                }

                function z(a) {
                    var b, f, e, c = a.length,
                        h = A.relative[a[0].type];
                    f = h || A.relative[" "];
                    for (var m = h ? 1 : 0, d = u(function(a) {
                            return a === b
                        }, f, !0), w = u(function(a) {
                            return -1 < ha.call(b, a)
                        }, f, !0), l = [function(a, f, e) {
                            return !h && (e || f !== G) || ((b = f).nodeType ? d(a, f, e) : w(a, f, e))
                        }]; c > m; m++)
                        if (f = A.relative[a[m].type]) l = [u(B(l), f)];
                        else {
                            if (f = A.filter[a[m].type].apply(null,
                                    a[m].matches), f[Q]) {
                                for (e = ++m; c > e && !A.relative[a[e].type]; e++);
                                return x(1 < m && B(l), 1 < m && r(a.slice(0, m - 1).concat({
                                    value: " " === a[m - 2].type ? "*" : ""
                                })).replace(xa, "$1"), f, e > m && z(a.slice(m, e)), c > e && z(a = a.slice(e)), c > e && r(a))
                            }
                            l.push(f)
                        }
                    return B(l)
                }

                function C(a, b) {
                    var e = 0,
                        h = 0 < b.length,
                        m = 0 < a.length,
                        d = function(c, d, w, l, n) {
                            var g, ga, q = [],
                                r = 0,
                                u = "0",
                                B = c && [],
                                x = null != n,
                                t = G,
                                ab = c || m && A.find.TAG("*", n && d.parentNode || d),
                                z = I += null == t ? 1 : Math.random() || .1;
                            for (x && (G = d !== J && d, H = e); null != (n = ab[u]); u++) {
                                if (m && n) {
                                    for (g = 0; ga = a[g++];)
                                        if (ga(n,
                                                d, w)) {
                                            l.push(n);
                                            break
                                        }
                                    x && (I = z, H = ++e)
                                }
                                h && ((n = !ga && n) && r--, c && B.push(n))
                            }
                            if (r += u, h && u !== r) {
                                for (g = 0; ga = b[g++];) ga(B, q, d, w);
                                if (c) {
                                    if (0 < r)
                                        for (; u--;) B[u] || q[u] || (q[u] = Na.call(l));
                                    q = y(q)
                                }
                                Y.apply(l, q);
                                x && !c && 0 < q.length && 1 < r + b.length && f.uniqueSort(l)
                            }
                            return x && (I = z, G = t), B
                        };
                    return h ? c(d) : d
                }
                var E, K, H, A, T, k, v, G, F, ca, J, N, L, da, qa, R, p, Q = "sizzle" + -new Date,
                    M = a.document,
                    I = 0,
                    D = 0,
                    Ra = e(),
                    ka = e(),
                    Za = e(),
                    Z = !1,
                    Ea = function(a, b) {
                        return a === b ? (Z = !0, 0) : 0
                    },
                    S = typeof b,
                    U = {}.hasOwnProperty,
                    va = [],
                    Na = va.pop,
                    Xa = va.push,
                    Y = va.push,
                    Aa =
                    va.slice,
                    ha = va.indexOf || function(a) {
                        for (var b = 0, f = this.length; f > b; b++)
                            if (this[b] === a) return b;
                        return -1
                    },
                    O = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+".replace("w", "w#"),
                    Sa = "\\[[\\x20\\t\\r\\n\\f]*((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)[\\x20\\t\\r\\n\\f]*(?:([*^$|!~]?=)[\\x20\\t\\r\\n\\f]*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + O + ")|)|)[\\x20\\t\\r\\n\\f]*\\]",
                    ua = ":((?:\\\\.|[\\w-]|[^\\x00-\\xa0])+)(?:\\(((['\"])((?:\\\\.|[^\\\\])*?)\\3|((?:\\\\.|[^\\\\()[\\]]|" + Sa.replace(3, 8) + ")*)|.*)\\)|)",
                    xa = RegExp("^[\\x20\\t\\r\\n\\f]+|((?:^|[^\\\\])(?:\\\\.)*)[\\x20\\t\\r\\n\\f]+$",
                        "g"),
                    ya = /^[\x20\t\r\n\f]*,[\x20\t\r\n\f]*/,
                    fb = /^[\x20\t\r\n\f]*([>+~]|[\x20\t\r\n\f])[\x20\t\r\n\f]*/,
                    Ua = /[\x20\t\r\n\f]*[+~]/,
                    gb = RegExp("=[\\x20\\t\\r\\n\\f]*([^\\]'\"]*)[\\x20\\t\\r\\n\\f]*\\]", "g"),
                    la = RegExp(ua),
                    hb = RegExp("^" + O + "$"),
                    ba = {
                        ID: /^#((?:\\.|[\w-]|[^\x00-\xa0])+)/,
                        CLASS: /^\.((?:\\.|[\w-]|[^\x00-\xa0])+)/,
                        TAG: RegExp("^(" + "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+".replace("w", "w*") + ")"),
                        ATTR: RegExp("^" + Sa),
                        PSEUDO: RegExp("^" + ua),
                        CHILD: /^:(only|first|last|nth|nth-last)-(child|of-type)(?:\([\x20\t\r\n\f]*(even|odd|(([+-]|)(\d*)n|)[\x20\t\r\n\f]*(?:([+-]|)[\x20\t\r\n\f]*(\d+)|))[\x20\t\r\n\f]*\)|)/i,
                        bool: /^(?:checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)$/i,
                        needsContext: /^[\x20\t\r\n\f]*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\([\x20\t\r\n\f]*((?:-\d)?\d*)[\x20\t\r\n\f]*\)|)(?=[^-]|$)/i
                    },
                    Ta = /^[^{]+\{\s*\[native \w/,
                    ia = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
                    P = /^(?:input|select|textarea|button)$/i,
                    ra = /^h\d$/i,
                    ta = /'|\\/g,
                    X = RegExp("\\\\([\\da-f]{1,6}[\\x20\\t\\r\\n\\f]?|([\\x20\\t\\r\\n\\f])|.)", "ig"),
                    ea = function(a, b, f) {
                        a =
                            "0x" + b - 65536;
                        return a !== a || f ? b : 0 > a ? String.fromCharCode(a + 65536) : String.fromCharCode(55296 | a >> 10, 56320 | 1023 & a)
                    };
                try {
                    Y.apply(va = Aa.call(M.childNodes), M.childNodes), va[M.childNodes.length].nodeType
                } catch (Jb) {
                    Y = {
                        apply: va.length ? function(a, b) {
                            Xa.apply(a, Aa.call(b))
                        } : function(a, b) {
                            for (var f = a.length, e = 0; a[f++] = b[e++];);
                            a.length = f - 1
                        }
                    }
                }
                k = f.isXML = function(a) {
                    return (a = a && (a.ownerDocument || a).documentElement) ? "HTML" !== a.nodeName : !1
                };
                K = f.support = {};
                ca = f.setDocument = function(a) {
                    var f = a ? a.ownerDocument || a : M;
                    a =
                        f.defaultView;
                    return f !== J && 9 === f.nodeType && f.documentElement ? (J = f, N = f.documentElement, L = !k(f), a && a.attachEvent && a !== a.top && a.attachEvent("onbeforeunload", function() {
                        ca()
                    }), K.attributes = h(function(a) {
                        return a.className = "i", !a.getAttribute("className")
                    }), K.getElementsByTagName = h(function(a) {
                        return a.appendChild(f.createComment("")), !a.getElementsByTagName("*").length
                    }), K.getElementsByClassName = h(function(a) {
                        return a.innerHTML = "<div class='a'></div><div class='a i'></div>", a.firstChild.className = "i",
                            2 === a.getElementsByClassName("i").length
                    }), K.getById = h(function(a) {
                        return N.appendChild(a).id = Q, !f.getElementsByName || !f.getElementsByName(Q).length
                    }), K.getById ? (A.find.ID = function(a, b) {
                        if (typeof b.getElementById !== S && L) {
                            var f = b.getElementById(a);
                            return f && f.parentNode ? [f] : []
                        }
                    }, A.filter.ID = function(a) {
                        var b = a.replace(X, ea);
                        return function(a) {
                            return a.getAttribute("id") === b
                        }
                    }) : (delete A.find.ID, A.filter.ID = function(a) {
                        var b = a.replace(X, ea);
                        return function(a) {
                            return (a = typeof a.getAttributeNode !== S &&
                                a.getAttributeNode("id")) && a.value === b
                        }
                    }), A.find.TAG = K.getElementsByTagName ? function(a, f) {
                        return typeof f.getElementsByTagName !== S ? f.getElementsByTagName(a) : b
                    } : function(a, b) {
                        var f, e = [],
                            c = 0,
                            h = b.getElementsByTagName(a);
                        if ("*" === a) {
                            for (; f = h[c++];) 1 === f.nodeType && e.push(f);
                            return e
                        }
                        return h
                    }, A.find.CLASS = K.getElementsByClassName && function(a, f) {
                        return typeof f.getElementsByClassName !== S && L ? f.getElementsByClassName(a) : b
                    }, qa = [], da = [], (K.qsa = Ta.test(f.querySelectorAll)) && (h(function(a) {
                        a.innerHTML = "<select><option selected=''></option></select>";
                        a.querySelectorAll("[selected]").length || da.push("\\[[\\x20\\t\\r\\n\\f]*(?:value|checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped)");
                        a.querySelectorAll(":checked").length || da.push(":checked")
                    }), h(function(a) {
                        var b = f.createElement("input");
                        b.setAttribute("type", "hidden");
                        a.appendChild(b).setAttribute("t", "");
                        a.querySelectorAll("[t^='']").length && da.push("[*^$]=[\\x20\\t\\r\\n\\f]*(?:''|\"\")");
                        a.querySelectorAll(":enabled").length ||
                            da.push(":enabled", ":disabled");
                        a.querySelectorAll("*,:x");
                        da.push(",.*:")
                    })), (K.matchesSelector = Ta.test(R = N.webkitMatchesSelector || N.mozMatchesSelector || N.oMatchesSelector || N.msMatchesSelector)) && h(function(a) {
                        K.disconnectedMatch = R.call(a, "div");
                        R.call(a, "[s!='']:x");
                        qa.push("!=", ua)
                    }), da = da.length && RegExp(da.join("|")), qa = qa.length && RegExp(qa.join("|")), p = Ta.test(N.contains) || N.compareDocumentPosition ? function(a, b) {
                        var f = 9 === a.nodeType ? a.documentElement : a,
                            e = b && b.parentNode;
                        return a === e || !(!e || 1 !==
                            e.nodeType || !(f.contains ? f.contains(e) : a.compareDocumentPosition && 16 & a.compareDocumentPosition(e)))
                    } : function(a, b) {
                        if (b)
                            for (; b = b.parentNode;)
                                if (b === a) return !0;
                        return !1
                    }, Ea = N.compareDocumentPosition ? function(a, b) {
                        if (a === b) return Z = !0, 0;
                        var e = b.compareDocumentPosition && a.compareDocumentPosition && a.compareDocumentPosition(b);
                        return e ? 1 & e || !K.sortDetached && b.compareDocumentPosition(a) === e ? a === f || p(M, a) ? -1 : b === f || p(M, b) ? 1 : F ? ha.call(F, a) - ha.call(F, b) : 0 : 4 & e ? -1 : 1 : a.compareDocumentPosition ? -1 : 1
                    } : function(a,
                        b) {
                        var e, c = 0;
                        e = a.parentNode;
                        var h = b.parentNode,
                            m = [a],
                            w = [b];
                        if (a === b) return Z = !0, 0;
                        if (!e || !h) return a === f ? -1 : b === f ? 1 : e ? -1 : h ? 1 : F ? ha.call(F, a) - ha.call(F, b) : 0;
                        if (e === h) return d(a, b);
                        for (e = a; e = e.parentNode;) m.unshift(e);
                        for (e = b; e = e.parentNode;) w.unshift(e);
                        for (; m[c] === w[c];) c++;
                        return c ? d(m[c], w[c]) : m[c] === M ? -1 : w[c] === M ? 1 : 0
                    }, f) : J
                };
                f.matches = function(a, b) {
                    return f(a, null, null, b)
                };
                f.matchesSelector = function(a, b) {
                    if ((a.ownerDocument || a) !== J && ca(a), b = b.replace(gb, "='$1']"), !(!K.matchesSelector || !L || qa && qa.test(b) ||
                            da && da.test(b))) try {
                        var e = R.call(a, b);
                        if (e || K.disconnectedMatch || a.document && 11 !== a.document.nodeType) return e
                    } catch (c) {}
                    return 0 < f(b, J, null, [a]).length
                };
                f.contains = function(a, b) {
                    return (a.ownerDocument || a) !== J && ca(a), p(a, b)
                };
                f.attr = function(a, f) {
                    (a.ownerDocument || a) !== J && ca(a);
                    var e = A.attrHandle[f.toLowerCase()],
                        e = e && U.call(A.attrHandle, f.toLowerCase()) ? e(a, f, !L) : b;
                    return e === b ? K.attributes || !L ? a.getAttribute(f) : (e = a.getAttributeNode(f)) && e.specified ? e.value : null : e
                };
                f.error = function(a) {
                    throw Error("Syntax error, unrecognized expression: " +
                        a);
                };
                f.uniqueSort = function(a) {
                    var b, f = [],
                        e = 0,
                        c = 0;
                    if (Z = !K.detectDuplicates, F = !K.sortStable && a.slice(0), a.sort(Ea), Z) {
                        for (; b = a[c++];) b === a[c] && (e = f.push(c));
                        for (; e--;) a.splice(f[e], 1)
                    }
                    return a
                };
                T = f.getText = function(a) {
                    var b, f = "",
                        e = 0;
                    if (b = a.nodeType)
                        if (1 === b || 9 === b || 11 === b) {
                            if ("string" == typeof a.textContent) return a.textContent;
                            for (a = a.firstChild; a; a = a.nextSibling) f += T(a)
                        } else {
                            if (3 === b || 4 === b) return a.nodeValue
                        } else
                        for (; b = a[e]; e++) f += T(b);
                    return f
                };
                A = f.selectors = {
                    cacheLength: 50,
                    createPseudo: c,
                    match: ba,
                    attrHandle: {},
                    find: {},
                    relative: {
                        ">": {
                            dir: "parentNode",
                            first: !0
                        },
                        " ": {
                            dir: "parentNode"
                        },
                        "+": {
                            dir: "previousSibling",
                            first: !0
                        },
                        "~": {
                            dir: "previousSibling"
                        }
                    },
                    preFilter: {
                        ATTR: function(a) {
                            return a[1] = a[1].replace(X, ea), a[3] = (a[4] || a[5] || "").replace(X, ea), "~=" === a[2] && (a[3] = " " + a[3] + " "), a.slice(0, 4)
                        },
                        CHILD: function(a) {
                            return a[1] = a[1].toLowerCase(), "nth" === a[1].slice(0, 3) ? (a[3] || f.error(a[0]), a[4] = +(a[4] ? a[5] + (a[6] || 1) : 2 * ("even" === a[3] || "odd" === a[3])), a[5] = +(a[7] + a[8] || "odd" === a[3])) : a[3] && f.error(a[0]),
                                a
                        },
                        PSEUDO: function(a) {
                            var f, e = !a[5] && a[2];
                            return ba.CHILD.test(a[0]) ? null : (a[3] && a[4] !== b ? a[2] = a[4] : e && la.test(e) && (f = q(e, !0)) && (f = e.indexOf(")", e.length - f) - e.length) && (a[0] = a[0].slice(0, f), a[2] = e.slice(0, f)), a.slice(0, 3))
                        }
                    },
                    filter: {
                        TAG: function(a) {
                            var b = a.replace(X, ea).toLowerCase();
                            return "*" === a ? function() {
                                return !0
                            } : function(a) {
                                return a.nodeName && a.nodeName.toLowerCase() === b
                            }
                        },
                        CLASS: function(a) {
                            var b = Ra[a + " "];
                            return b || (b = RegExp("(^|[\\x20\\t\\r\\n\\f])" + a + "([\\x20\\t\\r\\n\\f]|$)")) && Ra(a, function(a) {
                                return b.test("string" ==
                                    typeof a.className && a.className || typeof a.getAttribute !== S && a.getAttribute("class") || "")
                            })
                        },
                        ATTR: function(a, b, e) {
                            return function(c) {
                                c = f.attr(c, a);
                                return null == c ? "!=" === b : b ? (c += "", "=" === b ? c === e : "!=" === b ? c !== e : "^=" === b ? e && 0 === c.indexOf(e) : "*=" === b ? e && -1 < c.indexOf(e) : "$=" === b ? e && c.slice(-e.length) === e : "~=" === b ? -1 < (" " + c + " ").indexOf(e) : "|=" === b ? c === e || c.slice(0, e.length + 1) === e + "-" : !1) : !0
                            }
                        },
                        CHILD: function(a, b, f, e, c) {
                            var h = "nth" !== a.slice(0, 3),
                                m = "last" !== a.slice(-4),
                                d = "of-type" === b;
                            return 1 === e && 0 === c ?
                                function(a) {
                                    return !!a.parentNode
                                } : function(b, f, w) {
                                    var l, n, g, ga, q;
                                    f = h !== m ? "nextSibling" : "previousSibling";
                                    var r = b.parentNode,
                                        u = d && b.nodeName.toLowerCase();
                                    w = !w && !d;
                                    if (r) {
                                        if (h) {
                                            for (; f;) {
                                                for (n = b; n = n[f];)
                                                    if (d ? n.nodeName.toLowerCase() === u : 1 === n.nodeType) return !1;
                                                q = f = "only" === a && !q && "nextSibling"
                                            }
                                            return !0
                                        }
                                        if (q = [m ? r.firstChild : r.lastChild], m && w)
                                            for (w = r[Q] || (r[Q] = {}), l = w[a] || [], ga = l[0] === I && l[1], g = l[0] === I && l[2], n = ga && r.childNodes[ga]; n = ++ga && n && n[f] || (g = ga = 0) || q.pop();) {
                                                if (1 === n.nodeType && ++g && n === b) {
                                                    w[a] = [I, ga, g];
                                                    break
                                                }
                                            } else if (w && (l = (b[Q] || (b[Q] = {}))[a]) && l[0] === I) g = l[1];
                                            else
                                                for (;
                                                    (n = ++ga && n && n[f] || (g = ga = 0) || q.pop()) && ((d ? n.nodeName.toLowerCase() !== u : 1 !== n.nodeType) || !++g || (w && ((n[Q] || (n[Q] = {}))[a] = [I, g]), n !== b)););
                                        return g -= c, g === e || 0 === g % e && 0 <= g / e
                                    }
                                }
                        },
                        PSEUDO: function(a, b) {
                            var e, h = A.pseudos[a] || A.setFilters[a.toLowerCase()] || f.error("unsupported pseudo: " + a);
                            return h[Q] ? h(b) : 1 < h.length ? (e = [a, a, "", b], A.setFilters.hasOwnProperty(a.toLowerCase()) ? c(function(a, f) {
                                for (var e, c = h(a, b), m = c.length; m--;) e =
                                    ha.call(a, c[m]), a[e] = !(f[e] = c[m])
                            }) : function(a) {
                                return h(a, 0, e)
                            }) : h
                        }
                    },
                    pseudos: {
                        not: c(function(a) {
                            var b = [],
                                f = [],
                                e = v(a.replace(xa, "$1"));
                            return e[Q] ? c(function(a, b, f, c) {
                                var h;
                                f = e(a, null, c, []);
                                for (c = a.length; c--;)(h = f[c]) && (a[c] = !(b[c] = h))
                            }) : function(a, c, h) {
                                return b[0] = a, e(b, null, h, f), !f.pop()
                            }
                        }),
                        has: c(function(a) {
                            return function(b) {
                                return 0 < f(a, b).length
                            }
                        }),
                        contains: c(function(a) {
                            return function(b) {
                                return -1 < (b.textContent || b.innerText || T(b)).indexOf(a)
                            }
                        }),
                        lang: c(function(a) {
                            return hb.test(a || "") || f.error("unsupported lang: " +
                                    a), a = a.replace(X, ea).toLowerCase(),
                                function(b) {
                                    var f;
                                    do
                                        if (f = L ? b.lang : b.getAttribute("xml:lang") || b.getAttribute("lang")) return f = f.toLowerCase(), f === a || 0 === f.indexOf(a + "-");
                                    while ((b = b.parentNode) && 1 === b.nodeType);
                                    return !1
                                }
                        }),
                        target: function(b) {
                            var f = a.location && a.location.hash;
                            return f && f.slice(1) === b.id
                        },
                        root: function(a) {
                            return a === N
                        },
                        focus: function(a) {
                            return a === J.activeElement && (!J.hasFocus || J.hasFocus()) && !!(a.type || a.href || ~a.tabIndex)
                        },
                        enabled: function(a) {
                            return !1 === a.disabled
                        },
                        disabled: function(a) {
                            return !0 ===
                                a.disabled
                        },
                        checked: function(a) {
                            var b = a.nodeName.toLowerCase();
                            return "input" === b && !!a.checked || "option" === b && !!a.selected
                        },
                        selected: function(a) {
                            return a.parentNode && a.parentNode.selectedIndex, !0 === a.selected
                        },
                        empty: function(a) {
                            for (a = a.firstChild; a; a = a.nextSibling)
                                if ("@" < a.nodeName || 3 === a.nodeType || 4 === a.nodeType) return !1;
                            return !0
                        },
                        parent: function(a) {
                            return !A.pseudos.empty(a)
                        },
                        header: function(a) {
                            return ra.test(a.nodeName)
                        },
                        input: function(a) {
                            return P.test(a.nodeName)
                        },
                        button: function(a) {
                            var b = a.nodeName.toLowerCase();
                            return "input" === b && "button" === a.type || "button" === b
                        },
                        text: function(a) {
                            var b;
                            return "input" === a.nodeName.toLowerCase() && "text" === a.type && (null == (b = a.getAttribute("type")) || b.toLowerCase() === a.type)
                        },
                        first: n(function() {
                            return [0]
                        }),
                        last: n(function(a, b) {
                            return [b - 1]
                        }),
                        eq: n(function(a, b, f) {
                            return [0 > f ? f + b : f]
                        }),
                        even: n(function(a, b) {
                            for (var f = 0; b > f; f += 2) a.push(f);
                            return a
                        }),
                        odd: n(function(a, b) {
                            for (var f = 1; b > f; f += 2) a.push(f);
                            return a
                        }),
                        lt: n(function(a, b, f) {
                            for (b = 0 > f ? f + b : f; 0 <= --b;) a.push(b);
                            return a
                        }),
                        gt: n(function(a,
                            b, f) {
                            for (f = 0 > f ? f + b : f; b > ++f;) a.push(f);
                            return a
                        })
                    }
                };
                A.pseudos.nth = A.pseudos.eq;
                for (E in {
                        radio: !0,
                        checkbox: !0,
                        file: !0,
                        password: !0,
                        image: !0
                    }) A.pseudos[E] = w(E);
                for (E in {
                        submit: !0,
                        reset: !0
                    }) A.pseudos[E] = l(E);
                g.prototype = A.filters = A.pseudos;
                A.setFilters = new g;
                v = f.compile = function(a, b) {
                    var f, e = [],
                        c = [],
                        h = Za[a + " "];
                    if (!h) {
                        b || (b = q(a));
                        for (f = b.length; f--;) h = z(b[f]), h[Q] ? e.push(h) : c.push(h);
                        h = Za(a, C(c, e))
                    }
                    return h
                };
                K.sortStable = Q.split("").sort(Ea).join("") === Q;
                K.detectDuplicates = Z;
                ca();
                K.sortDetached = h(function(a) {
                    return 1 &
                        a.compareDocumentPosition(J.createElement("div"))
                });
                h(function(a) {
                    return a.innerHTML = "<a href='#'></a>", "#" === a.firstChild.getAttribute("href")
                }) || m("type|href|height|width", function(a, f, e) {
                    return e ? b : a.getAttribute(f, "type" === f.toLowerCase() ? 1 : 2)
                });
                K.attributes && h(function(a) {
                    return a.innerHTML = "<input/>", a.firstChild.setAttribute("value", ""), "" === a.firstChild.getAttribute("value")
                }) || m("value", function(a, f, e) {
                    return e || "input" !== a.nodeName.toLowerCase() ? b : a.defaultValue
                });
                h(function(a) {
                    return null ==
                        a.getAttribute("disabled")
                }) || m("checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped", function(a, f, e) {
                    var c;
                    return e ? b : (c = a.getAttributeNode(f)) && c.specified ? c.value : !0 === a[f] ? f.toLowerCase() : null
                });
                t.find = f;
                t.expr = f.selectors;
                t.expr[":"] = t.expr.pseudos;
                t.unique = f.uniqueSort;
                t.text = f.getText;
                t.isXMLDoc = f.isXML;
                t.contains = f.contains
            })(a);
            var Da = {};
            t.Callbacks = function(a) {
                a = "string" == typeof a ? Da[a] || D(a) : t.extend({}, a);
                var b, f, e,
                    c, h, m, d = [],
                    w = !a.once && [],
                    l = function(g) {
                        b = a.memory && g;
                        f = !0;
                        m = c || 0;
                        c = 0;
                        h = d.length;
                        for (e = !0; d && h > m; m++)
                            if (!1 === d[m].apply(g[0], g[1]) && a.stopOnFalse) {
                                b = !1;
                                break
                            }
                        e = !1;
                        d && (w ? w.length && l(w.shift()) : b ? d = [] : n.disable())
                    },
                    n = {
                        add: function() {
                            if (d) {
                                var f = d.length;
                                (function Ab(b) {
                                    t.each(b, function(b, f) {
                                        var e = t.type(f);
                                        "function" === e ? a.unique && n.has(f) || d.push(f) : f && f.length && "string" !== e && Ab(f)
                                    })
                                })(arguments);
                                e ? h = d.length : b && (c = f, l(b))
                            }
                            return this
                        },
                        remove: function() {
                            return d && t.each(arguments, function(a, b) {
                                for (var f; - 1 <
                                    (f = t.inArray(b, d, f));) d.splice(f, 1), e && (h >= f && h--, m >= f && m--)
                            }), this
                        },
                        has: function(a) {
                            return a ? -1 < t.inArray(a, d) : !(!d || !d.length)
                        },
                        empty: function() {
                            return d = [], h = 0, this
                        },
                        disable: function() {
                            return d = w = b = p, this
                        },
                        disabled: function() {
                            return !d
                        },
                        lock: function() {
                            return w = p, b || n.disable(), this
                        },
                        locked: function() {
                            return !w
                        },
                        fireWith: function(a, b) {
                            return !d || f && !w || (b = b || [], b = [a, b.slice ? b.slice() : b], e ? w.push(b) : l(b)), this
                        },
                        fire: function() {
                            return n.fireWith(this, arguments), this
                        },
                        fired: function() {
                            return !!f
                        }
                    };
                return n
            };
            t.extend({
                Deferred: function(a) {
                    var b = [
                            ["resolve", "done", t.Callbacks("once memory"), "resolved"],
                            ["reject", "fail", t.Callbacks("once memory"), "rejected"],
                            ["notify", "progress", t.Callbacks("memory")]
                        ],
                        f = "pending",
                        e = {
                            state: function() {
                                return f
                            },
                            always: function() {
                                return c.done(arguments).fail(arguments), this
                            },
                            then: function() {
                                var a = arguments;
                                return t.Deferred(function(f) {
                                    t.each(b, function(b, h) {
                                        var m = h[0],
                                            d = t.isFunction(a[b]) && a[b];
                                        c[h[1]](function() {
                                            var a = d && d.apply(this, arguments);
                                            a && t.isFunction(a.promise) ?
                                                a.promise().done(f.resolve).fail(f.reject).progress(f.notify) : f[m + "With"](this === e ? f.promise() : this, d ? [a] : arguments)
                                        })
                                    });
                                    a = null
                                }).promise()
                            },
                            promise: function(a) {
                                return null != a ? t.extend(a, e) : e
                            }
                        },
                        c = {};
                    return e.pipe = e.then, t.each(b, function(a, h) {
                        var m = h[2],
                            d = h[3];
                        e[h[1]] = m.add;
                        d && m.add(function() {
                            f = d
                        }, b[1 ^ a][2].disable, b[2][2].lock);
                        c[h[0]] = function() {
                            return c[h[0] + "With"](this === c ? e : this, arguments), this
                        };
                        c[h[0] + "With"] = m.fireWith
                    }), e.promise(c), a && a.call(c, c), c
                },
                when: function(a) {
                    var b = 0,
                        f = ua.call(arguments),
                        e = f.length,
                        c = 1 !== e || a && t.isFunction(a.promise) ? e : 0,
                        h = 1 === c ? a : t.Deferred(),
                        m = function(a, b, f) {
                            return function(e) {
                                b[a] = this;
                                f[a] = 1 < arguments.length ? ua.call(arguments) : e;
                                f === d ? h.notifyWith(b, f) : --c || h.resolveWith(b, f)
                            }
                        },
                        d, w, l;
                    if (1 < e)
                        for (d = Array(e), w = Array(e), l = Array(e); e > b; b++) f[b] && t.isFunction(f[b].promise) ? f[b].promise().done(m(b, l, f)).fail(h.reject).progress(m(b, w, d)) : --c;
                    return c || h.resolveWith(l, f), h.promise()
                }
            });
            t.support = function(b) {
                var f = N.createElement("input"),
                    e = N.createDocumentFragment(),
                    c = N.createElement("div"),
                    h = N.createElement("select"),
                    m = h.appendChild(N.createElement("option"));
                return f.type ? (f.type = "checkbox", b.checkOn = "" !== f.value, b.optSelected = m.selected, b.reliableMarginRight = !0, b.boxSizingReliable = !0, b.pixelPosition = !1, f.checked = !0, b.noCloneChecked = f.cloneNode(!0).checked, h.disabled = !0, b.optDisabled = !m.disabled, f = N.createElement("input"), f.value = "t", f.type = "radio", b.radioValue = "t" === f.value, f.setAttribute("checked", "t"), f.setAttribute("name", "t"), e.appendChild(f), b.checkClone =
                    e.cloneNode(!0).cloneNode(!0).lastChild.checked, b.focusinBubbles = "onfocusin" in a, c.style.backgroundClip = "content-box", c.cloneNode(!0).style.backgroundClip = "", b.clearCloneStyle = "content-box" === c.style.backgroundClip, t(function() {
                        var f, e, h = N.getElementsByTagName("body")[0];
                        h && (f = N.createElement("div"), f.style.cssText = "border:0;width:0;height:0;position:absolute;top:0;left:-9999px;margin-top:1px", h.appendChild(f).appendChild(c), c.innerHTML = "", c.style.cssText = "-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%",
                            t.swap(h, null != h.style.zoom ? {
                                zoom: 1
                            } : {}, function() {
                                b.boxSizing = 4 === c.offsetWidth
                            }), a.getComputedStyle && (b.pixelPosition = "1%" !== (a.getComputedStyle(c, null) || {}).top, b.boxSizingReliable = "4px" === (a.getComputedStyle(c, null) || {
                                width: "4px"
                            }).width, e = c.appendChild(N.createElement("div")), e.style.cssText = c.style.cssText = "padding:0;margin:0;border:0;display:block;-webkit-box-sizing:content-box;-moz-box-sizing:content-box;box-sizing:content-box", e.style.marginRight = e.style.width = "0", c.style.width = "1px", b.reliableMarginRight = !parseFloat((a.getComputedStyle(e, null) || {}).marginRight)), h.removeChild(f))
                    }), b) : b
            }({});
            var Z, U, Ka = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
                ta = /([A-Z])/g;
            v.uid = 1;
            v.accepts = function(a) {
                return a.nodeType ? 1 === a.nodeType || 9 === a.nodeType : !0
            };
            v.prototype = {
                key: function(a) {
                    if (!v.accepts(a)) return 0;
                    var b = {},
                        f = a[this.expando];
                    if (!f) {
                        f = v.uid++;
                        try {
                            b[this.expando] = {
                                value: f
                            }, Object.defineProperties(a, b)
                        } catch (e) {
                            b[this.expando] = f, t.extend(a, b)
                        }
                    }
                    return this.cache[f] || (this.cache[f] = {}), f
                },
                set: function(a, b, f) {
                    var e;
                    a = this.key(a);
                    var c = this.cache[a];
                    if ("string" == typeof b) c[b] = f;
                    else if (t.isEmptyObject(c)) t.extend(this.cache[a], b);
                    else
                        for (e in b) c[e] = b[e];
                    return c
                },
                get: function(a, b) {
                    var f = this.cache[this.key(a)];
                    return b === p ? f : f[b]
                },
                access: function(a, b, f) {
                    var e;
                    return b === p || b && "string" == typeof b && f === p ? (e = this.get(a, b), e !== p ? e : this.get(a, t.camelCase(b))) : (this.set(a, b, f), f !== p ? f : b)
                },
                remove: function(a, b) {
                    var f, e, c = this.key(a),
                        h = this.cache[c];
                    if (b === p) this.cache[c] = {};
                    else
                        for (t.isArray(b) ? e = b.concat(b.map(t.camelCase)) : (f =
                                t.camelCase(b), b in h ? e = [b, f] : (e = f, e = e in h ? [e] : e.match(ia) || [])), f = e.length; f--;) delete h[e[f]]
                },
                hasData: function(a) {
                    return !t.isEmptyObject(this.cache[a[this.expando]] || {})
                },
                discard: function(a) {
                    a[this.expando] && delete this.cache[a[this.expando]]
                }
            };
            Z = new v;
            U = new v;
            t.extend({
                acceptData: v.accepts,
                hasData: function(a) {
                    return Z.hasData(a) || U.hasData(a)
                },
                data: function(a, b, f) {
                    return Z.access(a, b, f)
                },
                removeData: function(a, b) {
                    Z.remove(a, b)
                },
                _data: function(a, b, f) {
                    return U.access(a, b, f)
                },
                _removeData: function(a,
                    b) {
                    U.remove(a, b)
                }
            });
            t.fn.extend({
                data: function(a, b) {
                    var f, e, c = this[0],
                        h = 0,
                        m = null;
                    if (a === p) {
                        if (this.length && (m = Z.get(c), 1 === c.nodeType && !U.get(c, "hasDataAttrs"))) {
                            for (f = c.attributes; f.length > h; h++) e = f[h].name, 0 === e.indexOf("data-") && (e = t.camelCase(e.slice(5)), F(c, e, m[e]));
                            U.set(c, "hasDataAttrs", !0)
                        }
                        return m
                    }
                    return "object" == typeof a ? this.each(function() {
                        Z.set(this, a)
                    }) : t.access(this, function(b) {
                        var f, e = t.camelCase(a);
                        if (c && b === p) {
                            if ((f = Z.get(c, a), f !== p) || (f = Z.get(c, e), f !== p) || (f = F(c, e, p), f !== p)) return f
                        } else this.each(function() {
                            var f =
                                Z.get(this, e);
                            Z.set(this, e, b); - 1 !== a.indexOf("-") && f !== p && Z.set(this, a, b)
                        })
                    }, null, b, 1 < arguments.length, null, !0)
                },
                removeData: function(a) {
                    return this.each(function() {
                        Z.remove(this, a)
                    })
                }
            });
            t.extend({
                queue: function(a, b, f) {
                    var e;
                    return a ? (b = (b || "fx") + "queue", e = U.get(a, b), f && (!e || t.isArray(f) ? e = U.access(a, b, t.makeArray(f)) : e.push(f)), e || []) : p
                },
                dequeue: function(a, b) {
                    b = b || "fx";
                    var f = t.queue(a, b),
                        e = f.length,
                        c = f.shift(),
                        h = t._queueHooks(a, b),
                        m = function() {
                            t.dequeue(a, b)
                        };
                    "inprogress" === c && (c = f.shift(), e--);
                    c &&
                        ("fx" === b && f.unshift("inprogress"), delete h.stop, c.call(a, m, h));
                    !e && h && h.empty.fire()
                },
                _queueHooks: function(a, b) {
                    var f = b + "queueHooks";
                    return U.get(a, f) || U.access(a, f, {
                        empty: t.Callbacks("once memory").add(function() {
                            U.remove(a, [b + "queue", f])
                        })
                    })
                }
            });
            t.fn.extend({
                queue: function(a, b) {
                    var f = 2;
                    return "string" != typeof a && (b = a, a = "fx", f--), f > arguments.length ? t.queue(this[0], a) : b === p ? this : this.each(function() {
                        var f = t.queue(this, a, b);
                        t._queueHooks(this, a);
                        "fx" === a && "inprogress" !== f[0] && t.dequeue(this, a)
                    })
                },
                dequeue: function(a) {
                    return this.each(function() {
                        t.dequeue(this,
                            a)
                    })
                },
                delay: function(a, b) {
                    return a = t.fx ? t.fx.speeds[a] || a : a, b = b || "fx", this.queue(b, function(b, f) {
                        var e = setTimeout(b, a);
                        f.stop = function() {
                            clearTimeout(e)
                        }
                    })
                },
                clearQueue: function(a) {
                    return this.queue(a || "fx", [])
                },
                promise: function(a, b) {
                    var f, e = 1,
                        c = t.Deferred(),
                        h = this,
                        m = this.length,
                        d = function() {
                            --e || c.resolveWith(h, [h])
                        };
                    "string" != typeof a && (b = a, a = p);
                    for (a = a || "fx"; m--;)(f = U.get(h[m], a + "queueHooks")) && f.empty && (e++, f.empty.add(d));
                    return d(), c.promise(b)
                }
            });
            var ra, la = /[\t\r\n\f]/g,
                Ja = /\r/g,
                ha = /^(?:input|select|textarea|button)$/i;
            t.fn.extend({
                attr: function(a, b) {
                    return t.access(this, t.attr, a, b, 1 < arguments.length)
                },
                removeAttr: function(a) {
                    return this.each(function() {
                        t.removeAttr(this, a)
                    })
                },
                prop: function(a, b) {
                    return t.access(this, t.prop, a, b, 1 < arguments.length)
                },
                removeProp: function(a) {
                    return this.each(function() {
                        delete this[t.propFix[a] || a]
                    })
                },
                addClass: function(a) {
                    var b, f, e, c, h, m = 0,
                        d = this.length;
                    b = "string" == typeof a && a;
                    if (t.isFunction(a)) return this.each(function(b) {
                        t(this).addClass(a.call(this, b, this.className))
                    });
                    if (b)
                        for (b =
                            (a || "").match(ia) || []; d > m; m++)
                            if (f = this[m], e = 1 === f.nodeType && (f.className ? (" " + f.className + " ").replace(la, " ") : " ")) {
                                for (h = 0; c = b[h++];) 0 > e.indexOf(" " + c + " ") && (e += c + " ");
                                f.className = t.trim(e)
                            }
                    return this
                },
                removeClass: function(a) {
                    var b, f, e, c, h, m = 0,
                        d = this.length;
                    b = 0 === arguments.length || "string" == typeof a && a;
                    if (t.isFunction(a)) return this.each(function(b) {
                        t(this).removeClass(a.call(this, b, this.className))
                    });
                    if (b)
                        for (b = (a || "").match(ia) || []; d > m; m++)
                            if (f = this[m], e = 1 === f.nodeType && (f.className ? (" " + f.className +
                                    " ").replace(la, " ") : "")) {
                                for (h = 0; c = b[h++];)
                                    for (; 0 <= e.indexOf(" " + c + " ");) e = e.replace(" " + c + " ", " ");
                                f.className = a ? t.trim(e) : ""
                            }
                    return this
                },
                toggleClass: function(a, b) {
                    var f = typeof a;
                    return "boolean" == typeof b && "string" === f ? b ? this.addClass(a) : this.removeClass(a) : t.isFunction(a) ? this.each(function(f) {
                        t(this).toggleClass(a.call(this, f, this.className, b), b)
                    }) : this.each(function() {
                        if ("string" === f)
                            for (var b, e = 0, c = t(this), h = a.match(ia) || []; b = h[e++];) c.hasClass(b) ? c.removeClass(b) : c.addClass(b);
                        else(f === H ||
                            "boolean" === f) && (this.className && U.set(this, "__className__", this.className), this.className = this.className || !1 === a ? "" : U.get(this, "__className__") || "")
                    })
                },
                hasClass: function(a) {
                    a = " " + a + " ";
                    for (var b = 0, f = this.length; f > b; b++)
                        if (1 === this[b].nodeType && 0 <= (" " + this[b].className + " ").replace(la, " ").indexOf(a)) return !0;
                    return !1
                },
                val: function(a) {
                    var b, f, e, c = this[0];
                    if (arguments.length) return e = t.isFunction(a), this.each(function(f) {
                        var c;
                        1 === this.nodeType && (c = e ? a.call(this, f, t(this).val()) : a, null == c ? c = "" : "number" ==
                            typeof c ? c += "" : t.isArray(c) && (c = t.map(c, function(a) {
                                return null == a ? "" : a + ""
                            })), b = t.valHooks[this.type] || t.valHooks[this.nodeName.toLowerCase()], b && "set" in b && b.set(this, c, "value") !== p || (this.value = c))
                    });
                    if (c) return b = t.valHooks[c.type] || t.valHooks[c.nodeName.toLowerCase()], b && "get" in b && (f = b.get(c, "value")) !== p ? f : (f = c.value, "string" == typeof f ? f.replace(Ja, "") : null == f ? "" : f)
                }
            });
            t.extend({
                valHooks: {
                    option: {
                        get: function(a) {
                            var b = a.attributes.value;
                            return !b || b.specified ? a.value : a.text
                        }
                    },
                    select: {
                        get: function(a) {
                            for (var b,
                                    f = a.options, e = a.selectedIndex, c = "select-one" === a.type || 0 > e, h = c ? null : [], m = c ? e + 1 : f.length, d = 0 > e ? m : c ? e : 0; m > d; d++)
                                if (b = f[d], !(!b.selected && d !== e || (t.support.optDisabled ? b.disabled : null !== b.getAttribute("disabled")) || b.parentNode.disabled && t.nodeName(b.parentNode, "optgroup"))) {
                                    if (a = t(b).val(), c) return a;
                                    h.push(a)
                                }
                            return h
                        },
                        set: function(a, b) {
                            for (var f, e, c = a.options, h = t.makeArray(b), m = c.length; m--;) e = c[m], (e.selected = 0 <= t.inArray(t(e).val(), h)) && (f = !0);
                            return f || (a.selectedIndex = -1), h
                        }
                    }
                },
                attr: function(a,
                    b, f) {
                    var e, c, h = a.nodeType;
                    if (a && 3 !== h && 8 !== h && 2 !== h) return typeof a.getAttribute === H ? t.prop(a, b, f) : (1 === h && t.isXMLDoc(a) || (b = b.toLowerCase(), e = t.attrHooks[b] || (t.expr.match.bool.test(b) ? ra : void 0)), f === p ? e && "get" in e && null !== (c = e.get(a, b)) ? c : (c = t.find.attr(a, b), null == c ? p : c) : null !== f ? e && "set" in e && (c = e.set(a, f, b)) !== p ? c : (a.setAttribute(b, f + ""), f) : (t.removeAttr(a, b), p))
                },
                removeAttr: function(a, b) {
                    var f, e, c = 0,
                        h = b && b.match(ia);
                    if (h && 1 === a.nodeType)
                        for (; f = h[c++];) e = t.propFix[f] || f, t.expr.match.bool.test(f) &&
                            (a[e] = !1), a.removeAttribute(f)
                },
                attrHooks: {
                    type: {
                        set: function(a, b) {
                            if (!t.support.radioValue && "radio" === b && t.nodeName(a, "input")) {
                                var f = a.value;
                                return a.setAttribute("type", b), f && (a.value = f), b
                            }
                        }
                    }
                },
                propFix: {
                    "for": "htmlFor",
                    "class": "className"
                },
                prop: function(a, b, f) {
                    var e, c, h, m = a.nodeType;
                    if (a && 3 !== m && 8 !== m && 2 !== m) return h = 1 !== m || !t.isXMLDoc(a), h && (b = t.propFix[b] || b, c = t.propHooks[b]), f !== p ? c && "set" in c && (e = c.set(a, f, b)) !== p ? e : a[b] = f : c && "get" in c && null !== (e = c.get(a, b)) ? e : a[b]
                },
                propHooks: {
                    tabIndex: {
                        get: function(a) {
                            return a.hasAttribute("tabindex") ||
                                ha.test(a.nodeName) || a.href ? a.tabIndex : -1
                        }
                    }
                }
            });
            ra = {
                set: function(a, b, f) {
                    return !1 === b ? t.removeAttr(a, f) : a.setAttribute(f, f), f
                }
            };
            t.each(t.expr.match.bool.source.match(/\w+/g), function(a, b) {
                var f = t.expr.attrHandle[b] || t.find.attr;
                t.expr.attrHandle[b] = function(a, b, e) {
                    var c = t.expr.attrHandle[b];
                    a = e ? p : (t.expr.attrHandle[b] = p) != f(a, b, e) ? b.toLowerCase() : null;
                    return t.expr.attrHandle[b] = c, a
                }
            });
            t.support.optSelected || (t.propHooks.selected = {
                get: function(a) {
                    a = a.parentNode;
                    return a && a.parentNode && a.parentNode.selectedIndex,
                        null
                }
            });
            t.each("tabIndex readOnly maxLength cellSpacing cellPadding rowSpan colSpan useMap frameBorder contentEditable".split(" "), function() {
                t.propFix[this.toLowerCase()] = this
            });
            t.each(["radio", "checkbox"], function() {
                t.valHooks[this] = {
                    set: function(a, b) {
                        return t.isArray(b) ? a.checked = 0 <= t.inArray(t(a).val(), b) : p
                    }
                };
                t.support.checkOn || (t.valHooks[this].get = function(a) {
                    return null === a.getAttribute("value") ? "on" : a.value
                })
            });
            var ja = /^key/,
                ba = /^(?:mouse|contextmenu)|click/,
                X = /^(?:focusinfocus|focusoutblur)$/,
                wa = /^([^.]*)(?:\.(.+)|)$/;
            t.event = {
                global: {},
                add: function(a, b, f, e, c) {
                    var h, m, d, w, l, n, g, q, r, u;
                    if (l = U.get(a)) {
                        f.handler && (h = f, f = h.handler, c = h.selector);
                        f.guid || (f.guid = t.guid++);
                        (w = l.events) || (w = l.events = {});
                        (m = l.handle) || (m = l.handle = function(a) {
                            return typeof t === H || a && t.event.triggered === a.type ? p : t.event.dispatch.apply(m.elem, arguments)
                        }, m.elem = a);
                        b = (b || "").match(ia) || [""];
                        for (l = b.length; l--;) d = wa.exec(b[l]) || [], r = u = d[1], d = (d[2] || "").split(".").sort(), r && (g = t.event.special[r] || {}, r = (c ? g.delegateType :
                            g.bindType) || r, g = t.event.special[r] || {}, n = t.extend({
                            type: r,
                            origType: u,
                            data: e,
                            handler: f,
                            guid: f.guid,
                            selector: c,
                            needsContext: c && t.expr.match.needsContext.test(c),
                            namespace: d.join(".")
                        }, h), (q = w[r]) || (q = w[r] = [], q.delegateCount = 0, g.setup && !1 !== g.setup.call(a, e, d, m) || a.addEventListener && a.addEventListener(r, m, !1)), g.add && (g.add.call(a, n), n.handler.guid || (n.handler.guid = f.guid)), c ? q.splice(q.delegateCount++, 0, n) : q.push(n), t.event.global[r] = !0);
                        a = null
                    }
                },
                remove: function(a, b, f, e, c) {
                    var h, m, d, w, l, n, g, q, r, u,
                        B, x = U.hasData(a) && U.get(a);
                    if (x && (w = x.events)) {
                        b = (b || "").match(ia) || [""];
                        for (l = b.length; l--;)
                            if (d = wa.exec(b[l]) || [], r = B = d[1], u = (d[2] || "").split(".").sort(), r) {
                                g = t.event.special[r] || {};
                                r = (e ? g.delegateType : g.bindType) || r;
                                q = w[r] || [];
                                d = d[2] && RegExp("(^|\\.)" + u.join("\\.(?:.*\\.|)") + "(\\.|$)");
                                for (m = h = q.length; h--;) n = q[h], !c && B !== n.origType || f && f.guid !== n.guid || d && !d.test(n.namespace) || e && e !== n.selector && ("**" !== e || !n.selector) || (q.splice(h, 1), n.selector && q.delegateCount--, g.remove && g.remove.call(a, n));
                                m && !q.length && (g.teardown && !1 !== g.teardown.call(a, u, x.handle) || t.removeEvent(a, r, x.handle), delete w[r])
                            } else
                                for (r in w) t.event.remove(a, r + b[l], f, e, !0);
                        t.isEmptyObject(w) && (delete x.handle, U.remove(a, "events"))
                    }
                },
                trigger: function(b, f, e, c) {
                    var h, m, d, w, l, n, g, q = [e || N],
                        r = cb.call(b, "type") ? b.type : b;
                    h = cb.call(b, "namespace") ? b.namespace.split(".") : [];
                    if (m = d = e = e || N, 3 !== e.nodeType && 8 !== e.nodeType && !X.test(r + t.event.triggered) && (0 <= r.indexOf(".") && (h = r.split("."), r = h.shift(), h.sort()), l = 0 > r.indexOf(":") && "on" +
                            r, b = b[t.expando] ? b : new t.Event(r, "object" == typeof b && b), b.isTrigger = c ? 2 : 3, b.namespace = h.join("."), b.namespace_re = b.namespace ? RegExp("(^|\\.)" + h.join("\\.(?:.*\\.|)") + "(\\.|$)") : null, b.result = p, b.target || (b.target = e), f = null == f ? [b] : t.makeArray(f, [b]), g = t.event.special[r] || {}, c || !g.trigger || !1 !== g.trigger.apply(e, f))) {
                        if (!c && !g.noBubble && !t.isWindow(e)) {
                            w = g.delegateType || r;
                            for (X.test(w + r) || (m = m.parentNode); m; m = m.parentNode) q.push(m), d = m;
                            d === (e.ownerDocument || N) && q.push(d.defaultView || d.parentWindow ||
                                a)
                        }
                        for (h = 0;
                            (m = q[h++]) && !b.isPropagationStopped();) b.type = 1 < h ? w : g.bindType || r, (n = (U.get(m, "events") || {})[b.type] && U.get(m, "handle")) && n.apply(m, f), (n = l && m[l]) && t.acceptData(m) && n.apply && !1 === n.apply(m, f) && b.preventDefault();
                        return b.type = r, c || b.isDefaultPrevented() || g._default && !1 !== g._default.apply(q.pop(), f) || !t.acceptData(e) || l && t.isFunction(e[r]) && !t.isWindow(e) && (d = e[l], d && (e[l] = null), t.event.triggered = r, e[r](), t.event.triggered = p, d && (e[l] = d)), b.result
                    }
                },
                dispatch: function(a) {
                    a = t.event.fix(a);
                    var b, f, e, c, h, m = [],
                        d = ua.call(arguments);
                    b = (U.get(this, "events") || {})[a.type] || [];
                    var w = t.event.special[a.type] || {};
                    if (d[0] = a, a.delegateTarget = this, !w.preDispatch || !1 !== w.preDispatch.call(this, a)) {
                        m = t.event.handlers.call(this, a, b);
                        for (b = 0;
                            (c = m[b++]) && !a.isPropagationStopped();)
                            for (a.currentTarget = c.elem, f = 0;
                                (h = c.handlers[f++]) && !a.isImmediatePropagationStopped();) a.namespace_re && !a.namespace_re.test(h.namespace) || (a.handleObj = h, a.data = h.data, e = ((t.event.special[h.origType] || {}).handle || h.handler).apply(c.elem,
                                d), e === p || !1 !== (a.result = e) || (a.preventDefault(), a.stopPropagation()));
                        return w.postDispatch && w.postDispatch.call(this, a), a.result
                    }
                },
                handlers: function(a, b) {
                    var f, e, c, h, m = [],
                        d = b.delegateCount,
                        w = a.target;
                    if (d && w.nodeType && (!a.button || "click" !== a.type))
                        for (; w !== this; w = w.parentNode || this)
                            if (!0 !== w.disabled || "click" !== a.type) {
                                e = [];
                                for (f = 0; d > f; f++) h = b[f], c = h.selector + " ", e[c] === p && (e[c] = h.needsContext ? 0 <= t(c, this).index(w) : t.find(c, this, null, [w]).length), e[c] && e.push(h);
                                e.length && m.push({
                                    elem: w,
                                    handlers: e
                                })
                            }
                    return b.length >
                        d && m.push({
                            elem: this,
                            handlers: b.slice(d)
                        }), m
                },
                props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),
                fixHooks: {},
                keyHooks: {
                    props: ["char", "charCode", "key", "keyCode"],
                    filter: function(a, b) {
                        return null == a.which && (a.which = null != b.charCode ? b.charCode : b.keyCode), a
                    }
                },
                mouseHooks: {
                    props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
                    filter: function(a, b) {
                        var f, e, c, h = b.button;
                        return null ==
                            a.pageX && null != b.clientX && (f = a.target.ownerDocument || N, e = f.documentElement, c = f.body, a.pageX = b.clientX + (e && e.scrollLeft || c && c.scrollLeft || 0) - (e && e.clientLeft || c && c.clientLeft || 0), a.pageY = b.clientY + (e && e.scrollTop || c && c.scrollTop || 0) - (e && e.clientTop || c && c.clientTop || 0)), a.which || h === p || (a.which = 1 & h ? 1 : 2 & h ? 3 : 4 & h ? 2 : 0), a
                    }
                },
                fix: function(a) {
                    if (a[t.expando]) return a;
                    var b, f, e;
                    b = a.type;
                    var c = a,
                        h = this.fixHooks[b];
                    h || (this.fixHooks[b] = h = ba.test(b) ? this.mouseHooks : ja.test(b) ? this.keyHooks : {});
                    e = h.props ? this.props.concat(h.props) :
                        this.props;
                    a = new t.Event(c);
                    for (b = e.length; b--;) f = e[b], a[f] = c[f];
                    return a.target || (a.target = N), 3 === a.target.nodeType && (a.target = a.target.parentNode), h.filter ? h.filter(a, c) : a
                },
                special: {
                    load: {
                        noBubble: !0
                    },
                    focus: {
                        trigger: function() {
                            return this !== S() && this.focus ? (this.focus(), !1) : p
                        },
                        delegateType: "focusin"
                    },
                    blur: {
                        trigger: function() {
                            return this === S() && this.blur ? (this.blur(), !1) : p
                        },
                        delegateType: "focusout"
                    },
                    click: {
                        trigger: function() {
                            return "checkbox" === this.type && this.click && t.nodeName(this, "input") ? (this.click(), !1) : p
                        },
                        _default: function(a) {
                            return t.nodeName(a.target, "a")
                        }
                    },
                    beforeunload: {
                        postDispatch: function(a) {
                            a.result !== p && (a.originalEvent.returnValue = a.result)
                        }
                    }
                },
                simulate: function(a, b, f, e) {
                    a = t.extend(new t.Event, f, {
                        type: a,
                        isSimulated: !0,
                        originalEvent: {}
                    });
                    e ? t.event.trigger(a, null, b) : t.event.dispatch.call(b, a);
                    a.isDefaultPrevented() && f.preventDefault()
                }
            };
            t.removeEvent = function(a, b, f) {
                a.removeEventListener && a.removeEventListener(b, f, !1)
            };
            t.Event = function(a, b) {
                return this instanceof t.Event ? (a && a.type ? (this.originalEvent =
                    a, this.type = a.type, this.isDefaultPrevented = a.defaultPrevented || a.getPreventDefault && a.getPreventDefault() ? M : I) : this.type = a, b && t.extend(this, b), this.timeStamp = a && a.timeStamp || t.now(), this[t.expando] = !0, p) : new t.Event(a, b)
            };
            t.Event.prototype = {
                isDefaultPrevented: I,
                isPropagationStopped: I,
                isImmediatePropagationStopped: I,
                preventDefault: function() {
                    var a = this.originalEvent;
                    this.isDefaultPrevented = M;
                    a && a.preventDefault && a.preventDefault()
                },
                stopPropagation: function() {
                    var a = this.originalEvent;
                    this.isPropagationStopped =
                        M;
                    a && a.stopPropagation && a.stopPropagation()
                },
                stopImmediatePropagation: function() {
                    this.isImmediatePropagationStopped = M;
                    this.stopPropagation()
                }
            };
            t.each({
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            }, function(a, b) {
                t.event.special[a] = {
                    delegateType: b,
                    bindType: b,
                    handle: function(a) {
                        var f, e = a.relatedTarget,
                            c = a.handleObj;
                        return (!e || e !== this && !t.contains(this, e)) && (a.type = c.origType, f = c.handler.apply(this, arguments), a.type = b), f
                    }
                }
            });
            t.support.focusinBubbles || t.each({
                focus: "focusin",
                blur: "focusout"
            }, function(a,
                b) {
                var f = 0,
                    e = function(a) {
                        t.event.simulate(b, a.target, t.event.fix(a), !0)
                    };
                t.event.special[b] = {
                    setup: function() {
                        0 === f++ && N.addEventListener(a, e, !0)
                    },
                    teardown: function() {
                        0 === --f && N.removeEventListener(a, e, !0)
                    }
                }
            });
            t.fn.extend({
                on: function(a, b, f, e, c) {
                    var h, m;
                    if ("object" == typeof a) {
                        "string" != typeof b && (f = f || b, b = p);
                        for (m in a) this.on(m, b, f, a[m], c);
                        return this
                    }
                    if (null == f && null == e ? (e = b, f = b = p) : null == e && ("string" == typeof b ? (e = f, f = p) : (e = f, f = b, b = p)), !1 === e) e = I;
                    else if (!e) return this;
                    return 1 === c && (h = e, e = function(a) {
                        return t().off(a),
                            h.apply(this, arguments)
                    }, e.guid = h.guid || (h.guid = t.guid++)), this.each(function() {
                        t.event.add(this, a, e, f, b)
                    })
                },
                one: function(a, b, f, e) {
                    return this.on(a, b, f, e, 1)
                },
                off: function(a, b, f) {
                    var e, c;
                    if (a && a.preventDefault && a.handleObj) return e = a.handleObj, t(a.delegateTarget).off(e.namespace ? e.origType + "." + e.namespace : e.origType, e.selector, e.handler), this;
                    if ("object" == typeof a) {
                        for (c in a) this.off(c, b, a[c]);
                        return this
                    }
                    return (!1 === b || "function" == typeof b) && (f = b, b = p), !1 === f && (f = I), this.each(function() {
                        t.event.remove(this,
                            a, f, b)
                    })
                },
                trigger: function(a, b) {
                    return this.each(function() {
                        t.event.trigger(a, b, this)
                    })
                },
                triggerHandler: function(a, b) {
                    var f = this[0];
                    return f ? t.event.trigger(a, b, f, !0) : p
                }
            });
            var La = /^.[^:#\[\.,]*$/,
                Ba = /^(?:parents|prev(?:Until|All))/,
                mb = t.expr.match.needsContext,
                za = {
                    children: !0,
                    contents: !0,
                    next: !0,
                    prev: !0
                };
            t.fn.extend({
                find: function(a) {
                    var b, f = [],
                        e = this,
                        c = e.length;
                    if ("string" != typeof a) return this.pushStack(t(a).filter(function() {
                        for (b = 0; c > b; b++)
                            if (t.contains(e[b], this)) return !0
                    }));
                    for (b = 0; c > b; b++) t.find(a,
                        e[b], f);
                    return f = this.pushStack(1 < c ? t.unique(f) : f), f.selector = this.selector ? this.selector + " " + a : a, f
                },
                has: function(a) {
                    var b = t(a, this),
                        f = b.length;
                    return this.filter(function() {
                        for (var a = 0; f > a; a++)
                            if (t.contains(this, b[a])) return !0
                    })
                },
                not: function(a) {
                    return this.pushStack(P(this, a || [], !0))
                },
                filter: function(a) {
                    return this.pushStack(P(this, a || [], !1))
                },
                is: function(a) {
                    return !!P(this, "string" == typeof a && mb.test(a) ? t(a) : a || [], !1).length
                },
                closest: function(a, b) {
                    for (var f, e = 0, c = this.length, h = [], m = mb.test(a) ||
                            "string" != typeof a ? t(a, b || this.context) : 0; c > e; e++)
                        for (f = this[e]; f && f !== b; f = f.parentNode)
                            if (11 > f.nodeType && (m ? -1 < m.index(f) : 1 === f.nodeType && t.find.matchesSelector(f, a))) {
                                h.push(f);
                                break
                            }
                    return this.pushStack(1 < h.length ? t.unique(h) : h)
                },
                index: function(a) {
                    return a ? "string" == typeof a ? xa.call(t(a), this[0]) : xa.call(this, a.jquery ? a[0] : a) : this[0] && this[0].parentNode ? this.first().prevAll().length : -1
                },
                add: function(a, b) {
                    var f = "string" == typeof a ? t(a, b) : t.makeArray(a && a.nodeType ? [a] : a),
                        f = t.merge(this.get(), f);
                    return this.pushStack(t.unique(f))
                },
                addBack: function(a) {
                    return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
                }
            });
            t.each({
                parent: function(a) {
                    return (a = a.parentNode) && 11 !== a.nodeType ? a : null
                },
                parents: function(a) {
                    return t.dir(a, "parentNode")
                },
                parentsUntil: function(a, b, f) {
                    return t.dir(a, "parentNode", f)
                },
                next: function(a) {
                    return O(a, "nextSibling")
                },
                prev: function(a) {
                    return O(a, "previousSibling")
                },
                nextAll: function(a) {
                    return t.dir(a, "nextSibling")
                },
                prevAll: function(a) {
                    return t.dir(a, "previousSibling")
                },
                nextUntil: function(a, b, f) {
                    return t.dir(a, "nextSibling", f)
                },
                prevUntil: function(a, b, f) {
                    return t.dir(a, "previousSibling", f)
                },
                siblings: function(a) {
                    return t.sibling((a.parentNode || {}).firstChild, a)
                },
                children: function(a) {
                    return t.sibling(a.firstChild)
                },
                contents: function(a) {
                    return a.contentDocument || t.merge([], a.childNodes)
                }
            }, function(a, b) {
                t.fn[a] = function(f, e) {
                    var c = t.map(this, b, f);
                    return "Until" !== a.slice(-5) && (e = f), e && "string" == typeof e && (c = t.filter(e, c)), 1 < this.length && (za[a] || t.unique(c), Ba.test(a) &&
                        c.reverse()), this.pushStack(c)
                }
            });
            t.extend({
                filter: function(a, b, f) {
                    var e = b[0];
                    return f && (a = ":not(" + a + ")"), 1 === b.length && 1 === e.nodeType ? t.find.matchesSelector(e, a) ? [e] : [] : t.find.matches(a, t.grep(b, function(a) {
                        return 1 === a.nodeType
                    }))
                },
                dir: function(a, b, f) {
                    for (var e = [], c = f !== p;
                        (a = a[b]) && 9 !== a.nodeType;)
                        if (1 === a.nodeType) {
                            if (c && t(a).is(f)) break;
                            e.push(a)
                        }
                    return e
                },
                sibling: function(a, b) {
                    for (var f = []; a; a = a.nextSibling) 1 === a.nodeType && a !== b && f.push(a);
                    return f
                }
            });
            var nb = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
                pa = /<([\w:]+)/,
                oa = /<|&#?\w+;/,
                sa = /<(?:script|style|link)/i,
                ob = /^(?:checkbox|radio)$/i,
                Pa = /checked\s*(?:[^=]|=\s*.checked.)/i,
                Qa = /^$|\/(?:java|ecma)script/i,
                Ma = /^true\/(.*)/,
                eb = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,
                ca = {
                    option: [1, "<select multiple='multiple'>", "</select>"],
                    thead: [1, "<table>", "</table>"],
                    col: [2, "<table><colgroup>", "</colgroup></table>"],
                    tr: [2, "<table><tbody>", "</tbody></table>"],
                    td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],
                    _default: [0, "", ""]
                };
            ca.optgroup = ca.option;
            ca.tbody =
                ca.tfoot = ca.colgroup = ca.caption = ca.thead;
            ca.th = ca.td;
            t.fn.extend({
                text: function(a) {
                    return t.access(this, function(a) {
                        return a === p ? t.text(this) : this.empty().append((this[0] && this[0].ownerDocument || N).createTextNode(a))
                    }, null, a, arguments.length)
                },
                append: function() {
                    return this.domManip(arguments, function(a) {
                        1 !== this.nodeType && 11 !== this.nodeType && 9 !== this.nodeType || V(this, a).appendChild(a)
                    })
                },
                prepend: function() {
                    return this.domManip(arguments, function(a) {
                        if (1 === this.nodeType || 11 === this.nodeType || 9 === this.nodeType) {
                            var b =
                                V(this, a);
                            b.insertBefore(a, b.firstChild)
                        }
                    })
                },
                before: function() {
                    return this.domManip(arguments, function(a) {
                        this.parentNode && this.parentNode.insertBefore(a, this)
                    })
                },
                after: function() {
                    return this.domManip(arguments, function(a) {
                        this.parentNode && this.parentNode.insertBefore(a, this.nextSibling)
                    })
                },
                remove: function(a, f) {
                    for (var e, c = a ? t.filter(a, this) : this, h = 0; null != (e = c[h]); h++) f || 1 !== e.nodeType || t.cleanData(b(e)), e.parentNode && (f && t.contains(e.ownerDocument, e) && aa(b(e, "script")), e.parentNode.removeChild(e));
                    return this
                },
                empty: function() {
                    for (var a, f = 0; null != (a = this[f]); f++) 1 === a.nodeType && (t.cleanData(b(a, !1)), a.textContent = "");
                    return this
                },
                clone: function(a, b) {
                    return a = null == a ? !1 : a, b = null == b ? a : b, this.map(function() {
                        return t.clone(this, a, b)
                    })
                },
                html: function(a) {
                    return t.access(this, function(a) {
                        var f = this[0] || {},
                            e = 0,
                            c = this.length;
                        if (a === p && 1 === f.nodeType) return f.innerHTML;
                        if ("string" == typeof a && !sa.test(a) && !ca[(pa.exec(a) || ["", ""])[1].toLowerCase()]) {
                            a = a.replace(nb, "<$1></$2>");
                            try {
                                for (; c > e; e++) f = this[e] || {}, 1 === f.nodeType && (t.cleanData(b(f, !1)), f.innerHTML = a);
                                f = 0
                            } catch (h) {}
                        }
                        f && this.empty().append(a)
                    }, null, a, arguments.length)
                },
                replaceWith: function() {
                    var a = t.map(this, function(a) {
                            return [a.nextSibling, a.parentNode]
                        }),
                        b = 0;
                    return this.domManip(arguments, function(f) {
                        var e = a[b++],
                            c = a[b++];
                        c && (e && e.parentNode !== c && (e = this.nextSibling), t(this).remove(), c.insertBefore(f, e))
                    }, !0), b ? this : this.remove()
                },
                detach: function(a) {
                    return this.remove(a, !0)
                },
                domManip: function(a, f, e) {
                    a = R.apply([], a);
                    var c, h, m, d, w = 0,
                        l = this.length,
                        n = this,
                        g = l - 1,
                        q = a[0],
                        r = t.isFunction(q);
                    if (r || !(1 >= l || "string" != typeof q || t.support.checkClone) && Pa.test(q)) return this.each(function(b) {
                        var c = n.eq(b);
                        r && (a[0] = q.call(this, b, c.html()));
                        c.domManip(a, f, e)
                    });
                    if (l && (c = t.buildFragment(a, this[0].ownerDocument, !1, !e && this), h = c.firstChild, 1 === c.childNodes.length && (c = h), h)) {
                        h = t.map(b(c, "script"), ma);
                        for (m = h.length; l > w; w++) d = c, w !== g && (d = t.clone(d, !0, !0), m && t.merge(h, b(d, "script"))), f.call(this[w], d, w);
                        if (m)
                            for (c = h[h.length - 1].ownerDocument, t.map(h, fa), w = 0; m >
                                w; w++) d = h[w], Qa.test(d.type || "") && !U.access(d, "globalEval") && t.contains(c, d) && (d.src ? t._evalUrl(d.src) : t.globalEval(d.textContent.replace(eb, "")))
                    }
                    return this
                }
            });
            t.each({
                appendTo: "append",
                prependTo: "prepend",
                insertBefore: "before",
                insertAfter: "after",
                replaceAll: "replaceWith"
            }, function(a, b) {
                t.fn[a] = function(a) {
                    for (var f = [], e = t(a), c = e.length - 1, h = 0; c >= h; h++) a = h === c ? this : this.clone(!0), t(e[h])[b](a), Ea.apply(f, a.get());
                    return this.pushStack(f)
                }
            });
            t.extend({
                clone: function(a, f, e) {
                    var c, h, m, d, w = a.cloneNode(!0),
                        l = t.contains(a.ownerDocument, a);
                    if (!(t.support.noCloneChecked || 1 !== a.nodeType && 11 !== a.nodeType || t.isXMLDoc(a)))
                        for (d = b(w), m = b(a), c = 0, h = m.length; h > c; c++) {
                            var n = m[c],
                                g = d[c],
                                q = g.nodeName.toLowerCase();
                            "input" === q && ob.test(n.type) ? g.checked = n.checked : ("input" === q || "textarea" === q) && (g.defaultValue = n.defaultValue)
                        }
                    if (f)
                        if (e)
                            for (m = m || b(a), d = d || b(w), c = 0, h = m.length; h > c; c++) W(m[c], d[c]);
                        else W(a, w);
                    return d = b(w, "script"), 0 < d.length && aa(d, !l && b(a, "script")), w
                },
                buildFragment: function(a, f, e, c) {
                    for (var h, m, d, w,
                            l = 0, n = a.length, g = f.createDocumentFragment(), q = []; n > l; l++)
                        if (h = a[l], h || 0 === h)
                            if ("object" === t.type(h)) t.merge(q, h.nodeType ? [h] : h);
                            else if (oa.test(h)) {
                        m = m || g.appendChild(f.createElement("div"));
                        d = (pa.exec(h) || ["", ""])[1].toLowerCase();
                        d = ca[d] || ca._default;
                        m.innerHTML = d[1] + h.replace(nb, "<$1></$2>") + d[2];
                        for (d = d[0]; d--;) m = m.lastChild;
                        t.merge(q, m.childNodes);
                        m = g.firstChild;
                        m.textContent = ""
                    } else q.push(f.createTextNode(h));
                    g.textContent = "";
                    for (l = 0; h = q[l++];)
                        if ((!c || -1 === t.inArray(h, c)) && (w = t.contains(h.ownerDocument,
                                h), m = b(g.appendChild(h), "script"), w && aa(m), e))
                            for (d = 0; h = m[d++];) Qa.test(h.type || "") && e.push(h);
                    return g
                },
                cleanData: function(a) {
                    for (var b, f, e, c, h, m, d = t.event.special, w = 0;
                        (f = a[w]) !== p; w++) {
                        if (v.accepts(f) && (h = f[U.expando], h && (b = U.cache[h]))) {
                            if (e = Object.keys(b.events || {}), e.length)
                                for (m = 0;
                                    (c = e[m]) !== p; m++) d[c] ? t.event.remove(f, c) : t.removeEvent(f, c, b.handle);
                            U.cache[h] && delete U.cache[h]
                        }
                        delete Z.cache[f[Z.expando]]
                    }
                },
                _evalUrl: function(a) {
                    return t.ajax({
                        url: a,
                        type: "GET",
                        dataType: "script",
                        async: !1,
                        global: !1,
                        "throws": !0
                    })
                }
            });
            t.fn.extend({
                wrapAll: function(a) {
                    var b;
                    return t.isFunction(a) ? this.each(function(b) {
                        t(this).wrapAll(a.call(this, b))
                    }) : (this[0] && (b = t(a, this[0].ownerDocument).eq(0).clone(!0), this[0].parentNode && b.insertBefore(this[0]), b.map(function() {
                        for (var a = this; a.firstElementChild;) a = a.firstElementChild;
                        return a
                    }).append(this)), this)
                },
                wrapInner: function(a) {
                    return t.isFunction(a) ? this.each(function(b) {
                        t(this).wrapInner(a.call(this, b))
                    }) : this.each(function() {
                        var b = t(this),
                            f = b.contents();
                        f.length ?
                            f.wrapAll(a) : b.append(a)
                    })
                },
                wrap: function(a) {
                    var b = t.isFunction(a);
                    return this.each(function(f) {
                        t(this).wrapAll(b ? a.call(this, f) : a)
                    })
                },
                unwrap: function() {
                    return this.parent().each(function() {
                        t.nodeName(this, "body") || t(this).replaceWith(this.childNodes)
                    }).end()
                }
            });
            var da, qa, Za = /^(none|table(?!-c[ea]).+)/,
                Ra = /^margin/,
                va = RegExp("^(" + ea + ")(.*)$", "i"),
                Na = RegExp("^(" + ea + ")(?!px)[a-z%]+$", "i"),
                fb = RegExp("^([+-])=(" + ea + ")", "i"),
                Xa = {
                    BODY: "block"
                },
                gb = {
                    position: "absolute",
                    visibility: "hidden",
                    display: "block"
                },
                Sa = {
                    letterSpacing: 0,
                    fontWeight: 400
                },
                ya = ["Top", "Right", "Bottom", "Left"],
                lb = ["Webkit", "O", "Moz", "ms"];
            t.fn.extend({
                css: function(b, f) {
                    return t.access(this, function(b, f, e) {
                        var c, h = {},
                            m = 0;
                        if (t.isArray(f)) {
                            e = a.getComputedStyle(b, null);
                            for (c = f.length; c > m; m++) h[f[m]] = t.css(b, f[m], !1, e);
                            return h
                        }
                        return e !== p ? t.style(b, f, e) : t.css(b, f)
                    }, b, f, 1 < arguments.length)
                },
                show: function() {
                    return g(this, !0)
                },
                hide: function() {
                    return g(this)
                },
                toggle: function(a) {
                    return "boolean" == typeof a ? a ? this.show() : this.hide() : this.each(function() {
                        d(this) ?
                            t(this).show() : t(this).hide()
                    })
                }
            });
            t.extend({
                cssHooks: {
                    opacity: {
                        get: function(a, b) {
                            if (b) {
                                var f = da(a, "opacity");
                                return "" === f ? "1" : f
                            }
                        }
                    }
                },
                cssNumber: {
                    columnCount: !0,
                    fillOpacity: !0,
                    fontWeight: !0,
                    lineHeight: !0,
                    opacity: !0,
                    order: !0,
                    orphans: !0,
                    widows: !0,
                    zIndex: !0,
                    zoom: !0
                },
                cssProps: {
                    "float": "cssFloat"
                },
                style: function(a, b, f, e) {
                    if (a && 3 !== a.nodeType && 8 !== a.nodeType && a.style) {
                        var h, m, d, w = t.camelCase(b),
                            l = a.style;
                        return b = t.cssProps[w] || (t.cssProps[w] = c(l, w)), d = t.cssHooks[b] || t.cssHooks[w], f === p ? d && "get" in d && (h =
                            d.get(a, !1, e)) !== p ? h : l[b] : (m = typeof f, "string" === m && (h = fb.exec(f)) && (f = (h[1] + 1) * h[2] + parseFloat(t.css(a, b)), m = "number"), null == f || "number" === m && isNaN(f) || ("number" !== m || t.cssNumber[w] || (f += "px"), t.support.clearCloneStyle || "" !== f || 0 !== b.indexOf("background") || (l[b] = "inherit"), d && "set" in d && (f = d.set(a, f, e)) === p || (l[b] = f)), p)
                    }
                },
                css: function(a, b, f, e) {
                    var h, m, d, w = t.camelCase(b);
                    return b = t.cssProps[w] || (t.cssProps[w] = c(a.style, w)), d = t.cssHooks[b] || t.cssHooks[w], d && "get" in d && (h = d.get(a, !0, f)), h === p && (h =
                        da(a, b, e)), "normal" === h && b in Sa && (h = Sa[b]), "" === f || f ? (m = parseFloat(h), !0 === f || t.isNumeric(m) ? m || 0 : h) : h
                }
            });
            da = function(b, f, e) {
                var c, h, m, d = (e = e || a.getComputedStyle(b, null)) ? e.getPropertyValue(f) || e[f] : p,
                    w = b.style;
                return e && ("" !== d || t.contains(b.ownerDocument, b) || (d = t.style(b, f)), Na.test(d) && Ra.test(f) && (c = w.width, h = w.minWidth, m = w.maxWidth, w.minWidth = w.maxWidth = w.width = d, d = e.width, w.width = c, w.minWidth = h, w.maxWidth = m)), d
            };
            t.each(["height", "width"], function(b, e) {
                t.cssHooks[e] = {
                    get: function(a, b, f) {
                        return b ?
                            0 === a.offsetWidth && Za.test(t.css(a, "display")) ? t.swap(a, gb, function() {
                                return h(a, e, f)
                            }) : h(a, e, f) : p
                    },
                    set: function(b, c, h) {
                        var d = h && a.getComputedStyle(b, null);
                        return f(b, c, h ? m(b, e, h, t.support.boxSizing && "border-box" === t.css(b, "boxSizing", !1, d), d) : 0)
                    }
                }
            });
            t(function() {
                t.support.reliableMarginRight || (t.cssHooks.marginRight = {
                    get: function(a, b) {
                        return b ? t.swap(a, {
                            display: "inline-block"
                        }, da, [a, "marginRight"]) : p
                    }
                });
                !t.support.pixelPosition && t.fn.position && t.each(["top", "left"], function(a, b) {
                    t.cssHooks[b] = {
                        get: function(a,
                            f) {
                            return f ? (f = da(a, b), Na.test(f) ? t(a).position()[b] + "px" : f) : p
                        }
                    }
                })
            });
            t.expr && t.expr.filters && (t.expr.filters.hidden = function(a) {
                return 0 >= a.offsetWidth && 0 >= a.offsetHeight
            }, t.expr.filters.visible = function(a) {
                return !t.expr.filters.hidden(a)
            });
            t.each({
                margin: "",
                padding: "",
                border: "Width"
            }, function(a, b) {
                t.cssHooks[a + b] = {
                    expand: function(f) {
                        var e = 0,
                            c = {};
                        for (f = "string" == typeof f ? f.split(" ") : [f]; 4 > e; e++) c[a + ya[e] + b] = f[e] || f[e - 2] || f[0];
                        return c
                    }
                };
                Ra.test(a) || (t.cssHooks[a + b].set = f)
            });
            var hb = /%20/g,
                xb = /\[\]$/,
                pb = /\r?\n/g,
                Ta = /^(?:submit|button|image|reset|file)$/i,
                Bb = /^(?:input|select|textarea|keygen)/i;
            t.fn.extend({
                serialize: function() {
                    return t.param(this.serializeArray())
                },
                serializeArray: function() {
                    return this.map(function() {
                        var a = t.prop(this, "elements");
                        return a ? t.makeArray(a) : this
                    }).filter(function() {
                        var a = this.type;
                        return this.name && !t(this).is(":disabled") && Bb.test(this.nodeName) && !Ta.test(a) && (this.checked || !ob.test(a))
                    }).map(function(a, b) {
                        var f = t(this).val();
                        return null == f ? null : t.isArray(f) ? t.map(f,
                            function(a) {
                                return {
                                    name: b.name,
                                    value: a.replace(pb, "\r\n")
                                }
                            }) : {
                            name: b.name,
                            value: f.replace(pb, "\r\n")
                        }
                    }).get()
                }
            });
            t.param = function(a, b) {
                var f, c = [],
                    h = function(a, b) {
                        b = t.isFunction(b) ? b() : null == b ? "" : b;
                        c[c.length] = encodeURIComponent(a) + "=" + encodeURIComponent(b)
                    };
                if (b === p && (b = t.ajaxSettings && t.ajaxSettings.traditional), t.isArray(a) || a.jquery && !t.isPlainObject(a)) t.each(a, function() {
                    h(this.name, this.value)
                });
                else
                    for (f in a) e(f, a[f], b, h);
                return c.join("&").replace(hb, "+")
            };
            t.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),
                function(a, b) {
                    t.fn[b] = function(a, f) {
                        return 0 < arguments.length ? this.on(b, null, a, f) : this.trigger(b)
                    }
                });
            t.fn.extend({
                hover: function(a, b) {
                    return this.mouseenter(a).mouseleave(b || a)
                },
                bind: function(a, b, f) {
                    return this.on(a, null, b, f)
                },
                unbind: function(a, b) {
                    return this.off(a, null, b)
                },
                delegate: function(a, b, f, e) {
                    return this.on(b, a, f, e)
                },
                undelegate: function(a, b, f) {
                    return 1 === arguments.length ? this.off(a, "**") : this.off(b, a || "**", f)
                }
            });
            var Ha, Ca, ib = t.now(),
                jb = /\?/,
                Cb = /#.*$/,
                qb = /([?&])_=[^&]*/,
                Db = /^(.*?):[ \t]*([^\r\n]*)$/gm,
                Eb = /^(?:GET|HEAD)$/,
                Ua = /^\/\//,
                rb = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,
                sb = t.fn.load,
                tb = {},
                bb = {},
                ub = "*/".concat("*");
            try {
                Ca = E.href
            } catch (ga) {
                Ca = N.createElement("a"), Ca.href = "", Ca = Ca.href
            }
            Ha = rb.exec(Ca.toLowerCase()) || [];
            t.fn.load = function(a, b, f) {
                if ("string" != typeof a && sb) return sb.apply(this, arguments);
                var e, c, h, m = this,
                    d = a.indexOf(" ");
                return 0 <= d && (e = a.slice(d), a = a.slice(0, d)), t.isFunction(b) ? (f = b, b = p) : b && "object" == typeof b && (c = "POST"), 0 < m.length && t.ajax({
                    url: a,
                    type: c,
                    dataType: "html",
                    data: b
                }).done(function(a) {
                    h =
                        arguments;
                    m.html(e ? t("<div>").append(t.parseHTML(a)).find(e) : a)
                }).complete(f && function(a, b) {
                    m.each(f, h || [a.responseText, b, a])
                }), this
            };
            t.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "), function(a, b) {
                t.fn[b] = function(a) {
                    return this.on(b, a)
                }
            });
            t.extend({
                active: 0,
                lastModified: {},
                etag: {},
                ajaxSettings: {
                    url: Ca,
                    type: "GET",
                    isLocal: /^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Ha[1]),
                    global: !0,
                    processData: !0,
                    async: !0,
                    contentType: "application/x-www-form-urlencoded; charset=UTF-8",
                    accepts: {
                        "*": ub,
                        text: "text/plain",
                        html: "text/html",
                        xml: "application/xml, text/xml",
                        json: "application/json, text/javascript"
                    },
                    contents: {
                        xml: /xml/,
                        html: /html/,
                        json: /json/
                    },
                    responseFields: {
                        xml: "responseXML",
                        text: "responseText",
                        json: "responseJSON"
                    },
                    converters: {
                        "* text": String,
                        "text html": !0,
                        "text json": t.parseJSON,
                        "text xml": t.parseXML
                    },
                    flatOptions: {
                        url: !0,
                        context: !0
                    }
                },
                ajaxSetup: function(a, b) {
                    return b ? r(r(a, t.ajaxSettings), b) : r(t.ajaxSettings, a)
                },
                ajaxPrefilter: n(tb),
                ajaxTransport: n(bb),
                ajax: function(a,
                    b) {
                    function f(a, b, m, w) {
                        var n, B, z, C, E = b;
                        if (2 !== K) {
                            K = 2;
                            d && clearTimeout(d);
                            e = p;
                            h = w || "";
                            A.readyState = 0 < a ? 4 : 0;
                            w = 200 <= a && 300 > a || 304 === a;
                            if (m) {
                                z = g;
                                for (var H = A, T, k, v, G, F = z.contents, ca = z.dataTypes;
                                    "*" === ca[0];) ca.shift(), T === p && (T = z.mimeType || H.getResponseHeader("Content-Type"));
                                if (T)
                                    for (k in F)
                                        if (F[k] && F[k].test(T)) {
                                            ca.unshift(k);
                                            break
                                        }
                                if (ca[0] in m) v = ca[0];
                                else {
                                    for (k in m) {
                                        if (!ca[0] || z.converters[k + " " + ca[0]]) {
                                            v = k;
                                            break
                                        }
                                        G || (G = k)
                                    }
                                    v = v || G
                                }
                                z = v ? (v !== ca[0] && ca.unshift(v), m[v]) : p
                            }
                            var J;
                            a: {
                                m = g;T = z;k = A;v = w;
                                var N,
                                    L, da;z = {};H = m.dataTypes.slice();
                                if (H[1])
                                    for (N in m.converters) z[N.toLowerCase()] = m.converters[N];
                                for (G = H.shift(); G;)
                                    if (m.responseFields[G] && (k[m.responseFields[G]] = T), !da && v && m.dataFilter && (T = m.dataFilter(T, m.dataType)), da = G, G = H.shift())
                                        if ("*" === G) G = da;
                                        else if ("*" !== da && da !== G) {
                                    if (N = z[da + " " + G] || z["* " + G], !N)
                                        for (J in z)
                                            if (L = J.split(" "), L[1] === G && (N = z[da + " " + L[0]] || z["* " + L[0]])) {
                                                !0 === N ? N = z[J] : !0 !== z[J] && (G = L[0], H.unshift(L[1]));
                                                break
                                            }
                                    if (!0 !== N)
                                        if (N && m["throws"]) T = N(T);
                                        else try {
                                            T = N(T)
                                        } catch (ga) {
                                            J = {
                                                state: "parsererror",
                                                error: N ? ga : "No conversion from " + da + " to " + G
                                            };
                                            break a
                                        }
                                }
                                J = {
                                    state: "success",
                                    data: T
                                }
                            }
                            z = J;
                            w ? (g.ifModified && (C = A.getResponseHeader("Last-Modified"), C && (t.lastModified[c] = C), C = A.getResponseHeader("etag"), C && (t.etag[c] = C)), 204 === a || "HEAD" === g.type ? E = "nocontent" : 304 === a ? E = "notmodified" : (E = z.state, n = z.data, B = z.error, w = !B)) : (B = E, (a || !E) && (E = "error", 0 > a && (a = 0)));
                            A.status = a;
                            A.statusText = (b || E) + "";
                            w ? u.resolveWith(q, [n, E, A]) : u.rejectWith(q, [A, E, B]);
                            A.statusCode(y);
                            y = p;
                            l && r.trigger(w ? "ajaxSuccess" :
                                "ajaxError", [A, g, w ? n : B]);
                            x.fireWith(q, [A, E]);
                            l && (r.trigger("ajaxComplete", [A, g]), --t.active || t.event.trigger("ajaxStop"))
                        }
                    }
                    "object" == typeof a && (b = a, a = p);
                    b = b || {};
                    var e, c, h, m, d, w, l, n, g = t.ajaxSetup({}, b),
                        q = g.context || g,
                        r = g.context && (q.nodeType || q.jquery) ? t(q) : t.event,
                        u = t.Deferred(),
                        x = t.Callbacks("once memory"),
                        y = g.statusCode || {},
                        z = {},
                        C = {},
                        K = 0,
                        E = "canceled",
                        A = {
                            readyState: 0,
                            getResponseHeader: function(a) {
                                var b;
                                if (2 === K) {
                                    if (!m)
                                        for (m = {}; b = Db.exec(h);) m[b[1].toLowerCase()] = b[2];
                                    b = m[a.toLowerCase()]
                                }
                                return null ==
                                    b ? null : b
                            },
                            getAllResponseHeaders: function() {
                                return 2 === K ? h : null
                            },
                            setRequestHeader: function(a, b) {
                                var f = a.toLowerCase();
                                return K || (a = C[f] = C[f] || a, z[a] = b), this
                            },
                            overrideMimeType: function(a) {
                                return K || (g.mimeType = a), this
                            },
                            statusCode: function(a) {
                                var b;
                                if (a)
                                    if (2 > K)
                                        for (b in a) y[b] = [y[b], a[b]];
                                    else A.always(a[A.status]);
                                return this
                            },
                            abort: function(a) {
                                a = a || E;
                                return e && e.abort(a), f(0, a), this
                            }
                        };
                    if (u.promise(A).complete = x.add, A.success = A.done, A.error = A.fail, g.url = ((a || g.url || Ca) + "").replace(Cb, "").replace(Ua,
                            Ha[1] + "//"), g.type = b.method || b.type || g.method || g.type, g.dataTypes = t.trim(g.dataType || "*").toLowerCase().match(ia) || [""], null == g.crossDomain && (w = rb.exec(g.url.toLowerCase()), g.crossDomain = !(!w || w[1] === Ha[1] && w[2] === Ha[2] && (w[3] || ("http:" === w[1] ? "80" : "443")) === (Ha[3] || ("http:" === Ha[1] ? "80" : "443")))), g.data && g.processData && "string" != typeof g.data && (g.data = t.param(g.data, g.traditional)), B(tb, g, b, A), 2 === K) return A;
                    (l = g.global) && 0 === t.active++ && t.event.trigger("ajaxStart");
                    g.type = g.type.toUpperCase();
                    g.hasContent = !Eb.test(g.type);
                    c = g.url;
                    g.hasContent || (g.data && (c = g.url += (jb.test(c) ? "&" : "?") + g.data, delete g.data), !1 === g.cache && (g.url = qb.test(c) ? c.replace(qb, "$1_=" + ib++) : c + (jb.test(c) ? "&" : "?") + "_=" + ib++));
                    g.ifModified && (t.lastModified[c] && A.setRequestHeader("If-Modified-Since", t.lastModified[c]), t.etag[c] && A.setRequestHeader("If-None-Match", t.etag[c]));
                    (g.data && g.hasContent && !1 !== g.contentType || b.contentType) && A.setRequestHeader("Content-Type", g.contentType);
                    A.setRequestHeader("Accept", g.dataTypes[0] && g.accepts[g.dataTypes[0]] ?
                        g.accepts[g.dataTypes[0]] + ("*" !== g.dataTypes[0] ? ", " + ub + "; q=0.01" : "") : g.accepts["*"]);
                    for (n in g.headers) A.setRequestHeader(n, g.headers[n]);
                    if (g.beforeSend && (!1 === g.beforeSend.call(q, A, g) || 2 === K)) return A.abort();
                    E = "abort";
                    for (n in {
                            success: 1,
                            error: 1,
                            complete: 1
                        }) A[n](g[n]);
                    if (e = B(bb, g, b, A)) {
                        A.readyState = 1;
                        l && r.trigger("ajaxSend", [A, g]);
                        g.async && 0 < g.timeout && (d = setTimeout(function() {
                            A.abort("timeout")
                        }, g.timeout));
                        try {
                            K = 1, e.send(z, f)
                        } catch (H) {
                            if (!(2 > K)) throw H;
                            f(-1, H)
                        }
                    } else f(-1, "No Transport");
                    return A
                },
                getJSON: function(a, b, f) {
                    return t.get(a, b, f, "json")
                },
                getScript: function(a, b) {
                    return t.get(a, p, b, "script")
                }
            });
            t.each(["get", "post"], function(a, b) {
                t[b] = function(a, f, e, c) {
                    return t.isFunction(f) && (c = c || e, e = f, f = p), t.ajax({
                        url: a,
                        type: b,
                        dataType: c,
                        data: f,
                        success: e
                    })
                }
            });
            t.ajaxSetup({
                accepts: {
                    script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
                },
                contents: {
                    script: /(?:java|ecma)script/
                },
                converters: {
                    "text script": function(a) {
                        return t.globalEval(a), a
                    }
                }
            });
            t.ajaxPrefilter("script",
                function(a) {
                    a.cache === p && (a.cache = !1);
                    a.crossDomain && (a.type = "GET")
                });
            t.ajaxTransport("script", function(a) {
                if (a.crossDomain) {
                    var b, f;
                    return {
                        send: function(e, c) {
                            b = t("<script>").prop({
                                async: !0,
                                charset: a.scriptCharset,
                                src: a.url
                            }).on("load error", f = function(a) {
                                b.remove();
                                f = null;
                                a && c("error" === a.type ? 404 : 200, a.type)
                            });
                            N.head.appendChild(b[0])
                        },
                        abort: function() {
                            f && f()
                        }
                    }
                }
            });
            var vb = [],
                kb = /(=)\?(?=&|$)|\?\?/;
            t.ajaxSetup({
                jsonp: "callback",
                jsonpCallback: function() {
                    var a = vb.pop() || t.expando + "_" + ib++;
                    return this[a] = !0, a
                }
            });
            t.ajaxPrefilter("json jsonp", function(b, f, e) {
                var c, h, m, d = !1 !== b.jsonp && (kb.test(b.url) ? "url" : "string" == typeof b.data && !(b.contentType || "").indexOf("application/x-www-form-urlencoded") && kb.test(b.data) && "data");
                return d || "jsonp" === b.dataTypes[0] ? (c = b.jsonpCallback = t.isFunction(b.jsonpCallback) ? b.jsonpCallback() : b.jsonpCallback, d ? b[d] = b[d].replace(kb, "$1" + c) : !1 !== b.jsonp && (b.url += (jb.test(b.url) ? "&" : "?") + b.jsonp + "=" + c), b.converters["script json"] = function() {
                    return m || t.error(c + " was not called"),
                        m[0]
                }, b.dataTypes[0] = "json", h = a[c], a[c] = function() {
                    m = arguments
                }, e.always(function() {
                    a[c] = h;
                    b[c] && (b.jsonpCallback = f.jsonpCallback, vb.push(c));
                    m && t.isFunction(h) && h(m[0]);
                    m = h = p
                }), "script") : p
            });
            t.ajaxSettings.xhr = function() {
                try {
                    return new XMLHttpRequest
                } catch (a) {}
            };
            var Va = t.ajaxSettings.xhr(),
                Fb = {
                    0: 200,
                    1223: 204
                },
                Gb = 0,
                Wa = {};
            a.ActiveXObject && t(a).on("unload", function() {
                for (var a in Wa) Wa[a]();
                Wa = p
            });
            t.support.cors = !!Va && "withCredentials" in Va;
            t.support.ajax = Va = !!Va;
            t.ajaxTransport(function(a) {
                var b;
                return t.support.cors ||
                    Va && !a.crossDomain ? {
                        send: function(f, e) {
                            var c, h, m = a.xhr();
                            if (m.open(a.type, a.url, a.async, a.username, a.password), a.xhrFields)
                                for (c in a.xhrFields) m[c] = a.xhrFields[c];
                            a.mimeType && m.overrideMimeType && m.overrideMimeType(a.mimeType);
                            a.crossDomain || f["X-Requested-With"] || (f["X-Requested-With"] = "XMLHttpRequest");
                            for (c in f) m.setRequestHeader(c, f[c]);
                            b = function(a) {
                                return function() {
                                    b && (delete Wa[h], b = m.onload = m.onerror = null, "abort" === a ? m.abort() : "error" === a ? e(m.status || 404, m.statusText) : e(Fb[m.status] || m.status,
                                        m.statusText, "string" == typeof m.responseText ? {
                                            text: m.responseText
                                        } : p, m.getAllResponseHeaders()))
                                }
                            };
                            m.onload = b();
                            m.onerror = b("error");
                            b = Wa[h = Gb++] = b("abort");
                            m.send(a.hasContent && a.data || null)
                        },
                        abort: function() {
                            b && b()
                        }
                    } : p
            });
            var Ia, $a, Hb = /^(?:toggle|show|hide)$/,
                wb = RegExp("^(?:([+-])=|)(" + ea + ")([a-z%]*)$", "i"),
                Ib = /queueHooks$/,
                Ya = [function(a, b, f) {
                    var e, c, h, m, w, l = this,
                        n = {},
                        g = a.style,
                        q = a.nodeType && d(a),
                        r = U.get(a, "fxshow");
                    f.queue || (m = t._queueHooks(a, "fx"), null == m.unqueued && (m.unqueued = 0, w = m.empty.fire,
                        m.empty.fire = function() {
                            m.unqueued || w()
                        }), m.unqueued++, l.always(function() {
                        l.always(function() {
                            m.unqueued--;
                            t.queue(a, "fx").length || m.empty.fire()
                        })
                    }));
                    1 === a.nodeType && ("height" in b || "width" in b) && (f.overflow = [g.overflow, g.overflowX, g.overflowY], "inline" === t.css(a, "display") && "none" === t.css(a, "float") && (g.display = "inline-block"));
                    f.overflow && (g.overflow = "hidden", l.always(function() {
                        g.overflow = f.overflow[0];
                        g.overflowX = f.overflow[1];
                        g.overflowY = f.overflow[2]
                    }));
                    for (e in b)
                        if (c = b[e], Hb.exec(c)) {
                            if (delete b[e],
                                h = h || "toggle" === c, c === (q ? "hide" : "show")) {
                                if ("show" !== c || !r || r[e] === p) continue;
                                q = !0
                            }
                            n[e] = r && r[e] || t.style(a, e)
                        }
                    if (!t.isEmptyObject(n))
                        for (e in r ? "hidden" in r && (q = r.hidden) : r = U.access(a, "fxshow", {}), h && (r.hidden = !q), q ? t(a).show() : l.done(function() {
                                t(a).hide()
                            }), l.done(function() {
                                var b;
                                U.remove(a, "fxshow");
                                for (b in n) t.style(a, b, n[b])
                            }), n) b = u(q ? r[e] : 0, e, l), e in r || (r[e] = b.start, q && (b.end = b.start, b.start = "width" === e || "height" === e ? 1 : 0))
                }],
                Oa = {
                    "*": [function(a, b) {
                        var f = this.createTween(a, b),
                            e = f.cur(),
                            c =
                            wb.exec(b),
                            h = c && c[3] || (t.cssNumber[a] ? "" : "px"),
                            m = (t.cssNumber[a] || "px" !== h && +e) && wb.exec(t.css(f.elem, a)),
                            d = 1,
                            w = 20;
                        if (m && m[3] !== h) {
                            h = h || m[3];
                            c = c || [];
                            m = +e || 1;
                            do d = d || ".5", m /= d, t.style(f.elem, a, m + h); while (d !== (d = f.cur() / e) && 1 !== d && --w)
                        }
                        return c && (m = f.start = +m || +e || 0, f.unit = h, f.end = c[1] ? m + (c[1] + 1) * c[2] : +c[2]), f
                    }]
                };
            t.Animation = t.extend(z, {
                tweener: function(a, b) {
                    t.isFunction(a) ? (b = a, a = ["*"]) : a = a.split(" ");
                    for (var f, e = 0, c = a.length; c > e; e++) f = a[e], Oa[f] = Oa[f] || [], Oa[f].unshift(b)
                },
                prefilter: function(a, b) {
                    b ?
                        Ya.unshift(a) : Ya.push(a)
                }
            });
            t.Tween = K;
            K.prototype = {
                constructor: K,
                init: function(a, b, f, e, c, h) {
                    this.elem = a;
                    this.prop = f;
                    this.easing = c || "swing";
                    this.options = b;
                    this.start = this.now = this.cur();
                    this.end = e;
                    this.unit = h || (t.cssNumber[f] ? "" : "px")
                },
                cur: function() {
                    var a = K.propHooks[this.prop];
                    return a && a.get ? a.get(this) : K.propHooks._default.get(this)
                },
                run: function(a) {
                    var b, f = K.propHooks[this.prop];
                    return this.pos = b = this.options.duration ? t.easing[this.easing](a, this.options.duration * a, 0, 1, this.options.duration) :
                        a, this.now = (this.end - this.start) * b + this.start, this.options.step && this.options.step.call(this.elem, this.now, this), f && f.set ? f.set(this) : K.propHooks._default.set(this), this
                }
            };
            K.prototype.init.prototype = K.prototype;
            K.propHooks = {
                _default: {
                    get: function(a) {
                        var b;
                        return null == a.elem[a.prop] || a.elem.style && null != a.elem.style[a.prop] ? (b = t.css(a.elem, a.prop, ""), b && "auto" !== b ? b : 0) : a.elem[a.prop]
                    },
                    set: function(a) {
                        t.fx.step[a.prop] ? t.fx.step[a.prop](a) : a.elem.style && (null != a.elem.style[t.cssProps[a.prop]] || t.cssHooks[a.prop]) ?
                            t.style(a.elem, a.prop, a.now + a.unit) : a.elem[a.prop] = a.now
                    }
                }
            };
            K.propHooks.scrollTop = K.propHooks.scrollLeft = {
                set: function(a) {
                    a.elem.nodeType && a.elem.parentNode && (a.elem[a.prop] = a.now)
                }
            };
            t.each(["toggle", "show", "hide"], function(a, b) {
                var f = t.fn[b];
                t.fn[b] = function(a, e, c) {
                    return null == a || "boolean" == typeof a ? f.apply(this, arguments) : this.animate(C(b, !0), a, e, c)
                }
            });
            t.fn.extend({
                fadeTo: function(a, b, f, e) {
                    return this.filter(d).css("opacity", 0).show().end().animate({
                        opacity: b
                    }, a, f, e)
                },
                animate: function(a, b, f, e) {
                    var c =
                        t.isEmptyObject(a),
                        h = t.speed(b, f, e);
                    b = function() {
                        var b = z(this, t.extend({}, a), h);
                        (c || U.get(this, "finish")) && b.stop(!0)
                    };
                    return b.finish = b, c || !1 === h.queue ? this.each(b) : this.queue(h.queue, b)
                },
                stop: function(a, b, f) {
                    var e = function(a) {
                        var b = a.stop;
                        delete a.stop;
                        b(f)
                    };
                    return "string" != typeof a && (f = b, b = a, a = p), b && !1 !== a && this.queue(a || "fx", []), this.each(function() {
                        var b = !0,
                            c = null != a && a + "queueHooks",
                            h = t.timers,
                            m = U.get(this);
                        if (c) m[c] && m[c].stop && e(m[c]);
                        else
                            for (c in m) m[c] && m[c].stop && Ib.test(c) && e(m[c]);
                        for (c =
                            h.length; c--;) h[c].elem !== this || null != a && h[c].queue !== a || (h[c].anim.stop(f), b = !1, h.splice(c, 1));
                        !b && f || t.dequeue(this, a)
                    })
                },
                finish: function(a) {
                    return !1 !== a && (a = a || "fx"), this.each(function() {
                        var b, f = U.get(this),
                            e = f[a + "queue"];
                        b = f[a + "queueHooks"];
                        var c = t.timers,
                            h = e ? e.length : 0;
                        f.finish = !0;
                        t.queue(this, a, []);
                        b && b.stop && b.stop.call(this, !0);
                        for (b = c.length; b--;) c[b].elem === this && c[b].queue === a && (c[b].anim.stop(!0), c.splice(b, 1));
                        for (b = 0; h > b; b++) e[b] && e[b].finish && e[b].finish.call(this);
                        delete f.finish
                    })
                }
            });
            t.each({
                slideDown: C("show"),
                slideUp: C("hide"),
                slideToggle: C("toggle"),
                fadeIn: {
                    opacity: "show"
                },
                fadeOut: {
                    opacity: "hide"
                },
                fadeToggle: {
                    opacity: "toggle"
                }
            }, function(a, b) {
                t.fn[a] = function(a, f, e) {
                    return this.animate(b, a, f, e)
                }
            });
            t.speed = function(a, b, f) {
                var e = a && "object" == typeof a ? t.extend({}, a) : {
                    complete: f || !f && b || t.isFunction(a) && a,
                    duration: a,
                    easing: f && b || b && !t.isFunction(b) && b
                };
                return e.duration = t.fx.off ? 0 : "number" == typeof e.duration ? e.duration : e.duration in t.fx.speeds ? t.fx.speeds[e.duration] : t.fx.speeds._default,
                    (null == e.queue || !0 === e.queue) && (e.queue = "fx"), e.old = e.complete, e.complete = function() {
                        t.isFunction(e.old) && e.old.call(this);
                        e.queue && t.dequeue(this, e.queue)
                    }, e
            };
            t.easing = {
                linear: function(a) {
                    return a
                },
                swing: function(a) {
                    return .5 - Math.cos(a * Math.PI) / 2
                }
            };
            t.timers = [];
            t.fx = K.prototype.init;
            t.fx.tick = function() {
                var a, b = t.timers,
                    f = 0;
                for (Ia = t.now(); b.length > f; f++) a = b[f], a() || b[f] !== a || b.splice(f--, 1);
                b.length || t.fx.stop();
                Ia = p
            };
            t.fx.timer = function(a) {
                a() && t.timers.push(a) && t.fx.start()
            };
            t.fx.interval = 13;
            t.fx.start =
                function() {
                    $a || ($a = setInterval(t.fx.tick, t.fx.interval))
                };
            t.fx.stop = function() {
                clearInterval($a);
                $a = null
            };
            t.fx.speeds = {
                slow: 600,
                fast: 200,
                _default: 400
            };
            t.fx.step = {};
            t.expr && t.expr.filters && (t.expr.filters.animated = function(a) {
                return t.grep(t.timers, function(b) {
                    return a === b.elem
                }).length
            });
            t.fn.offset = function(a) {
                if (arguments.length) return a === p ? this : this.each(function(b) {
                    t.offset.setOffset(this, a, b)
                });
                var b, f, e = this[0],
                    c = {
                        top: 0,
                        left: 0
                    },
                    h = e && e.ownerDocument;
                if (h) return b = h.documentElement, t.contains(b,
                    e) ? (typeof e.getBoundingClientRect !== H && (c = e.getBoundingClientRect()), f = T(h), {
                    top: c.top + f.pageYOffset - b.clientTop,
                    left: c.left + f.pageXOffset - b.clientLeft
                }) : c
            };
            t.offset = {
                setOffset: function(a, b, f) {
                    var e, c, h, m, d, w, l = t.css(a, "position"),
                        n = t(a),
                        g = {};
                    "static" === l && (a.style.position = "relative");
                    d = n.offset();
                    h = t.css(a, "top");
                    w = t.css(a, "left");
                    ("absolute" === l || "fixed" === l) && -1 < (h + w).indexOf("auto") ? (e = n.position(), m = e.top, c = e.left) : (m = parseFloat(h) || 0, c = parseFloat(w) || 0);
                    t.isFunction(b) && (b = b.call(a, f, d));
                    null != b.top && (g.top = b.top - d.top + m);
                    null != b.left && (g.left = b.left - d.left + c);
                    "using" in b ? b.using.call(a, g) : n.css(g)
                }
            };
            t.fn.extend({
                position: function() {
                    if (this[0]) {
                        var a, b, f = this[0],
                            e = {
                                top: 0,
                                left: 0
                            };
                        return "fixed" === t.css(f, "position") ? b = f.getBoundingClientRect() : (a = this.offsetParent(), b = this.offset(), t.nodeName(a[0], "html") || (e = a.offset()), e.top += t.css(a[0], "borderTopWidth", !0), e.left += t.css(a[0], "borderLeftWidth", !0)), {
                            top: b.top - e.top - t.css(f, "marginTop", !0),
                            left: b.left - e.left - t.css(f, "marginLeft", !0)
                        }
                    }
                },
                offsetParent: function() {
                    return this.map(function() {
                        for (var a = this.offsetParent || L; a && !t.nodeName(a, "html") && "static" === t.css(a, "position");) a = a.offsetParent;
                        return a || L
                    })
                }
            });
            t.each({
                scrollLeft: "pageXOffset",
                scrollTop: "pageYOffset"
            }, function(b, f) {
                var e = "pageYOffset" === f;
                t.fn[b] = function(c) {
                    return t.access(this, function(b, c, h) {
                        var m = T(b);
                        return h === p ? m ? m[f] : b[c] : (m ? m.scrollTo(e ? a.pageXOffset : h, e ? h : a.pageYOffset) : b[c] = h, p)
                    }, b, c, arguments.length, null)
                }
            });
            t.each({
                Height: "height",
                Width: "width"
            }, function(a,
                b) {
                t.each({
                    padding: "inner" + a,
                    content: b,
                    "": "outer" + a
                }, function(f, e) {
                    t.fn[e] = function(e, c) {
                        var h = arguments.length && (f || "boolean" != typeof e),
                            m = f || (!0 === e || !0 === c ? "margin" : "border");
                        return t.access(this, function(b, f, e) {
                            var c;
                            return t.isWindow(b) ? b.document.documentElement["client" + a] : 9 === b.nodeType ? (c = b.documentElement, Math.max(b.body["scroll" + a], c["scroll" + a], b.body["offset" + a], c["offset" + a], c["client" + a])) : e === p ? t.css(b, f, m) : t.style(b, f, e, m)
                        }, b, h ? e : p, h, null)
                    }
                })
            });
            t.fn.size = function() {
                return this.length
            };
            t.fn.andSelf = t.fn.addBack;
            "object" == typeof module && module && "object" == typeof module.exports ? module.exports = t : "function" == typeof define && define.amd && define("jquery", [], function() {
                return t
            });
            "object" == typeof a && "object" == typeof a.document && (a.jQuery = a.$ = t)
        })(window);
        if ("undefined" == typeof jQuery) throw Error("Bootstrap's JavaScript requires jQuery"); + function(a) {
            a = a.fn.jquery.split(" ")[0].split(".");
            if (2 > a[0] && 9 > a[1] || 1 == a[0] && 9 == a[1] && 1 > a[2]) throw Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher");
        }(jQuery); + function(a) {
            function p() {
                var a = document.createElement("bootstrap"),
                    p = {
                        WebkitTransition: "webkitTransitionEnd",
                        MozTransition: "transitionend",
                        OTransition: "oTransitionEnd otransitionend",
                        transition: "transitionend"
                    },
                    v;
                for (v in p)
                    if (void 0 !== a.style[v]) return {
                        end: p[v]
                    };
                return !1
            }
            a.fn.emulateTransitionEnd = function(k) {
                var p = !1,
                    v = this;
                a(this).one("bsTransitionEnd", function() {
                    p = !0
                });
                return setTimeout(function() {
                    p || a(v).trigger(a.support.transition.end)
                }, k), this
            };
            a(function() {
                a.support.transition = p();
                a.support.transition &&
                    (a.event.special.bsTransitionEnd = {
                        bindType: a.support.transition.end,
                        delegateType: a.support.transition.end,
                        handle: function(k) {
                            return a(k.target).is(this) ? k.handleObj.handler.apply(this, arguments) : void 0
                        }
                    })
            })
        }(jQuery); + function(a) {
            var p = function(k) {
                a(k).on("click", '[data-dismiss="alert"]', this.close)
            };
            p.VERSION = "3.3.4";
            p.TRANSITION_DURATION = 150;
            p.prototype.close = function(k) {
                function v() {
                    I.detach().trigger("closed.bs.alert").remove()
                }
                var F = a(this),
                    M = F.attr("data-target");
                M || (M = F.attr("href"), M = M && M.replace(/.*(?=#[^\s]*$)/, ""));
                var I = a(M);
                k && k.preventDefault();
                I.length || (I = F.closest(".alert"));
                I.trigger(k = a.Event("close.bs.alert"));
                k.isDefaultPrevented() || (I.removeClass("in"), a.support.transition && I.hasClass("fade") ?
                    I.one("bsTransitionEnd", v).emulateTransitionEnd(p.TRANSITION_DURATION) : v())
            };
            var k = a.fn.alert;
            a.fn.alert = function(k) {
                return this.each(function() {
                    var v = a(this),
                        F = v.data("bs.alert");
                    F || v.data("bs.alert", F = new p(this));
                    "string" == typeof k && F[k].call(v)
                })
            };
            a.fn.alert.Constructor = p;
            a.fn.alert.noConflict = function() {
                return a.fn.alert = k, this
            };
            a(document).on("click.bs.alert.data-api", '[data-dismiss="alert"]', p.prototype.close)
        }(jQuery); + function(a) {
            function p(v) {
                return this.each(function() {
                    var F = a(this),
                        p = F.data("bs.button"),
                        I = "object" == typeof v && v;
                    p || F.data("bs.button", p = new k(this, I));
                    "toggle" == v ? p.toggle() : v && p.setState(v)
                })
            }
            var k = function(v, F) {
                this.$element = a(v);
                this.options = a.extend({}, k.DEFAULTS, F);
                this.isLoading = !1
            };
            k.VERSION = "3.3.4";
            k.DEFAULTS = {
                loadingText: "loading..."
            };
            k.prototype.setState = function(k) {
                var F = this.$element,
                    p = F.is("input") ? "val" : "html",
                    I = F.data();
                k += "Text";
                null == I.resetText && F.data("resetText", F[p]());
                setTimeout(a.proxy(function() {
                    F[p](null ==
                        I[k] ? this.options[k] : I[k]);
                    "loadingText" == k ? (this.isLoading = !0, F.addClass("disabled").attr("disabled", "disabled")) : this.isLoading && (this.isLoading = !1, F.removeClass("disabled").removeAttr("disabled"))
                }, this), 0)
            };
            k.prototype.toggle = function() {
                var a = !0,
                    k = this.$element.closest('[data-toggle="buttons"]');
                if (k.length) {
                    var p = this.$element.find("input");
                    "radio" == p.prop("type") && (p.prop("checked") && this.$element.hasClass("active") ? a = !1 : k.find(".active").removeClass("active"));
                    a && p.prop("checked", !this.$element.hasClass("active")).trigger("change")
                } else this.$element.attr("aria-pressed", !this.$element.hasClass("active"));
                a && this.$element.toggleClass("active")
            };
            var D = a.fn.button;
            a.fn.button = p;
            a.fn.button.Constructor = k;
            a.fn.button.noConflict = function() {
                return a.fn.button = D, this
            };
            a(document).on("click.bs.button.data-api", '[data-toggle^="button"]', function(k) {
                var F = a(k.target);
                F.hasClass("btn") || (F = F.closest(".btn"));
                p.call(F, "toggle");
                k.preventDefault()
            }).on("focus.bs.button.data-api blur.bs.button.data-api", '[data-toggle^="button"]', function(k) {
                a(k.target).closest(".btn").toggleClass("focus",
                    /^focus(in)?$/.test(k.type))
            })
        }(jQuery); + function(a) {
            function p(v) {
                return this.each(function() {
                    var p = a(this),
                        I = p.data("bs.carousel"),
                        D = a.extend({}, k.DEFAULTS, p.data(), "object" == typeof v && v),
                        O = "string" == typeof v ? v : D.slide;
                    I || p.data("bs.carousel", I = new k(this, D));
                    "number" == typeof v ? I.to(v) : O ? I[O]() : D.interval && I.pause().cycle()
                })
            }
            var k = function(k, v) {
                this.$element = a(k);
                this.$indicators = this.$element.find(".carousel-indicators");
                this.options = v;
                this.$items = this.$active = this.interval = this.sliding = this.paused = null;
                this.options.keyboard && this.$element.on("keydown.bs.carousel",
                    a.proxy(this.keydown, this));
                "hover" != this.options.pause || "ontouchstart" in document.documentElement || this.$element.on("mouseenter.bs.carousel", a.proxy(this.pause, this)).on("mouseleave.bs.carousel", a.proxy(this.cycle, this))
            };
            k.VERSION = "3.3.4";
            k.TRANSITION_DURATION = 600;
            k.DEFAULTS = {
                interval: 5E3,
                pause: "hover",
                wrap: !0,
                keyboard: !0
            };
            k.prototype.keydown = function(a) {
                if (!/input|textarea/i.test(a.target.tagName)) {
                    switch (a.which) {
                        case 37:
                            this.prev();
                            break;
                        case 39:
                            this.next();
                            break;
                        default:
                            return
                    }
                    a.preventDefault()
                }
            };
            k.prototype.cycle = function(k) {
                return k || (this.paused = !1), this.interval && clearInterval(this.interval), this.options.interval && !this.paused && (this.interval = setInterval(a.proxy(this.next, this), this.options.interval)), this
            };
            k.prototype.getItemIndex = function(a) {
                return this.$items = a.parent().children(".item"), this.$items.index(a || this.$active)
            };
            k.prototype.getItemForDirection = function(a, k) {
                var v = this.getItemIndex(k);
                return ("prev" == a && 0 === v || "next" == a && v == this.$items.length - 1) && !this.options.wrap ? k : this.$items.eq((v +
                    ("prev" == a ? -1 : 1)) % this.$items.length)
            };
            k.prototype.to = function(a) {
                var k = this,
                    v = this.getItemIndex(this.$active = this.$element.find(".item.active"));
                return a > this.$items.length - 1 || 0 > a ? void 0 : this.sliding ? this.$element.one("slid.bs.carousel", function() {
                    k.to(a)
                }) : v == a ? this.pause().cycle() : this.slide(a > v ? "next" : "prev", this.$items.eq(a))
            };
            k.prototype.pause = function(k) {
                return k || (this.paused = !0), this.$element.find(".next, .prev").length && a.support.transition && (this.$element.trigger(a.support.transition.end),
                    this.cycle(!0)), this.interval = clearInterval(this.interval), this
            };
            k.prototype.next = function() {
                return this.sliding ? void 0 : this.slide("next")
            };
            k.prototype.prev = function() {
                return this.sliding ? void 0 : this.slide("prev")
            };
            k.prototype.slide = function(v, p) {
                var I = this.$element.find(".item.active"),
                    D = p || this.getItemForDirection(v, I),
                    O = this.interval,
                    P = "next" == v ? "left" : "right",
                    V = this;
                if (D.hasClass("active")) return this.sliding = !1;
                var ma = D[0],
                    fa = a.Event("slide.bs.carousel", {
                        relatedTarget: ma,
                        direction: P
                    });
                if (this.$element.trigger(fa), !fa.isDefaultPrevented()) {
                    if (this.sliding = !0, O && this.pause(), this.$indicators.length) this.$indicators.find(".active").removeClass("active"), (fa = a(this.$indicators.children()[this.getItemIndex(D)])) && fa.addClass("active");
                    var aa = a.Event("slid.bs.carousel", {
                        relatedTarget: ma,
                        direction: P
                    });
                    return a.support.transition && this.$element.hasClass("slide") ? (D.addClass(v), D[0].offsetWidth, I.addClass(P), D.addClass(P), I.one("bsTransitionEnd", function() {
                        D.removeClass([v, P].join(" ")).addClass("active");
                        I.removeClass(["active",
                            P
                        ].join(" "));
                        V.sliding = !1;
                        setTimeout(function() {
                            V.$element.trigger(aa)
                        }, 0)
                    }).emulateTransitionEnd(k.TRANSITION_DURATION)) : (I.removeClass("active"), D.addClass("active"), this.sliding = !1, this.$element.trigger(aa)), O && this.cycle(), this
                }
            };
            var D = a.fn.carousel;
            a.fn.carousel = p;
            a.fn.carousel.Constructor = k;
            a.fn.carousel.noConflict = function() {
                return a.fn.carousel = D, this
            };
            var v = function(k) {
                var v, I = a(this),
                    D = a(I.attr("data-target") || (v = I.attr("href")) && v.replace(/.*(?=#[^\s]+$)/, ""));
                D.hasClass("carousel") &&
                    (v = a.extend({}, D.data(), I.data()), (I = I.attr("data-slide-to")) && (v.interval = !1), p.call(D, v), I && D.data("bs.carousel").to(I), k.preventDefault())
            };
            a(document).on("click.bs.carousel.data-api", "[data-slide]", v).on("click.bs.carousel.data-api", "[data-slide-to]", v);
            a(window).on("load", function() {
                a('[data-ride="carousel"]').each(function() {
                    var k = a(this);
                    p.call(k, k.data())
                })
            })
        }(jQuery); + function(a) {
            function p(k) {
                var v;
                k = k.attr("data-target") || (v = k.attr("href")) && v.replace(/.*(?=#[^\s]+$)/, "");
                return a(k)
            }

            function k(k) {
                return this.each(function() {
                    var v = a(this),
                        p = v.data("bs.collapse"),
                        S = a.extend({}, D.DEFAULTS, v.data(), "object" == typeof k && k);
                    !p && S.toggle && /show|hide/.test(k) && (S.toggle = !1);
                    p || v.data("bs.collapse", p = new D(this, S));
                    "string" == typeof k && p[k]()
                })
            }
            var D = function(k, v) {
                this.$element = a(k);
                this.options = a.extend({}, D.DEFAULTS, v);
                this.$trigger = a('[data-toggle="collapse"][href="#' +
                    k.id + '"],[data-toggle="collapse"][data-target="#' + k.id + '"]');
                this.transitioning = null;
                this.options.parent ? this.$parent = this.getParent() : this.addAriaAndCollapsedClass(this.$element, this.$trigger);
                this.options.toggle && this.toggle()
            };
            D.VERSION = "3.3.4";
            D.TRANSITION_DURATION = 350;
            D.DEFAULTS = {
                toggle: !0
            };
            D.prototype.dimension = function() {
                return this.$element.hasClass("width") ? "width" : "height"
            };
            D.prototype.show = function() {
                if (!this.transitioning && !this.$element.hasClass("in")) {
                    var v, p = this.$parent && this.$parent.children(".panel").children(".in, .collapsing");
                    if (!(p && p.length && (v = p.data("bs.collapse"), v && v.transitioning))) {
                        var I = a.Event("show.bs.collapse");
                        if (this.$element.trigger(I), !I.isDefaultPrevented()) {
                            p && p.length && (k.call(p, "hide"), v || p.data("bs.collapse", null));
                            var S = this.dimension();
                            this.$element.removeClass("collapse").addClass("collapsing")[S](0).attr("aria-expanded", !0);
                            this.$trigger.removeClass("collapsed").attr("aria-expanded", !0);
                            this.transitioning = 1;
                            v = function() {
                                this.$element.removeClass("collapsing").addClass("collapse in")[S]("");
                                this.transitioning =
                                    0;
                                this.$element.trigger("shown.bs.collapse")
                            };
                            if (!a.support.transition) return v.call(this);
                            p = a.camelCase(["scroll", S].join("-"));
                            this.$element.one("bsTransitionEnd", a.proxy(v, this)).emulateTransitionEnd(D.TRANSITION_DURATION)[S](this.$element[0][p])
                        }
                    }
                }
            };
            D.prototype.hide = function() {
                if (!this.transitioning && this.$element.hasClass("in")) {
                    var k = a.Event("hide.bs.collapse");
                    if (this.$element.trigger(k), !k.isDefaultPrevented()) {
                        k = this.dimension();
                        this.$element[k](this.$element[k]())[0].offsetHeight;
                        this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded", !1);
                        this.$trigger.addClass("collapsed").attr("aria-expanded", !1);
                        this.transitioning = 1;
                        var v = function() {
                            this.transitioning = 0;
                            this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")
                        };
                        return a.support.transition ? void this.$element[k](0).one("bsTransitionEnd", a.proxy(v, this)).emulateTransitionEnd(D.TRANSITION_DURATION) : v.call(this)
                    }
                }
            };
            D.prototype.toggle = function() {
                this[this.$element.hasClass("in") ? "hide" : "show"]()
            };
            D.prototype.getParent = function() {
                return a(this.options.parent).find('[data-toggle="collapse"][data-parent="' +
                    this.options.parent + '"]').each(a.proxy(function(k, v) {
                    var I = a(v);
                    this.addAriaAndCollapsedClass(p(I), I)
                }, this)).end()
            };
            D.prototype.addAriaAndCollapsedClass = function(a, k) {
                var v = a.hasClass("in");
                a.attr("aria-expanded", v);
                k.toggleClass("collapsed", !v).attr("aria-expanded", v)
            };
            var v = a.fn.collapse;
            a.fn.collapse = k;
            a.fn.collapse.Constructor = D;
            a.fn.collapse.noConflict = function() {
                return a.fn.collapse = v, this
            };
            a(document).on("click.bs.collapse.data-api", '[data-toggle="collapse"]', function(v) {
                var D = a(this);
                D.attr("data-target") ||
                    v.preventDefault();
                v = p(D);
                D = v.data("bs.collapse") ? "toggle" : D.data();
                k.call(v, D)
            })
        }(jQuery); + function(a) {
            function p(p) {
                p && 3 === p.which || (a(D).remove(), a(v).each(function() {
                    var v = a(this),
                        F = k(v),
                        D = {
                            relatedTarget: this
                        };
                    F.hasClass("open") && (F.trigger(p = a.Event("hide.bs.dropdown", D)), p.isDefaultPrevented() || (v.attr("aria-expanded", "false"), F.removeClass("open").trigger("hidden.bs.dropdown", D)))
                }))
            }

            function k(k) {
                var v = k.attr("data-target");
                v || (v = k.attr("href"), v = v && /#[A-Za-z]/.test(v) && v.replace(/.*(?=#[^\s]*$)/, ""));
                return (v = v && a(v)) && v.length ? v : k.parent()
            }
            var D = ".dropdown-backdrop",
                v = '[data-toggle="dropdown"]',
                F = function(k) {
                    a(k).on("click.bs.dropdown", this.toggle)
                };
            F.VERSION = "3.3.4";
            F.prototype.toggle = function(v) {
                var F = a(this);
                if (!F.is(".disabled, :disabled")) {
                    var D = k(F),
                        M = D.hasClass("open");
                    if (p(), !M) {
                        "ontouchstart" in document.documentElement && !D.closest(".navbar-nav").length && a('<div class="dropdown-backdrop"/>').insertAfter(a(this)).on("click", p);
                        M = {
                            relatedTarget: this
                        };
                        if (D.trigger(v = a.Event("show.bs.dropdown", M)), v.isDefaultPrevented()) return;
                        F.trigger("focus").attr("aria-expanded", "true");
                        D.toggleClass("open").trigger("shown.bs.dropdown",
                            M)
                    }
                    return !1
                }
            };
            F.prototype.keydown = function(p) {
                if (/(38|40|27|32)/.test(p.which) && !/input|textarea/i.test(p.target.tagName)) {
                    var F = a(this);
                    if (p.preventDefault(), p.stopPropagation(), !F.is(".disabled, :disabled")) {
                        var D = k(F),
                            M = D.hasClass("open");
                        if (!M && 27 != p.which || M && 27 == p.which) return 27 == p.which && D.find(v).trigger("focus"), F.trigger("click");
                        F = D.find('[role="menu"] li:not(.disabled):visible a, [role="listbox"] li:not(.disabled):visible a');
                        F.length && (D = F.index(p.target), 38 == p.which && 0 < D && D--, 40 == p.which &&
                            D < F.length - 1 && D++, ~D || (D = 0), F.eq(D).trigger("focus"))
                    }
                }
            };
            var M = a.fn.dropdown;
            a.fn.dropdown = function(k) {
                return this.each(function() {
                    var v = a(this),
                        p = v.data("bs.dropdown");
                    p || v.data("bs.dropdown", p = new F(this));
                    "string" == typeof k && p[k].call(v)
                })
            };
            a.fn.dropdown.Constructor = F;
            a.fn.dropdown.noConflict = function() {
                return a.fn.dropdown = M, this
            };
            a(document).on("click.bs.dropdown.data-api", p).on("click.bs.dropdown.data-api", ".dropdown form", function(a) {
                a.stopPropagation()
            }).on("click.bs.dropdown.data-api", v,
                F.prototype.toggle).on("keydown.bs.dropdown.data-api", v, F.prototype.keydown).on("keydown.bs.dropdown.data-api", '[role="menu"]', F.prototype.keydown).on("keydown.bs.dropdown.data-api", '[role="listbox"]', F.prototype.keydown)
        }(jQuery); + function(a) {
            function p(v, p) {
                return this.each(function() {
                    var D = a(this),
                        I = D.data("bs.modal"),
                        S = a.extend({}, k.DEFAULTS, D.data(), "object" == typeof v && v);
                    I || D.data("bs.modal", I = new k(this, S));
                    "string" == typeof v ? I[v](p) : S.show && I.show(p)
                })
            }
            var k = function(k, p) {
                this.options = p;
                this.$body = a(document.body);
                this.$element = a(k);
                this.$dialog = this.$element.find(".modal-dialog");
                this.originalBodyPad = this.isShown = this.$backdrop = null;
                this.scrollbarWidth = 0;
                this.ignoreBackdropClick = !1;
                this.options.remote && this.$element.find(".modal-content").load(this.options.remote,
                    a.proxy(function() {
                        this.$element.trigger("loaded.bs.modal")
                    }, this))
            };
            k.VERSION = "3.3.4";
            k.TRANSITION_DURATION = 300;
            k.BACKDROP_TRANSITION_DURATION = 150;
            k.DEFAULTS = {
                backdrop: !0,
                keyboard: !0,
                show: !0
            };
            k.prototype.toggle = function(a) {
                return this.isShown ? this.hide() : this.show(a)
            };
            k.prototype.show = function(v) {
                var p = this,
                    D = a.Event("show.bs.modal", {
                        relatedTarget: v
                    });
                this.$element.trigger(D);
                this.isShown || D.isDefaultPrevented() || (this.isShown = !0, this.checkScrollbar(), this.setScrollbar(), this.$body.addClass("modal-open"),
                    this.escape(), this.resize(), this.$element.on("click.dismiss.bs.modal", '[data-dismiss="modal"]', a.proxy(this.hide, this)), this.$dialog.on("mousedown.dismiss.bs.modal", function() {
                        p.$element.one("mouseup.dismiss.bs.modal", function(k) {
                            a(k.target).is(p.$element) && (p.ignoreBackdropClick = !0)
                        })
                    }), this.backdrop(function() {
                        var D = a.support.transition && p.$element.hasClass("fade");
                        p.$element.parent().length || p.$element.appendTo(p.$body);
                        p.$element.show().scrollTop(0);
                        p.adjustDialog();
                        D && p.$element[0].offsetWidth;
                        p.$element.addClass("in").attr("aria-hidden", !1);
                        p.enforceFocus();
                        var M = a.Event("shown.bs.modal", {
                            relatedTarget: v
                        });
                        D ? p.$dialog.one("bsTransitionEnd", function() {
                            p.$element.trigger("focus").trigger(M)
                        }).emulateTransitionEnd(k.TRANSITION_DURATION) : p.$element.trigger("focus").trigger(M)
                    }))
            };
            k.prototype.hide = function(v) {
                v && v.preventDefault();
                v = a.Event("hide.bs.modal");
                this.$element.trigger(v);
                this.isShown && !v.isDefaultPrevented() && (this.isShown = !1, this.escape(), this.resize(), a(document).off("focusin.bs.modal"),
                    this.$element.removeClass("in").attr("aria-hidden", !0).off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"), this.$dialog.off("mousedown.dismiss.bs.modal"), a.support.transition && this.$element.hasClass("fade") ? this.$element.one("bsTransitionEnd", a.proxy(this.hideModal, this)).emulateTransitionEnd(k.TRANSITION_DURATION) : this.hideModal())
            };
            k.prototype.enforceFocus = function() {
                a(document).off("focusin.bs.modal").on("focusin.bs.modal", a.proxy(function(a) {
                    this.$element[0] === a.target || this.$element.has(a.target).length ||
                        this.$element.trigger("focus")
                }, this))
            };
            k.prototype.escape = function() {
                this.isShown && this.options.keyboard ? this.$element.on("keydown.dismiss.bs.modal", a.proxy(function(a) {
                    27 == a.which && this.hide()
                }, this)) : this.isShown || this.$element.off("keydown.dismiss.bs.modal")
            };
            k.prototype.resize = function() {
                this.isShown ? a(window).on("resize.bs.modal", a.proxy(this.handleUpdate, this)) : a(window).off("resize.bs.modal")
            };
            k.prototype.hideModal = function() {
                var a = this;
                this.$element.hide();
                this.backdrop(function() {
                    a.$body.removeClass("modal-open");
                    a.resetAdjustments();
                    a.resetScrollbar();
                    a.$element.trigger("hidden.bs.modal")
                })
            };
            k.prototype.removeBackdrop = function() {
                this.$backdrop && this.$backdrop.remove();
                this.$backdrop = null
            };
            k.prototype.backdrop = function(v) {
                var p = this,
                    D = this.$element.hasClass("fade") ? "fade" : "";
                if (this.isShown && this.options.backdrop) {
                    var I = a.support.transition && D;
                    if (this.$backdrop = a('<div class="modal-backdrop ' + D + '" />').appendTo(this.$body), this.$element.on("click.dismiss.bs.modal", a.proxy(function(a) {
                            return this.ignoreBackdropClick ?
                                void(this.ignoreBackdropClick = !1) : void(a.target === a.currentTarget && ("static" == this.options.backdrop ? this.$element[0].focus() : this.hide()))
                        }, this)), I && this.$backdrop[0].offsetWidth, this.$backdrop.addClass("in"), v) I ? this.$backdrop.one("bsTransitionEnd", v).emulateTransitionEnd(k.BACKDROP_TRANSITION_DURATION) : v()
                } else !this.isShown && this.$backdrop ? (this.$backdrop.removeClass("in"), D = function() {
                    p.removeBackdrop();
                    v && v()
                }, a.support.transition && this.$element.hasClass("fade") ? this.$backdrop.one("bsTransitionEnd",
                    D).emulateTransitionEnd(k.BACKDROP_TRANSITION_DURATION) : D()) : v && v()
            };
            k.prototype.handleUpdate = function() {
                this.adjustDialog()
            };
            k.prototype.adjustDialog = function() {
                var a = this.$element[0].scrollHeight > document.documentElement.clientHeight;
                this.$element.css({
                    paddingLeft: !this.bodyIsOverflowing && a ? this.scrollbarWidth : "",
                    paddingRight: this.bodyIsOverflowing && !a ? this.scrollbarWidth : ""
                })
            };
            k.prototype.resetAdjustments = function() {
                this.$element.css({
                    paddingLeft: "",
                    paddingRight: ""
                })
            };
            k.prototype.checkScrollbar =
                function() {
                    var a = window.innerWidth;
                    a || (a = document.documentElement.getBoundingClientRect(), a = a.right - Math.abs(a.left));
                    this.bodyIsOverflowing = document.body.clientWidth < a;
                    this.scrollbarWidth = this.measureScrollbar()
                };
            k.prototype.setScrollbar = function() {
                var a = parseInt(this.$body.css("padding-right") || 0, 10);
                this.originalBodyPad = document.body.style.paddingRight || "";
                this.bodyIsOverflowing && this.$body.css("padding-right", a + this.scrollbarWidth)
            };
            k.prototype.resetScrollbar = function() {
                this.$body.css("padding-right",
                    this.originalBodyPad)
            };
            k.prototype.measureScrollbar = function() {
                var a = document.createElement("div");
                a.className = "modal-scrollbar-measure";
                this.$body.append(a);
                var k = a.offsetWidth - a.clientWidth;
                return this.$body[0].removeChild(a), k
            };
            var D = a.fn.modal;
            a.fn.modal = p;
            a.fn.modal.Constructor = k;
            a.fn.modal.noConflict = function() {
                return a.fn.modal = D, this
            };
            a(document).on("click.bs.modal.data-api", '[data-toggle="modal"]', function(k) {
                var D = a(this),
                    M = D.attr("href"),
                    I = a(D.attr("data-target") || M && M.replace(/.*(?=#[^\s]+$)/,
                        "")),
                    M = I.data("bs.modal") ? "toggle" : a.extend({
                        remote: !/#/.test(M) && M
                    }, I.data(), D.data());
                D.is("a") && k.preventDefault();
                I.one("show.bs.modal", function(a) {
                    a.isDefaultPrevented() || I.one("hidden.bs.modal", function() {
                        D.is(":visible") && D.trigger("focus")
                    })
                });
                p.call(I, M, this)
            })
        }(jQuery); + function(a) {
            var p = function(a, k) {
                this.$element = this.hoverState = this.timeout = this.enabled = this.options = this.type = null;
                this.init("tooltip", a, k)
            };
            p.VERSION = "3.3.4";
            p.TRANSITION_DURATION = 150;
            p.DEFAULTS = {
                animation: !0,
                placement: "top",
                selector: !1,
                template: '<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',
                trigger: "hover focus",
                title: "",
                delay: 0,
                html: !1,
                container: !1,
                viewport: {
                    selector: "body",
                    padding: 0
                }
            };
            p.prototype.init = function(k, v, p) {
                if (this.enabled = !0, this.type = k, this.$element = a(v), this.options = this.getOptions(p), this.$viewport = this.options.viewport && a(this.options.viewport.selector || this.options.viewport), this.$element[0] instanceof document.constructor && !this.options.selector) throw Error("`selector` option must be specified when initializing " + this.type + " on the window.document object!");
                k = this.options.trigger.split(" ");
                for (v = k.length; v--;)
                    if (p = k[v], "click" == p) this.$element.on("click." + this.type, this.options.selector, a.proxy(this.toggle, this));
                    else if ("manual" != p) {
                    var M = "hover" == p ? "mouseleave" : "focusout";
                    this.$element.on(("hover" == p ? "mouseenter" : "focusin") + "." + this.type, this.options.selector, a.proxy(this.enter, this));
                    this.$element.on(M + "." + this.type, this.options.selector, a.proxy(this.leave, this))
                }
                this.options.selector ? this._options = a.extend({}, this.options, {
                    trigger: "manual",
                    selector: ""
                }) : this.fixTitle()
            };
            p.prototype.getDefaults = function() {
                return p.DEFAULTS
            };
            p.prototype.getOptions = function(k) {
                return k = a.extend({}, this.getDefaults(), this.$element.data(),
                    k), k.delay && "number" == typeof k.delay && (k.delay = {
                    show: k.delay,
                    hide: k.delay
                }), k
            };
            p.prototype.getDelegateOptions = function() {
                var k = {},
                    v = this.getDefaults();
                return this._options && a.each(this._options, function(a, p) {
                    v[a] != p && (k[a] = p)
                }), k
            };
            p.prototype.enter = function(k) {
                var v = k instanceof this.constructor ? k : a(k.currentTarget).data("bs." + this.type);
                return v && v.$tip && v.$tip.is(":visible") ? void(v.hoverState = "in") : (v || (v = new this.constructor(k.currentTarget, this.getDelegateOptions()), a(k.currentTarget).data("bs." +
                    this.type, v)), clearTimeout(v.timeout), v.hoverState = "in", v.options.delay && v.options.delay.show ? void(v.timeout = setTimeout(function() {
                    "in" == v.hoverState && v.show()
                }, v.options.delay.show)) : v.show())
            };
            p.prototype.leave = function(k) {
                var v = k instanceof this.constructor ? k : a(k.currentTarget).data("bs." + this.type);
                return v || (v = new this.constructor(k.currentTarget, this.getDelegateOptions()), a(k.currentTarget).data("bs." + this.type, v)), clearTimeout(v.timeout), v.hoverState = "out", v.options.delay && v.options.delay.hide ?
                    void(v.timeout = setTimeout(function() {
                        "out" == v.hoverState && v.hide()
                    }, v.options.delay.hide)) : v.hide()
            };
            p.prototype.show = function() {
                var k = a.Event("show.bs." + this.type);
                if (this.hasContent() && this.enabled) {
                    this.$element.trigger(k);
                    var v = a.contains(this.$element[0].ownerDocument.documentElement, this.$element[0]);
                    if (!k.isDefaultPrevented() && v) {
                        var F = this,
                            k = this.tip(),
                            v = this.getUID(this.type);
                        this.setContent();
                        k.attr("id", v);
                        this.$element.attr("aria-describedby", v);
                        this.options.animation && k.addClass("fade");
                        var v = "function" == typeof this.options.placement ? this.options.placement.call(this, k[0], this.$element[0]) : this.options.placement,
                            M = /\s?auto?\s?/i,
                            I = M.test(v);
                        I && (v = v.replace(M, "") || "top");
                        k.detach().css({
                            top: 0,
                            left: 0,
                            display: "block"
                        }).addClass(v).data("bs." + this.type, this);
                        this.options.container ? k.appendTo(this.options.container) : k.insertAfter(this.$element);
                        var M = this.getPosition(),
                            S = k[0].offsetWidth,
                            O = k[0].offsetHeight;
                        if (I) {
                            var I = v,
                                P = this.options.container ? a(this.options.container) : this.$element.parent(),
                                P = this.getPosition(P),
                                v = "bottom" == v && M.bottom + O > P.bottom ? "top" : "top" == v && M.top - O < P.top ? "bottom" : "right" == v && M.right + S > P.width ? "left" : "left" == v && M.left - S < P.left ? "right" : v;
                            k.removeClass(I).addClass(v)
                        }
                        M = this.getCalculatedOffset(v, M, S, O);
                        this.applyPlacement(M, v);
                        v = function() {
                            var a = F.hoverState;
                            F.$element.trigger("shown.bs." + F.type);
                            F.hoverState = null;
                            "out" == a && F.leave(F)
                        };
                        a.support.transition && this.$tip.hasClass("fade") ? k.one("bsTransitionEnd", v).emulateTransitionEnd(p.TRANSITION_DURATION) : v()
                    }
                }
            };
            p.prototype.applyPlacement =
                function(k, v) {
                    var p = this.tip(),
                        M = p[0].offsetWidth,
                        I = p[0].offsetHeight,
                        S = parseInt(p.css("margin-top"), 10),
                        O = parseInt(p.css("margin-left"), 10);
                    isNaN(S) && (S = 0);
                    isNaN(O) && (O = 0);
                    k.top += S;
                    k.left += O;
                    a.offset.setOffset(p[0], a.extend({
                        using: function(a) {
                            p.css({
                                top: Math.round(a.top),
                                left: Math.round(a.left)
                            })
                        }
                    }, k), 0);
                    p.addClass("in");
                    var O = p[0].offsetWidth,
                        P = p[0].offsetHeight;
                    "top" == v && P != I && (k.top = k.top + I - P);
                    var V = this.getViewportAdjustedDelta(v, k, O, P);
                    V.left ? k.left += V.left : k.top += V.top;
                    M = (S = /top|bottom/.test(v)) ?
                        2 * V.left - M + O : 2 * V.top - I + P;
                    I = S ? "offsetWidth" : "offsetHeight";
                    p.offset(k);
                    this.replaceArrow(M, p[0][I], S)
                };
            p.prototype.replaceArrow = function(a, k, p) {
                this.arrow().css(p ? "left" : "top", 50 * (1 - a / k) + "%").css(p ? "top" : "left", "")
            };
            p.prototype.setContent = function() {
                var a = this.tip(),
                    k = this.getTitle();
                a.find(".tooltip-inner")[this.options.html ? "html" : "text"](k);
                a.removeClass("fade in top bottom left right")
            };
            p.prototype.hide = function(k) {
                function v() {
                    "in" != F.hoverState && M.detach();
                    F.$element.removeAttr("aria-describedby").trigger("hidden.bs." +
                        F.type);
                    k && k()
                }
                var F = this,
                    M = a(this.$tip),
                    I = a.Event("hide.bs." + this.type);
                return this.$element.trigger(I), I.isDefaultPrevented() ? void 0 : (M.removeClass("in"), a.support.transition && M.hasClass("fade") ? M.one("bsTransitionEnd", v).emulateTransitionEnd(p.TRANSITION_DURATION) : v(), this.hoverState = null, this)
            };
            p.prototype.fixTitle = function() {
                var a = this.$element;
                (a.attr("title") || "string" != typeof a.attr("data-original-title")) && a.attr("data-original-title", a.attr("title") || "").attr("title", "")
            };
            p.prototype.hasContent =
                function() {
                    return this.getTitle()
                };
            p.prototype.getPosition = function(k) {
                k = k || this.$element;
                var v = k[0],
                    p = "BODY" == v.tagName,
                    v = v.getBoundingClientRect();
                null == v.width && (v = a.extend({}, v, {
                    width: v.right - v.left,
                    height: v.bottom - v.top
                }));
                var M = p ? {
                    top: 0,
                    left: 0
                } : k.offset();
                k = {
                    scroll: p ? document.documentElement.scrollTop || document.body.scrollTop : k.scrollTop()
                };
                p = p ? {
                    width: a(window).width(),
                    height: a(window).height()
                } : null;
                return a.extend({}, v, k, p, M)
            };
            p.prototype.getCalculatedOffset = function(a, k, p, M) {
                return "bottom" ==
                    a ? {
                        top: k.top + k.height,
                        left: k.left + k.width / 2 - p / 2
                    } : "top" == a ? {
                        top: k.top - M,
                        left: k.left + k.width / 2 - p / 2
                    } : "left" == a ? {
                        top: k.top + k.height / 2 - M / 2,
                        left: k.left - p
                    } : {
                        top: k.top + k.height / 2 - M / 2,
                        left: k.left + k.width
                    }
            };
            p.prototype.getViewportAdjustedDelta = function(a, k, p, M) {
                var I = {
                    top: 0,
                    left: 0
                };
                if (!this.$viewport) return I;
                var S = this.options.viewport && this.options.viewport.padding || 0,
                    O = this.getPosition(this.$viewport);
                /right|left/.test(a) ? (p = k.top - S - O.scroll, k = k.top + S - O.scroll + M, p < O.top ? I.top = O.top - p : k > O.top + O.height && (I.top =
                    O.top + O.height - k)) : (M = k.left - S, k = k.left + S + p, M < O.left ? I.left = O.left - M : k > O.width && (I.left = O.left + O.width - k));
                return I
            };
            p.prototype.getTitle = function() {
                var a = this.$element,
                    k = this.options;
                return a.attr("data-original-title") || ("function" == typeof k.title ? k.title.call(a[0]) : k.title)
            };
            p.prototype.getUID = function(a) {
                do a += ~~(1E6 * Math.random()); while (document.getElementById(a));
                return a
            };
            p.prototype.tip = function() {
                return this.$tip = this.$tip || a(this.options.template)
            };
            p.prototype.arrow = function() {
                return this.$arrow =
                    this.$arrow || this.tip().find(".tooltip-arrow")
            };
            p.prototype.enable = function() {
                this.enabled = !0
            };
            p.prototype.disable = function() {
                this.enabled = !1
            };
            p.prototype.toggleEnabled = function() {
                this.enabled = !this.enabled
            };
            p.prototype.toggle = function(k) {
                var p = this;
                k && (p = a(k.currentTarget).data("bs." + this.type), p || (p = new this.constructor(k.currentTarget, this.getDelegateOptions()), a(k.currentTarget).data("bs." + this.type, p)));
                p.tip().hasClass("in") ? p.leave(p) : p.enter(p)
            };
            p.prototype.destroy = function() {
                var a = this;
                clearTimeout(this.timeout);
                this.hide(function() {
                    a.$element.off("." + a.type).removeData("bs." + a.type)
                })
            };
            var k = a.fn.tooltip;
            a.fn.tooltip = function(k) {
                return this.each(function() {
                    var v = a(this),
                        F = v.data("bs.tooltip"),
                        M = "object" == typeof k && k;
                    !F && /destroy|hide/.test(k) || (F || v.data("bs.tooltip", F = new p(this, M)), "string" != typeof k || F[k]())
                })
            };
            a.fn.tooltip.Constructor = p;
            a.fn.tooltip.noConflict = function() {
                return a.fn.tooltip = k, this
            }
        }(jQuery); + function(a) {
            var p = function(a, k) {
                this.init("popover", a, k)
            };
            if (!a.fn.tooltip) throw Error("Popover requires tooltip.js");
            p.VERSION = "3.3.4";
            p.DEFAULTS = a.extend({}, a.fn.tooltip.Constructor.DEFAULTS, {
                placement: "right",
                trigger: "click",
                content: "",
                template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'
            });
            p.prototype = a.extend({}, a.fn.tooltip.Constructor.prototype);
            p.prototype.constructor = p;
            p.prototype.getDefaults = function() {
                return p.DEFAULTS
            };
            p.prototype.setContent = function() {
                var a = this.tip(),
                    k = this.getTitle(),
                    p = this.getContent();
                a.find(".popover-title")[this.options.html ? "html" : "text"](k);
                a.find(".popover-content").children().detach().end()[this.options.html ? "string" == typeof p ? "html" : "append" : "text"](p);
                a.removeClass("fade top bottom left right in");
                a.find(".popover-title").html() || a.find(".popover-title").hide()
            };
            p.prototype.hasContent = function() {
                return this.getTitle() || this.getContent()
            };
            p.prototype.getContent = function() {
                var a = this.$element,
                    k = this.options;
                return a.attr("data-content") || ("function" == typeof k.content ? k.content.call(a[0]) : k.content)
            };
            p.prototype.arrow = function() {
                return this.$arrow = this.$arrow || this.tip().find(".arrow")
            };
            var k = a.fn.popover;
            a.fn.popover = function(k) {
                return this.each(function() {
                    var v = a(this),
                        F = v.data("bs.popover"),
                        M = "object" == typeof k && k;
                    !F && /destroy|hide/.test(k) || (F || v.data("bs.popover", F = new p(this, M)), "string" != typeof k || F[k]())
                })
            };
            a.fn.popover.Constructor = p;
            a.fn.popover.noConflict = function() {
                return a.fn.popover =
                    k, this
            }
        }(jQuery); + function(a) {
            function p(k, F) {
                this.$body = a(document.body);
                this.$scrollElement = a(a(k).is(document.body) ? window : k);
                this.options = a.extend({}, p.DEFAULTS, F);
                this.selector = (this.options.target || "") + " .nav li > a";
                this.offsets = [];
                this.targets = [];
                this.activeTarget = null;
                this.scrollHeight = 0;
                this.$scrollElement.on("scroll.bs.scrollspy", a.proxy(this.process, this));
                this.refresh();
                this.process()
            }

            function k(k) {
                return this.each(function() {
                    var F = a(this),
                        M = F.data("bs.scrollspy"),
                        I = "object" == typeof k && k;
                    M || F.data("bs.scrollspy",
                        M = new p(this, I));
                    "string" == typeof k && M[k]()
                })
            }
            p.VERSION = "3.3.4";
            p.DEFAULTS = {
                offset: 10
            };
            p.prototype.getScrollHeight = function() {
                return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)
            };
            p.prototype.refresh = function() {
                var k = this,
                    p = "offset",
                    M = 0;
                this.offsets = [];
                this.targets = [];
                this.scrollHeight = this.getScrollHeight();
                a.isWindow(this.$scrollElement[0]) || (p = "position", M = this.$scrollElement.scrollTop());
                this.$body.find(this.selector).map(function() {
                    var k =
                        a(this),
                        k = k.data("target") || k.attr("href"),
                        v = /^#./.test(k) && a(k);
                    return v && v.length && v.is(":visible") && [
                        [v[p]().top + M, k]
                    ] || null
                }).sort(function(a, k) {
                    return a[0] - k[0]
                }).each(function() {
                    k.offsets.push(this[0]);
                    k.targets.push(this[1])
                })
            };
            p.prototype.process = function() {
                var a, k = this.$scrollElement.scrollTop() + this.options.offset,
                    p = this.getScrollHeight(),
                    I = this.options.offset + p - this.$scrollElement.height(),
                    D = this.offsets,
                    O = this.targets,
                    P = this.activeTarget;
                if (this.scrollHeight != p && this.refresh(), k >= I) return P !=
                    (a = O[O.length - 1]) && this.activate(a);
                if (P && k < D[0]) return this.activeTarget = null, this.clear();
                for (a = D.length; a--;) P != O[a] && k >= D[a] && (void 0 === D[a + 1] || k < D[a + 1]) && this.activate(O[a])
            };
            p.prototype.activate = function(k) {
                this.activeTarget = k;
                this.clear();
                k = a(this.selector + '[data-target="' + k + '"],' + this.selector + '[href="' + k + '"]').parents("li").addClass("active");
                k.parent(".dropdown-menu").length && (k = k.closest("li.dropdown").addClass("active"));
                k.trigger("activate.bs.scrollspy")
            };
            p.prototype.clear = function() {
                a(this.selector).parentsUntil(this.options.target,
                    ".active").removeClass("active")
            };
            var D = a.fn.scrollspy;
            a.fn.scrollspy = k;
            a.fn.scrollspy.Constructor = p;
            a.fn.scrollspy.noConflict = function() {
                return a.fn.scrollspy = D, this
            };
            a(window).on("load.bs.scrollspy.data-api", function() {
                a('[data-spy="scroll"]').each(function() {
                    var p = a(this);
                    k.call(p, p.data())
                })
            })
        }(jQuery); + function(a) {
            function p(p) {
                return this.each(function() {
                    var v = a(this),
                        I = v.data("bs.tab");
                    I || v.data("bs.tab", I = new k(this));
                    "string" == typeof p && I[p]()
                })
            }
            var k = function(k) {
                this.element = a(k)
            };
            k.VERSION = "3.3.4";
            k.TRANSITION_DURATION = 150;
            k.prototype.show = function() {
                var k = this.element,
                    p = k.closest("ul:not(.dropdown-menu)"),
                    v = k.data("target");
                if (v || (v = k.attr("href"), v = v && v.replace(/.*(?=#[^\s]*$)/, "")), !k.parent("li").hasClass("active")) {
                    var D = p.find(".active:last a"),
                        O = a.Event("hide.bs.tab", {
                            relatedTarget: k[0]
                        }),
                        P = a.Event("show.bs.tab", {
                            relatedTarget: D[0]
                        });
                    (D.trigger(O), k.trigger(P), P.isDefaultPrevented() || O.isDefaultPrevented()) || (v = a(v), this.activate(k.closest("li"), p), this.activate(v, v.parent(), function() {
                        D.trigger({
                            type: "hidden.bs.tab",
                            relatedTarget: k[0]
                        });
                        k.trigger({
                            type: "shown.bs.tab",
                            relatedTarget: D[0]
                        })
                    }))
                }
            };
            k.prototype.activate = function(p, v, I) {
                function D() {
                    O.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !1);
                    p.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded", !0);
                    P ? (p[0].offsetWidth, p.addClass("in")) : p.removeClass("fade");
                    p.parent(".dropdown-menu").length && p.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded", !0);
                    I && I()
                }
                var O = v.find("> .active"),
                    P = I && a.support.transition && (O.length && O.hasClass("fade") || !!v.find("> .fade").length);
                O.length && P ? O.one("bsTransitionEnd", D).emulateTransitionEnd(k.TRANSITION_DURATION) : D();
                O.removeClass("in")
            };
            var D =
                a.fn.tab;
            a.fn.tab = p;
            a.fn.tab.Constructor = k;
            a.fn.tab.noConflict = function() {
                return a.fn.tab = D, this
            };
            var v = function(k) {
                k.preventDefault();
                p.call(a(this), "show")
            };
            a(document).on("click.bs.tab.data-api", '[data-toggle="tab"]', v).on("click.bs.tab.data-api", '[data-toggle="pill"]', v)
        }(jQuery); + function(a) {
            function p(p) {
                return this.each(function() {
                    var F = a(this),
                        D = F.data("bs.affix"),
                        I = "object" == typeof p && p;
                    D || F.data("bs.affix", D = new k(this, I));
                    "string" == typeof p && D[p]()
                })
            }
            var k = function(p, F) {
                this.options = a.extend({}, k.DEFAULTS, F);
                this.$target = a(this.options.target).on("scroll.bs.affix.data-api", a.proxy(this.checkPosition, this)).on("click.bs.affix.data-api", a.proxy(this.checkPositionWithEventLoop, this));
                this.$element = a(p);
                this.pinnedOffset = this.unpin = this.affixed = null;
                this.checkPosition()
            };
            k.VERSION = "3.3.4";
            k.RESET = "affix affix-top affix-bottom";
            k.DEFAULTS = {
                offset: 0,
                target: window
            };
            k.prototype.getState = function(a, k, p, I) {
                var D = this.$target.scrollTop(),
                    O = this.$element.offset(),
                    P = this.$target.height();
                if (null != p && "top" == this.affixed) return p > D ? "top" : !1;
                if ("bottom" == this.affixed) return null != p ? D + this.unpin <= O.top ? !1 : "bottom" : a - I >= D + P ? !1 : "bottom";
                var V = null == this.affixed,
                    O = V ? D : O.top;
                return null != p && p >= D ? "top" : null != I && O + (V ? P : k) >= a - I ? "bottom" : !1
            };
            k.prototype.getPinnedOffset = function() {
                if (this.pinnedOffset) return this.pinnedOffset;
                this.$element.removeClass(k.RESET).addClass("affix");
                var a = this.$target.scrollTop();
                return this.pinnedOffset = this.$element.offset().top - a
            };
            k.prototype.checkPositionWithEventLoop = function() {
                setTimeout(a.proxy(this.checkPosition, this), 1)
            };
            k.prototype.checkPosition = function() {
                if (this.$element.is(":visible")) {
                    var p = this.$element.height(),
                        F = this.options.offset,
                        D = F.top,
                        I = F.bottom,
                        S = a(document.body).height();
                    "object" != typeof F && (I = D = F);
                    "function" == typeof D && (D = F.top(this.$element));
                    "function" == typeof I &&
                        (I = F.bottom(this.$element));
                    F = this.getState(S, p, D, I);
                    if (this.affixed != F) {
                        null != this.unpin && this.$element.css("top", "");
                        var D = "affix" + (F ? "-" + F : ""),
                            O = a.Event(D + ".bs.affix");
                        if (this.$element.trigger(O), O.isDefaultPrevented()) return;
                        this.affixed = F;
                        this.unpin = "bottom" == F ? this.getPinnedOffset() : null;
                        this.$element.removeClass(k.RESET).addClass(D).trigger(D.replace("affix", "affixed") + ".bs.affix")
                    }
                    "bottom" == F && this.$element.offset({
                        top: S - p - I
                    })
                }
            };
            var D = a.fn.affix;
            a.fn.affix = p;
            a.fn.affix.Constructor = k;
            a.fn.affix.noConflict =
                function() {
                    return a.fn.affix = D, this
                };
            a(window).on("load", function() {
                a('[data-spy="affix"]').each(function() {
                    var k = a(this),
                        D = k.data();
                    D.offset = D.offset || {};
                    null != D.offsetBottom && (D.offset.bottom = D.offsetBottom);
                    null != D.offsetTop && (D.offset.top = D.offsetTop);
                    p.call(k, D)
                })
            })
        }(jQuery);
        /*
         Guriddo jqGrid JS - v5.0.1 - 2015-10-30
         Copyright(c) 2008, Tony Tomov, tony@trirand.com

         License: http://guriddo.net/?page_id=103334
        */
        ! function(a) {
            "function" == typeof define && define.amd ? define(["jquery"], a) : a(jQuery)
        }(function(a) {
            function p(a, b) {
                var c, d, l, e = [];
                if (!this || "function" != typeof a || a instanceof RegExp) throw new TypeError;
                l = this.length;
                for (c = 0; l > c; c++)
                    if (this.hasOwnProperty(c) && (d = this[c], a.call(b, d, c, this))) {
                        e.push(d);
                        break
                    }
                return e
            }
            a.jgrid = a.jgrid || {};
            a.jgrid.hasOwnProperty("defaults") || (a.jgrid.defaults = {});
            a.extend(a.jgrid, {
                version: "5.0.1",
                htmlDecode: function(a) {
                    return a && ("&nbsp;" === a || "&#160;" === a || 1 === a.length && 160 ===
                        a.charCodeAt(0)) ? "" : a ? String(a).replace(/&gt;/g, ">").replace(/&lt;/g, "<").replace(/&quot;/g, '"').replace(/&amp;/g, "&") : a
                },
                htmlEncode: function(a) {
                    return a ? String(a).replace(/&/g, "&amp;").replace(/\"/g, "&quot;").replace(/</g, "&lt;").replace(/>/g, "&gt;") : a
                },
                template: function(b) {
                    var c, h = a.makeArray(arguments).slice(1),
                        d = h.length;
                    return null == b && (b = ""), b.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function(b, f) {
                        if (!isNaN(parseInt(f, 10))) return h[parseInt(f, 10)];
                        for (c = 0; d > c; c++)
                            if (a.isArray(h[c]))
                                for (var n =
                                        h[c], g = n.length; g--;)
                                    if (f === n[g].nm) return n[g].v
                    })
                },
                msie: "Microsoft Internet Explorer" === navigator.appName,
                msiever: function() {
                    var a = -1;
                    return null != /MSIE ([0-9]{1,}[.0-9]{0,})/.exec(navigator.userAgent) && (a = parseFloat(RegExp.$1)), a
                },
                getCellIndex: function(b) {
                    b = a(b);
                    return b.is("tr") ? -1 : (b = (b.is("td") || b.is("th") ? b : b.closest("td,th"))[0], a.jgrid.msie ? a.inArray(b, b.parentNode.cells) : b.cellIndex)
                },
                stripHtml: function(a) {
                    a = String(a);
                    var b = /<("[^"]*"|'[^']*'|[^'">])*>/gi;
                    return a ? (a = a.replace(b, ""), a &&
                        "&nbsp;" !== a && "&#160;" !== a ? a.replace(/\"/g, "'") : "") : a
                },
                stripPref: function(b, c) {
                    var h = a.type(b);
                    return ("string" === h || "number" === h) && (b = String(b), c = "" !== b ? String(c).replace(String(b), "") : c), c
                },
                parse: function(b) {
                    return "while(1);" === b.substr(0, 9) && (b = b.substr(9)), "/*" === b.substr(0, 2) && (b = b.substr(2, b.length - 4)), b || (b = "{}"), !0 === a.jgrid.useJSON && "object" == typeof JSON && "function" == typeof JSON.parse ? JSON.parse(b) : eval("(" + b + ")")
                },
                parseDate: function(b, c, h, d) {
                    var l, e, n, g = /^\/Date\((([-+])?[0-9]+)(([-+])([0-9]{2})([0-9]{2}))?\)\/$/;
                    l = "string" == typeof c ? c.match(g) : null;
                    var g = function(a, b) {
                            a = String(a);
                            for (b = parseInt(b, 10) || 2; a.length < b;) a = "0" + a;
                            return a
                        },
                        r = {
                            m: 1,
                            d: 1,
                            y: 1970,
                            h: 0,
                            i: 0,
                            s: 0,
                            u: 0
                        },
                        q = 0,
                        q = function(a, b) {
                            return 0 === a ? 12 === b && (b = 0) : 12 !== b && (b += 12), b
                        },
                        u = 0;
                    if (void 0 === d && (d = a.jgrid.getRegional(this, "formatter.date")), void 0 === d.parseRe && (d.parseRe = /[#%\\\/:_;.,\t\s-]/), d.masks.hasOwnProperty(b) && (b = d.masks[b]), c && null != c)
                        if (isNaN(c - 0) || "u" !== String(b).toLowerCase())
                            if (c.constructor === Date) q = c;
                            else if (null !== l) q = new Date(parseInt(l[1],
                        10)), l[3] && (u = 60 * Number(l[5]) + Number(l[6]), u *= "-" === l[4] ? 1 : -1, u -= q.getTimezoneOffset(), q.setTime(Number(Number(q) + 6E4 * u)));
                    else {
                        "ISO8601Long" === d.srcformat && "Z" === c.charAt(c.length - 1) && (u -= (new Date).getTimezoneOffset());
                        c = String(c).replace(/\T/g, "#").replace(/\t/, "%").split(d.parseRe);
                        b = b.replace(/\T/g, "#").replace(/\t/, "%").split(d.parseRe);
                        e = 0;
                        for (n = b.length; n > e; e++) {
                            switch (b[e]) {
                                case "M":
                                    l = a.inArray(c[e], d.monthNames); - 1 !== l && 12 > l && (c[e] = l + 1, r.m = c[e]);
                                    break;
                                case "F":
                                    l = a.inArray(c[e], d.monthNames,
                                        12); - 1 !== l && 11 < l && (c[e] = l + 1 - 12, r.m = c[e]);
                                    break;
                                case "n":
                                    b[e] = "m";
                                    break;
                                case "j":
                                    b[e] = "d";
                                    break;
                                case "a":
                                    l = a.inArray(c[e], d.AmPm); - 1 !== l && 2 > l && c[e] === d.AmPm[l] && (c[e] = l, r.h = q(c[e], r.h));
                                    break;
                                case "A":
                                    l = a.inArray(c[e], d.AmPm); - 1 !== l && 1 < l && c[e] === d.AmPm[l] && (c[e] = l - 2, r.h = q(c[e], r.h));
                                    break;
                                case "g":
                                    r.h = parseInt(c[e], 10)
                            }
                            void 0 !== c[e] && (r[b[e].toLowerCase()] = parseInt(c[e], 10))
                        }
                        if (r.f && (r.m = r.f), 0 === r.m && 0 === r.y && 0 === r.d) return "&#160;";
                        r.m = parseInt(r.m, 10) - 1;
                        q = r.y;
                        70 <= q && 99 >= q ? r.y = 1900 + r.y : 0 <= q && 69 >=
                            q && (r.y = 2E3 + r.y);
                        q = new Date(r.y, r.m, r.d, r.h, r.i, r.s, r.u);
                        0 < u && q.setTime(Number(Number(q) + 6E4 * u))
                    } else q = new Date(1E3 * parseFloat(c));
                    else q = new Date(r.y, r.m, r.d, r.h, r.i, r.s, r.u);
                    if (d.userLocalTime && 0 === u && (u -= (new Date).getTimezoneOffset(), 0 < u && q.setTime(Number(Number(q) + 6E4 * u))), void 0 === h) return q;
                    d.masks.hasOwnProperty(h) ? h = d.masks[h] : h || (h = "Y-m-d");
                    b = q.getHours();
                    c = q.getMinutes();
                    r = q.getDate();
                    u = q.getMonth() + 1;
                    l = q.getTimezoneOffset();
                    e = q.getSeconds();
                    n = q.getMilliseconds();
                    var k = q.getDay(),
                        y = q.getFullYear(),
                        K = (k + 6) % 7 + 1,
                        C = (new Date(y, u - 1, r) - new Date(y, 0, 1)) / 864E5,
                        p = {
                            d: g(r),
                            D: d.dayNames[k],
                            j: r,
                            l: d.dayNames[k + 7],
                            N: K,
                            S: d.S(r),
                            w: k,
                            z: C,
                            W: 5 > K ? Math.floor((C + K - 1) / 7) + 1 : Math.floor((C + K - 1) / 7) || (4 > ((new Date(y - 1, 0, 1)).getDay() + 6) % 7 ? 53 : 52),
                            F: d.monthNames[u - 1 + 12],
                            m: g(u),
                            M: d.monthNames[u - 1],
                            n: u,
                            t: "?",
                            L: "?",
                            o: "?",
                            Y: y,
                            y: String(y).substring(2),
                            a: 12 > b ? d.AmPm[0] : d.AmPm[1],
                            A: 12 > b ? d.AmPm[2] : d.AmPm[3],
                            B: "?",
                            g: b % 12 || 12,
                            G: b,
                            h: g(b % 12 || 12),
                            H: g(b),
                            i: g(c),
                            s: g(e),
                            u: n,
                            e: "?",
                            I: "?",
                            O: (0 < l ? "-" : "+") + g(100 * Math.floor(Math.abs(l) / 60) + Math.abs(l) %
                                60, 4),
                            P: "?",
                            T: (String(q).match(/\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g) || [""]).pop().replace(/[^-+\dA-Z]/g, ""),
                            Z: "?",
                            c: "?",
                            r: "?",
                            U: Math.floor(q / 1E3)
                        };
                    return h.replace(/\\.|[dDjlNSwzWFmMntLoYyaABgGhHisueIOPTZcrU]/g, function(a) {
                        return p.hasOwnProperty(a) ? p[a] : a.substring(1)
                    })
                },
                jqID: function(a) {
                    return String(a).replace(/[!"#$%&'()*+,.\/:; <=>?@\[\\\]\^`{|}~]/g, "\\$&")
                },
                guid: 1,
                uidPref: "jqg",
                randId: function(b) {
                    return (b ||
                        a.jgrid.uidPref) + a.jgrid.guid++
                },
                getAccessor: function(a, b) {
                    var c, d, l, e = [];
                    if ("function" == typeof b) return b(a);
                    if (c = a[b], void 0 === c) try {
                        if ("string" == typeof b && (e = b.split(".")), l = e.length)
                            for (c = a; c && l--;) d = e.shift(), c = c[d]
                    } catch (g) {}
                    return c
                },
                getXmlData: function(b, c, h) {
                    var d, l = "string" == typeof c ? c.match(/^(.*)\[(\w+)\]$/) : null;
                    return "function" == typeof c ? c(b) : l && l[2] ? l[1] ? a(l[1], b).attr(l[2]) : a(b).attr(l[2]) : (d = a(c, b), h ? d : 0 < d.length ? a(d).text() : void 0)
                },
                cellWidth: function() {
                    var b = a("<div class='ui-jqgrid' style='left:10000px'><table class='ui-jqgrid-btable ui-common-table' style='width:5px;'><tr class='jqgrow'><td style='width:5px;display:block;'></td></tr></table></div>"),
                        c = b.appendTo("body").find("td").width();
                    return b.remove(), .1 < Math.abs(c - 5)
                },
                isLocalStorage: function() {
                    try {
                        return "localStorage" in window && null !== window.localStorage
                    } catch (a) {
                        return !1
                    }
                },
                getRegional: function(b, c, h) {
                    var d;
                    return void 0 !== h ? h : (b.p && b.p.regional && a.jgrid.regional && (d = a.jgrid.getAccessor(a.jgrid.regional[b.p.regional] || {}, c)), void 0 === d && (d = a.jgrid.getAccessor(a.jgrid, c)), d)
                },
                isMobile: function() {
                    try {
                        return /Android|webOS|iPhone|iPad|iPod|pocket|psp|kindle|avantgo|blazer|midori|Tablet|Palm|maemo|plucker|phone|BlackBerry|symbian|IEMobile|mobile|ZuneWP7|Windows Phone|Opera Mini/i.test(navigator.userAgent) ?
                            !0 : !1
                    } catch (a) {
                        return !1
                    }
                },
                cell_width: !0,
                ajaxOptions: {},
                from: function(b) {
                    var c = this;
                    return new function(b, f) {
                        "string" == typeof b && (b = a.data(b));
                        var d = this,
                            e = b,
                            g = !0,
                            B = !1,
                            r = f,
                            q = /[\$,%]/g,
                            u = null,
                            k = null,
                            y = 0,
                            K = !1,
                            C = "",
                            p = [],
                            A = !0;
                        if ("object" != typeof b || !b.push) throw "data provides is not an array";
                        return 0 < b.length && (A = "object" != typeof b[0] ? !1 : !0), this._hasData = function() {
                                return null === e ? !1 : 0 === e.length ? !1 : !0
                            }, this._getStr = function(a) {
                                var b = [];
                                return B && b.push("jQuery.trim("), b.push("String(" + a + ")"), B && b.push(")"),
                                    g || b.push(".toLowerCase()"), b.join("")
                            }, this._strComp = function(a) {
                                return "string" == typeof a ? ".toString()" : ""
                            }, this._group = function(a, b) {
                                return {
                                    field: a.toString(),
                                    unique: b,
                                    items: []
                                }
                            }, this._toStr = function(b) {
                                return B && (b = a.trim(b)), b = b.toString().replace(/\\/g, "\\\\").replace(/\"/g, '\\"'), g ? b : b.toLowerCase()
                            }, this._funcLoop = function(b) {
                                var f = [];
                                return a.each(e, function(a, e) {
                                    f.push(b(e))
                                }), f
                            }, this._append = function(a) {
                                var b;
                                null === r ? r = "" : r += "" === C ? " && " : C;
                                for (b = 0; y > b; b++) r += "(";
                                K && (r += "!");
                                r += "(" + a + ")";
                                K = !1;
                                C = "";
                                y = 0
                            }, this._setCommand = function(a, b) {
                                u = a;
                                k = b
                            }, this._resetNegate = function() {
                                K = !1
                            }, this._repeatCommand = function(a, b) {
                                return null === u ? d : null !== a && null !== b ? u(a, b) : null === k ? u(a) : A ? u(k, a) : u(a)
                            }, this._equals = function(a, b) {
                                return 0 === d._compare(a, b, 1)
                            }, this._compare = function(a, b, f) {
                                var e = Object.prototype.toString;
                                return void 0 === f && (f = 1), void 0 === a && (a = null), void 0 === b && (b = null), null === a && null === b ? 0 : null === a && null !== b ? 1 : null !== a && null === b ? -1 : "[object Date]" === e.call(a) && "[object Date]" === e.call(b) ?
                                    b > a ? -f : a > b ? f : 0 : (g || "number" == typeof a || "number" == typeof b || (a = String(a), b = String(b)), b > a ? -f : a > b ? f : 0)
                            }, this._performSort = function() {
                                0 !== p.length && (e = d._doSort(e, 0))
                            }, this._doSort = function(a, b) {
                                var f = p[b].by,
                                    e = p[b].dir,
                                    c = p[b].type,
                                    h = p[b].datefmt,
                                    m = p[b].sfunc;
                                if (b === p.length - 1) return d._getOrder(a, f, e, c, h, m);
                                b++;
                                h = d._getGroup(a, f, e, c, h);
                                m = [];
                                for (f = 0; f < h.length; f++)
                                    for (c = d._doSort(h[f].items, b), e = 0; e < c.length; e++) m.push(c[e]);
                                return m
                            }, this._getOrder = function(b, f, e, h, w, r) {
                                var u, B, y = [],
                                    k = [],
                                    z = "a" === e ?
                                    1 : -1;
                                void 0 === h && (h = "text");
                                B = "float" === h || "number" === h || "currency" === h || "numeric" === h ? function(a) {
                                    a = parseFloat(String(a).replace(q, ""));
                                    return isNaN(a) ? Number.NEGATIVE_INFINITY : a
                                } : "int" === h || "integer" === h ? function(a) {
                                    return a ? parseFloat(String(a).replace(q, "")) : Number.NEGATIVE_INFINITY
                                } : "date" === h || "datetime" === h ? function(b) {
                                    return a.jgrid.parseDate.call(c, w, b).getTime()
                                } : a.isFunction(h) ? h : function(b) {
                                    return b = b ? a.trim(String(b)) : "", g ? b : b.toLowerCase()
                                };
                                a.each(b, function(b, e) {
                                    u = "" !== f ? a.jgrid.getAccessor(e,
                                        f) : e;
                                    void 0 === u && (u = "");
                                    u = B(u, e);
                                    k.push({
                                        vSort: u,
                                        index: b
                                    })
                                });
                                k.sort(a.isFunction(r) ? function(a, b) {
                                    return a = a.vSort, b = b.vSort, r.call(this, a, b, z)
                                } : function(a, b) {
                                    return a = a.vSort, b = b.vSort, d._compare(a, b, z)
                                });
                                h = 0;
                                for (var C = b.length; C > h;) e = k[h].index, y.push(b[e]), h++;
                                return y
                            }, this._getGroup = function(b, f, e, c, h) {
                                var m, w = [],
                                    g = null,
                                    n = null;
                                return a.each(d._getOrder(b, f, e, c, h), function(b, e) {
                                        m = a.jgrid.getAccessor(e, f);
                                        null == m && (m = "");
                                        d._equals(n, m) || (n = m, null !== g && w.push(g), g = d._group(f, m));
                                        g.items.push(e)
                                    }),
                                    null !== g && w.push(g), w
                            }, this.ignoreCase = function() {
                                return g = !1, d
                            }, this.useCase = function() {
                                return g = !0, d
                            }, this.trim = function() {
                                return B = !0, d
                            }, this.noTrim = function() {
                                return B = !1, d
                            }, this.execute = function() {
                                var b = r,
                                    f = [];
                                return null === b ? d : (a.each(e, function() {
                                    eval(b) && f.push(this)
                                }), e = f, d)
                            }, this.data = function() {
                                return e
                            }, this.select = function(b) {
                                if (d._performSort(), !d._hasData()) return [];
                                if (d.execute(), a.isFunction(b)) {
                                    var f = [];
                                    return a.each(e, function(a, e) {
                                        f.push(b(e))
                                    }), f
                                }
                                return e
                            }, this.hasMatch = function() {
                                return d._hasData() ?
                                    (d.execute(), 0 < e.length) : !1
                            }, this.andNot = function(a, b, f) {
                                return K = !K, d.and(a, b, f)
                            }, this.orNot = function(a, b, f) {
                                return K = !K, d.or(a, b, f)
                            }, this.not = function(a, b, f) {
                                return d.andNot(a, b, f)
                            }, this.and = function(a, b, f) {
                                return C = " && ", void 0 === a ? d : d._repeatCommand(a, b, f)
                            }, this.or = function(a, b, f) {
                                return C = " || ", void 0 === a ? d : d._repeatCommand(a, b, f)
                            }, this.orBegin = function() {
                                return y++, d
                            }, this.orEnd = function() {
                                return null !== r && (r += ")"), d
                            }, this.isNot = function(a) {
                                return K = !K, d.is(a)
                            }, this.is = function(a) {
                                return d._append("this." +
                                    a), d._resetNegate(), d
                            }, this._compareValues = function(b, f, e, h, w) {
                                var g;
                                g = A ? "jQuery.jgrid.getAccessor(this,'" + f + "')" : "this";
                                void 0 === e && (e = null);
                                var n = e,
                                    r = void 0 === w.stype ? "text" : w.stype;
                                if (null !== e) switch (r) {
                                    case "int":
                                    case "integer":
                                        n = isNaN(Number(n)) || "" === n ? "0" : n;
                                        g = "parseInt(" + g + ",10)";
                                        n = "parseInt(" + n + ",10)";
                                        break;
                                    case "float":
                                    case "number":
                                    case "numeric":
                                        n = String(n).replace(q, "");
                                        n = isNaN(Number(n)) || "" === n ? "0" : n;
                                        g = "parseFloat(" + g + ")";
                                        n = "parseFloat(" + n + ")";
                                        break;
                                    case "date":
                                    case "datetime":
                                        n = String(a.jgrid.parseDate.call(c,
                                            w.srcfmt || "Y-m-d", n).getTime());
                                        g = 'jQuery.jgrid.parseDate.call(jQuery("#' + a.jgrid.jqID(c.p.id) + '")[0],"' + w.srcfmt + '",' + g + ").getTime()";
                                        break;
                                    default:
                                        g = d._getStr(g), n = d._getStr('"' + d._toStr(n) + '"')
                                }
                                return d._append(g + " " + h + " " + n), d._setCommand(b, f), d._resetNegate(), d
                            }, this.equals = function(a, b, f) {
                                return d._compareValues(d.equals, a, b, "==", f)
                            }, this.notEquals = function(a, b, f) {
                                return d._compareValues(d.equals, a, b, "!==", f)
                            }, this.isNull = function(a, b, f) {
                                return d._compareValues(d.equals, a, null, "===", f)
                            }, this.greater =
                            function(a, b, f) {
                                return d._compareValues(d.greater, a, b, ">", f)
                            }, this.less = function(a, b, f) {
                                return d._compareValues(d.less, a, b, "<", f)
                            }, this.greaterOrEquals = function(a, b, f) {
                                return d._compareValues(d.greaterOrEquals, a, b, ">=", f)
                            }, this.lessOrEquals = function(a, b, f) {
                                return d._compareValues(d.lessOrEquals, a, b, "<=", f)
                            }, this.startsWith = function(b, f) {
                                var e = null == f ? b : f,
                                    e = B ? a.trim(e.toString()).length : e.toString().length;
                                return A ? d._append(d._getStr("jQuery.jgrid.getAccessor(this,'" + b + "')") + ".substr(0," + e + ") == " +
                                    d._getStr('"' + d._toStr(f) + '"')) : (null != f && (e = B ? a.trim(f.toString()).length : f.toString().length), d._append(d._getStr("this") + ".substr(0," + e + ") == " + d._getStr('"' + d._toStr(b) + '"'))), d._setCommand(d.startsWith, b), d._resetNegate(), d
                            }, this.endsWith = function(b, f) {
                                var e = null == f ? b : f,
                                    e = B ? a.trim(e.toString()).length : e.toString().length;
                                return d._append(A ? d._getStr("jQuery.jgrid.getAccessor(this,'" + b + "')") + ".substr(" + d._getStr("jQuery.jgrid.getAccessor(this,'" + b + "')") + ".length-" + e + "," + e + ') == "' + d._toStr(f) +
                                    '"' : d._getStr("this") + ".substr(" + d._getStr("this") + '.length-"' + d._toStr(b) + '".length,"' + d._toStr(b) + '".length) == "' + d._toStr(b) + '"'), d._setCommand(d.endsWith, b), d._resetNegate(), d
                            }, this.contains = function(a, b) {
                                return d._append(A ? d._getStr("jQuery.jgrid.getAccessor(this,'" + a + "')") + '.indexOf("' + d._toStr(b) + '",0) > -1' : d._getStr("this") + '.indexOf("' + d._toStr(a) + '",0) > -1'), d._setCommand(d.contains, a), d._resetNegate(), d
                            }, this.groupBy = function(a, b, f, c) {
                                return d._hasData() ? d._getGroup(e, a, b, f, c) : null
                            },
                            this.orderBy = function(b, f, e, c, h) {
                                return f = null == f ? "a" : a.trim(f.toString().toLowerCase()), null == e && (e = "text"), null == c && (c = "Y-m-d"), null == h && (h = !1), ("desc" === f || "descending" === f) && (f = "d"), ("asc" === f || "ascending" === f) && (f = "a"), p.push({
                                    by: b,
                                    dir: f,
                                    type: e,
                                    datefmt: c,
                                    sfunc: h
                                }), d
                            }, d
                    }(b, null)
                },
                getMethod: function(b) {
                    return this.getAccessor(a.fn.jqGrid, b)
                },
                extend: function(b) {
                    a.extend(a.fn.jqGrid, b);
                    this.no_legacy_api || a.fn.extend(b)
                },
                clearBeforeUnload: function(b) {
                    var c = a("#" + a.jgrid.jqID(b))[0];
                    if (c.grid) {
                        b =
                            c.grid;
                        a.isFunction(b.emptyRows) && b.emptyRows.call(c, !0, !0);
                        a(document).unbind("mouseup.jqGrid" + c.p.id);
                        a(b.hDiv).unbind("mousemove");
                        a(c).unbind();
                        var h, d = b.headers.length,
                            l = "formatCol sortData updatepager refreshIndex setHeadCheckBox constructTr formatter addXmlData addJSONData grid p".split(" ");
                        for (h = 0; d > h; h++) b.headers[h].el = null;
                        for (h in b) b.hasOwnProperty(h) && (b[h] = null);
                        for (h in c.p) c.p.hasOwnProperty(h) && (c.p[h] = a.isArray(c.p[h]) ? [] : null);
                        d = l.length;
                        for (h = 0; d > h; h++) c.hasOwnProperty(l[h]) &&
                            (c[l[h]] = null, delete c[l[h]])
                    }
                },
                gridUnload: function(b) {
                    if (b) {
                        b = a.trim(b);
                        0 === b.indexOf("#") && (b = b.substring(1));
                        var c = a("#" + a.jgrid.jqID(b))[0];
                        if (c.grid) {
                            var h = a(c).attr("id"),
                                d = a(c).attr("class");
                            c.p.pager && a(c.p.pager).unbind().empty().removeClass("ui-state-default ui-jqgrid-pager ui-corner-bottom");
                            var l = document.createElement("table");
                            l.className = d;
                            d = a.jgrid.jqID(c.id);
                            a(l).removeClass("ui-jqgrid-btable ui-common-table").insertBefore("#gbox_" + d);
                            1 === a(c.p.pager).parents("#gbox_" + d).length && a(c.p.pager).insertBefore("#gbox_" +
                                d);
                            a.jgrid.clearBeforeUnload(b);
                            a("#gbox_" + d).remove();
                            a(l).attr({
                                id: h
                            });
                            a("#alertmod_" + a.jgrid.jqID(b)).remove()
                        }
                    }
                },
                gridDestroy: function(b) {
                    if (b) {
                        b = a.trim(b);
                        0 === b.indexOf("#") && (b = b.substring(1));
                        var c = a("#" + a.jgrid.jqID(b))[0];
                        if (c.grid) {
                            c.p.pager && a(c.p.pager).remove();
                            try {
                                a.jgrid.clearBeforeUnload(b), a("#gbox_" + a.jgrid.jqID(b)).remove()
                            } catch (h) {}
                        }
                    }
                },
                styleUI: {
                    jQueryUI: {
                        common: {
                            disabled: "ui-state-disabled",
                            highlight: "ui-state-highlight",
                            hover: "ui-state-hover",
                            cornerall: "ui-corner-all",
                            cornertop: "ui-corner-top",
                            cornerbottom: "ui-corner-bottom",
                            hidden: "ui-helper-hidden",
                            icon_base: "ui-icon",
                            overlay: "ui-widget-overlay",
                            active: "ui-state-active",
                            error: "ui-state-error",
                            button: "ui-state-default ui-corner-all",
                            content: "ui-widget-content"
                        },
                        base: {
                            entrieBox: "ui-widget ui-widget-content ui-corner-all",
                            viewBox: "",
                            headerTable: "",
                            headerBox: "ui-state-default",
                            rowTable: "",
                            rowBox: "ui-widget-content",
                            footerTable: "",
                            footerBox: "ui-widget-content",
                            headerDiv: "ui-state-default",
                            gridtitleBox: "ui-widget-header ui-corner-top ui-helper-clearfix",
                            customtoolbarBox: "ui-state-default",
                            loadingBox: "ui-state-default ui-state-active",
                            rownumBox: "ui-state-default",
                            scrollBox: "ui-widget-content",
                            multiBox: "cbox",
                            pagerBox: "ui-state-default ui-corner-bottom",
                            pagerTable: "",
                            toppagerBox: "ui-state-default",
                            pgInput: "ui-corner-all",
                            pgSelectBox: "ui-widget-content ui-corner-all",
                            pgButtonBox: "ui-corner-all",
                            icon_first: "ui-icon-seek-first",
                            icon_prev: "ui-icon-seek-prev",
                            icon_next: "ui-icon-seek-next",
                            icon_end: "ui-icon-seek-end",
                            icon_asc: "ui-icon-triangle-1-n",
                            icon_desc: "ui-icon-triangle-1-s",
                            icon_caption_open: "ui-icon-circle-triangle-n",
                            icon_caption_close: "ui-icon-circle-triangle-s"
                        },
                        modal: {
                            modal: "ui-widget ui-widget-content ui-corner-all",
                            header: "ui-widget-header ui-corner-all ui-helper-clearfix",
                            content: "ui-widget-content",
                            resizable: "ui-resizable-handle ui-resizable-se",
                            icon_close: "ui-icon-closethick",
                            icon_resizable: "ui-icon-gripsmall-diagonal-se"
                        },
                        celledit: {
                            inputClass: "ui-widget-content ui-corner-all"
                        },
                        inlinedit: {
                            inputClass: "ui-widget-content ui-corner-all",
                            icon_edit_nav: "ui-icon-pencil",
                            icon_add_nav: "ui-icon-plus",
                            icon_save_nav: "ui-icon-disk",
                            icon_cancel_nav: "ui-icon-cancel"
                        },
                        formedit: {
                            inputClass: "ui-widget-content ui-corner-all",
                            icon_prev: "ui-icon-triangle-1-w",
                            icon_next: "ui-icon-triangle-1-e",
                            icon_save: "ui-icon-disk",
                            icon_close: "ui-icon-close",
                            icon_del: "ui-icon-scissors",
                            icon_cancel: "ui-icon-cancel"
                        },
                        navigator: {
                            icon_edit_nav: "ui-icon-pencil",
                            icon_add_nav: "ui-icon-plus",
                            icon_del_nav: "ui-icon-trash",
                            icon_search_nav: "ui-icon-search",
                            icon_refresh_nav: "ui-icon-refresh",
                            icon_view_nav: "ui-icon-document",
                            icon_newbutton_nav: "ui-icon-newwin"
                        },
                        grouping: {
                            icon_plus: "ui-icon-circlesmall-plus",
                            icon_minus: "ui-icon-circlesmall-minus"
                        },
                        filter: {
                            table_widget: "ui-widget ui-widget-content",
                            srSelect: "ui-widget-content ui-corner-all",
                            srInput: "ui-widget-content ui-corner-all",
                            menu_widget: "ui-widget ui-widget-content ui-corner-all",
                            icon_search: "ui-icon-search",
                            icon_reset: "ui-icon-arrowreturnthick-1-w",
                            icon_query: "ui-icon-comment"
                        },
                        subgrid: {
                            icon_plus: "ui-icon-plus",
                            icon_minus: "ui-icon-minus",
                            icon_open: "ui-icon-carat-1-sw"
                        },
                        treegrid: {
                            icon_plus: "ui-icon-triangle-1-",
                            icon_minus: "ui-icon-triangle-1-s",
                            icon_leaf: "ui-icon-radio-off"
                        },
                        fmatter: {
                            icon_edit: "ui-icon-pencil",
                            icon_add: "ui-icon-plus",
                            icon_save: "ui-icon-disk",
                            icon_cancel: "ui-icon-cancel",
                            icon_del: "ui-icon-trash"
                        }
                    },
                    Bootstrap: {
                        common: {
                            disabled: "ui-disabled",
                            highlight: "success",
                            hover: "active",
                            cornerall: "",
                            cornertop: "",
                            cornerbottom: "",
                            hidden: "",
                            icon_base: "glyphicon",
                            overlay: "ui-overlay",
                            active: "active",
                            error: "bg-danger",
                            button: "btn btn-default",
                            content: ""
                        },
                        base: {
                            entrieBox: "",
                            viewBox: "table-responsive",
                            headerTable: "table table-bordered",
                            headerBox: "",
                            rowTable: "table table-bordered",
                            rowBox: "",
                            footerTable: "table table-bordered",
                            footerBox: "",
                            headerDiv: "",
                            gridtitleBox: "",
                            customtoolbarBox: "",
                            loadingBox: "row",
                            rownumBox: "active",
                            scrollBox: "",
                            multiBox: "checkbox",
                            pagerBox: "",
                            pagerTable: "table",
                            toppagerBox: "",
                            pgInput: "form-control",
                            pgSelectBox: "form-control",
                            pgButtonBox: "",
                            icon_first: "glyphicon-step-backward",
                            icon_prev: "glyphicon-backward",
                            icon_next: "glyphicon-forward",
                            icon_end: "glyphicon-step-forward",
                            icon_asc: "glyphicon-triangle-top",
                            icon_desc: "glyphicon-triangle-bottom",
                            icon_caption_open: "glyphicon-circle-arrow-up",
                            icon_caption_close: "glyphicon-circle-arrow-down"
                        },
                        modal: {
                            modal: "modal-content",
                            header: "modal-header",
                            title: "modal-title",
                            content: "modal-body",
                            resizable: "ui-resizable-handle ui-resizable-se",
                            icon_close: "glyphicon-remove-circle",
                            icon_resizable: "glyphicon-import"
                        },
                        celledit: {
                            inputClass: "form-control"
                        },
                        inlinedit: {
                            inputClass: "form-control",
                            icon_edit_nav: "glyphicon-edit",
                            icon_add_nav: "glyphicon-plus",
                            icon_save_nav: "glyphicon-save",
                            icon_cancel_nav: "glyphicon-remove-circle"
                        },
                        formedit: {
                            inputClass: "form-control",
                            icon_prev: "glyphicon-step-backward",
                            icon_next: "glyphicon-step-forward",
                            icon_save: "glyphicon-save",
                            icon_close: "glyphicon-remove-circle",
                            icon_del: "glyphicon-trash",
                            icon_cancel: "glyphicon-remove-circle"
                        },
                        navigator: {
                            icon_edit_nav: "glyphicon-edit",
                            icon_add_nav: "glyphicon-plus",
                            icon_del_nav: "glyphicon-trash",
                            icon_search_nav: "glyphicon-search",
                            icon_refresh_nav: "glyphicon-refresh",
                            icon_view_nav: "glyphicon-info-sign",
                            icon_newbutton_nav: "glyphicon-new-window"
                        },
                        grouping: {
                            icon_plus: "glyphicon-triangle-right",
                            icon_minus: "glyphicon-triangle-bottom"
                        },
                        filter: {
                            table_widget: "table table-condensed",
                            srSelect: "form-control",
                            srInput: "form-control",
                            menu_widget: "",
                            icon_search: "glyphicon-search",
                            icon_reset: "glyphicon-refresh",
                            icon_query: "glyphicon-comment"
                        },
                        subgrid: {
                            icon_plus: "glyphicon-triangle-right",
                            icon_minus: "glyphicon-triangle-bottom",
                            icon_open: "glyphicon-indent-left"
                        },
                        treegrid: {
                            icon_plus: "glyphicon-triangle-right",
                            icon_minus: "glyphicon-triangle-bottom",
                            icon_leaf: "glyphicon-unchecked"
                        },
                        fmatter: {
                            icon_edit: "glyphicon-edit",
                            icon_add: "glyphicon-plus",
                            icon_save: "glyphicon-save",
                            icon_cancel: "glyphicon-remove-circle",
                            icon_del: "glyphicon-trash"
                        }
                    }
                }
            });
            a.fn.jqGrid = function(b) {
                if ("string" == typeof b) {
                    var c = a.jgrid.getMethod(b);
                    if (!c) throw "jqGrid - No such method: " + b;
                    var h = a.makeArray(arguments).slice(1);
                    return c.apply(this, h)
                }
                return this.each(function() {
                    if (!this.grid) {
                        var c;
                        null != b && void 0 !== b.data && (c = b.data, b.data = []);
                        var h = a.extend(!0, {
                            url: "",
                            height: 150,
                            page: 1,
                            rowNum: 20,
                            rowTotal: null,
                            records: 0,
                            pager: "",
                            pgbuttons: !0,
                            pginput: !0,
                            colModel: [],
                            rowList: [],
                            colNames: [],
                            sortorder: "asc",
                            sortname: "",
                            datatype: "xml",
                            mtype: "GET",
                            altRows: !1,
                            selarrrow: [],
                            savedRow: [],
                            shrinkToFit: !0,
                            xmlReader: {},
                            jsonReader: {},
                            subGrid: !1,
                            subGridModel: [],
                            reccount: 0,
                            lastpage: 0,
                            lastsort: 0,
                            selrow: null,
                            beforeSelectRow: null,
                            onSelectRow: null,
                            onSortCol: null,
                            ondblClickRow: null,
                            onRightClickRow: null,
                            onPaging: null,
                            onSelectAll: null,
                            onInitGrid: null,
                            loadComplete: null,
                            gridComplete: null,
                            loadError: null,
                            loadBeforeSend: null,
                            afterInsertRow: null,
                            beforeRequest: null,
                            beforeProcessing: null,
                            onHeaderClick: null,
                            viewrecords: !1,
                            loadonce: !1,
                            multiselect: !1,
                            multikey: !1,
                            editurl: null,
                            search: !1,
                            caption: "",
                            hidegrid: !0,
                            hiddengrid: !1,
                            postData: {},
                            userData: {},
                            treeGrid: !1,
                            treeGridModel: "nested",
                            treeReader: {},
                            treeANode: -1,
                            ExpandColumn: null,
                            tree_root_level: 0,
                            prmNames: {
                                page: "page",
                                rows: "rows",
                                sort: "sidx",
                                order: "sord",
                                search: "_search",
                                nd: "nd",
                                id: "id",
                                oper: "oper",
                                editoper: "edit",
                                addoper: "add",
                                deloper: "del",
                                subgridid: "id",
                                npage: null,
                                totalrows: "totalrows"
                            },
                            forceFit: !1,
                            gridstate: "visible",
                            cellEdit: !1,
                            cellsubmit: "remote",
                            nv: 0,
                            loadui: "enable",
                            toolbar: [!1, ""],
                            scroll: !1,
                            multiboxonly: !1,
                            deselectAfterSort: !0,
                            scrollrows: !1,
                            autowidth: !1,
                            scrollOffset: 18,
                            cellLayout: 5,
                            subGridWidth: 20,
                            multiselectWidth: 30,
                            gridview: !0,
                            rownumWidth: 35,
                            rownumbers: !1,
                            pagerpos: "center",
                            recordpos: "right",
                            footerrow: !1,
                            userDataOnFooter: !1,
                            hoverrows: !0,
                            altclass: "ui-priority-secondary",
                            viewsortcols: [!1, "vertical", !0],
                            resizeclass: "",
                            autoencode: !1,
                            remapColumns: [],
                            ajaxGridOptions: {},
                            direction: "ltr",
                            toppager: !1,
                            headertitles: !1,
                            scrollTimeout: 40,
                            data: [],
                            _index: {},
                            grouping: !1,
                            groupingView: {
                                groupField: [],
                                groupOrder: [],
                                groupText: [],
                                groupColumnShow: [],
                                groupSummary: [],
                                showSummaryOnHide: !1,
                                sortitems: [],
                                sortnames: [],
                                summary: [],
                                summaryval: [],
                                plusicon: "",
                                minusicon: "",
                                displayField: [],
                                groupSummaryPos: [],
                                formatDisplayField: [],
                                _locgr: !1
                            },
                            ignoreCase: !0,
                            cmTemplate: {},
                            idPrefix: "",
                            multiSort: !1,
                            minColWidth: 33,
                            scrollPopUp: !1,
                            scrollTopOffset: 0,
                            scrollLeftOffset: "100%",
                            storeNavOptions: !1,
                            regional: "en",
                            styleUI: "jQueryUI",
                            responsive: !1,
                            restoreCellonFail: !0
                        }, a.jgrid.defaults, b);
                        void 0 !== c && (h.data = c, b.data = c);
                        var e = this,
                            m = {
                                headers: [],
                                cols: [],
                                footers: [],
                                dragStart: function(b, f, c) {
                                    var m = a(this.bDiv).offset().left;
                                    this.resizing = {
                                        idx: b,
                                        startX: f.pageX,
                                        sOL: f.pageX - m
                                    };
                                    this.hDiv.style.cursor = "col-resize";
                                    this.curGbox = a("#rs_m" + a.jgrid.jqID(h.id), "#gbox_" + a.jgrid.jqID(h.id));
                                    this.curGbox.css({
                                        display: "block",
                                        left: f.pageX - m,
                                        top: c[1],
                                        height: c[2]
                                    });
                                    a(e).triggerHandler("jqGridResizeStart", [f, b]);
                                    a.isFunction(h.resizeStart) &&
                                        h.resizeStart.call(e, f, b);
                                    document.onselectstart = function() {
                                        return !1
                                    }
                                },
                                dragMove: function(a) {
                                    if (this.resizing) {
                                        var b, f;
                                        a = a.pageX - this.resizing.startX;
                                        var e = this.headers[this.resizing.idx],
                                            c = "ltr" === h.direction ? e.width + a : e.width - a;
                                        33 < c && (this.curGbox.css({
                                            left: this.resizing.sOL + a
                                        }), !0 === h.forceFit ? (b = this.headers[this.resizing.idx + h.nv], f = "ltr" === h.direction ? b.width - a : b.width + a, f > h.minColWidth && (e.newWidth = c, b.newWidth = f)) : (this.newWidth = "ltr" === h.direction ? h.tblwidth + a : h.tblwidth - a, e.newWidth = c))
                                    }
                                },
                                dragEnd: function(b) {
                                    if (this.hDiv.style.cursor = "default", this.resizing) {
                                        var f = this.resizing.idx,
                                            c = this.headers[f].newWidth || this.headers[f].width,
                                            c = parseInt(c, 10);
                                        this.resizing = !1;
                                        a("#rs_m" + a.jgrid.jqID(h.id)).css("display", "none");
                                        h.colModel[f].width = c;
                                        this.headers[f].width = c;
                                        this.headers[f].el.style.width = c + "px";
                                        this.cols[f].style.width = c + "px";
                                        0 < this.footers.length && (this.footers[f].style.width = c + "px");
                                        !0 === h.forceFit ? (c = this.headers[f + h.nv].newWidth || this.headers[f + h.nv].width, this.headers[f + h.nv].width =
                                            c, this.headers[f + h.nv].el.style.width = c + "px", this.cols[f + h.nv].style.width = c + "px", 0 < this.footers.length && (this.footers[f + h.nv].style.width = c + "px"), h.colModel[f + h.nv].width = c) : (h.tblwidth = this.newWidth || h.tblwidth, a("table:first", this.bDiv).css("width", h.tblwidth + "px"), a("table:first", this.hDiv).css("width", h.tblwidth + "px"), this.hDiv.scrollLeft = this.bDiv.scrollLeft, h.footerrow && (a("table:first", this.sDiv).css("width", h.tblwidth + "px"), this.sDiv.scrollLeft = this.bDiv.scrollLeft));
                                        b && (a(e).triggerHandler("jqGridResizeStop", [c, f]), a.isFunction(h.resizeStop) && h.resizeStop.call(e, c, f))
                                    }
                                    this.curGbox = null;
                                    document.onselectstart = function() {
                                        return !0
                                    }
                                },
                                populateVisible: function() {
                                    m.timer && clearTimeout(m.timer);
                                    m.timer = null;
                                    var b = a(m.bDiv).height();
                                    if (b) {
                                        var f, c, d = a("table:first", m.bDiv);
                                        if (d[0].rows.length) try {
                                            c = (f = d[0].rows[1]) ? a(f).outerHeight() || m.prevRowHeight : m.prevRowHeight
                                        } catch (w) {
                                            c = m.prevRowHeight
                                        }
                                        if (c) {
                                            m.prevRowHeight = c;
                                            var g, q, r, u = h.rowNum;
                                            f = m.scrollTop = m.bDiv.scrollTop;
                                            var B = Math.round(d.position().top) - f,
                                                y = B + d.height(),
                                                u = c * u;
                                            (b > y && 0 >= B && (void 0 === h.lastpage || (parseInt((y + f + u - 1) / u, 10) || 0) <= h.lastpage) && (q = parseInt((b - y + u - 1) / u, 10) || 1, 0 <= y || 2 > q || !0 === h.scroll ? (g = (Math.round((y + f) / u) || 0) + 1, B = -1) : B = 1), 0 < B && (g = (parseInt(f / u, 10) || 0) + 1, q = (parseInt((f + b) / u, 10) || 0) + 2 - g, r = !0), !q) || h.lastpage && (g > h.lastpage || 1 === h.lastpage || g === h.page && g === h.lastpage) || (m.hDiv.loading ? m.timer = setTimeout(m.populateVisible, h.scrollTimeout) : (h.page = g, r && (m.selectionPreserver(d[0]), m.emptyRows.call(d[0], !1, !1)), m.populate(q)), h.scrollPopUp && null !=
                                                h.lastpage && (a("#scroll_g" + h.id).show().html(a.jgrid.template(a.jgrid.getRegional(e, "defaults.pgtext", h.pgtext), h.page, h.lastpage)).css({
                                                    top: h.scrollTopOffset + f * ((parseInt(h.height, 10) - 45) / (parseInt(c, 10) * parseInt(h.records, 10))) + "px",
                                                    left: h.scrollLeftOffset
                                                }), a(this).mouseout(function() {
                                                    a("#scroll_g" + h.id).hide()
                                                })))
                                        }
                                    }
                                },
                                scrollGrid: function(b) {
                                    if (h.scroll) {
                                        var f = m.bDiv.scrollTop;
                                        void 0 === m.scrollTop && (m.scrollTop = 0);
                                        f !== m.scrollTop && (m.scrollTop = f, m.timer && clearTimeout(m.timer), m.timer = setTimeout(m.populateVisible,
                                            h.scrollTimeout))
                                    }
                                    m.hDiv.scrollLeft = m.bDiv.scrollLeft;
                                    h.footerrow && (m.sDiv.scrollLeft = m.bDiv.scrollLeft);
                                    h.frozenColumns && a(m.fbDiv).scrollTop(m.bDiv.scrollTop);
                                    b && b.stopPropagation()
                                },
                                selectionPreserver: function(b) {
                                    var f = b.p,
                                        e = f.selrow,
                                        c = f.selarrrow ? a.makeArray(f.selarrrow) : null,
                                        h = b.grid.bDiv.scrollLeft,
                                        m = function() {
                                            var d;
                                            if (f.selrow = null, f.selarrrow = [], f.multiselect && c && 0 < c.length)
                                                for (d = 0; d < c.length; d++) c[d] !== e && a(b).jqGrid("setSelection", c[d], !1, null);
                                            e && a(b).jqGrid("setSelection", e, !1, null);
                                            b.grid.bDiv.scrollLeft = h;
                                            a(b).unbind(".selectionPreserver", m)
                                        };
                                    a(b).bind("jqGridGridComplete.selectionPreserver", m)
                                }
                            };
                        if ("TABLE" !== this.tagName.toUpperCase() || null == this.id) return void alert("Element is not a table or has no id!");
                        if (void 0 !== document.documentMode && 5 >= document.documentMode) return void alert("Grid can not be used in this ('quirks') mode!");
                        var d, g, q, u = 0;
                        for (g in a.jgrid.regional) a.jgrid.regional.hasOwnProperty(g) && (0 === u && (d = g), u++);
                        if (1 === u && d !== h.regional && (h.regional = d), a(this).empty().attr("tabindex",
                                "0"), this.p = h, this.p.useProp = !!a.fn.prop, 0 === this.p.colNames.length)
                            for (u = 0; u < this.p.colModel.length; u++) this.p.colNames[u] = this.p.colModel[u].label || this.p.colModel[u].name;
                        if (this.p.colNames.length !== this.p.colModel.length) return void alert(a.jgrid.getRegional(this, "errors.model"));
                        var k, y = a.jgrid.getMethod("getStyleUI"),
                            K = e.p.styleUI + ".common",
                            C = y(K, "disabled", !0),
                            p = y(K, "highlight", !0),
                            A = y(K, "hover", !0);
                        g = y(K, "cornerall", !0);
                        var x = y(K, "icon_base", !0);
                        c = a.jgrid.msie;
                        var H = [],
                            E = [],
                            v = [],
                            K = e.p.styleUI +
                            ".base";
                        k = a("<div " + y(K, "viewBox", !1, "ui-jqgrid-view") + " role='grid'></div>");
                        e.p.direction = a.trim(e.p.direction.toLowerCase());
                        e.p._ald = !1; - 1 === a.inArray(e.p.direction, ["ltr", "rtl"]) && (e.p.direction = "ltr");
                        q = e.p.direction;
                        a(k).insertBefore(this);
                        a(this).appendTo(k);
                        var L = a("<div " + y(K, "entrieBox", !1, "ui-jqgrid") + "></div>");
                        a(L).attr({
                            id: "gbox_" + this.id,
                            dir: q
                        }).insertBefore(k);
                        a(k).attr("id", "gview_" + this.id).appendTo(L);
                        a("<div " + y(e.p.styleUI + ".common", "overlay", !1, "jqgrid-overlay") + " id='lui_" +
                            this.id + "'></div>").insertBefore(k);
                        a("<div " + y(K, "loadingBox", !1, "loading") + " id='load_" + this.id + "'>" + a.jgrid.getRegional(e, "defaults.loadtext", this.p.loadtext) + "</div>").insertBefore(k);
                        a(this).attr({
                            role: "presentation",
                            "aria-multiselectable": !!this.p.multiselect,
                            "aria-labelledby": "gbox_" + this.id
                        });
                        var J, G = function(a, b) {
                                return a = parseInt(a, 10), isNaN(a) ? b || 0 : a
                            },
                            Q = function(b, f, c, h, d, w) {
                                var l, g, q = e.p.colModel[b],
                                    r = q.align,
                                    u = 'style="',
                                    B = q.classes,
                                    y = q.name,
                                    t = [];
                                return r && (u += "text-align:" + r + ";"), !0 ===
                                    q.hidden && (u += "display:none;"), 0 === f ? u += "width: " + m.headers[b].width + "px;" : (a.isFunction(q.cellattr) || "string" == typeof q.cellattr && null != a.jgrid.cellattr && a.isFunction(a.jgrid.cellattr[q.cellattr])) && (l = a.isFunction(q.cellattr) ? q.cellattr : a.jgrid.cellattr[q.cellattr], g = l.call(e, d, c, h, q, w), g && "string" == typeof g && (g = g.replace(/style/i, "style").replace(/title/i, "title"), -1 < g.indexOf("title") && (q.title = !1), -1 < g.indexOf("class") && (B = void 0), t = g.replace(/\-style/g, "-sti").split(/style/), 2 === t.length ? (t[1] =
                                        a.trim(t[1].replace(/\-sti/g, "-style").replace("=", "")), (0 === t[1].indexOf("'") || 0 === t[1].indexOf('"')) && (t[1] = t[1].substring(1)), u += t[1].replace(/'/gi, '"')) : u += '"')), t.length || (t[0] = "", u += '"'), u += (void 0 !== B ? ' class="' + B + '"' : "") + (q.title && c ? ' title="' + a.jgrid.stripHtml(c) + '"' : ""), u += ' aria-describedby="' + e.p.id + "_" + y + '"', u + t[0]
                            },
                            ka = function(b) {
                                return null == b || "" === b ? "&#160;" : e.p.autoencode ? a.jgrid.htmlEncode(b) : String(b)
                            },
                            R = function(b, f, c, h, m) {
                                var d = e.p.colModel[c];
                                void 0 !== d.formatter ? (b = "" !== String(e.p.idPrefix) ?
                                    a.jgrid.stripPref(e.p.idPrefix, b) : b, b = {
                                        rowId: b,
                                        colModel: d,
                                        gid: e.p.id,
                                        pos: c,
                                        styleUI: e.p.styleUI
                                    }, f = a.isFunction(d.formatter) ? d.formatter.call(e, f, b, h, m) : a.fmatter ? a.fn.fmatter.call(e, d.formatter, f, b, h, m) : ka(f)) : f = ka(f);
                                return f
                            },
                            D = function(a, b, f, e, c, h) {
                                var m, d;
                                return m = R(a, b, f, c, "add"), d = Q(f, e, m, c, a, h), '<td role="gridcell" ' + d + ">" + m + "</td>"
                            },
                            I = function(a, b, f, c, h) {
                                c = '<input role="checkbox" type="checkbox" id="jqg_' + e.p.id + "_" + a + '" ' + h + ' name="jqg_' + e.p.id + "_" + a + '"' + (c ? 'checked="checked"' : "") + "/>";
                                return '<td role="gridcell" ' +
                                    Q(b, f, "", null, a, !0) + ">" + c + "</td>"
                            },
                            F = function(a, b, f, e, c) {
                                f = (parseInt(f, 10) - 1) * parseInt(e, 10) + 1 + b;
                                a = Q(a, b, f, null, b, !0);
                                return '<td role="gridcell" ' + c + " " + a + ">" + f + "</td>"
                            },
                            M = function(a) {
                                var b, f, c = [],
                                    h = 0;
                                for (f = 0; f < e.p.colModel.length; f++) b = e.p.colModel[f], "cb" !== b.name && "subgrid" !== b.name && "rn" !== b.name && (c[h] = "local" === a ? b.name : "xml" === a || "xmlstring" === a ? b.xmlmap || b.name : b.jsonmap || b.name, !1 !== e.p.keyName && !0 === b.key && (e.p.keyName = c[h]), h++);
                                return c
                            },
                            O = function(b) {
                                var f = e.p.remapColumns;
                                return f &&
                                    f.length || (f = a.map(e.p.colModel, function(a, b) {
                                        return b
                                    })), b && (f = a.map(f, function(a) {
                                        return b > a ? null : a - b
                                    })), f
                            },
                            Y = function(b, f) {
                                var e;
                                this.p.deepempty ? a(this.rows).slice(1).remove() : (e = 0 < this.rows.length ? this.rows[0] : null, a(this.firstChild).empty().append(e));
                                b && this.p.scroll && (a(this.grid.bDiv.firstChild).css({
                                    height: "auto"
                                }), a(this.grid.bDiv.firstChild.firstChild).css({
                                    height: "0px",
                                    display: "none"
                                }), 0 !== this.grid.bDiv.scrollTop && (this.grid.bDiv.scrollTop = 0));
                                !0 === f && this.p.treeGrid && !this.p.loadonce &&
                                    (this.p.data = [], this.p._index = {})
                            },
                            t = function() {
                                var b, f, c, h, m, d, w, l, g, n;
                                b = e.p;
                                var q = b.data,
                                    r = q.length,
                                    u = b.localReader,
                                    B = b.colModel,
                                    y = u.cell,
                                    t = (!0 === b.multiselect ? 1 : 0) + (!0 === b.subGrid ? 1 : 0) + (!0 === b.rownumbers ? 1 : 0),
                                    k = b.scroll ? a.jgrid.randId() : 1;
                                if ("local" === b.datatype && !0 === u.repeatitems)
                                    for (l = O(t), g = M("local"), h = !1 === b.keyIndex ? a.isFunction(u.id) ? u.id.call(e, q) : u.id : b.keyIndex, b = 0; r > b; b++) {
                                        c = q[b];
                                        f = a.jgrid.getAccessor(c, h);
                                        void 0 === f && ("number" == typeof h && null != B[h + t] && (f = a.jgrid.getAccessor(c, B[h +
                                            t].name)), void 0 === f && (f = k + b, y && (m = a.jgrid.getAccessor(c, y) || c, f = null != m && void 0 !== m[h] ? m[h] : f, m = null)));
                                        w = {};
                                        w[u.id] = f;
                                        y && (c = a.jgrid.getAccessor(c, y) || c);
                                        n = a.isArray(c) ? l : g;
                                        for (f = 0; f < n.length; f++) d = a.jgrid.getAccessor(c, n[f]), w[B[f + t].name] = d;
                                        a.extend(!0, q[b], w)
                                    }
                            },
                            ea = function() {
                                var b, f, c, h = e.p.data.length;
                                b = !1 === e.p.keyName || !0 === e.p.loadonce ? e.p.localReader.id : e.p.keyName;
                                e.p._index = [];
                                for (f = 0; h > f; f++) c = a.jgrid.getAccessor(e.p.data[f], b), void 0 === c && (c = String(f + 1)), e.p._index[c] = f
                            },
                            ia = function(b,
                                f, c, h, m) {
                                var d, w = "-1",
                                    l = "";
                                f = f ? "display:none;" : "";
                                var g = a(e).triggerHandler("jqGridRowAttr", [h, m, b]);
                                if ("object" != typeof g && (g = a.isFunction(e.p.rowattr) ? e.p.rowattr.call(e, h, m, b) : "string" == typeof e.p.rowattr && null != a.jgrid.rowattr && a.isFunction(a.jgrid.rowattr[e.p.rowattr]) ? a.jgrid.rowattr[e.p.rowattr].call(e, h, m, b) : {}), !a.isEmptyObject(g)) {
                                    g.hasOwnProperty("id") && (b = g.id, delete g.id);
                                    g.hasOwnProperty("tabindex") && (w = g.tabindex, delete g.tabindex);
                                    g.hasOwnProperty("style") && (f += g.style, delete g.style);
                                    g.hasOwnProperty("class") && (c += " " + g["class"], delete g["class"]);
                                    try {
                                        delete g.role
                                    } catch (n) {}
                                    for (d in g) g.hasOwnProperty(d) && (l += " " + d + "=" + g[d])
                                }
                                return '<tr role="row" id="' + b + '" tabindex="' + w + '" class="' + c + '"' + ("" === f ? "" : ' style="' + f + '"') + l + ">"
                            },
                            S = function(b, f, c, h) {
                                var m = new Date,
                                    d = "local" !== e.p.datatype && e.p.loadonce || "xmlstring" === e.p.datatype,
                                    w = e.p.xmlReader,
                                    l = "local" === e.p.datatype ? "local" : "xml";
                                if (d && (e.p.data = [], e.p._index = {}, e.p.localReader.id = "_id_"), e.p.reccount = 0, a.isXMLDoc(b)) {
                                    -1 !== e.p.treeANode ||
                                        e.p.scroll ? f = 1 < f ? f : 1 : (Y.call(e, !1, !0), f = 1);
                                    var g, n, q, r, u, B, t, k, x, z = a(e),
                                        C = 0,
                                        A = !0 === e.p.multiselect ? 1 : 0,
                                        p = 0,
                                        E = !0 === e.p.rownumbers ? 1 : 0,
                                        T = [],
                                        H = {},
                                        v = [],
                                        J = !0 === e.p.altRows ? e.p.altclass : "",
                                        L = y(K, "rowBox", !0, "jqgrow ui-row-" + e.p.direction);
                                    !0 === e.p.subGrid && (p = 1, r = a.jgrid.getMethod("addSubGridCell"));
                                    w.repeatitems || (T = M(l));
                                    u = !1 === e.p.keyName ? a.isFunction(w.id) ? w.id.call(e, b) : w.id : e.p.keyName;
                                    l = -1 === String(u).indexOf("[") ? T.length ? function(b, f) {
                                        return a(u, b).text() || f
                                    } : function(b, f) {
                                        return a(w.cell, b).eq(u).text() ||
                                            f
                                    } : function(a, b) {
                                        return a.getAttribute(u.replace(/[\[\]]/g, "")) || b
                                    };
                                    e.p.userData = {};
                                    e.p.page = G(a.jgrid.getXmlData(b, w.page), e.p.page);
                                    e.p.lastpage = G(a.jgrid.getXmlData(b, w.total), 1);
                                    e.p.records = G(a.jgrid.getXmlData(b, w.records));
                                    a.isFunction(w.userdata) ? e.p.userData = w.userdata.call(e, b) || {} : a.jgrid.getXmlData(b, w.userdata, !0).each(function() {
                                        e.p.userData[this.getAttribute("name")] = a(this).text()
                                    });
                                    b = a.jgrid.getXmlData(b, w.root, !0);
                                    (b = a.jgrid.getXmlData(b, w.row, !0)) || (b = []);
                                    var N = b.length,
                                        Q = 0,
                                        R = [],
                                        Z = parseInt(e.p.rowNum, 10),
                                        ka = e.p.scroll ? a.jgrid.randId() : 1,
                                        U = a("#" + a.jgrid.jqID(e.p.id) + " tbody:first");
                                    if (0 < N && 0 >= e.p.page && (e.p.page = 1), b && N) {
                                        h && (Z *= h + 1);
                                        var ha;
                                        h = a.isFunction(e.p.afterInsertRow);
                                        var la = !1,
                                            ba = E ? y(K, "rownumBox", !1, "jqgrid-rownum") : "",
                                            X = A ? y(K, "multiBox", !1, "cbox") : "";
                                        for (e.p.grouping && (la = !0 === e.p.groupingView.groupCollapse, ha = a.jgrid.getMethod("groupingPrepare")); N > Q;) {
                                            t = b[Q];
                                            k = l(t, ka + Q);
                                            k = e.p.idPrefix + k;
                                            g = 0 === f ? 0 : f + 1;
                                            x = L + (1 === (g + Q) % 2 ? " " + J : "");
                                            var ea = v.length;
                                            if (v.push(""), E && v.push(F(0,
                                                    Q, e.p.page, e.p.rowNum, ba)), A && v.push(I(k, E, Q, !1, X)), p && v.push(r.call(z, A + E, Q + f)), w.repeatitems) {
                                                B || (B = O(A + p + E));
                                                var ra = a.jgrid.getXmlData(t, w.cell, !0);
                                                a.each(B, function(a) {
                                                    var b = ra[this];
                                                    return b ? (q = b.textContent || b.text, H[e.p.colModel[a + A + p + E].name] = q, void v.push(D(k, q, a + A + p + E, Q + f, t, H))) : !1
                                                })
                                            } else
                                                for (g = 0; g < T.length; g++) q = a.jgrid.getXmlData(t, T[g]), H[e.p.colModel[g + A + p + E].name] = q, v.push(D(k, q, g + A + p + E, Q + f, t, H));
                                            if (v[ea] = ia(k, la, x, H, t), v.push("</tr>"), e.p.grouping && (R.push(v), e.p.groupingView._locgr ||
                                                    ha.call(z, H, Q), v = []), (d || !0 === e.p.treeGrid && !e.p._ald) && (H._id_ = a.jgrid.stripPref(e.p.idPrefix, k), e.p.data.push(H), e.p._index[H._id_] = e.p.data.length - 1), !1 === e.p.gridview && (U.append(v.join("")), z.triggerHandler("jqGridAfterInsertRow", [k, H, t]), h && e.p.afterInsertRow.call(e, k, H, t), v = []), H = {}, C++, Q++, C === Z) break
                                        }
                                    }
                                    if (!0 === e.p.gridview && (n = -1 < e.p.treeANode ? e.p.treeANode : 0, e.p.grouping ? d || (z.jqGrid("groupingRender", R, e.p.colModel.length, e.p.page, Z), R = null) : !0 === e.p.treeGrid && 0 < n ? a(e.rows[n]).after(v.join("")) :
                                            (U.append(v.join("")), e.grid.cols = e.rows[0].cells)), !0 === e.p.subGrid) try {
                                        z.jqGrid("addSubGrid", A + E)
                                    } catch (ta) {}
                                    if (e.p.totaltime = new Date - m, 0 < C && 0 === e.p.records && (e.p.records = N), v = null, !0 === e.p.treeGrid) try {
                                        z.jqGrid("setTreeNode", n + 1, C + n + 1)
                                    } catch (ta) {}
                                    if (e.p.reccount = C, e.p.treeANode = -1, e.p.userDataOnFooter && z.jqGrid("footerData", "set", e.p.userData, !0), d && (e.p.records = N, e.p.lastpage = Math.ceil(N / Z)), c || e.updatepager(!1, !0), d) {
                                        for (; N > C;) {
                                            if (t = b[C], k = l(t, C + ka), k = e.p.idPrefix + k, w.repeatitems) {
                                                B || (B = O(A +
                                                    p + E));
                                                var S = a.jgrid.getXmlData(t, w.cell, !0);
                                                a.each(B, function(a) {
                                                    var b = S[this];
                                                    return b ? (q = b.textContent || b.text, void(H[e.p.colModel[a + A + p + E].name] = q)) : !1
                                                })
                                            } else
                                                for (g = 0; g < T.length; g++) q = a.jgrid.getXmlData(t, T[g]), H[e.p.colModel[g + A + p + E].name] = q;
                                            H._id_ = a.jgrid.stripPref(e.p.idPrefix, k);
                                            e.p.grouping && ha.call(z, H, C);
                                            e.p.data.push(H);
                                            e.p._index[H._id_] = e.p.data.length - 1;
                                            H = {};
                                            C++
                                        }
                                        e.p.grouping && (e.p.groupingView._locgr = !0, z.jqGrid("groupingRender", R, e.p.colModel.length, e.p.page, Z), R = null)
                                    }
                                }
                            },
                            P = function(b,
                                f, c, h) {
                                var m = new Date;
                                if (b) {
                                    -1 !== e.p.treeANode || e.p.scroll ? f = 1 < f ? f : 1 : (Y.call(e, !1, !0), f = 1);
                                    var d, w, l = "local" !== e.p.datatype && e.p.loadonce || "jsonstring" === e.p.datatype;
                                    l && (e.p.data = [], e.p._index = {}, e.p.localReader.id = "_id_");
                                    e.p.reccount = 0;
                                    "local" === e.p.datatype ? (d = e.p.localReader, w = "local") : (d = e.p.jsonReader, w = "json");
                                    var g, n, q, r, u, B, t, k, z, x, C = a(e),
                                        A = 0,
                                        E = [],
                                        H = e.p.multiselect ? 1 : 0,
                                        v = !0 === e.p.subGrid ? 1 : 0,
                                        J = !0 === e.p.rownumbers ? 1 : 0,
                                        L = O(H + v + J),
                                        N = M(w),
                                        Q = {},
                                        R = [],
                                        Z = !0 === e.p.altRows ? e.p.altclass : "",
                                        ka = y(K,
                                            "rowBox", !0, "jqgrow ui-row-" + e.p.direction);
                                    e.p.page = G(a.jgrid.getAccessor(b, d.page), e.p.page);
                                    e.p.lastpage = G(a.jgrid.getAccessor(b, d.total), 1);
                                    e.p.records = G(a.jgrid.getAccessor(b, d.records));
                                    e.p.userData = a.jgrid.getAccessor(b, d.userdata) || {};
                                    v && (u = a.jgrid.getMethod("addSubGridCell"));
                                    t = !1 === e.p.keyName ? a.isFunction(d.id) ? d.id.call(e, b) : d.id : e.p.keyName;
                                    w = a.jgrid.getAccessor(b, d.root);
                                    null == w && a.isArray(b) && (w = b);
                                    w || (w = []);
                                    b = w.length;
                                    n = 0;
                                    0 < b && 0 >= e.p.page && (e.p.page = 1);
                                    var U, ha = parseInt(e.p.rowNum,
                                            10),
                                        la = e.p.scroll ? a.jgrid.randId() : 1,
                                        ba = !1;
                                    h && (ha *= h + 1);
                                    "local" !== e.p.datatype || e.p.deselectAfterSort || (ba = !0);
                                    var X, ea = a.isFunction(e.p.afterInsertRow);
                                    h = [];
                                    var ra = !1,
                                        ta = a("#" + a.jgrid.jqID(e.p.id) + " tbody:first"),
                                        S = J ? y(K, "rownumBox", !1, "jqgrid-rownum") : "",
                                        P = H ? y(K, "multiBox", !1, "cbox") : "";
                                    for (e.p.grouping && (ra = !0 === e.p.groupingView.groupCollapse, X = a.jgrid.getMethod("groupingPrepare")); b > n;) {
                                        if (r = w[n], z = a.jgrid.getAccessor(r, t), void 0 === z && ("number" == typeof t && null != e.p.colModel[t + H + v + J] && (z = a.jgrid.getAccessor(r,
                                                e.p.colModel[t + H + v + J].name)), void 0 === z && (z = la + n, 0 === E.length && d.cell))) g = a.jgrid.getAccessor(r, d.cell) || r, z = null != g && void 0 !== g[t] ? g[t] : z;
                                        z = e.p.idPrefix + z;
                                        g = 1 === f ? 0 : f;
                                        x = ka + (1 === (g + n) % 2 ? " " + Z : "");
                                        ba && (U = e.p.multiselect ? -1 !== a.inArray(z, e.p.selarrrow) : z === e.p.selrow);
                                        var Ka = R.length;
                                        R.push("");
                                        J && R.push(F(0, n, e.p.page, e.p.rowNum, S));
                                        H && R.push(I(z, J, n, U, P));
                                        v && R.push(u.call(C, H + J, n + f));
                                        B = N;
                                        d.repeatitems && (d.cell && (r = a.jgrid.getAccessor(r, d.cell) || r), a.isArray(r) && (B = L));
                                        for (q = 0; q < B.length; q++) g = a.jgrid.getAccessor(r,
                                            B[q]), Q[e.p.colModel[q + H + v + J].name] = g, R.push(D(z, g, q + H + v + J, n + f, r, Q));
                                        if (x += U ? " " + p : "", R[Ka] = ia(z, ra, x, Q, r), R.push("</tr>"), e.p.grouping && (h.push(R), e.p.groupingView._locgr || X.call(C, Q, n), R = []), (l || !0 === e.p.treeGrid && !e.p._ald) && (Q._id_ = a.jgrid.stripPref(e.p.idPrefix, z), e.p.data.push(Q), e.p._index[Q._id_] = e.p.data.length - 1), !1 === e.p.gridview && (ta.append(R.join("")), C.triggerHandler("jqGridAfterInsertRow", [z, Q, r]), ea && e.p.afterInsertRow.call(e, z, Q, r), R = []), Q = {}, A++, n++, A === ha) break
                                    }
                                    if (!0 === e.p.gridview &&
                                        (k = -1 < e.p.treeANode ? e.p.treeANode : 0, e.p.grouping ? l || (C.jqGrid("groupingRender", h, e.p.colModel.length, e.p.page, ha), h = null) : !0 === e.p.treeGrid && 0 < k ? a(e.rows[k]).after(R.join("")) : (ta.append(R.join("")), e.grid.cols = e.rows[0].cells)), !0 === e.p.subGrid) try {
                                        C.jqGrid("addSubGrid", H + J)
                                    } catch (db) {}
                                    if (e.p.totaltime = new Date - m, 0 < A && 0 === e.p.records && (e.p.records = b), !0 === e.p.treeGrid) try {
                                        C.jqGrid("setTreeNode", k + 1, A + k + 1)
                                    } catch (db) {}
                                    if (e.p.reccount = A, e.p.treeANode = -1, e.p.userDataOnFooter && C.jqGrid("footerData", "set",
                                            e.p.userData, !0), l && (e.p.records = b, e.p.lastpage = Math.ceil(b / ha)), c || e.updatepager(!1, !0), l) {
                                        for (; b > A && w[A];) {
                                            if (r = w[A], z = a.jgrid.getAccessor(r, t), void 0 === z && ("number" == typeof t && null != e.p.colModel[t + H + v + J] && (z = a.jgrid.getAccessor(r, e.p.colModel[t + H + v + J].name)), void 0 === z && (z = la + A, 0 === E.length && d.cell))) f = a.jgrid.getAccessor(r, d.cell) || r, z = null != f && void 0 !== f[t] ? f[t] : z;
                                            if (r) {
                                                z = e.p.idPrefix + z;
                                                B = N;
                                                d.repeatitems && (d.cell && (r = a.jgrid.getAccessor(r, d.cell) || r), a.isArray(r) && (B = L));
                                                for (q = 0; q < B.length; q++) Q[e.p.colModel[q +
                                                    H + v + J].name] = a.jgrid.getAccessor(r, B[q]);
                                                Q._id_ = a.jgrid.stripPref(e.p.idPrefix, z);
                                                e.p.grouping && X.call(C, Q, A);
                                                e.p.data.push(Q);
                                                e.p._index[Q._id_] = e.p.data.length - 1;
                                                Q = {}
                                            }
                                            A++
                                        }
                                        e.p.grouping && (e.p.groupingView._locgr = !0, C.jqGrid("groupingRender", h, e.p.colModel.length, e.p.page, ha))
                                    }
                                }
                            },
                            W = function() {
                                function b(f) {
                                    var c, h, m, d, w, l, n = 0;
                                    if (null != f.groups) {
                                        (h = f.groups.length && "OR" === f.groupOp.toString().toUpperCase()) && k.orBegin();
                                        for (c = 0; c < f.groups.length; c++) {
                                            0 < n && h && k.or();
                                            try {
                                                b(f.groups[c])
                                            } catch (q) {
                                                alert(q)
                                            }
                                            n++
                                        }
                                        h &&
                                            k.orEnd()
                                    }
                                    if (null != f.rules) try {
                                        (m = f.rules.length && "OR" === f.groupOp.toString().toUpperCase()) && k.orBegin();
                                        for (c = 0; c < f.rules.length; c++) w = f.rules[c], d = f.groupOp.toString().toUpperCase(), y[w.op] && w.field && (0 < n && d && "OR" === d && (k = k.or()), l = g[w.field], "date" === l.stype && l.srcfmt && l.newfmt && l.srcfmt !== l.newfmt && (w.data = a.jgrid.parseDate.call(e, l.newfmt, w.data, l.srcfmt)), k = y[w.op](k, d)(w.field, w.data, g[w.field])), n++;
                                        m && k.orEnd()
                                    } catch (q) {
                                        alert(q)
                                    }
                                }
                                var f, c, h, m, d = e.p.multiSort ? [] : "",
                                    w = [],
                                    l = !1,
                                    g = {},
                                    n = [],
                                    q = [];
                                if (a.isArray(e.p.data)) {
                                    var r, u, B, t = e.p.grouping ? e.p.groupingView : !1;
                                    if (a.each(e.p.colModel, function() {
                                            if (c = this.sorttype || "text", B = this.index || this.name, "date" === c || "datetime" === c ? (this.formatter && "string" == typeof this.formatter && "date" === this.formatter ? (f = this.formatoptions && this.formatoptions.srcformat ? this.formatoptions.srcformat : a.jgrid.getRegional(e, "formatter.date.srcformat"), h = this.formatoptions && this.formatoptions.newformat ? this.formatoptions.newformat : a.jgrid.getRegional(e, "formatter.date.newformat")) :
                                                    f = h = this.datefmt || "Y-m-d", g[B] = {
                                                        stype: c,
                                                        srcfmt: f,
                                                        newfmt: h,
                                                        sfunc: this.sortfunc || null
                                                    }) : g[B] = {
                                                    stype: c,
                                                    srcfmt: "",
                                                    newfmt: "",
                                                    sfunc: this.sortfunc || null
                                                }, e.p.grouping)
                                                for (u = 0, r = t.groupField.length; r > u; u++) this.name === t.groupField[u] && (n[u] = g[B], q[u] = B);
                                            e.p.multiSort || l || B !== e.p.sortname || (d = B, l = !0)
                                        }), e.p.multiSort && (d = H, w = E), e.p.treeGrid && e.p._sort) return void a(e).jqGrid("SortTree", d, e.p.sortorder, g[d].stype || "text", g[d].srcfmt || "");
                                    var y = {
                                            eq: function(a) {
                                                return a.equals
                                            },
                                            ne: function(a) {
                                                return a.notEquals
                                            },
                                            lt: function(a) {
                                                return a.less
                                            },
                                            le: function(a) {
                                                return a.lessOrEquals
                                            },
                                            gt: function(a) {
                                                return a.greater
                                            },
                                            ge: function(a) {
                                                return a.greaterOrEquals
                                            },
                                            cn: function(a) {
                                                return a.contains
                                            },
                                            nc: function(a, b) {
                                                return "OR" === b ? a.orNot().contains : a.andNot().contains
                                            },
                                            bw: function(a) {
                                                return a.startsWith
                                            },
                                            bn: function(a, b) {
                                                return "OR" === b ? a.orNot().startsWith : a.andNot().startsWith
                                            },
                                            en: function(a, b) {
                                                return "OR" === b ? a.orNot().endsWith : a.andNot().endsWith
                                            },
                                            ew: function(a) {
                                                return a.endsWith
                                            },
                                            ni: function(a, b) {
                                                return "OR" === b ? a.orNot().equals :
                                                    a.andNot().equals
                                            },
                                            "in": function(a) {
                                                return a.equals
                                            },
                                            nu: function(a) {
                                                return a.isNull
                                            },
                                            nn: function(a, b) {
                                                return "OR" === b ? a.orNot().isNull : a.andNot().isNull
                                            }
                                        },
                                        k = a.jgrid.from.call(e, e.p.data);
                                    if (e.p.ignoreCase && (k = k.ignoreCase()), !0 === e.p.search) {
                                        var z = e.p.postData.filters;
                                        if (z) "string" == typeof z && (z = a.jgrid.parse(z)), b(z);
                                        else try {
                                            m = g[e.p.postData.searchField], "date" === m.stype && m.srcfmt && m.newfmt && m.srcfmt !== m.newfmt && (e.p.postData.searchString = a.jgrid.parseDate.call(e, m.newfmt, e.p.postData.searchString,
                                                m.srcfmt)), k = y[e.p.postData.searchOper](k)(e.p.postData.searchField, e.p.postData.searchString, g[e.p.postData.searchField])
                                        } catch (x) {}
                                    } else e.p.treeGrid && "nested" === e.p.treeGridModel && k.orderBy(e.p.treeReader.left_field, "asc", "integer", "", null);
                                    if (e.p.treeGrid && "adjacency" === e.p.treeGridModel && (r = 0, d = null), e.p.grouping)
                                        for (u = 0; r > u; u++) k.orderBy(q[u], t.groupOrder[u], n[u].stype, n[u].srcfmt);
                                    e.p.multiSort ? a.each(d, function(a) {
                                            k.orderBy(this, w[a], g[this].stype, g[this].srcfmt, g[this].sfunc)
                                        }) : d && e.p.sortorder &&
                                        l && ("DESC" === e.p.sortorder.toUpperCase() ? k.orderBy(e.p.sortname, "d", g[d].stype, g[d].srcfmt, g[d].sfunc) : k.orderBy(e.p.sortname, "a", g[d].stype, g[d].srcfmt, g[d].sfunc));
                                    m = k.select();
                                    var z = parseInt(e.p.rowNum, 10),
                                        C = m.length,
                                        A = parseInt(e.p.page, 10),
                                        K = Math.ceil(C / z),
                                        p = {};
                                    if ((e.p.search || e.p.resetsearch) && e.p.grouping && e.p.groupingView._locgr) {
                                        e.p.groupingView.groups = [];
                                        var T, v, G, J = a.jgrid.getMethod("groupingPrepare");
                                        if (e.p.footerrow && e.p.userDataOnFooter) {
                                            for (v in e.p.userData) e.p.userData.hasOwnProperty(v) &&
                                                (e.p.userData[v] = 0);
                                            G = !0
                                        }
                                        for (T = 0; C > T; T++) {
                                            if (G)
                                                for (v in e.p.userData) e.p.userData.hasOwnProperty(v) && (e.p.userData[v] += parseFloat(m[T][v] || 0));
                                            J.call(a(e), m[T], T, z)
                                        }
                                    }
                                    return m = e.p.treeGrid && e.p.search ? a(e).jqGrid("searchTree", m) : m.slice((A - 1) * z, A * z), k = null, g = null, p[e.p.localReader.total] = K, p[e.p.localReader.page] = A, p[e.p.localReader.records] = C, p[e.p.localReader.root] = m, p[e.p.localReader.userdata] = e.p.userData, m = null, p
                                }
                            },
                            Ga = function() {
                                e.grid.hDiv.loading = !0;
                                e.p.hiddengrid || a(e).jqGrid("progressBar", {
                                    method: "show",
                                    loadtype: e.p.loadui,
                                    htmlcontent: a.jgrid.getRegional(e, "defaults.loadtext", e.p.loadtext)
                                })
                            },
                            V = function() {
                                e.grid.hDiv.loading = !1;
                                a(e).jqGrid("progressBar", {
                                    method: "hide",
                                    loadtype: e.p.loadui
                                })
                            },
                            na = function(b) {
                                if (!e.grid.hDiv.loading) {
                                    var f, c, h = e.p.scroll && !1 === b;
                                    c = {};
                                    var m = e.p.prmNames;
                                    0 >= e.p.page && (e.p.page = Math.min(1, e.p.lastpage));
                                    null !== m.search && (c[m.search] = e.p.search);
                                    null !== m.nd && (c[m.nd] = (new Date).getTime());
                                    null !== m.rows && (c[m.rows] = e.p.rowNum);
                                    null !== m.page && (c[m.page] = e.p.page);
                                    null !== m.sort && (c[m.sort] = e.p.sortname);
                                    null !== m.order && (c[m.order] = e.p.sortorder);
                                    null !== e.p.rowTotal && null !== m.totalrows && (c[m.totalrows] = e.p.rowTotal);
                                    var d = a.isFunction(e.p.loadComplete),
                                        w = d ? e.p.loadComplete : null,
                                        l = 0;
                                    if (b = b || 1, 1 < b ? null !== m.npage ? (c[m.npage] = b, l = b - 1, b = 1) : w = function(a) {
                                            e.p.page++;
                                            e.grid.hDiv.loading = !1;
                                            d && e.p.loadComplete.call(e, a);
                                            na(b - 1)
                                        } : null !== m.npage && delete e.p.postData[m.npage], e.p.grouping) {
                                        a(e).jqGrid("groupingSetup");
                                        var g, n = e.p.groupingView,
                                            q = "";
                                        for (g = 0; g < n.groupField.length; g++) {
                                            var r =
                                                n.groupField[g];
                                            a.each(e.p.colModel, function(a, b) {
                                                b.name === r && b.index && (r = b.index)
                                            });
                                            q += r + " " + n.groupOrder[g] + ", "
                                        }
                                        c[m.sort] = q + c[m.sort]
                                    }
                                    a.extend(e.p.postData, c);
                                    var u = e.p.scroll ? e.rows.length - 1 : 1;
                                    c = a(e).triggerHandler("jqGridBeforeRequest");
                                    if (!1 !== c && "stop" !== c) {
                                        if (a.isFunction(e.p.datatype)) return void e.p.datatype.call(e, e.p.postData, "load_" + e.p.id, u, b, l);
                                        if (!a.isFunction(e.p.beforeRequest) || (c = e.p.beforeRequest.call(e), void 0 === c && (c = !0), !1 !== c)) {
                                            switch (f = e.p.datatype.toLowerCase()) {
                                                case "json":
                                                case "jsonp":
                                                case "xml":
                                                case "script":
                                                    a.ajax(a.extend({
                                                        url: e.p.url,
                                                        type: e.p.mtype,
                                                        dataType: f,
                                                        data: a.isFunction(e.p.serializeGridData) ? e.p.serializeGridData.call(e, e.p.postData) : e.p.postData,
                                                        success: function(c, m, d) {
                                                            return a.isFunction(e.p.beforeProcessing) && !1 === e.p.beforeProcessing.call(e, c, m, d) ? void V() : ("xml" === f ? S(c, u, 1 < b, l) : P(c, u, 1 < b, l), a(e).triggerHandler("jqGridLoadComplete", [c]), w && w.call(e, c), a(e).triggerHandler("jqGridAfterLoadComplete", [c]), h && e.grid.populateVisible(), (e.p.loadonce || e.p.treeGrid) && (e.p.datatype = "local"), void(1 === b && V()))
                                                        },
                                                        error: function(f,
                                                            c, h) {
                                                            a.isFunction(e.p.loadError) && e.p.loadError.call(e, f, c, h);
                                                            1 === b && V()
                                                        },
                                                        beforeSend: function(b, f) {
                                                            var c = !0;
                                                            return a.isFunction(e.p.loadBeforeSend) && (c = e.p.loadBeforeSend.call(e, b, f)), void 0 === c && (c = !0), !1 === c ? !1 : void Ga()
                                                        }
                                                    }, a.jgrid.ajaxOptions, e.p.ajaxGridOptions));
                                                    break;
                                                case "xmlstring":
                                                    Ga();
                                                    c = "string" != typeof e.p.datastr ? e.p.datastr : a.parseXML(e.p.datastr);
                                                    S(c);
                                                    a(e).triggerHandler("jqGridLoadComplete", [c]);
                                                    d && e.p.loadComplete.call(e, c);
                                                    a(e).triggerHandler("jqGridAfterLoadComplete", [c]);
                                                    e.p.datatype =
                                                        "local";
                                                    e.p.datastr = null;
                                                    V();
                                                    break;
                                                case "jsonstring":
                                                    Ga();
                                                    c = "string" == typeof e.p.datastr ? a.jgrid.parse(e.p.datastr) : e.p.datastr;
                                                    P(c);
                                                    a(e).triggerHandler("jqGridLoadComplete", [c]);
                                                    d && e.p.loadComplete.call(e, c);
                                                    a(e).triggerHandler("jqGridAfterLoadComplete", [c]);
                                                    e.p.datatype = "local";
                                                    e.p.datastr = null;
                                                    V();
                                                    break;
                                                case "local":
                                                case "clientside":
                                                    Ga(), e.p.datatype = "local", e.p._ald = !0, c = W(), P(c, u, 1 < b, l), a(e).triggerHandler("jqGridLoadComplete", [c]), w && w.call(e, c), a(e).triggerHandler("jqGridAfterLoadComplete", [c]), h && e.grid.populateVisible(), V(), e.p._ald = !1
                                            }
                                            e.p._sort = !1
                                        }
                                    }
                                }
                            },
                            Da = function(b) {
                                a("#cb_" + a.jgrid.jqID(e.p.id), e.grid.hDiv)[e.p.useProp ? "prop" : "attr"]("checked", b);
                                e.p.frozenColumns && e.p.id + "_frozen" && a("#cb_" + a.jgrid.jqID(e.p.id), e.grid.fhDiv)[e.p.useProp ? "prop" : "attr"]("checked", b)
                            };
                        d = function(b, f) {
                            var c, h, m, d, w, l;
                            l = "<td class='ui-pg-button " + C + "'><span class='ui-separator'></span></td>";
                            var g = "";
                            w = "<table class='ui-pg-table ui-common-table ui-paging-pager'><tbody><tr>";
                            var n = "",
                                r = function(b, f) {
                                    var c;
                                    return a.isFunction(e.p.onPaging) && (c = e.p.onPaging.call(e, b, f)), "stop" === c ? !1 : (e.p.selrow = null, e.p.multiselect && (e.p.selarrrow = [], Da(!1)), e.p.savedRow = [], !0)
                                };
                            if (b = b.substr(1), f += "_" + b, c = "pg_" + b, h = b + "_left", m = b + "_center", d = b + "_right", a("#" + a.jgrid.jqID(b)).append("<div id='" + c + "' class='ui-pager-control' role='group'><table " + y(K, "pagerTable", !1, "ui-pg-table ui-common-table ui-pager-table") + "><tbody><tr><td id='" + h + "' align='left'></td><td id='" + m + "' align='center' style='white-space:pre;'></td><td id='" +
                                    d + "' align='right'></td></tr></tbody></table></div>").attr("dir", "ltr"), 0 < e.p.rowList.length) {
                                n = '<td dir="' + q + '">';
                                n += "<select " + y(K, "pgSelectBox", !1, "ui-pg-selbox") + ' role="listbox" title="' + (a.jgrid.getRegional(e, "defaults.pgrecs", e.p.pgrecs) || "") + '">';
                                for (h = 0; h < e.p.rowList.length; h++) m = e.p.rowList[h].toString().split(":"), 1 === m.length && (m[1] = m[0]), n += '<option role="option" value="' + m[0] + '"' + (G(e.p.rowNum, 0) === G(m[0], 0) ? ' selected="selected"' : "") + ">" + m[1] + "</option>";
                                n += "</select></td>"
                            }("rtl" ===
                                q && (w += n), !0 === e.p.pginput && (g = "<td id='input" + f + "' dir='" + q + "'>" + a.jgrid.template(a.jgrid.getRegional(e, "defaults.pgtext", e.p.pgtext) || "", "<input class='ui-pg-input' type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + a.jgrid.jqID(b) + "'></span>") + "</td>"), !0 === e.p.pgbuttons) ? (h = ["first" + f, "prev" + f, "next" + f, "last" + f], m = y(K, "pgButtonBox", !0, "ui-pg-button"), d = [a.jgrid.getRegional(e, "defaults.pgfirst", e.p.pgfirst) || "", a.jgrid.getRegional(e, "defaults.pgprev", e.p.pgprev) ||
                                    "", a.jgrid.getRegional(e, "defaults.pgnext", e.p.pgnext) || "", a.jgrid.getRegional(e, "defaults.pglast", e.p.pglast) || ""
                                ], "rtl" === q && (h.reverse(), d.reverse()), w += "<td id='" + h[0] + "' class='" + m + "' title='" + d[0] + "'><span " + y(K, "icon_first", !1, x) + "></span></td>", w += "<td id='" + h[1] + "' class='" + m + "'  title='" + d[1] + "'><span " + y(K, "icon_prev", !1, x) + "></span></td>", w = w + ("" !== g ? l + g + l : "") + ("<td id='" + h[2] + "' class='" + m + "' title='" + d[2] + "'><span " + y(K, "icon_next", !1, x) + "></span></td>"), w += "<td id='" + h[3] + "' class='" +
                                m + "' title='" + d[3] + "'><span " + y(K, "icon_end", !1, x) + "></span></td>") : "" !== g && (w += g);
                            "ltr" === q && (w += n);
                            w += "</tr></tbody></table>";
                            !0 === e.p.viewrecords && a("td#" + b + "_" + e.p.recordpos, "#" + c).append("<div dir='" + q + "' style='text-align:" + e.p.recordpos + "' class='ui-paging-info'></div>");
                            a("td#" + b + "_" + e.p.pagerpos, "#" + c).append(w);
                            l = a("#gbox_" + a.jgrid.jqID(e.p.id)).css("font-size") || "11px";
                            a("#gbox_" + a.jgrid.jqID(e.p.id)).append("<div id='testpg' " + y(K, "entrieBox", !1, "ui-jqgrid") + " style='font-size:" + l + ";visibility:hidden;' ></div>");
                            w = a(w).clone().appendTo("#testpg").width();
                            a("#testpg").remove();
                            0 < w && ("" !== g && (w += 50), a("td#" + b + "_" + e.p.pagerpos, "#" + c).width(w));
                            e.p._nvtd = [];
                            e.p._nvtd[0] = Math.floor(w ? (e.p.width - w) / 2 : e.p.width / 3);
                            e.p._nvtd[1] = 0;
                            w = null;
                            a(".ui-pg-selbox", "#" + c).bind("change", function() {
                                return r("records", this) ? (e.p.page = Math.round(e.p.rowNum * (e.p.page - 1) / this.value - .5) + 1, e.p.rowNum = this.value, e.p.pager && a(".ui-pg-selbox", e.p.pager).val(this.value), e.p.toppager && a(".ui-pg-selbox", e.p.toppager).val(this.value), na(), !1) : !1
                            });
                            !0 === e.p.pgbuttons && (a(".ui-pg-button", "#" + c).hover(function() {
                                a(this).hasClass(C) ? this.style.cursor = "default" : (a(this).addClass(A), this.style.cursor = "pointer")
                            }, function() {
                                a(this).hasClass(C) || (a(this).removeClass(A), this.style.cursor = "default")
                            }), a("#first" + a.jgrid.jqID(f) + ", #prev" + a.jgrid.jqID(f) + ", #next" + a.jgrid.jqID(f) + ", #last" + a.jgrid.jqID(f)).click(function() {
                                if (a(this).hasClass(C)) return !1;
                                var b = G(e.p.page, 1),
                                    c = G(e.p.lastpage, 1),
                                    h = !1,
                                    m = !0,
                                    d = !0,
                                    w = !0,
                                    l = !0;
                                return 0 === c || 1 === c ? (m = !1, d = !1, w = !1, l = !1) : 1 < c && 1 <= b ? 1 === b ? (m = !1, d = !1) : b === c && (w = !1, l = !1) : 1 < c && 0 === b && (w = !1, l = !1, b = c - 1), r(this.id.split("_")[0], this) ? (this.id === "first" + f && m && (e.p.page = 1, h = !0), this.id === "prev" + f && d && (e.p.page = b - 1, h = !0), this.id === "next" + f && w && (e.p.page = b + 1, h = !0), this.id === "last" + f && l && (e.p.page = c, h = !0), h && na(), !1) : !1
                            }));
                            !0 === e.p.pginput && a("#" + c).on("keypress", "input.ui-pg-input", function(b) {
                                return 13 === (b.charCode || b.keyCode || 0) ? r("user", this) ? (a(this).val(G(a(this).val(), 1)), e.p.page = 0 < a(this).val() ? a(this).val() :
                                    e.p.page, na(), !1) : !1 : this
                            })
                        };
                        var Z = function(b, f) {
                                var c, h = e.p.colModel,
                                    m = e.p.frozenColumns ? f : e.grid.headers[b].el,
                                    d = "";
                                a("span.ui-grid-ico-sort", m).addClass(C);
                                a(m).attr("aria-selected", "false");
                                c = h[b].index || h[b].name;
                                h[b].lso ? "asc" === h[b].lso ? (h[b].lso += "-desc", d = "desc") : "desc" === h[b].lso ? (h[b].lso += "-asc", d = "asc") : ("asc-desc" === h[b].lso || "desc-asc" === h[b].lso) && (h[b].lso = "") : h[b].lso = d = h[b].firstsortorder || "asc";
                                d ? (a("span.s-ico", m).show(), a("span.ui-icon-" + d, m).removeClass(C), a(m).attr("aria-selected",
                                    "true")) : e.p.viewsortcols[0] || a("span.s-ico", m).hide();
                                h = H.indexOf(c); - 1 === h ? (H.push(c), E.push(d)) : d ? E[h] = d : (E.splice(h, 1), H.splice(h, 1));
                                e.p.sortorder = "";
                                e.p.sortname = "";
                                c = 0;
                                for (d = H.length; d > c; c++) 0 < c && (e.p.sortname += ", "), e.p.sortname += H[c], c !== d - 1 && (e.p.sortname += " " + E[c]);
                                e.p.sortorder = E[d - 1]
                            },
                            U = function(b, f, c, h, m) {
                                if (e.p.colModel[f].sortable && !(0 < e.p.savedRow.length)) {
                                    if (c || (e.p.lastsort === f && "" !== e.p.sortname ? "asc" === e.p.sortorder ? e.p.sortorder = "desc" : "desc" === e.p.sortorder && (e.p.sortorder =
                                            "asc") : e.p.sortorder = e.p.colModel[f].firstsortorder || "asc", e.p.page = 1), e.p.multiSort) Z(f, m);
                                    else {
                                        if (h) {
                                            if (e.p.lastsort === f && e.p.sortorder === h && !c) return;
                                            e.p.sortorder = h
                                        }
                                        c = e.grid.headers[e.p.lastsort] ? e.grid.headers[e.p.lastsort].el : null;
                                        h = e.p.frozenColumns ? m : e.grid.headers[f].el;
                                        var d = "single" === e.p.viewsortcols[1] ? !0 : !1;
                                        m = a(c).find("span.ui-grid-ico-sort");
                                        m.addClass(C);
                                        d && a(m).css("display", "none");
                                        a(c).attr("aria-selected", "false");
                                        e.p.frozenColumns && (m = e.grid.fhDiv.find("span.ui-grid-ico-sort"),
                                            m.addClass(C), d && m.css("display", "none"), e.grid.fhDiv.find("th").attr("aria-selected", "false"));
                                        m = a(h).find("span.ui-icon-" + e.p.sortorder);
                                        m.removeClass(C);
                                        d && m.css("display", "");
                                        a(h).attr("aria-selected", "true");
                                        e.p.viewsortcols[0] || (e.p.lastsort !== f ? (e.p.frozenColumns && e.grid.fhDiv.find("span.s-ico").hide(), a("span.s-ico", c).hide(), a("span.s-ico", h).show()) : "" === e.p.sortname && a("span.s-ico", h).show());
                                        b = b.substring(5 + e.p.id.length + 1);
                                        e.p.sortname = e.p.colModel[f].index || b
                                    }
                                    if ("stop" === a(e).triggerHandler("jqGridSortCol", [e.p.sortname, f, e.p.sortorder]) || a.isFunction(e.p.onSortCol) && "stop" === e.p.onSortCol.call(e, e.p.sortname, f, e.p.sortorder)) return void(e.p.lastsort = f);
                                    if ("local" === e.p.datatype ? e.p.deselectAfterSort && a(e).jqGrid("resetSelection") : (e.p.selrow = null, e.p.multiselect && Da(!1), e.p.selarrrow = [], e.p.savedRow = []), e.p.scroll) c = e.grid.bDiv.scrollLeft, Y.call(e, !0, !1), e.grid.hDiv.scrollLeft = c;
                                    e.p.subGrid && "local" === e.p.datatype && a("td.sgexpanded", "#" + a.jgrid.jqID(e.p.id)).each(function() {
                                        a(this).trigger("click")
                                    });
                                    e.p._sort = !0;
                                    na();
                                    e.p.lastsort = f;
                                    e.p.sortname !== b && f && (e.p.lastsort = f)
                                }
                            },
                            Ka = function(b) {
                                b = a(e.grid.headers[b].el);
                                b = [b.position().left + b.outerWidth()];
                                return "rtl" === e.p.direction && (b[0] = e.p.width - b[0]), b[0] -= e.grid.bDiv.scrollLeft, b.push(a(e.grid.hDiv).position().top), b.push(a(e.grid.bDiv).offset().top - a(e.grid.hDiv).offset().top + a(e.grid.bDiv).height()), b
                            },
                            ta = function(b) {
                                var f, c = e.grid.headers,
                                    h = a.jgrid.getCellIndex(b);
                                for (f = 0; f < c.length; f++)
                                    if (b === c[f].el) {
                                        h = f;
                                        break
                                    }
                                return h
                            };
                        this.p.id = this.id; - 1 === a.inArray(e.p.multikey, ["shiftKey", "altKey", "ctrlKey"]) && (e.p.multikey = !1);
                        e.p.keyName = !1;
                        for (u = 0; u < e.p.colModel.length; u++) J = "string" == typeof e.p.colModel[u].template ? null != a.jgrid.cmTemplate && "object" == typeof a.jgrid.cmTemplate[e.p.colModel[u].template] ? a.jgrid.cmTemplate[e.p.colModel[u].template] : {} : e.p.colModel[u].template, e.p.colModel[u] = a.extend(!0, {}, e.p.cmTemplate, J || {}, e.p.colModel[u]), !1 === e.p.keyName && !0 === e.p.colModel[u].key && (e.p.keyName = e.p.colModel[u].name);
                        if (e.p.sortorder = e.p.sortorder.toLowerCase(),
                            a.jgrid.cell_width = a.jgrid.cellWidth(), !0 === e.p.grouping && (e.p.scroll = !1, e.p.rownumbers = !1, e.p.treeGrid = !1, e.p.gridview = !0), !0 === this.p.treeGrid) {
                            try {
                                a(this).jqGrid("setTreeGrid")
                            } catch (ca) {}
                            "local" !== e.p.datatype && (e.p.localReader = {
                                id: "_id_"
                            })
                        }
                        if (this.p.subGrid) try {
                            a(e).jqGrid("setSubGrid")
                        } catch (ca) {}
                        this.p.multiselect && (this.p.colNames.unshift("<input role='checkbox' id='cb_" + this.p.id + "' class='cbox' type='checkbox'/>"), this.p.colModel.unshift({
                            name: "cb",
                            width: a.jgrid.cell_width ? e.p.multiselectWidth +
                                e.p.cellLayout : e.p.multiselectWidth,
                            sortable: !1,
                            resizable: !1,
                            hidedlg: !0,
                            search: !1,
                            align: "center",
                            fixed: !0,
                            frozen: !0
                        }));
                        this.p.rownumbers && (this.p.colNames.unshift(""), this.p.colModel.unshift({
                            name: "rn",
                            width: e.p.rownumWidth,
                            sortable: !1,
                            resizable: !1,
                            hidedlg: !0,
                            search: !1,
                            align: "center",
                            fixed: !0,
                            frozen: !0
                        }));
                        e.p.xmlReader = a.extend(!0, {
                            root: "rows",
                            row: "row",
                            page: "rows>page",
                            total: "rows>total",
                            records: "rows>records",
                            repeatitems: !0,
                            cell: "cell",
                            id: "[id]",
                            userdata: "userdata",
                            subgrid: {
                                root: "rows",
                                row: "row",
                                repeatitems: !0,
                                cell: "cell"
                            }
                        }, e.p.xmlReader);
                        e.p.jsonReader = a.extend(!0, {
                            root: "rows",
                            page: "page",
                            total: "total",
                            records: "records",
                            repeatitems: !0,
                            cell: "cell",
                            id: "id",
                            userdata: "userdata",
                            subgrid: {
                                root: "rows",
                                repeatitems: !0,
                                cell: "cell"
                            }
                        }, e.p.jsonReader);
                        e.p.localReader = a.extend(!0, {
                            root: "rows",
                            page: "page",
                            total: "total",
                            records: "records",
                            repeatitems: !1,
                            cell: "cell",
                            id: "id",
                            userdata: "userdata",
                            subgrid: {
                                root: "rows",
                                repeatitems: !0,
                                cell: "cell"
                            }
                        }, e.p.localReader);
                        e.p.scroll && (e.p.pgbuttons = !1, e.p.pginput = !1,
                            e.p.rowList = []);
                        e.p.data.length && (t(), ea());
                        var ra, la, Ja, ha, ja, ba, X;
                        J = "<thead><tr class='ui-jqgrid-labels' role='row'>";
                        var wa = "",
                            La = la = "";
                        if (!0 === e.p.shrinkToFit && !0 === e.p.forceFit)
                            for (u = e.p.colModel.length - 1; 0 <= u; u--)
                                if (!e.p.colModel[u].hidden) {
                                    e.p.colModel[u].resizable = !1;
                                    break
                                }
                        if ("horizontal" === e.p.viewsortcols[1] ? (la = " ui-i-asc", La = " ui-i-desc") : "single" === e.p.viewsortcols[1] && (la = " ui-single-sort-asc", La = " ui-single-sort-desc", wa = " style='display:none'", e.p.viewsortcols[0] = !1), ra = c ? "class='ui-th-div-ie'" :
                            "", X = "<span class='s-ico' style='display:none'>", X += "<span sort='asc'  class='ui-grid-ico-sort ui-icon-asc" + la + " ui-sort-" + q + " " + C + " " + x + " " + y(K, "icon_asc", !0) + "'" + wa + "></span>", X += "<span sort='desc' class='ui-grid-ico-sort ui-icon-desc" + La + " ui-sort-" + q + " " + C + " " + x + " " + y(K, "icon_desc", !0) + "'" + wa + "></span></span>", e.p.multiSort && e.p.sortname)
                            for (H = e.p.sortname.split(","), u = 0; u < H.length; u++) v = a.trim(H[u]).split(" "), H[u] = a.trim(v[0]), E[u] = v[1] ? a.trim(v[1]) : e.p.sortorder || "asc";
                        for (u = 0; u < this.p.colNames.length; u++) la =
                            e.p.headertitles ? ' title="' + a.jgrid.stripHtml(e.p.colNames[u]) + '"' : "", J += "<th id='" + e.p.id + "_" + e.p.colModel[u].name + "' role='columnheader' " + y(K, "headerBox", !1, "ui-th-column ui-th-" + q) + " " + la + ">", la = e.p.colModel[u].index || e.p.colModel[u].name, J += "<div id='jqgh_" + e.p.id + "_" + e.p.colModel[u].name + "' " + ra + ">" + e.p.colNames[u], e.p.colModel[u].width = e.p.colModel[u].width ? parseInt(e.p.colModel[u].width, 10) : 150, "boolean" != typeof e.p.colModel[u].title && (e.p.colModel[u].title = !0), e.p.colModel[u].lso = "", la ===
                            e.p.sortname && (e.p.lastsort = u), e.p.multiSort && (v = a.inArray(la, H), -1 !== v && (e.p.colModel[u].lso = E[v])), J += X + "</div></th>";
                        if (J += "</tr></thead>", X = null, a(this).append(J), a("thead tr:first th", this).hover(function() {
                                a(this).addClass(A)
                            }, function() {
                                a(this).removeClass(A)
                            }), this.p.multiselect) {
                            var Ba, fa = [];
                            a("#cb_" + a.jgrid.jqID(e.p.id), this).bind("click", function() {
                                e.p.selarrrow = [];
                                var b = !0 === e.p.frozenColumns ? e.p.id + "_frozen" : "";
                                this.checked ? (a(e.rows).each(function(f) {
                                    0 < f && (a(this).hasClass("ui-subgrid") ||
                                        a(this).hasClass("jqgroup") || a(this).hasClass(C) || a(this).hasClass("jqfoot") || (a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(this.id))[e.p.useProp ? "prop" : "attr"]("checked", !0), a(this).addClass(p).attr("aria-selected", "true"), e.p.selarrrow.push(this.id), e.p.selrow = this.id, b && (a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(this.id), e.grid.fbDiv)[e.p.useProp ? "prop" : "attr"]("checked", !0), a("#" + a.jgrid.jqID(this.id), e.grid.fbDiv).addClass(p))))
                                }), Ba = !0, fa = []) : (a(e.rows).each(function(f) {
                                    0 < f && (a(this).hasClass("ui-subgrid") ||
                                        a(this).hasClass("jqgroup") || a(this).hasClass(C) || a(this).hasClass("jqfoot") || (a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(this.id))[e.p.useProp ? "prop" : "attr"]("checked", !1), a(this).removeClass(p).attr("aria-selected", "false"), fa.push(this.id), b && (a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(this.id), e.grid.fbDiv)[e.p.useProp ? "prop" : "attr"]("checked", !1), a("#" + a.jgrid.jqID(this.id), e.grid.fbDiv).removeClass(p))))
                                }), e.p.selrow = null, Ba = !1);
                                a(e).triggerHandler("jqGridSelectAll", [Ba ? e.p.selarrrow :
                                    fa, Ba
                                ]);
                                a.isFunction(e.p.onSelectAll) && e.p.onSelectAll.call(e, Ba ? e.p.selarrrow : fa, Ba)
                            })
                        }!0 === e.p.autowidth && (X = a(L).innerWidth(), e.p.width = 0 < X ? X : "nw");
                        (function() {
                            var b, f, c, h, d = 0,
                                w = a.jgrid.cell_width ? 0 : G(e.p.cellLayout, 0),
                                l = 0,
                                g = G(e.p.scrollOffset, 0),
                                q = !1,
                                r = 0;
                            a.each(e.p.colModel, function() {
                                if (void 0 === this.hidden && (this.hidden = !1), e.p.grouping && e.p.autowidth) {
                                    var b = a.inArray(this.name, e.p.groupingView.groupField);
                                    0 <= b && e.p.groupingView.groupColumnShow.length > b && (this.hidden = !e.p.groupingView.groupColumnShow[b])
                                }
                                this.widthOrg =
                                    f = G(this.width, 0);
                                !1 === this.hidden && (d += f + w, this.fixed ? r += f + w : l++)
                            });
                            isNaN(e.p.width) && (e.p.width = d + (!1 !== e.p.shrinkToFit || isNaN(e.p.height) ? 0 : g));
                            m.width = e.p.width;
                            e.p.tblwidth = d;
                            !1 === e.p.shrinkToFit && !0 === e.p.forceFit && (e.p.forceFit = !1);
                            !0 === e.p.shrinkToFit && 0 < l && (c = m.width - w * l - r, isNaN(e.p.height) || (c -= g, q = !0), d = 0, a.each(e.p.colModel, function(a) {
                                !1 !== this.hidden || this.fixed || (f = Math.round(c * this.width / (e.p.tblwidth - w * l - r)), this.width = f, d += f, b = a)
                            }), h = 0, q ? m.width - r - (d + w * l) !== g && (h = m.width - r - (d + w *
                                l) - g) : q || 1 === Math.abs(m.width - r - (d + w * l)) || (h = m.width - r - (d + w * l)), e.p.colModel[b].width += h, e.p.tblwidth = d + h + w * l + r, e.p.tblwidth > e.p.width && (e.p.colModel[b].width -= e.p.tblwidth - parseInt(e.p.width, 10), e.p.tblwidth = e.p.width))
                        })();
                        a(L).css("width", m.width + "px").append("<div class='ui-jqgrid-resize-mark' id='rs_m" + e.p.id + "'>&#160;</div>");
                        e.p.scrollPopUp && a(L).append("<div " + y(K, "scrollBox", !1, "loading ui-scroll-popup") + " id='scroll_g" + e.p.id + "'></div>");
                        a(k).css("width", m.width + "px");
                        J = a("thead:first",
                            e).get(0);
                        var za = "";
                        e.p.footerrow && (za += "<table role='presentation' style='width:" + e.p.tblwidth + "px' " + y(K, "footerTable", !1, "ui-jqgrid-ftable ui-common-table") + "><tbody><tr role='row' " + y(K, "footerBox", !1, "footrow footrow-" + q) + ">");
                        X = a("tr:first", J);
                        var aa = "<tr class='jqgfirstrow' role='row'>";
                        if (e.p.disableClick = !1, a("th", X).each(function(b) {
                                Ja = e.p.colModel[b].width;
                                void 0 === e.p.colModel[b].resizable && (e.p.colModel[b].resizable = !0);
                                e.p.colModel[b].resizable ? (ha = document.createElement("span"), a(ha).html("&#160;").addClass("ui-jqgrid-resize ui-jqgrid-resize-" +
                                    q).css("cursor", "col-resize"), a(this).addClass(e.p.resizeclass)) : ha = "";
                                a(this).css("width", Ja + "px").prepend(ha);
                                ha = null;
                                var f = "";
                                e.p.colModel[b].hidden && (a(this).css("display", "none"), f = "display:none;");
                                aa += "<td role='gridcell' style='height:0px;width:" + Ja + "px;" + f + "'></td>";
                                m.headers[b] = {
                                    width: Ja,
                                    el: this
                                };
                                wa = e.p.colModel[b].sortable;
                                "boolean" != typeof wa && (e.p.colModel[b].sortable = !0, wa = !0);
                                f = e.p.colModel[b].name;
                                "cb" !== f && "subgrid" !== f && "rn" !== f && e.p.viewsortcols[2] && a(">div", this).addClass("ui-jqgrid-sortable");
                                wa && (e.p.multiSort ? e.p.viewsortcols[0] ? (a("div span.s-ico", this).show(), e.p.colModel[b].lso && a("div span.ui-icon-" + e.p.colModel[b].lso, this).removeClass(C).css("display", "")) : e.p.colModel[b].lso && (a("div span.s-ico", this).show(), a("div span.ui-icon-" + e.p.colModel[b].lso, this).removeClass(C).css("display", "")) : e.p.viewsortcols[0] ? (a("div span.s-ico", this).show(), b === e.p.lastsort && a("div span.ui-icon-" + e.p.sortorder, this).removeClass(C).css("display", "")) : b === e.p.lastsort && "" !== e.p.sortname && (a("div span.s-ico",
                                    this).show(), a("div span.ui-icon-" + e.p.sortorder, this).removeClass(C).css("display", "")));
                                e.p.footerrow && (za += "<td role='gridcell' " + Q(b, 0, "", null, "", !1) + ">&#160;</td>")
                            }).mousedown(function(b) {
                                if (1 === a(b.target).closest("th>span.ui-jqgrid-resize").length) {
                                    var f = ta(this);
                                    if (!0 === e.p.forceFit) {
                                        var c = e.p,
                                            h, d = f;
                                        for (h = f + 1; h < e.p.colModel.length; h++)
                                            if (!0 !== e.p.colModel[h].hidden) {
                                                d = h;
                                                break
                                            }
                                        c.nv = d - f
                                    }
                                    return m.dragStart(f, b, Ka(f)), !1
                                }
                            }).click(function(b) {
                                if (e.p.disableClick) return e.p.disableClick = !1, !1;
                                var f, c, h = "th>div.ui-jqgrid-sortable";
                                e.p.viewsortcols[2] || (h = "th>div>span>span.ui-grid-ico-sort");
                                b = a(b.target).closest(h);
                                if (1 === b.length) {
                                    var m;
                                    if (e.p.frozenColumns) {
                                        var d = a(this)[0].id.substring(e.p.id.length + 1);
                                        a(e.p.colModel).each(function(a) {
                                            return this.name === d ? (m = a, !1) : void 0
                                        })
                                    } else m = ta(this);
                                    return e.p.viewsortcols[2] || (f = !0, c = b.attr("sort")), null != m && U(a("div", this)[0].id, m, f, c, this), !1
                                }
                            }), e.p.sortable && a.fn.sortable) try {
                            a(e).jqGrid("sortableColumns", X)
                        } catch (ca) {}
                        e.p.footerrow && (za +=
                            "</tr></tbody></table>");
                        aa += "</tr>";
                        X = document.createElement("tbody");
                        this.appendChild(X);
                        a(this).addClass(y(K, "rowTable", !0, "ui-jqgrid-btable ui-common-table")).append(aa);
                        var aa = null,
                            u = a("<table " + y(K, "headerTable", !1, "ui-jqgrid-htable ui-common-table") + " style='width:" + e.p.tblwidth + "px' role='presentation' aria-labelledby='gbox_" + this.id + "'></table>").append(J),
                            pa = e.p.caption && !0 === e.p.hiddengrid ? !0 : !1;
                        X = a("<div class='ui-jqgrid-hbox" + ("rtl" === q ? "-rtl" : "") + "'></div>");
                        J = null;
                        m.hDiv = document.createElement("div");
                        m.hDiv.style.width = m.width + "px";
                        m.hDiv.className = y(K, "headerDiv", !0, "ui-jqgrid-hdiv");
                        a(m.hDiv).append(X);
                        a(X).append(u);
                        u = null;
                        pa && a(m.hDiv).hide();
                        e.p.pager && ("string" == typeof e.p.pager ? "#" !== e.p.pager.substr(0, 1) && (e.p.pager = "#" + e.p.pager) : e.p.pager = "#" + a(e.p.pager).attr("id"), a(e.p.pager).css({
                            width: m.width + "px"
                        }).addClass(y(K, "pagerBox", !0, "ui-jqgrid-pager")).appendTo(L), pa && a(e.p.pager).hide(), d(e.p.pager, ""));
                        !1 === e.p.cellEdit && !0 === e.p.hoverrows && a(e).bind("mouseover", function(b) {
                            ba = a(b.target).closest("tr.jqgrow");
                            "ui-subgrid" !== a(ba).attr("class") && a(ba).addClass(A)
                        }).bind("mouseout", function(b) {
                            ba = a(b.target).closest("tr.jqgrow");
                            a(ba).removeClass(A)
                        });
                        var oa, sa, ma;
                        a(e).before(m.hDiv).click(function(b) {
                            if (ja = b.target, ba = a(ja, e.rows).closest("tr.jqgrow"), 0 === a(ba).length || -1 < ba[0].className.indexOf(C) || (a(ja, e).closest("table.ui-jqgrid-btable").attr("id") || "").replace("_frozen", "") !== e.id) return this;
                            var f = a(ja).hasClass("cbox"),
                                c = a(e).triggerHandler("jqGridBeforeSelectRow", [ba[0].id, b]);
                            if (c = !1 === c || "stop" ===
                                c ? !1 : !0, a.isFunction(e.p.beforeSelectRow)) {
                                var h = e.p.beforeSelectRow.call(e, ba[0].id, b);
                                !1 !== h && "stop" !== h || (c = !1)
                            }
                            if ("A" !== ja.tagName && ("INPUT" !== ja.tagName && "TEXTAREA" !== ja.tagName && "OPTION" !== ja.tagName && "SELECT" !== ja.tagName || f))
                                if (oa = ba[0].id, ja = a(ja).closest("tr.jqgrow>td"), 0 < ja.length && (sa = a.jgrid.getCellIndex(ja), ma = a(ja).closest("td,th").html(), a(e).triggerHandler("jqGridCellSelect", [oa, sa, ma, b]), a.isFunction(e.p.onCellSelect) && e.p.onCellSelect.call(e, oa, sa, ma, b)), !0 !== e.p.cellEdit) {
                                    if (c)
                                        if (e.p.multikey) b[e.p.multikey] ?
                                            a(e).jqGrid("setSelection", oa, !0, b) : e.p.multiselect && f && (f = a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + oa).is(":checked"), a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + oa)[e.p.useProp ? "prop" : "attr"]("checked", !f));
                                        else {
                                            if (e.p.multiselect && e.p.multiboxonly && !f) {
                                                var m = e.p.frozenColumns ? e.p.id + "_frozen" : "";
                                                a(e.p.selarrrow).each(function(b, f) {
                                                    var c = a(e).jqGrid("getGridRowById", f);
                                                    c && a(c).removeClass(p);
                                                    a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(f))[e.p.useProp ? "prop" : "attr"]("checked", !1);
                                                    m && (a("#" + a.jgrid.jqID(f),
                                                        "#" + a.jgrid.jqID(m)).removeClass(p), a("#jqg_" + a.jgrid.jqID(e.p.id) + "_" + a.jgrid.jqID(f), "#" + a.jgrid.jqID(m))[e.p.useProp ? "prop" : "attr"]("checked", !1))
                                                });
                                                e.p.selarrrow = []
                                            }
                                            a(e).jqGrid("setSelection", oa, !0, b)
                                        }
                                } else if (e.p.multiselect && f && c) a(e).jqGrid("setSelection", oa, !0, b);
                            else if (0 < ja.length) try {
                                a(e).jqGrid("editCell", ba[0].rowIndex, sa, !0)
                            } catch (d) {}
                        }).bind("reloadGrid", function(b, f) {
                            if (!0 === e.p.treeGrid && (e.p.datatype = e.p.treedatatype), f = f || {}, f.current && e.grid.selectionPreserver(e), "local" === e.p.datatype ?
                                (a(e).jqGrid("resetSelection"), e.p.data.length && (t(), ea())) : e.p.treeGrid || (e.p.selrow = null, e.p.multiselect && (e.p.selarrrow = [], Da(!1)), e.p.savedRow = []), e.p.scroll && Y.call(e, !0, !1), f.page) {
                                var c = f.page;
                                c > e.p.lastpage && (c = e.p.lastpage);
                                1 > c && (c = 1);
                                e.p.page = c;
                                e.grid.bDiv.scrollTop = e.grid.prevRowHeight ? (c - 1) * e.grid.prevRowHeight * e.p.rowNum : 0
                            }
                            return e.grid.prevRowHeight && e.p.scroll && void 0 === f.page ? (delete e.p.lastpage, e.grid.populateVisible()) : e.grid.populate(), !0 === e.p.inlineNav && a(e).jqGrid("showAddEditButtons"), !1
                        }).dblclick(function(b) {
                            if (ja = b.target, ba = a(ja, e.rows).closest("tr.jqgrow"), 0 !== a(ba).length) {
                                oa = ba[0].rowIndex;
                                sa = a.jgrid.getCellIndex(ja);
                                var f = a(e).triggerHandler("jqGridDblClickRow", [a(ba).attr("id"), oa, sa, b]);
                                return null != f ? f : a.isFunction(e.p.ondblClickRow) && (f = e.p.ondblClickRow.call(e, a(ba).attr("id"), oa, sa, b), null != f) ? f : void 0
                            }
                        }).bind("contextmenu", function(b) {
                            if (ja = b.target, ba = a(ja, e.rows).closest("tr.jqgrow"), 0 !== a(ba).length) {
                                e.p.multiselect || a(e).jqGrid("setSelection", ba[0].id, !0, b);
                                oa = ba[0].rowIndex;
                                sa = a.jgrid.getCellIndex(ja);
                                var f = a(e).triggerHandler("jqGridRightClickRow", [a(ba).attr("id"), oa, sa, b]);
                                return null != f ? f : a.isFunction(e.p.onRightClickRow) && (f = e.p.onRightClickRow.call(e, a(ba).attr("id"), oa, sa, b), null != f) ? f : void 0
                            }
                        });
                        m.bDiv = document.createElement("div");
                        c && "auto" === String(e.p.height).toLowerCase() && (e.p.height = "100%");
                        a(m.bDiv).append(a('<div style="position:relative;"></div>').append("<div></div>").append(this)).addClass("ui-jqgrid-bdiv").css({
                            height: e.p.height +
                                (isNaN(e.p.height) ? "" : "px"),
                            width: m.width + "px"
                        }).scroll(m.scrollGrid);
                        a("table:first", m.bDiv).css({
                            width: e.p.tblwidth + "px"
                        });
                        a.support.tbody || 2 === a("tbody", this).length && a("tbody:gt(0)", this).remove();
                        e.p.multikey && (a.jgrid.msie ? a(m.bDiv).bind("selectstart", function() {
                            return !1
                        }) : a(m.bDiv).bind("mousedown", function() {
                            return !1
                        }));
                        pa && a(m.bDiv).hide();
                        var Pa = x + " " + y(K, "icon_caption_open", !0),
                            Qa = x + " " + y(K, "icon_caption_close", !0);
                        m.cDiv = document.createElement("div");
                        var Ma = !0 === e.p.hidegrid ? a("<a role='link' class='ui-jqgrid-titlebar-close HeaderButton " +
                            g + "' title='" + (a.jgrid.getRegional(e, "defaults.showhide", e.p.showhide) || "") + "' />").hover(function() {
                            Ma.addClass(A)
                        }, function() {
                            Ma.removeClass(A)
                        }).append("<span class='ui-jqgrid-headlink " + Pa + "'></span>").css("rtl" === q ? "left" : "right", "0px") : "";
                        if (a(m.cDiv).append(Ma).append("<span class='ui-jqgrid-title'>" + e.p.caption + "</span>").addClass("ui-jqgrid-titlebar ui-jqgrid-caption" + ("rtl" === q ? "-rtl" : "") + " " + y(K, "gridtitleBox", !0)), a(m.cDiv).insertBefore(m.hDiv), e.p.toolbar[0]) g = y(K, "customtoolbarBox", !0, "ui-userdata"), m.uDiv = document.createElement("div"), "top" === e.p.toolbar[1] ? a(m.uDiv).insertBefore(m.hDiv) : "bottom" === e.p.toolbar[1] && a(m.uDiv).insertAfter(m.hDiv), "both" === e.p.toolbar[1] ? (m.ubDiv = document.createElement("div"), a(m.uDiv).addClass(g + " ui-userdata-top").attr("id", "t_" + this.id).insertBefore(m.hDiv).width(m.width), a(m.ubDiv).addClass(g + " ui-userdata-bottom").attr("id", "tb_" + this.id).insertAfter(m.hDiv).width(m.width), pa && a(m.ubDiv).hide()) : a(m.uDiv).width(m.width).addClass(g + " ui-userdata-top").attr("id",
                            "t_" + this.id), pa && a(m.uDiv).hide();
                        if (e.p.toppager && (e.p.toppager = a.jgrid.jqID(e.p.id) + "_toppager", m.topDiv = a("<div id='" + e.p.toppager + "'></div>")[0], e.p.toppager = "#" + e.p.toppager, a(m.topDiv).addClass(y(K, "toppagerBox", !0, "ui-jqgrid-toppager")).width(m.width).insertBefore(m.hDiv), d(e.p.toppager, "_t")), e.p.footerrow && (m.sDiv = a("<div class='ui-jqgrid-sdiv'></div>")[0], X = a("<div class='ui-jqgrid-hbox" + ("rtl" === q ? "-rtl" : "") + "'></div>"), a(m.sDiv).append(X).width(m.width).insertAfter(m.hDiv), a(X).append(za),
                                m.footers = a(".ui-jqgrid-ftable", m.sDiv)[0].rows[0].cells, e.p.rownumbers && (m.footers[0].className = y(K, "rownumBox", !0, "jqgrid-rownum")), pa && a(m.sDiv).hide()), X = null, e.p.caption) {
                            var eb = e.p.datatype;
                            !0 === e.p.hidegrid && (a(".ui-jqgrid-titlebar-close", m.cDiv).click(function(b) {
                                var f, c = a.isFunction(e.p.onHeaderClick),
                                    h = ".ui-jqgrid-bdiv, .ui-jqgrid-hdiv, .ui-jqgrid-toppager, .ui-jqgrid-pager, .ui-jqgrid-sdiv",
                                    d = this;
                                return !0 === e.p.toolbar[0] && ("both" === e.p.toolbar[1] && (h += ", #" + a(m.ubDiv).attr("id")), h +=
                                    ", #" + a(m.uDiv).attr("id")), f = a(h, "#gview_" + a.jgrid.jqID(e.p.id)).length, "visible" === e.p.gridstate ? a(h, "#gbox_" + a.jgrid.jqID(e.p.id)).slideUp("fast", function() {
                                    f--;
                                    0 === f && (a("span", d).removeClass(Pa).addClass(Qa), e.p.gridstate = "hidden", a("#gbox_" + a.jgrid.jqID(e.p.id)).hasClass("ui-resizable") && a(".ui-resizable-handle", "#gbox_" + a.jgrid.jqID(e.p.id)).hide(), a(e).triggerHandler("jqGridHeaderClick", [e.p.gridstate, b]), c && (pa || e.p.onHeaderClick.call(e, e.p.gridstate, b)))
                                }) : "hidden" === e.p.gridstate && a(h,
                                    "#gbox_" + a.jgrid.jqID(e.p.id)).slideDown("fast", function() {
                                    f--;
                                    0 === f && (a("span", d).removeClass(Qa).addClass(Pa), pa && (e.p.datatype = eb, na(), pa = !1), e.p.gridstate = "visible", a("#gbox_" + a.jgrid.jqID(e.p.id)).hasClass("ui-resizable") && a(".ui-resizable-handle", "#gbox_" + a.jgrid.jqID(e.p.id)).show(), a(e).triggerHandler("jqGridHeaderClick", [e.p.gridstate, b]), c && (pa || e.p.onHeaderClick.call(e, e.p.gridstate, b)))
                                }), !1
                            }), pa && (e.p.datatype = "local", a(".ui-jqgrid-titlebar-close", m.cDiv).trigger("click")))
                        } else a(m.cDiv).hide(),
                            e.p.toppager || a(m.hDiv).addClass(y(e.p.styleUI + ".common", "cornertop", !0));
                        if (a(m.hDiv).after(m.bDiv).mousemove(function(a) {
                                return m.resizing ? (m.dragMove(a), !1) : void 0
                            }), a(".ui-jqgrid-labels", m.hDiv).bind("selectstart", function() {
                                return !1
                            }), a(document).bind("mouseup.jqGrid" + e.p.id, function() {
                                return m.resizing ? (m.dragEnd(!0), !1) : !0
                            }), e.formatCol = Q, e.sortData = U, e.updatepager = function(b, f) {
                                var c, h, m, d, w, l, g, n = "",
                                    q = (l = e.p.pager ? a.jgrid.jqID(e.p.pager.substr(1)) : "") ? "_" + l : "",
                                    r = e.p.toppager ? "_" + e.p.toppager.substr(1) :
                                    "";
                                if (m = parseInt(e.p.page, 10) - 1, 0 > m && (m = 0), m *= parseInt(e.p.rowNum, 10), w = m + e.p.reccount, e.p.scroll) {
                                    c = a("tbody:first > tr:gt(0)", e.grid.bDiv);
                                    m = w - c.length;
                                    e.p.reccount = c.length;
                                    if (c = c.outerHeight() || e.grid.prevRowHeight) {
                                        h = m * c;
                                        var u = parseInt(e.p.records, 10) * c;
                                        a(">div:first", e.grid.bDiv).css({
                                            height: u
                                        }).children("div:first").css({
                                            height: h,
                                            display: h ? "" : "none"
                                        });
                                        0 === e.grid.bDiv.scrollTop && 1 < e.p.page && (e.grid.bDiv.scrollTop = e.p.rowNum * (e.p.page - 1) * c)
                                    }
                                    e.grid.bDiv.scrollLeft = e.grid.hDiv.scrollLeft
                                }
                                if (n =
                                    e.p.pager || "", n += e.p.toppager ? n ? "," + e.p.toppager : e.p.toppager : "") {
                                    if (g = a.jgrid.getRegional(e, "formatter.integer"), c = G(e.p.page), h = G(e.p.lastpage), a(".selbox", n)[this.p.useProp ? "prop" : "attr"]("disabled", !1), !0 === e.p.pginput && (a("#input" + q).html(a.jgrid.template(a.jgrid.getRegional(e, "defaults.pgtext", e.p.pgtext) || "", "<input " + y(K, "pgInput", !1, "ui-pg-input") + " type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + a.jgrid.jqID(l) + "'></span>")), e.p.toppager && a("#input_t" + r).html(a.jgrid.template(a.jgrid.getRegional(e,
                                            "defaults.pgtext", e.p.pgtext) || "", "<input " + y(K, "pgInput", !1, "ui-pg-input") + " type='text' size='2' maxlength='7' value='0' role='textbox'/>", "<span id='sp_1_" + a.jgrid.jqID(l) + "_toppager'></span>")), a(".ui-pg-input", n).val(e.p.page), d = e.p.toppager ? "#sp_1" + q + ",#sp_1" + q + "_toppager" : "#sp_1" + q, a(d).html(a.fmatter ? a.fmatter.util.NumberFormat(e.p.lastpage, g) : e.p.lastpage)), e.p.viewrecords) 0 === e.p.reccount ? a(".ui-paging-info", n).html(a.jgrid.getRegional(e, "defaults.emptyrecords", e.p.emptyrecords)) : (d = m + 1,
                                        l = e.p.records, a.fmatter && (d = a.fmatter.util.NumberFormat(d, g), w = a.fmatter.util.NumberFormat(w, g), l = a.fmatter.util.NumberFormat(l, g)), g = a.jgrid.getRegional(e, "defaults.recordtext", e.p.recordtext), a(".ui-paging-info", n).html(a.jgrid.template(g, d, w, l)));
                                    !0 === e.p.pgbuttons && (0 >= c && (c = h = 0), 1 === c || 0 === c ? (a("#first" + q + ", #prev" + q).addClass(C).removeClass(A), e.p.toppager && a("#first_t" + r + ", #prev_t" + r).addClass(C).removeClass(A)) : (a("#first" + q + ", #prev" + q).removeClass(C), e.p.toppager && a("#first_t" + r + ", #prev_t" +
                                        r).removeClass(C)), c === h || 0 === c ? (a("#next" + q + ", #last" + q).addClass(C).removeClass(A), e.p.toppager && a("#next_t" + r + ", #last_t" + r).addClass(C).removeClass(A)) : (a("#next" + q + ", #last" + q).removeClass(C), e.p.toppager && a("#next_t" + r + ", #last_t" + r).removeClass(C)))
                                }!0 === b && !0 === e.p.rownumbers && a(">td.jqgrid-rownum", e.rows).each(function(b) {
                                    a(this).html(m + 1 + b)
                                });
                                f && e.p.jqgdnd && a(e).jqGrid("gridDnD", "updateDnD");
                                a(e).triggerHandler("jqGridGridComplete");
                                a.isFunction(e.p.gridComplete) && e.p.gridComplete.call(e);
                                a(e).triggerHandler("jqGridAfterGridComplete")
                            }, e.refreshIndex = ea, e.setHeadCheckBox = Da, e.constructTr = ia, e.formatter = function(a, b, f, e, c) {
                                return R(a, b, f, e, c)
                            }, a.extend(m, {
                                populate: na,
                                emptyRows: Y,
                                beginReq: Ga,
                                endReq: V
                            }), this.grid = m, e.addXmlData = function(a) {
                                S(a)
                            }, e.addJSONData = function(a) {
                                P(a)
                            }, this.grid.cols = this.rows[0].cells, a(e).triggerHandler("jqGridInitGrid"), a.isFunction(e.p.onInitGrid) && e.p.onInitGrid.call(e), na(), e.p.hiddengrid = !1, e.p.responsive) d = "onorientationchange" in window ? "orientationchange" :
                            "resize", a(window).on(d, function() {
                                a(e).jqGrid("resizeGrid")
                            })
                    }
                })
            };
            a.jgrid.extend({
                getGridParam: function(b, c) {
                    var h, d = this[0];
                    if (d && d.grid) {
                        if (void 0 === c && "string" != typeof c && (c = "jqGrid"), h = d.p, "jqGrid" !== c) try {
                            h = a(d).data(c)
                        } catch (l) {
                            h = d.p
                        }
                        return b ? void 0 !== h[b] ? h[b] : null : h
                    }
                },
                setGridParam: function(b, c) {
                    return this.each(function() {
                        if (null == c && (c = !1), this.grid && "object" == typeof b) !0 === c ? this.p = a.extend({}, this.p, b) : a.extend(!0, this.p, b)
                    })
                },
                getGridRowById: function(b) {
                    var c;
                    return this.each(function() {
                        try {
                            for (var h =
                                    this.rows.length; h--;)
                                if (b.toString() === this.rows[h].id) {
                                    c = this.rows[h];
                                    break
                                }
                        } catch (d) {
                            c = a(this.grid.bDiv).find("#" + a.jgrid.jqID(b))
                        }
                    }), c
                },
                getDataIDs: function() {
                    var b, c = [],
                        h = 0,
                        d = 0;
                    return this.each(function() {
                        if (b = this.rows.length, b && 0 < b)
                            for (; b > h;) a(this.rows[h]).hasClass("jqgrow") && (c[d] = this.rows[h].id, d++), h++
                    }), c
                },
                setSelection: function(b, c, h) {
                    return this.each(function() {
                        var d, l, e, g, B, r, q;
                        l = a.jgrid.getMethod("getStyleUI");
                        var u = l(this.p.styleUI + ".common", "highlight", !0),
                            k = l(this.p.styleUI + ".common",
                                "disabled", !0);
                        if (void 0 !== b && (c = !1 === c ? !1 : !0, (l = a(this).jqGrid("getGridRowById", b)) && l.className && !(-1 < l.className.indexOf(k)))) {
                            if (!0 === this.p.scrollrows && (e = a(this).jqGrid("getGridRowById", b).rowIndex, 0 <= e)) {
                                var k = a(this.grid.bDiv)[0].clientHeight,
                                    y = a(this.grid.bDiv)[0].scrollTop,
                                    K = a(this.rows[e]).position().top;
                                e = this.rows[e].clientHeight;
                                K + e >= k + y ? a(this.grid.bDiv)[0].scrollTop = K - (k + y) + e + y : k + y > K && y > K && (a(this.grid.bDiv)[0].scrollTop = K)
                            }!0 === this.p.frozenColumns && (r = this.p.id + "_frozen");
                            this.p.multiselect ?
                                (this.setHeadCheckBox(!1), this.p.selrow = l.id, g = a.inArray(this.p.selrow, this.p.selarrrow), -1 === g ? ("ui-subgrid" !== l.className && a(l).addClass(u).attr("aria-selected", "true"), d = !0, this.p.selarrrow.push(this.p.selrow)) : ("ui-subgrid" !== l.className && a(l).removeClass(u).attr("aria-selected", "false"), d = !1, this.p.selarrrow.splice(g, 1), B = this.p.selarrrow[0], this.p.selrow = void 0 === B ? null : B), a("#jqg_" + a.jgrid.jqID(this.p.id) + "_" + a.jgrid.jqID(l.id))[this.p.useProp ? "prop" : "attr"]("checked", d), r && (-1 === g ? a("#" + a.jgrid.jqID(b),
                                    "#" + a.jgrid.jqID(r)).addClass(u) : a("#" + a.jgrid.jqID(b), "#" + a.jgrid.jqID(r)).removeClass(u), a("#jqg_" + a.jgrid.jqID(this.p.id) + "_" + a.jgrid.jqID(b), "#" + a.jgrid.jqID(r))[this.p.useProp ? "prop" : "attr"]("checked", d)), c && (a(this).triggerHandler("jqGridSelectRow", [l.id, d, h]), this.p.onSelectRow && this.p.onSelectRow.call(this, l.id, d, h))) : "ui-subgrid" !== l.className && (this.p.selrow !== l.id ? (q = a(this).jqGrid("getGridRowById", this.p.selrow), q && a(q).removeClass(u).attr({
                                    "aria-selected": "false",
                                    tabindex: "-1"
                                }), a(l).addClass(u).attr({
                                    "aria-selected": "true",
                                    tabindex: "0"
                                }), r && (a("#" + a.jgrid.jqID(this.p.selrow), "#" + a.jgrid.jqID(r)).removeClass(u), a("#" + a.jgrid.jqID(b), "#" + a.jgrid.jqID(r)).addClass(u)), d = !0) : d = !1, this.p.selrow = l.id, c && (a(this).triggerHandler("jqGridSelectRow", [l.id, d, h]), this.p.onSelectRow && this.p.onSelectRow.call(this, l.id, d, h)))
                        }
                    })
                },
                resetSelection: function(b) {
                    return this.each(function() {
                        var c, h, d = this,
                            l = a.jgrid.getMethod("getStyleUI"),
                            e = l(d.p.styleUI + ".common", "highlight", !0),
                            l = l(d.p.styleUI + ".common", "hover", !0);
                        if (!0 === d.p.frozenColumns &&
                            (h = d.p.id + "_frozen"), void 0 !== b) {
                            if (c = b === d.p.selrow ? d.p.selrow : b, a("#" + a.jgrid.jqID(d.p.id) + " tbody:first tr#" + a.jgrid.jqID(c)).removeClass(e).attr("aria-selected", "false"), h && a("#" + a.jgrid.jqID(c), "#" + a.jgrid.jqID(h)).removeClass(e), d.p.multiselect) {
                                a("#jqg_" + a.jgrid.jqID(d.p.id) + "_" + a.jgrid.jqID(c), "#" + a.jgrid.jqID(d.p.id))[d.p.useProp ? "prop" : "attr"]("checked", !1);
                                h && a("#jqg_" + a.jgrid.jqID(d.p.id) + "_" + a.jgrid.jqID(c), "#" + a.jgrid.jqID(h))[d.p.useProp ? "prop" : "attr"]("checked", !1);
                                d.setHeadCheckBox(!1);
                                var g = a.inArray(a.jgrid.jqID(c), d.p.selarrrow); - 1 !== g && d.p.selarrrow.splice(g, 1)
                            }
                            d.p.onUnSelectRow && d.p.onUnSelectRow.call(d, c);
                            c = null
                        } else d.p.multiselect ? (a(d.p.selarrrow).each(function(b, f) {
                            a(a(d).jqGrid("getGridRowById", f)).removeClass(e).attr("aria-selected", "false");
                            a("#jqg_" + a.jgrid.jqID(d.p.id) + "_" + a.jgrid.jqID(f))[d.p.useProp ? "prop" : "attr"]("checked", !1);
                            h && (a("#" + a.jgrid.jqID(f), "#" + a.jgrid.jqID(h)).removeClass(e), a("#jqg_" + a.jgrid.jqID(d.p.id) + "_" + a.jgrid.jqID(f), "#" + a.jgrid.jqID(h))[d.p.useProp ?
                                "prop" : "attr"]("checked", !1));
                            d.p.onUnSelectRow && d.p.onUnSelectRow.call(d, f)
                        }), d.setHeadCheckBox(!1), d.p.selarrrow = [], d.p.selrow = null) : d.p.selrow && (a("#" + a.jgrid.jqID(d.p.id) + " tbody:first tr#" + a.jgrid.jqID(d.p.selrow)).removeClass(e).attr("aria-selected", "false"), h && a("#" + a.jgrid.jqID(d.p.selrow), "#" + a.jgrid.jqID(h)).removeClass(e), d.p.onUnSelectRow && d.p.onUnSelectRow.call(d, d.p.selrow), d.p.selrow = null);
                        !0 === d.p.cellEdit && 0 <= parseInt(d.p.iCol, 10) && 0 <= parseInt(d.p.iRow, 10) && (a("td:eq(" + d.p.iCol + ")",
                            d.rows[d.p.iRow]).removeClass("edit-cell " + e), a(d.rows[d.p.iRow]).removeClass("selected-row " + l));
                        d.p.savedRow = []
                    })
                },
                getRowData: function(b, c) {
                    var h, d, l = {},
                        e = !1,
                        g = 0;
                    return this.each(function() {
                        var B, r, q = this;
                        if (null == b) e = !0, h = [], d = q.rows.length;
                        else {
                            if (r = a(q).jqGrid("getGridRowById", b), !r) return l;
                            d = 2
                        }
                        for (c && !0 === c && 0 < q.p.data.length || (c = !1); d > g;) e && (r = q.rows[g]), a(r).hasClass("jqgrow") && (c ? l = q.p.data[q.p._index[r.id]] : a('td[role="gridcell"]', r).each(function(b) {
                            if (B = q.p.colModel[b].name, "cb" !== B &&
                                "subgrid" !== B && "rn" !== B)
                                if (!0 === q.p.treeGrid && B === q.p.ExpandColumn) l[B] = a.jgrid.htmlDecode(a("span:first", this).html());
                                else try {
                                    l[B] = a.unformat.call(q, this, {
                                        rowId: r.id,
                                        colModel: q.p.colModel[b]
                                    }, b)
                                } catch (f) {
                                    l[B] = a.jgrid.htmlDecode(a(this).html())
                                }
                        }), e && (h.push(l), l = {})), g++
                    }), h || l
                },
                delRowData: function(b) {
                    var c, h, d, l = !1;
                    return this.each(function() {
                        if (c = a(this).jqGrid("getGridRowById", b), !c) return !1;
                        if (this.p.subGrid && (d = a(c).next(), d.hasClass("ui-subgrid") && d.remove()), a(c).remove(), this.p.records--,
                            this.p.reccount--, this.updatepager(!0, !1), l = !0, this.p.multiselect && (h = a.inArray(b, this.p.selarrrow), -1 !== h && this.p.selarrrow.splice(h, 1)), this.p.multiselect && 0 < this.p.selarrrow.length ? this.p.selrow = this.p.selarrrow[this.p.selarrrow.length - 1] : this.p.selrow === b && (this.p.selrow = null), "local" === this.p.datatype) {
                            var e = a.jgrid.stripPref(this.p.idPrefix, b),
                                e = this.p._index[e];
                            void 0 !== e && (this.p.data.splice(e, 1), this.refreshIndex())
                        }
                        if (!0 === this.p.altRows && l) {
                            var g = this.p.altclass;
                            a(this.rows).each(function(b) {
                                1 ===
                                    b % 2 ? a(this).addClass(g) : a(this).removeClass(g)
                            })
                        }
                    }), l
                },
                setRowData: function(b, c, h) {
                    var d, l, e = !0;
                    return this.each(function() {
                            if (!this.grid) return !1;
                            var g, B, r = this,
                                q = typeof h,
                                u = {};
                            if (B = a(this).jqGrid("getGridRowById", b), !B) return !1;
                            if (c) try {
                                if (a(this.p.colModel).each(function(e) {
                                        d = this.name;
                                        var h = a.jgrid.getAccessor(c, d);
                                        void 0 !== h && (u[d] = this.formatter && "string" == typeof this.formatter && "date" === this.formatter ? a.unformat.date.call(r, h, this) : h, g = r.formatter(b, u[d], e, c, "edit"), l = this.title ? {
                                            title: a.jgrid.stripHtml(g)
                                        } : {}, !0 === r.p.treeGrid && d === r.p.ExpandColumn ? a("td[role='gridcell']:eq(" + e + ") > span:first", B).html(g).attr(l) : a("td[role='gridcell']:eq(" + e + ")", B).html(g).attr(l))
                                    }), "local" === r.p.datatype) {
                                    var k, y = a.jgrid.stripPref(r.p.idPrefix, b),
                                        K = r.p._index[y];
                                    if (r.p.treeGrid)
                                        for (k in r.p.treeReader) r.p.treeReader.hasOwnProperty(k) && delete u[r.p.treeReader[k]];
                                    void 0 !== K && (r.p.data[K] = a.extend(!0, r.p.data[K], u));
                                    u = null
                                }
                            } catch (C) {
                                e = !1
                            }
                            e && ("string" === q ? a(B).addClass(h) : null !== h && "object" === q && a(B).css(h), a(r).triggerHandler("jqGridAfterGridComplete"))
                        }),
                        e
                },
                addRowData: function(b, c, h, d) {
                    -1 === a.inArray(h, ["first", "last", "before", "after"]) && (h = "last");
                    var g, e, n, B, r, q, u, k, y, K, C, p, A, x, H = !1,
                        E = "",
                        v = "",
                        L = "";
                    return c && (a.isArray(c) ? (y = !0, K = b) : (c = [c], y = !1), this.each(function() {
                        var J = c.length;
                        r = !0 === this.p.rownumbers ? 1 : 0;
                        n = !0 === this.p.multiselect ? 1 : 0;
                        B = !0 === this.p.subGrid ? 1 : 0;
                        y || (void 0 !== b ? b = String(b) : (b = a.jgrid.randId(), !1 !== this.p.keyName && (K = this.p.keyName, void 0 !== c[0][K] && (b = c[0][K]))));
                        C = this.p.altclass;
                        var G, Q = 0,
                            ka = a(this).jqGrid("getStyleUI", this.p.styleUI +
                                ".base", "rowBox", !0, "jqgrow ui-row-" + this.p.direction),
                            R = {},
                            D = a.isFunction(this.p.afterInsertRow) ? !0 : !1;
                        r && (E = a(this).jqGrid("getStyleUI", this.p.styleUI + ".base", "rownumBox", !1, "jqgrid-rownum"));
                        for (n && (v = a(this).jqGrid("getStyleUI", this.p.styleUI + ".base", "multiBox", !1, "cbox")); J > Q;) {
                            if (p = c[Q], e = [], G = ka, y) {
                                try {
                                    b = p[K], void 0 === b && (b = a.jgrid.randId())
                                } catch (I) {
                                    b = a.jgrid.randId()
                                }
                                G += !0 === this.p.altRows && 0 === (this.rows.length - 1) % 2 ? " " + C : ""
                            }
                            x = b;
                            b = this.p.idPrefix + b;
                            r && (L = this.formatCol(0, 1, "", null, b, !0),
                                e[e.length] = '<td role="gridcell" ' + E + " " + L + ">0</td>");
                            n && (k = '<input role="checkbox" type="checkbox" id="jqg_' + this.p.id + "_" + b + '" ' + v + "/>", L = this.formatCol(r, 1, "", null, b, !0), e[e.length] = '<td role="gridcell" ' + L + ">" + k + "</td>");
                            B && (e[e.length] = a(this).jqGrid("addSubGridCell", n + r, 1));
                            for (u = n + B + r; u < this.p.colModel.length; u++) A = this.p.colModel[u], g = A.name, R[g] = p[g], k = this.formatter(b, a.jgrid.getAccessor(p, g), u, p), L = this.formatCol(u, 1, k, p, b, R), e[e.length] = '<td role="gridcell" ' + L + ">" + k + "</td>";
                            if (e.unshift(this.constructTr(b, !1, G, R, p)), e[e.length] = "</tr>", 0 === this.rows.length) a("table:first", this.grid.bDiv).append(e.join(""));
                            else switch (h) {
                                case "last":
                                    a(this.rows[this.rows.length - 1]).after(e.join(""));
                                    q = this.rows.length - 1;
                                    break;
                                case "first":
                                    a(this.rows[0]).after(e.join(""));
                                    q = 1;
                                    break;
                                case "after":
                                    (q = a(this).jqGrid("getGridRowById", d)) && (a(this.rows[q.rowIndex + 1]).hasClass("ui-subgrid") ? a(this.rows[q.rowIndex + 1]).after(e) : a(q).after(e.join("")), q = q.rowIndex + 1);
                                    break;
                                case "before":
                                    (q = a(this).jqGrid("getGridRowById", d)) &&
                                    (a(q).before(e.join("")), q = q.rowIndex - 1)
                            }!0 === this.p.subGrid && a(this).jqGrid("addSubGrid", n + r, q);
                            this.p.records++;
                            this.p.reccount++;
                            a(this).triggerHandler("jqGridAfterInsertRow", [b, p, p]);
                            D && this.p.afterInsertRow.call(this, b, p, p);
                            Q++;
                            "local" === this.p.datatype && (R[this.p.localReader.id] = x, this.p._index[x] = this.p.data.length, this.p.data.push(R), R = {})
                        }!0 !== this.p.altRows || y || ("last" === h ? 0 === (this.rows.length - 1) % 2 && a(this.rows[this.rows.length - 1]).addClass(C) : a(this.rows).each(function(b) {
                            0 === b % 2 ? a(this).addClass(C) :
                                a(this).removeClass(C)
                        }));
                        this.updatepager(!0, !0);
                        H = !0
                    })), H
                },
                footerData: function(b, c, h) {
                    function d(a) {
                        for (var b in a)
                            if (a.hasOwnProperty(b)) return !1;
                        return !0
                    }
                    var g, e, n = !1,
                        B = {};
                    return void 0 === b && (b = "get"), "boolean" != typeof h && (h = !0), b = b.toLowerCase(), this.each(function() {
                        var r, q = this;
                        return q.grid && q.p.footerrow ? "set" === b && d(c) ? !1 : (n = !0, void a(this.p.colModel).each(function(d) {
                            g = this.name;
                            "set" === b ? void 0 !== c[g] && (r = h ? q.formatter("", c[g], d, c, "edit") : c[g], e = this.title ? {
                                title: a.jgrid.stripHtml(r)
                            } : {}, a("tr.footrow td:eq(" + d + ")", q.grid.sDiv).html(r).attr(e), n = !0) : "get" === b && (B[g] = a("tr.footrow td:eq(" + d + ")", q.grid.sDiv).html())
                        })) : !1
                    }), "get" === b ? B : n
                },
                showHideCol: function(b, c) {
                    return this.each(function() {
                        var h, d = this,
                            g = !1,
                            e = a.jgrid.cell_width ? 0 : d.p.cellLayout;
                        if (d.grid) {
                            "string" == typeof b && (b = [b]);
                            c = "none" !== c ? "" : "none";
                            var n = "" === c ? !0 : !1,
                                B = d.p.groupHeader && (a.isArray(d.p.groupHeader) || a.isFunction(d.p.groupHeader));
                            if (B && a(d).jqGrid("destroyGroupHeader", !1), a(this.p.colModel).each(function(q) {
                                    if (-1 !==
                                        a.inArray(this.name, b) && this.hidden === n) {
                                        if (!0 === d.p.frozenColumns && !0 === this.frozen) return !0;
                                        a("tr[role=row]", d.grid.hDiv).each(function() {
                                            a(this.cells[q]).css("display", c)
                                        });
                                        a(d.rows).each(function() {
                                            a(this).hasClass("jqgroup") || a(this.cells[q]).css("display", c)
                                        });
                                        d.p.footerrow && a("tr.footrow td:eq(" + q + ")", d.grid.sDiv).css("display", c);
                                        h = parseInt(this.width, 10);
                                        "none" === c ? d.p.tblwidth -= h + e : d.p.tblwidth += h + e;
                                        this.hidden = !n;
                                        g = !0;
                                        a(d).triggerHandler("jqGridShowHideCol", [n, this.name, q])
                                    }
                                }), !0 === g &&
                                (!0 !== d.p.shrinkToFit || isNaN(d.p.height) || (d.p.tblwidth += parseInt(d.p.scrollOffset, 10)), a(d).jqGrid("setGridWidth", !0 === d.p.shrinkToFit ? d.p.tblwidth : d.p.width)), B) {
                                B = a.extend([], d.p.groupHeader);
                                d.p.groupHeader = null;
                                for (var r = 0; r < B.length; r++) a(d).jqGrid("setGroupHeaders", B[r])
                            }
                        }
                    })
                },
                hideCol: function(b) {
                    return this.each(function() {
                        a(this).jqGrid("showHideCol", b, "none")
                    })
                },
                showCol: function(b) {
                    return this.each(function() {
                        a(this).jqGrid("showHideCol", b, "")
                    })
                },
                remapColumns: function(b, c, h) {
                    function d(c) {
                        var e;
                        e = c.length ? a.makeArray(c) : a.extend({}, c);
                        a.each(b, function(a) {
                            c[a] = e[this]
                        })
                    }

                    function g(c, e) {
                        a(">tr" + (e || ""), c).each(function() {
                            var c = this,
                                e = a.makeArray(c.cells);
                            a.each(b, function() {
                                var a = e[this];
                                a && c.appendChild(a)
                            })
                        })
                    }
                    var e = this.get(0);
                    d(e.p.colModel);
                    d(e.p.colNames);
                    d(e.grid.headers);
                    g(a("thead:first", e.grid.hDiv), h && ":not(.ui-jqgrid-labels)");
                    c && g(a("#" + a.jgrid.jqID(e.p.id) + " tbody:first"), ".jqgfirstrow, tr.jqgrow, tr.jqfoot");
                    e.p.footerrow && g(a("tbody:first", e.grid.sDiv));
                    e.p.remapColumns && (e.p.remapColumns.length ?
                        d(e.p.remapColumns) : e.p.remapColumns = a.makeArray(b));
                    e.p.lastsort = a.inArray(e.p.lastsort, b);
                    e.p.treeGrid && (e.p.expColInd = a.inArray(e.p.expColInd, b));
                    a(e).triggerHandler("jqGridRemapColumns", [b, c, h])
                },
                setGridWidth: function(b, c) {
                    return this.each(function() {
                        if (this.grid) {
                            var h, d, g, e, n = this,
                                B = 0,
                                r = a.jgrid.cell_width ? 0 : n.p.cellLayout,
                                q = 0,
                                u = !1,
                                k = n.p.scrollOffset,
                                y = 0;
                            if ("boolean" != typeof c && (c = n.p.shrinkToFit), !isNaN(b)) {
                                if (b = parseInt(b, 10), n.grid.width = n.p.width = b, a("#gbox_" + a.jgrid.jqID(n.p.id)).css("width",
                                        b + "px"), a("#gview_" + a.jgrid.jqID(n.p.id)).css("width", b + "px"), a(n.grid.bDiv).css("width", b + "px"), a(n.grid.hDiv).css("width", b + "px"), n.p.pager && a(n.p.pager).css("width", b + "px"), n.p.toppager && a(n.p.toppager).css("width", b + "px"), !0 === n.p.toolbar[0] && (a(n.grid.uDiv).css("width", b + "px"), "both" === n.p.toolbar[1] && a(n.grid.ubDiv).css("width", b + "px")), n.p.footerrow && a(n.grid.sDiv).css("width", b + "px"), !1 === c && !0 === n.p.forceFit && (n.p.forceFit = !1), !0 === c) {
                                    if (a.each(n.p.colModel, function() {
                                            !1 === this.hidden && (h =
                                                this.widthOrg, B += h + r, this.fixed ? y += h + r : q++)
                                        }), 0 === q) return;
                                    n.p.tblwidth = B;
                                    g = b - r * q - y;
                                    isNaN(n.p.height) || (a(n.grid.bDiv)[0].clientHeight < a(n.grid.bDiv)[0].scrollHeight || 1 === n.rows.length) && (u = !0, g -= k);
                                    var B = 0,
                                        K = 0 < n.grid.cols.length;
                                    if (a.each(n.p.colModel, function(a) {
                                            !1 !== this.hidden || this.fixed || (h = this.widthOrg, h = Math.round(g * h / (n.p.tblwidth - r * q - y)), 0 > h) || (this.width = h, B += h, n.grid.headers[a].width = h, n.grid.headers[a].el.style.width = h + "px", n.p.footerrow && (n.grid.footers[a].style.width = h + "px"), K && (n.grid.cols[a].style.width =
                                                h + "px"), d = a)
                                        }), !d) return;
                                    (e = 0, u ? b - y - (B + r * q) !== k && (e = b - y - (B + r * q) - k) : 1 !== Math.abs(b - y - (B + r * q)) && (e = b - y - (B + r * q)), n.p.colModel[d].width += e, n.p.tblwidth = B + e + r * q + y, n.p.tblwidth > b) ? (e = n.p.tblwidth - parseInt(b, 10), n.p.tblwidth = b, h = n.p.colModel[d].width -= e) : h = n.p.colModel[d].width;
                                    n.grid.headers[d].width = h;
                                    n.grid.headers[d].el.style.width = h + "px";
                                    K && (n.grid.cols[d].style.width = h + "px");
                                    n.p.footerrow && (n.grid.footers[d].style.width = h + "px")
                                }
                                n.p.tblwidth && (a("table:first", n.grid.bDiv).css("width", n.p.tblwidth + "px"),
                                    a("table:first", n.grid.hDiv).css("width", n.p.tblwidth + "px"), n.grid.hDiv.scrollLeft = n.grid.bDiv.scrollLeft, n.p.footerrow && a("table:first", n.grid.sDiv).css("width", n.p.tblwidth + "px"))
                            }
                        }
                    })
                },
                setGridHeight: function(b) {
                    return this.each(function() {
                        if (this.grid) {
                            var c = a(this.grid.bDiv);
                            c.css({
                                height: b + (isNaN(b) ? "" : "px")
                            });
                            !0 === this.p.frozenColumns && a("#" + a.jgrid.jqID(this.p.id) + "_frozen").parent().height(c.height() - 16);
                            this.p.height = b;
                            this.p.scroll && this.grid.populateVisible()
                        }
                    })
                },
                setCaption: function(b) {
                    return this.each(function() {
                        var c =
                            a(this).jqGrid("getStyleUI", this.p.styleUI + ".common", "cornertop", !0);
                        this.p.caption = b;
                        a(".ui-jqgrid-title, .ui-jqgrid-title-rtl", this.grid.cDiv).html(b);
                        a(this.grid.cDiv).show();
                        a(this.grid.hDiv).removeClass(c)
                    })
                },
                setLabel: function(b, c, h, d) {
                    return this.each(function() {
                        var g = -1;
                        if (this.grid && void 0 !== b && (a(this.p.colModel).each(function(a) {
                                return this.name === b ? (g = a, !1) : void 0
                            }), 0 <= g)) {
                            var e = a("tr.ui-jqgrid-labels th:eq(" + g + ")", this.grid.hDiv);
                            if (c) {
                                var n = a(".s-ico", e);
                                a("[id^=jqgh_]", e).empty().html(c).append(n);
                                this.p.colNames[g] = c
                            }
                            h && ("string" == typeof h ? a(e).addClass(h) : a(e).css(h));
                            "object" == typeof d && a(e).attr(d)
                        }
                    })
                },
                setCell: function(b, c, h, d, g, e) {
                    return this.each(function() {
                        var n, B, r = -1;
                        if (this.grid && (isNaN(c) ? a(this.p.colModel).each(function(a) {
                                return this.name === c ? (r = a, !1) : void 0
                            }) : r = parseInt(c, 10), 0 <= r)) {
                            var q = a(this).jqGrid("getGridRowById", b);
                            if (q) {
                                var u = a("td:eq(" + r + ")", q),
                                    k = 0,
                                    y = [];
                                if ("" !== h || !0 === e) {
                                    if (void 0 !== q.cells)
                                        for (; k < q.cells.length;) y.push(q.cells[k].innerHTML), k++;
                                    if (n = this.formatter(b,
                                            h, r, y, "edit"), B = this.p.colModel[r].title ? {
                                            title: a.jgrid.stripHtml(n)
                                        } : {}, this.p.treeGrid && 0 < a(".tree-wrap", a(u)).length ? a("span", a(u)).html(n).attr(B) : a(u).html(n).attr(B), "local" === this.p.datatype) B = this.p.colModel[r], h = B.formatter && "string" == typeof B.formatter && "date" === B.formatter ? a.unformat.date.call(this, h, B) : h, n = this.p._index[a.jgrid.stripPref(this.p.idPrefix, b)], void 0 !== n && (this.p.data[n][B.name] = h)
                                }
                                "string" == typeof d ? a(u).addClass(d) : d && a(u).css(d);
                                "object" == typeof g && a(u).attr(g)
                            }
                        }
                    })
                },
                getCell: function(b,
                    c) {
                    var h = !1;
                    return this.each(function() {
                        var d = -1;
                        if (this.grid && (isNaN(c) ? a(this.p.colModel).each(function(a) {
                                return this.name === c ? (d = a, !1) : void 0
                            }) : d = parseInt(c, 10), 0 <= d)) {
                            var g = a(this).jqGrid("getGridRowById", b);
                            if (g) try {
                                h = a.unformat.call(this, a("td:eq(" + d + ")", g), {
                                    rowId: g.id,
                                    colModel: this.p.colModel[d]
                                }, d)
                            } catch (e) {
                                h = a.jgrid.htmlDecode(a("td:eq(" + d + ")", g).html())
                            }
                        }
                    }), h
                },
                getCol: function(b, c, h) {
                    var d, g, e, n, B = [],
                        r = 0;
                    return c = "boolean" != typeof c ? !1 : c, void 0 === h && (h = !1), this.each(function() {
                        var q = -1;
                        if (this.grid && (isNaN(b) ? a(this.p.colModel).each(function(a) {
                                return this.name === b ? (q = a, !1) : void 0
                            }) : q = parseInt(b, 10), 0 <= q)) {
                            var u = this.rows.length,
                                k = 0,
                                y = 0;
                            if (u && 0 < u) {
                                for (; u > k;) {
                                    if (a(this.rows[k]).hasClass("jqgrow")) {
                                        try {
                                            d = a.unformat.call(this, a(this.rows[k].cells[q]), {
                                                rowId: this.rows[k].id,
                                                colModel: this.p.colModel[q]
                                            }, q)
                                        } catch (K) {
                                            d = a.jgrid.htmlDecode(this.rows[k].cells[q].innerHTML)
                                        }
                                        h ? (n = parseFloat(d), isNaN(n) || (r += n, void 0 === e && (e = g = n), g = Math.min(g, n), e = Math.max(e, n), y++)) : B.push(c ? {
                                            id: this.rows[k].id,
                                            value: d
                                        } : d)
                                    }
                                    k++
                                }
                                if (h) switch (h.toLowerCase()) {
                                    case "sum":
                                        B = r;
                                        break;
                                    case "avg":
                                        B = r / y;
                                        break;
                                    case "count":
                                        B = u - 1;
                                        break;
                                    case "min":
                                        B = g;
                                        break;
                                    case "max":
                                        B = e
                                }
                            }
                        }
                    }), B
                },
                clearGridData: function(b) {
                    return this.each(function() {
                        if (this.grid) {
                            if ("boolean" != typeof b && (b = !1), this.p.deepempty) a("#" + a.jgrid.jqID(this.p.id) + " tbody:first tr:gt(0)").remove();
                            else {
                                var c = a("#" + a.jgrid.jqID(this.p.id) + " tbody:first tr:first")[0];
                                a("#" + a.jgrid.jqID(this.p.id) + " tbody:first").empty().append(c)
                            }
                            this.p.footerrow && b && a(".ui-jqgrid-ftable td",
                                this.grid.sDiv).html("&#160;");
                            this.p.selrow = null;
                            this.p.selarrrow = [];
                            this.p.savedRow = [];
                            this.p.records = 0;
                            this.p.page = 1;
                            this.p.lastpage = 0;
                            this.p.reccount = 0;
                            this.p.data = [];
                            this.p._index = {};
                            this.updatepager(!0, !1)
                        }
                    })
                },
                getInd: function(b, c) {
                    var h, d = !1;
                    return this.each(function() {
                        (h = a(this).jqGrid("getGridRowById", b)) && (d = !0 === c ? h : h.rowIndex)
                    }), d
                },
                bindKeys: function(b) {
                    var c = a.extend({
                        onEnter: null,
                        onSpace: null,
                        onLeftKey: null,
                        onRightKey: null,
                        scrollingRows: !0
                    }, b || {});
                    return this.each(function() {
                        var b = this;
                        a("body").is("[role]") || a("body").attr("role", "application");
                        b.p.scrollrows = c.scrollingRows;
                        a(b).keydown(function(f) {
                            var d, e, g, B = a(b).find("tr[tabindex=0]")[0],
                                r = b.p.treeReader.expanded_field;
                            if (B)
                                if (g = b.p._index[a.jgrid.stripPref(b.p.idPrefix, B.id)], 37 === f.keyCode || 38 === f.keyCode || 39 === f.keyCode || 40 === f.keyCode) {
                                    if (38 === f.keyCode) {
                                        if (e = B.previousSibling, d = "", e)
                                            if (a(e).is(":hidden"))
                                                for (; e;) {
                                                    if (e = e.previousSibling, !a(e).is(":hidden") && a(e).hasClass("jqgrow")) {
                                                        d = e.id;
                                                        break
                                                    }
                                                } else d = e.id;
                                        a(b).jqGrid("setSelection",
                                            d, !0, f);
                                        f.preventDefault()
                                    }
                                    if (40 === f.keyCode) {
                                        if (e = B.nextSibling, d = "", e)
                                            if (a(e).is(":hidden"))
                                                for (; e;) {
                                                    if (e = e.nextSibling, !a(e).is(":hidden") && a(e).hasClass("jqgrow")) {
                                                        d = e.id;
                                                        break
                                                    }
                                                } else d = e.id;
                                        a(b).jqGrid("setSelection", d, !0, f);
                                        f.preventDefault()
                                    }
                                    37 === f.keyCode && (b.p.treeGrid && b.p.data[g][r] && a(B).find("div.treeclick").trigger("click"), a(b).triggerHandler("jqGridKeyLeft", [b.p.selrow]), a.isFunction(c.onLeftKey) && c.onLeftKey.call(b, b.p.selrow));
                                    39 === f.keyCode && (b.p.treeGrid && !b.p.data[g][r] && a(B).find("div.treeclick").trigger("click"),
                                        a(b).triggerHandler("jqGridKeyRight", [b.p.selrow]), a.isFunction(c.onRightKey) && c.onRightKey.call(b, b.p.selrow))
                                } else 13 === f.keyCode ? (a(b).triggerHandler("jqGridKeyEnter", [b.p.selrow]), a.isFunction(c.onEnter) && c.onEnter.call(b, b.p.selrow)) : 32 === f.keyCode && (a(b).triggerHandler("jqGridKeySpace", [b.p.selrow]), a.isFunction(c.onSpace) && c.onSpace.call(b, b.p.selrow))
                        })
                    })
                },
                unbindKeys: function() {
                    return this.each(function() {
                        a(this).unbind("keydown")
                    })
                },
                getLocalRow: function(b) {
                    var c, h = !1;
                    return this.each(function() {
                        void 0 !==
                            b && (c = this.p._index[a.jgrid.stripPref(this.p.idPrefix, b)], 0 <= c && (h = this.p.data[c]))
                    }), h
                },
                progressBar: function(b) {
                    return b = a.extend({
                        htmlcontent: "",
                        method: "hide",
                        loadtype: "disable"
                    }, b || {}), this.each(function() {
                        var c, h, d = "show" === b.method ? !0 : !1,
                            g = a("#load_" + a.jgrid.jqID(this.p.id)),
                            e = a(window).scrollTop();
                        switch ("" !== b.htmlcontent && g.html(b.htmlcontent), b.loadtype) {
                            case "enable":
                                g.toggle(d);
                                break;
                            case "block":
                                a("#lui_" + a.jgrid.jqID(this.p.id)).toggle(d), g.toggle(d)
                        }
                        g.is(":visible") && (c = g.offsetParent(),
                            g.css("top", ""), g.offset().top < e && (h = Math.min(10 + e - c.offset().top, c.height() - g.height()), g.css("top", h + "px")))
                    })
                },
                getColProp: function(a) {
                    var b = {},
                        c = this[0];
                    if (!c.grid) return !1;
                    for (var d = c.p.colModel, c = 0; c < d.length; c++)
                        if (d[c].name === a) {
                            b = d[c];
                            break
                        }
                    return b
                },
                setColProp: function(b, c) {
                    return this.each(function() {
                        if (this.grid && c) {
                            var h, d = this.p.colModel;
                            for (h = 0; h < d.length; h++)
                                if (d[h].name === b) {
                                    a.extend(!0, this.p.colModel[h], c);
                                    break
                                }
                        }
                    })
                },
                sortGrid: function(a, b, c) {
                    return this.each(function() {
                        var d, g = -1,
                            e = !1;
                        if (this.grid) {
                            a || (a = this.p.sortname);
                            for (d = 0; d < this.p.colModel.length; d++)
                                if (this.p.colModel[d].index === a || this.p.colModel[d].name === a) {
                                    g = d;
                                    !0 === this.p.frozenColumns && !0 === this.p.colModel[d].frozen && (e = this.grid.fhDiv.find("#" + this.p.id + "_" + a));
                                    break
                                } - 1 !== g && (d = this.p.colModel[g].sortable, e || (e = this.grid.headers[g].el), "boolean" != typeof d && (d = !0), "boolean" != typeof b && (b = !1), d && this.sortData("jqgh_" + this.p.id + "_" + a, g, b, c, e))
                        }
                    })
                },
                setGridState: function(b) {
                    return this.each(function() {
                        if (this.grid) {
                            var c =
                                a(this).jqGrid("getStyleUI", this.p.styleUI + ".base", "icon_caption_open", !0),
                                h = a(this).jqGrid("getStyleUI", this.p.styleUI + ".base", "icon_caption_close", !0);
                            "hidden" === b ? (a(".ui-jqgrid-bdiv, .ui-jqgrid-hdiv", "#gview_" + a.jgrid.jqID(this.p.id)).slideUp("fast"), this.p.pager && a(this.p.pager).slideUp("fast"), this.p.toppager && a(this.p.toppager).slideUp("fast"), !0 === this.p.toolbar[0] && ("both" === this.p.toolbar[1] && a(this.grid.ubDiv).slideUp("fast"), a(this.grid.uDiv).slideUp("fast")), this.p.footerrow && a(".ui-jqgrid-sdiv",
                                "#gbox_" + a.jgrid.jqID(this.p.id)).slideUp("fast"), a(".ui-jqgrid-headlink", this.grid.cDiv).removeClass(c).addClass(h), this.p.gridstate = "hidden") : "visible" === b && (a(".ui-jqgrid-hdiv, .ui-jqgrid-bdiv", "#gview_" + a.jgrid.jqID(this.p.id)).slideDown("fast"), this.p.pager && a(this.p.pager).slideDown("fast"), this.p.toppager && a(this.p.toppager).slideDown("fast"), !0 === this.p.toolbar[0] && ("both" === this.p.toolbar[1] && a(this.grid.ubDiv).slideDown("fast"), a(this.grid.uDiv).slideDown("fast")), this.p.footerrow && a(".ui-jqgrid-sdiv",
                                "#gbox_" + a.jgrid.jqID(this.p.id)).slideDown("fast"), a(".ui-jqgrid-headlink", this.grid.cDiv).removeClass(h).addClass(c), this.p.gridstate = "visible")
                        }
                    })
                },
                setFrozenColumns: function() {
                    return this.each(function() {
                        if (this.grid) {
                            var b = this,
                                c = b.p.colModel,
                                h = 0,
                                d = c.length,
                                g = -1,
                                e = !1,
                                n = a(b).jqGrid("getStyleUI", b.p.styleUI + ".base", "headerDiv", !0, "ui-jqgrid-hdiv"),
                                B = a(b).jqGrid("getStyleUI", b.p.styleUI + ".common", "hover", !0);
                            if (!0 !== b.p.subGrid && !0 !== b.p.treeGrid && !0 !== b.p.cellEdit && !b.p.sortable && !b.p.scroll) {
                                b.p.rownumbers &&
                                    h++;
                                for (b.p.multiselect && h++; d > h && !0 === c[h].frozen;) e = !0, g = h, h++;
                                if (0 <= g && e) {
                                    c = b.p.caption ? a(b.grid.cDiv).outerHeight() : 0;
                                    h = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).height();
                                    b.p.toppager && (c += a(b.grid.topDiv).outerHeight());
                                    !0 === b.p.toolbar[0] && "bottom" !== b.p.toolbar[1] && (c += a(b.grid.uDiv).outerHeight());
                                    b.grid.fhDiv = a('<div style="position:absolute;' + ("rtl" === b.p.direction ? "right:0;" : "left:0;") + "top:" + c + "px;height:" + h + 'px;" class="frozen-div ' + n + '"></div>');
                                    b.grid.fbDiv = a('<div style="position:absolute;' +
                                        ("rtl" === b.p.direction ? "right:0;" : "left:0;") + "top:" + (parseInt(c, 10) + parseInt(h, 10) + 1) + 'px;overflow-y:hidden" class="frozen-bdiv ui-jqgrid-bdiv"></div>');
                                    a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fhDiv);
                                    n = a(".ui-jqgrid-htable", "#gview_" + a.jgrid.jqID(b.p.id)).clone(!0);
                                    if (b.p.groupHeader) {
                                        a("tr.jqg-first-row-header, tr.jqg-third-row-header", n).each(function() {
                                            a("th:gt(" + g + ")", this).remove()
                                        });
                                        var r, q, u = -1,
                                            k = -1;
                                        a("tr.jqg-second-row-header th", n).each(function() {
                                            return r = parseInt(a(this).attr("colspan"),
                                                10), q = parseInt(a(this).attr("rowspan"), 10), q && (u++, k++), r && (u += r, k++), u === g ? (k = g, !1) : void 0
                                        });
                                        u !== g && (k = g);
                                        a("tr.jqg-second-row-header", n).each(function() {
                                            a("th:gt(" + k + ")", this).remove()
                                        })
                                    } else a("tr", n).each(function() {
                                        a("th:gt(" + g + ")", this).remove()
                                    });
                                    if (a(n).width(1), a(b.grid.fhDiv).append(n).mousemove(function(a) {
                                            return b.grid.resizing ? (b.grid.dragMove(a), !1) : void 0
                                        }), b.p.footerrow) n = a(".ui-jqgrid-bdiv", "#gview_" + a.jgrid.jqID(b.p.id)).height(), b.grid.fsDiv = a('<div style="position:absolute;left:0px;top:' +
                                        (parseInt(c, 10) + parseInt(h, 10) + parseInt(n, 10) + 1) + 'px;" class="frozen-sdiv ui-jqgrid-sdiv"></div>'), a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fsDiv), n = a(".ui-jqgrid-ftable", "#gview_" + a.jgrid.jqID(b.p.id)).clone(!0), a("tr", n).each(function() {
                                        a("td:gt(" + g + ")", this).remove()
                                    }), a(n).width(1), a(b.grid.fsDiv).append(n);
                                    a(b).bind("jqGridResizeStop.setFrozenColumns", function(c, e, h) {
                                        c = a(".ui-jqgrid-htable", b.grid.fhDiv);
                                        a("th:eq(" + h + ")", c).width(e);
                                        c = a(".ui-jqgrid-btable", b.grid.fbDiv);
                                        if (a("tr:first td:eq(" +
                                                h + ")", c).width(e), b.p.footerrow) c = a(".ui-jqgrid-ftable", b.grid.fsDiv), a("tr:first td:eq(" + h + ")", c).width(e)
                                    });
                                    a("#gview_" + a.jgrid.jqID(b.p.id)).append(b.grid.fbDiv);
                                    a(b.grid.fbDiv).bind("mousewheel DOMMouseScroll", function(c) {
                                        var e = a(b.grid.bDiv).scrollTop();
                                        a(b.grid.bDiv).scrollTop(0 < c.originalEvent.wheelDelta || 0 > c.originalEvent.detail ? e - 25 : e + 25);
                                        c.preventDefault()
                                    });
                                    !0 === b.p.hoverrows && a("#" + a.jgrid.jqID(b.p.id)).unbind("mouseover").unbind("mouseout");
                                    a(b).bind("jqGridAfterGridComplete.setFrozenColumns",
                                        function() {
                                            a("#" + a.jgrid.jqID(b.p.id) + "_frozen").remove();
                                            a(b.grid.fbDiv).height(a(b.grid.bDiv).height() - 16);
                                            var c = a("#" + a.jgrid.jqID(b.p.id)).clone(!0);
                                            a("tr[role=row]", c).each(function() {
                                                a("td[role=gridcell]:gt(" + g + ")", this).remove()
                                            });
                                            a(c).width(1).attr("id", b.p.id + "_frozen");
                                            a(b.grid.fbDiv).append(c);
                                            !0 === b.p.hoverrows && (a("tr.jqgrow", c).hover(function() {
                                                a(this).addClass(B);
                                                a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id)).addClass(B)
                                            }, function() {
                                                a(this).removeClass(B);
                                                a("#" + a.jgrid.jqID(this.id),
                                                    "#" + a.jgrid.jqID(b.p.id)).removeClass(B)
                                            }), a("tr.jqgrow", "#" + a.jgrid.jqID(b.p.id)).hover(function() {
                                                a(this).addClass(B);
                                                a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id) + "_frozen").addClass(B)
                                            }, function() {
                                                a(this).removeClass(B);
                                                a("#" + a.jgrid.jqID(this.id), "#" + a.jgrid.jqID(b.p.id) + "_frozen").removeClass(B)
                                            }));
                                            c = null
                                        });
                                    b.grid.hDiv.loading || a(b).triggerHandler("jqGridAfterGridComplete");
                                    b.p.frozenColumns = !0
                                }
                            }
                        }
                    })
                },
                destroyFrozenColumns: function() {
                    return this.each(function() {
                        if (this.grid && !0 === this.p.frozenColumns) {
                            var b =
                                a(this).jqGrid("getStyleUI", this.p.styleUI + ".common", "hover", !0);
                            if (a(this.grid.fhDiv).remove(), a(this.grid.fbDiv).remove(), this.grid.fhDiv = null, this.grid.fbDiv = null, this.p.footerrow && (a(this.grid.fsDiv).remove(), this.grid.fsDiv = null), a(this).unbind(".setFrozenColumns"), !0 === this.p.hoverrows) {
                                var c;
                                a("#" + a.jgrid.jqID(this.p.id)).bind("mouseover", function(h) {
                                    c = a(h.target).closest("tr.jqgrow");
                                    "ui-subgrid" !== a(c).attr("class") && a(c).addClass(b)
                                }).bind("mouseout", function(h) {
                                    c = a(h.target).closest("tr.jqgrow");
                                    a(c).removeClass(b)
                                })
                            }
                            this.p.frozenColumns = !1
                        }
                    })
                },
                resizeColumn: function(a, b) {
                    return this.each(function() {
                        var c, d, g = this.grid,
                            e = this.p,
                            n = e.colModel,
                            B = n.length;
                        if ("string" == typeof a)
                            for (c = 0; B > c; c++) {
                                if (n[c].name === a) {
                                    a = c;
                                    break
                                }
                            } else a = parseInt(a, 10);
                        if (b = parseInt(b, 10), !("number" != typeof a || 0 > a || a > n.length - 1 || "number" != typeof b || b < e.minColWidth)) {
                            if (e.forceFit)
                                for (e.nv = 0, c = a + 1; B > c; c++)
                                    if (!0 !== n[c].hidden) {
                                        e.nv = c - a;
                                        break
                                    }
                            if (g.resizing = {
                                    idx: a
                                }, c = b - g.headers[a].width, e.forceFit) {
                                if (d = g.headers[a + e.nv].width -
                                    c, d < e.minColWidth) return;
                                g.headers[a + e.nv].newWidth = g.headers[a + e.nv].width - c
                            }
                            g.newWidth = e.tblwidth + c;
                            g.headers[a].newWidth = b;
                            g.dragEnd(!1)
                        }
                    })
                },
                getStyleUI: function(b, c, h, d) {
                    try {
                        var g = "",
                            e = b.split(".");
                        b = "";
                        switch (h || (g = "class=", b = '"'), null == d && (d = ""), e.length) {
                            case 1:
                                g += b + d + " " + a.jgrid.styleUI[e[0]][c] + b;
                                break;
                            case 2:
                                g += b + d + " " + a.jgrid.styleUI[e[0]][e[1]][c] + b
                        }
                    } catch (n) {
                        g = ""
                    }
                    return a.trim(g)
                },
                resizeGrid: function(b) {
                    return this.each(function() {
                        var c = this;
                        void 0 === b && (b = 500);
                        setTimeout(function() {
                            var b =
                                a(window).width(),
                                f = a("#gbox_" + a.jgrid.jqID(c.p.id)).parent().width(),
                                d = c.p.width,
                                d = 3 < b - f ? f : b;
                            a("#" + a.jgrid.jqID(c.p.id)).jqGrid("setGridWidth", d)
                        }, b)
                    })
                }
            });
            a.jgrid.extend({
                editCell: function(b, c, h) {
                    return this.each(function() {
                        var d, g, e, n, B = this,
                            r = a(this).jqGrid("getStyleUI", B.p.styleUI + ".common", "highlight", !0),
                            q = a(this).jqGrid("getStyleUI", B.p.styleUI + ".common", "hover", !0),
                            u = a(this).jqGrid("getStyleUI", B.p.styleUI + ".celledit", "inputClass", !0);
                        if (B.grid && !0 === B.p.cellEdit) {
                            if (c = parseInt(c, 10), B.p.selrow =
                                B.rows[b].id, B.p.knv || a(B).jqGrid("GridNav"), 0 < B.p.savedRow.length) {
                                if (!0 === h && b == B.p.iRow && c == B.p.iCol) return;
                                a(B).jqGrid("saveCell", B.p.savedRow[0].id, B.p.savedRow[0].ic)
                            } else window.setTimeout(function() {
                                a("#" + a.jgrid.jqID(B.p.knv)).attr("tabindex", "-1").focus()
                            }, 1);
                            if (n = B.p.colModel[c], d = n.name, "subgrid" !== d && "cb" !== d && "rn" !== d) {
                                if (e = a("td:eq(" + c + ")", B.rows[b]), !0 !== n.editable || !0 !== h || e.hasClass("not-editable-cell") || a.isFunction(B.p.isCellEditable) && !B.p.isCellEditable.call(B, d, b, c)) 0 <= parseInt(B.p.iCol,
                                    10) && 0 <= parseInt(B.p.iRow, 10) && a(B.rows[B.p.iRow]).removeClass("selected-row " + q).find("td:eq(" + B.p.iCol + ")").removeClass("edit-cell " + r), e.addClass("edit-cell " + r), a(B.rows[b]).addClass("selected-row " + q), g = e.html().replace(/\&#160\;/gi, ""), a(B).triggerHandler("jqGridSelectCell", [B.rows[b].id, d, g, b, c]), a.isFunction(B.p.onSelectCell) && B.p.onSelectCell.call(B, B.rows[b].id, d, g, b, c);
                                else {
                                    0 <= parseInt(B.p.iCol, 10) && 0 <= parseInt(B.p.iRow, 10) && a(B.rows[B.p.iRow]).removeClass("selected-row " + q).find("td:eq(" +
                                        B.p.iCol + ")").removeClass("edit-cell " + r);
                                    a(e).addClass("edit-cell " + r);
                                    a(B.rows[b]).addClass("selected-row " + q);
                                    try {
                                        g = a.unformat.call(B, e, {
                                            rowId: B.rows[b].id,
                                            colModel: n
                                        }, c)
                                    } catch (k) {
                                        g = n.edittype && "textarea" === n.edittype ? a(e).text() : a(e).html()
                                    }
                                    if (B.p.autoencode && (g = a.jgrid.htmlDecode(g)), n.edittype || (n.edittype = "text"), B.p.savedRow.push({
                                            id: b,
                                            ic: c,
                                            name: d,
                                            v: g
                                        }), ("&nbsp;" === g || "&#160;" === g || 1 === g.length && 160 === g.charCodeAt(0)) && (g = ""), a.isFunction(B.p.formatCell)) r = B.p.formatCell.call(B, B.rows[b].id,
                                        d, g, b, c), void 0 !== r && (g = r);
                                    a(B).triggerHandler("jqGridBeforeEditCell", [B.rows[b].id, d, g, b, c]);
                                    a.isFunction(B.p.beforeEditCell) && B.p.beforeEditCell.call(B, B.rows[b].id, d, g, b, c);
                                    var r = a.extend({}, n.editoptions || {}, {
                                            id: b + "_" + d,
                                            name: d,
                                            rowId: B.rows[b].id,
                                            oper: "edit"
                                        }),
                                        z = a.jgrid.createEl.call(B, n.edittype, r, g, !0, a.extend({}, a.jgrid.ajaxOptions, B.p.ajaxSelectOptions || {})); - 1 < a.inArray(n.edittype, ["text", "textarea", "password", "select"]) && a(z).addClass(u);
                                    a(e).html("").append(z).attr("tabindex", "0");
                                    a.jgrid.bindEv.call(B,
                                        z, r);
                                    window.setTimeout(function() {
                                        a(z).focus()
                                    }, 1);
                                    a("input, select, textarea", e).bind("keydown", function(h) {
                                        if (27 === h.keyCode && (0 < a("input.hasDatepicker", e).length ? a(".ui-datepicker").is(":hidden") ? a(B).jqGrid("restoreCell", b, c) : a("input.hasDatepicker", e).datepicker("hide") : a(B).jqGrid("restoreCell", b, c)), 13 === h.keyCode && !h.shiftKey) return a(B).jqGrid("saveCell", b, c), !1;
                                        if (9 === h.keyCode) {
                                            if (B.grid.hDiv.loading) return !1;
                                            h.shiftKey ? a(B).jqGrid("prevCell", b, c) : a(B).jqGrid("nextCell", b, c)
                                        }
                                        h.stopPropagation()
                                    });
                                    a(B).triggerHandler("jqGridAfterEditCell", [B.rows[b].id, d, g, b, c]);
                                    a.isFunction(B.p.afterEditCell) && B.p.afterEditCell.call(B, B.rows[b].id, d, g, b, c)
                                }
                                B.p.iCol = c;
                                B.p.iRow = b
                            }
                        }
                    })
                },
                saveCell: function(b, c) {
                    return this.each(function() {
                        var h, d = this,
                            g = a.jgrid.getRegional(this, "errors"),
                            e = a.jgrid.getRegional(this, "edit");
                        if (d.grid && !0 === d.p.cellEdit) {
                            if (h = 1 <= d.p.savedRow.length ? 0 : null, null !== h) {
                                var n, B, r = a("td:eq(" + c + ")", d.rows[b]),
                                    q = d.p.colModel[c],
                                    u = q.name,
                                    k = a.jgrid.jqID(u),
                                    y = a(r).offset();
                                switch (q.edittype) {
                                    case "select":
                                        if (q.editoptions.multiple) {
                                            var k =
                                                a("#" + b + "_" + k, d.rows[b]),
                                                K = [];
                                            (n = a(k).val()) ? n.join(","): n = "";
                                            a("option:selected", k).each(function(b, f) {
                                                K[b] = a(f).text()
                                            });
                                            B = K.join(",")
                                        } else n = a("#" + b + "_" + k + " option:selected", d.rows[b]).val(), B = a("#" + b + "_" + k + " option:selected", d.rows[b]).text();
                                        q.formatter && (B = n);
                                        break;
                                    case "checkbox":
                                        var C = ["Yes", "No"];
                                        q.editoptions && (C = q.editoptions.value.split(":"));
                                        B = n = a("#" + b + "_" + k, d.rows[b]).is(":checked") ? C[0] : C[1];
                                        break;
                                    case "password":
                                    case "text":
                                    case "textarea":
                                    case "button":
                                        B = n = a("#" + b + "_" + k, d.rows[b]).val();
                                        break;
                                    case "custom":
                                        try {
                                            if (!q.editoptions || !a.isFunction(q.editoptions.custom_value)) throw "e1";
                                            if (n = q.editoptions.custom_value.call(d, a(".customelement", r), "get"), void 0 === n) throw "e2";
                                            B = n
                                        } catch (x) {
                                            "e1" === x ? a.jgrid.info_dialog(g.errcap, "function 'custom_value' " + e.msg.nodefined, e.bClose, {
                                                styleUI: d.p.styleUI
                                            }) : "e2" === x ? a.jgrid.info_dialog(g.errcap, "function 'custom_value' " + e.msg.novalue, e.bClose, {
                                                styleUI: d.p.styleUI
                                            }) : a.jgrid.info_dialog(g.errcap, x.message, e.bClose, {
                                                styleUI: d.p.styleUI
                                            })
                                        }
                                }
                                if (B !== d.p.savedRow[h].v) {
                                    h =
                                        a(d).triggerHandler("jqGridBeforeSaveCell", [d.rows[b].id, u, n, b, c]);
                                    (h && (n = h, B = h), a.isFunction(d.p.beforeSaveCell)) && (h = d.p.beforeSaveCell.call(d, d.rows[b].id, u, n, b, c)) && (n = h, B = h);
                                    var p = a.jgrid.checkValues.call(d, n, c);
                                    if (!0 === p[0]) {
                                        h = a(d).triggerHandler("jqGridBeforeSubmitCell", [d.rows[b].id, u, n, b, c]) || {};
                                        if (a.isFunction(d.p.beforeSubmitCell) && (h = d.p.beforeSubmitCell.call(d, d.rows[b].id, u, n, b, c), h || (h = {})), 0 < a("input.hasDatepicker", r).length && a("input.hasDatepicker", r).datepicker("hide"), "remote" ===
                                            d.p.cellsubmit)
                                            if (d.p.cellurl) {
                                                var A = {};
                                                d.p.autoencode && (n = a.jgrid.htmlEncode(n));
                                                A[u] = n;
                                                C = d.p.prmNames;
                                                q = C.id;
                                                k = C.oper;
                                                A[q] = a.jgrid.stripPref(d.p.idPrefix, d.rows[b].id);
                                                A[k] = C.editoper;
                                                A = a.extend(h, A);
                                                a(d).jqGrid("progressBar", {
                                                    method: "show",
                                                    loadtype: d.p.loadui,
                                                    htmlcontent: a.jgrid.getRegional(d, "defaults.savetext")
                                                });
                                                d.grid.hDiv.loading = !0;
                                                a.ajax(a.extend({
                                                    url: d.p.cellurl,
                                                    data: a.isFunction(d.p.serializeCellData) ? d.p.serializeCellData.call(d, A) : A,
                                                    type: "POST",
                                                    complete: function(h, q) {
                                                        if (a(d).jqGrid("progressBar", {
                                                                method: "hide",
                                                                loadtype: d.p.loadui
                                                            }), d.grid.hDiv.loading = !1, "success" === q) {
                                                            var k = a(d).triggerHandler("jqGridAfterSubmitCell", [d, h, A.id, u, n, b, c]) || [!0, ""];
                                                            !0 === k[0] && a.isFunction(d.p.afterSubmitCell) && (k = d.p.afterSubmitCell.call(d, h, A.id, u, n, b, c));
                                                            !0 === k[0] ? (a(r).empty(), a(d).jqGrid("setCell", d.rows[b].id, c, B, !1, !1, !0), a(r).addClass("dirty-cell"), a(d.rows[b]).addClass("edited"), a(d).triggerHandler("jqGridAfterSaveCell", [d.rows[b].id, u, n, b, c]), a.isFunction(d.p.afterSaveCell) && d.p.afterSaveCell.call(d,
                                                                d.rows[b].id, u, n, b, c), d.p.savedRow.splice(0, 1)) : (a.jgrid.info_dialog(g.errcap, k[1], e.bClose, {
                                                                styleUI: d.p.styleUI
                                                            }), d.p.restoreCellonFail && a(d).jqGrid("restoreCell", b, c))
                                                        }
                                                    },
                                                    error: function(h, n, q) {
                                                        a("#lui_" + a.jgrid.jqID(d.p.id)).hide();
                                                        d.grid.hDiv.loading = !1;
                                                        a(d).triggerHandler("jqGridErrorCell", [h, n, q]);
                                                        a.isFunction(d.p.errorCell) ? d.p.errorCell.call(d, h, n, q) : a.jgrid.info_dialog(g.errcap, h.status + " : " + h.statusText + "<br/>" + n, e.bClose, {
                                                            styleUI: d.p.styleUI
                                                        });
                                                        d.p.restoreCellonFail && a(d).jqGrid("restoreCell",
                                                            b, c)
                                                    }
                                                }, a.jgrid.ajaxOptions, d.p.ajaxCellOptions || {}))
                                            } else try {
                                                a.jgrid.info_dialog(g.errcap, g.nourl, e.bClose, {
                                                    styleUI: d.p.styleUI
                                                }), d.p.restoreCellonFail && a(d).jqGrid("restoreCell", b, c)
                                            } catch (x) {}
                                            "clientArray" === d.p.cellsubmit && (a(r).empty(), a(d).jqGrid("setCell", d.rows[b].id, c, B, !1, !1, !0), a(r).addClass("dirty-cell"), a(d.rows[b]).addClass("edited"), a(d).triggerHandler("jqGridAfterSaveCell", [d.rows[b].id, u, n, b, c]), a.isFunction(d.p.afterSaveCell) && d.p.afterSaveCell.call(d, d.rows[b].id, u, n, b, c), d.p.savedRow.splice(0,
                                            1))
                                    } else try {
                                        window.setTimeout(function() {
                                            a.jgrid.info_dialog(g.errcap, n + " " + p[1], e.bClose, {
                                                styleUI: d.p.styleUI,
                                                top: y.top + 40,
                                                left: y.left
                                            })
                                        }, 100), a(d).jqGrid("restoreCell", b, c)
                                    } catch (x) {}
                                } else a(d).jqGrid("restoreCell", b, c)
                            }
                            window.setTimeout(function() {
                                a("#" + a.jgrid.jqID(d.p.knv)).attr("tabindex", "-1").focus()
                            }, 0)
                        }
                    })
                },
                restoreCell: function(b, c) {
                    return this.each(function() {
                        var d, g = this;
                        if (g.grid && !0 === g.p.cellEdit) {
                            if (d = 1 <= g.p.savedRow.length ? 0 : null, null !== d) {
                                var l = a("td:eq(" + c + ")", g.rows[b]);
                                if (a.isFunction(a.fn.datepicker)) try {
                                    a("input.hasDatepicker",
                                        l).datepicker("hide")
                                } catch (e) {}
                                a(l).empty().attr("tabindex", "-1");
                                a(g).jqGrid("setCell", g.rows[b].id, c, g.p.savedRow[d].v, !1, !1, !0);
                                a(g).triggerHandler("jqGridAfterRestoreCell", [g.rows[b].id, g.p.savedRow[d].v, b, c]);
                                a.isFunction(g.p.afterRestoreCell) && g.p.afterRestoreCell.call(g, g.rows[b].id, g.p.savedRow[d].v, b, c);
                                g.p.savedRow.splice(0, 1)
                            }
                            window.setTimeout(function() {
                                a("#" + g.p.knv).attr("tabindex", "-1").focus()
                            }, 0)
                        }
                    })
                },
                nextCell: function(b, c) {
                    return this.each(function() {
                        var d, g = !1;
                        if (this.grid && !0 ===
                            this.p.cellEdit) {
                            for (d = c + 1; d < this.p.colModel.length; d++)
                                if (!0 === this.p.colModel[d].editable && (!a.isFunction(this.p.isCellEditable) || this.p.isCellEditable.call(this, this.p.colModel[d].name, b, d))) {
                                    g = d;
                                    break
                                }!1 !== g ? a(this).jqGrid("editCell", b, g, !0) : 0 < this.p.savedRow.length && a(this).jqGrid("saveCell", b, c)
                        }
                    })
                },
                prevCell: function(b, c) {
                    return this.each(function() {
                        var d, g = !1;
                        if (this.grid && !0 === this.p.cellEdit) {
                            for (d = c - 1; 0 <= d; d--)
                                if (!0 === this.p.colModel[d].editable && (!a.isFunction(this.p.isCellEditable) || this.p.isCellEditable.call(this,
                                        this.p.colModel[d].name, b, d))) {
                                    g = d;
                                    break
                                }!1 !== g ? a(this).jqGrid("editCell", b, g, !0) : 0 < this.p.savedRow.length && a(this).jqGrid("saveCell", b, c)
                        }
                    })
                },
                GridNav: function() {
                    return this.each(function() {
                        function b(f, c, e) {
                            if ("v" === e.substr(0, 1)) {
                                var m = a(d.grid.bDiv)[0].clientHeight,
                                    g = a(d.grid.bDiv)[0].scrollTop,
                                    w = d.rows[f].offsetTop + d.rows[f].clientHeight,
                                    l = d.rows[f].offsetTop;
                                "vd" === e && w >= m && (a(d.grid.bDiv)[0].scrollTop = a(d.grid.bDiv)[0].scrollTop + d.rows[f].clientHeight);
                                "vu" === e && g > l && (a(d.grid.bDiv)[0].scrollTop =
                                    a(d.grid.bDiv)[0].scrollTop - d.rows[f].clientHeight)
                            }
                            "h" === e && (e = a(d.grid.bDiv)[0].clientWidth, m = a(d.grid.bDiv)[0].scrollLeft, g = d.rows[f].cells[c].offsetLeft, d.rows[f].cells[c].offsetLeft + d.rows[f].cells[c].clientWidth >= e + parseInt(m, 10) ? a(d.grid.bDiv)[0].scrollLeft = a(d.grid.bDiv)[0].scrollLeft + d.rows[f].cells[c].clientWidth : m > g && (a(d.grid.bDiv)[0].scrollLeft = a(d.grid.bDiv)[0].scrollLeft - d.rows[f].cells[c].clientWidth))
                        }

                        function c(a, b) {
                            var f, e;
                            if ("lft" === b)
                                for (f = a + 1, e = a; 0 <= e; e--)
                                    if (!0 !== d.p.colModel[e].hidden) {
                                        f =
                                            e;
                                        break
                                    }
                            if ("rgt" === b)
                                for (f = a - 1, e = a; e < d.p.colModel.length; e++)
                                    if (!0 !== d.p.colModel[e].hidden) {
                                        f = e;
                                        break
                                    }
                            return f
                        }
                        var d = this;
                        if (d.grid && !0 === d.p.cellEdit) {
                            d.p.knv = d.p.id + "_kn";
                            var g, l, e = a("<div style='position:fixed;top:0px;width:1px;height:1px;' tabindex='0'><div tabindex='-1' style='width:1px;height:1px;' id='" + d.p.knv + "'></div></div>");
                            a(e).insertBefore(d.grid.cDiv);
                            a("#" + d.p.knv).focus().keydown(function(e) {
                                switch (l = e.keyCode, "rtl" === d.p.direction && (37 === l ? l = 39 : 39 === l && (l = 37)), l) {
                                    case 38:
                                        0 < d.p.iRow -
                                            1 && (b(d.p.iRow - 1, d.p.iCol, "vu"), a(d).jqGrid("editCell", d.p.iRow - 1, d.p.iCol, !1));
                                        break;
                                    case 40:
                                        d.p.iRow + 1 <= d.rows.length - 1 && (b(d.p.iRow + 1, d.p.iCol, "vd"), a(d).jqGrid("editCell", d.p.iRow + 1, d.p.iCol, !1));
                                        break;
                                    case 37:
                                        0 <= d.p.iCol - 1 && (g = c(d.p.iCol - 1, "lft"), b(d.p.iRow, g, "h"), a(d).jqGrid("editCell", d.p.iRow, g, !1));
                                        break;
                                    case 39:
                                        d.p.iCol + 1 <= d.p.colModel.length - 1 && (g = c(d.p.iCol + 1, "rgt"), b(d.p.iRow, g, "h"), a(d).jqGrid("editCell", d.p.iRow, g, !1));
                                        break;
                                    case 13:
                                        0 <= parseInt(d.p.iCol, 10) && 0 <= parseInt(d.p.iRow, 10) &&
                                            a(d).jqGrid("editCell", d.p.iRow, d.p.iCol, !0);
                                        break;
                                    default:
                                        return !0
                                }
                                return !1
                            })
                        }
                    })
                },
                getChangedCells: function(b) {
                    var c = [];
                    return b || (b = "all"), this.each(function() {
                        var d, g = this;
                        g.grid && !0 === g.p.cellEdit && a(g.rows).each(function(l) {
                            var e = {};
                            a(this).hasClass("edited") && (a("td", this).each(function(c) {
                                if (d = g.p.colModel[c].name, "cb" !== d && "subgrid" !== d)
                                    if ("dirty" === b) {
                                        if (a(this).hasClass("dirty-cell")) try {
                                            e[d] = a.unformat.call(g, this, {
                                                rowId: g.rows[l].id,
                                                colModel: g.p.colModel[c]
                                            }, c)
                                        } catch (m) {
                                            e[d] = a.jgrid.htmlDecode(a(this).html())
                                        }
                                    } else try {
                                        e[d] =
                                            a.unformat.call(g, this, {
                                                rowId: g.rows[l].id,
                                                colModel: g.p.colModel[c]
                                            }, c)
                                    } catch (m) {
                                        e[d] = a.jgrid.htmlDecode(a(this).html())
                                    }
                            }), e.id = this.id, c.push(e))
                        })
                    }), c
                }
            });
            a.extend(a.jgrid, {
                showModal: function(a) {
                    a.w.show()
                },
                closeModal: function(a) {
                    a.w.hide().attr("aria-hidden", "true");
                    a.o && a.o.remove()
                },
                hideModal: function(b, c) {
                    c = a.extend({
                        jqm: !0,
                        gb: "",
                        removemodal: !1,
                        formprop: !1,
                        form: ""
                    }, c || {});
                    var d = c.gb && "string" == typeof c.gb && "#gbox_" === c.gb.substr(0, 6) ? a("#" + c.gb.substr(6))[0] : !1;
                    if (c.onClose) {
                        var g = d ? c.onClose.call(d,
                            b) : c.onClose(b);
                        if ("boolean" == typeof g && !g) return
                    }
                    if (c.formprop && d && c.form) {
                        var g = a(b)[0].style.height,
                            l = a(b)[0].style.width; - 1 < g.indexOf("px") && (g = parseFloat(g)); - 1 < l.indexOf("px") && (l = parseFloat(l));
                        var e, n;
                        "edit" === c.form ? (e = "#" + a.jgrid.jqID("FrmGrid_" + c.gb.substr(6)), n = "formProp") : "view" === c.form && (e = "#" + a.jgrid.jqID("ViewGrid_" + c.gb.substr(6)), n = "viewProp");
                        a(d).data(n, {
                            top: parseFloat(a(b).css("top")),
                            left: parseFloat(a(b).css("left")),
                            width: l,
                            height: g,
                            dataheight: a(e).height(),
                            datawidth: a(e).width()
                        })
                    }
                    if (a.fn.jqm &&
                        !0 === c.jqm) a(b).attr("aria-hidden", "true").jqmHide();
                    else {
                        if ("" !== c.gb) try {
                            a(".jqgrid-overlay:first", c.gb).hide()
                        } catch (k) {}
                        a(b).hide().attr("aria-hidden", "true")
                    }
                    c.removemodal && a(b).remove()
                },
                findPos: function(a) {
                    var b = 0,
                        c = 0;
                    if (a.offsetParent) {
                        do b += a.offsetLeft, c += a.offsetTop; while (a = a.offsetParent)
                    }
                    return [b, c]
                },
                createModal: function(b, c, d, g, l, e, n) {
                    d = a.extend(!0, {}, a.jgrid.jqModal || {}, d);
                    var k = this,
                        r = "rtl" === a(d.gbox).attr("dir") ? !0 : !1,
                        q = a.jgrid.styleUI[d.styleUI || "jQueryUI"].modal,
                        u = a.jgrid.styleUI[d.styleUI ||
                            "jQueryUI"].common,
                        z = document.createElement("div");
                    n = a.extend({}, n || {});
                    z.className = "ui-jqdialog " + q.modal;
                    z.id = b.themodal;
                    var y = document.createElement("div");
                    y.className = "ui-jqdialog-titlebar " + q.header;
                    y.id = b.modalhead;
                    a(y).append("<span class='ui-jqdialog-title'>" + d.caption + "</span>");
                    var K = a("<a class='ui-jqdialog-titlebar-close " + u.cornerall + "'></a>").hover(function() {
                        K.addClass(u.hover)
                    }, function() {
                        K.removeClass(u.hover)
                    }).append("<span class='" + u.icon_base + " " + q.icon_close + "'></span>");
                    a(y).append(K);
                    r ? (z.dir = "rtl", a(".ui-jqdialog-title", y).css("float", "right"), a(".ui-jqdialog-titlebar-close", y).css("left", "0.3em")) : (z.dir = "ltr", a(".ui-jqdialog-title", y).css("float", "left"), a(".ui-jqdialog-titlebar-close", y).css("right", "0.3em"));
                    var C = document.createElement("div");
                    a(C).addClass("ui-jqdialog-content " + q.content).attr("id", b.modalcontent);
                    a(C).append(c);
                    z.appendChild(C);
                    a(z).prepend(y);
                    !0 === e ? a("body").append(z) : "string" == typeof e ? a(e).append(z) : a(z).insertBefore(g);
                    a(z).css(n);
                    void 0 === d.jqModal &&
                        (d.jqModal = !0);
                    c = {};
                    a.fn.jqm && !0 === d.jqModal ? (0 === d.left && 0 === d.top && d.overlay && (n = [], n = a.jgrid.findPos(l), d.left = n[0] + 4, d.top = n[1] + 4), c.top = d.top + "px", c.left = d.left) : (0 !== d.left || 0 !== d.top) && (c.left = d.left, c.top = d.top + "px");
                    (a("a.ui-jqdialog-titlebar-close", y).click(function() {
                        var c = a("#" + a.jgrid.jqID(b.themodal)).data("onClose") || d.onClose,
                            e = a("#" + a.jgrid.jqID(b.themodal)).data("gbox") || d.gbox;
                        return k.hideModal("#" + a.jgrid.jqID(b.themodal), {
                            gb: e,
                            jqm: d.jqModal,
                            onClose: c,
                            removemodal: d.removemodal ||
                                !1,
                            formprop: !d.recreateForm || !1,
                            form: d.form || ""
                        }), !1
                    }), 0 !== d.width && d.width || (d.width = 300), 0 !== d.height && d.height || (d.height = 200), d.zIndex) || (g = a(g).parents("*[role=dialog]").filter(":first").css("z-index"), d.zIndex = g ? parseInt(g, 10) + 2 : 950);
                    g = 0;
                    if (r && c.left && !e && (g = a(d.gbox).width() - (isNaN(d.width) ? 0 : parseInt(d.width, 10)) - 8, c.left = parseInt(c.left, 10) + parseInt(g, 10)), c.left && (c.left += "px"), a(z).css(a.extend({
                            width: isNaN(d.width) ? "auto" : d.width + "px",
                            height: isNaN(d.height) ? "auto" : d.height + "px",
                            zIndex: d.zIndex,
                            overflow: "hidden"
                        }, c)).attr({
                            tabIndex: "-1",
                            role: "dialog",
                            "aria-labelledby": b.modalhead,
                            "aria-hidden": "true"
                        }), void 0 === d.drag && (d.drag = !0), void 0 === d.resize && (d.resize = !0), d.drag)
                        if (a(y).css("cursor", "move"), a.fn.tinyDraggable) a(z).tinyDraggable({
                            handle: "#" + a.jgrid.jqID(y.id)
                        });
                        else try {
                            a(z).draggable({
                                handle: a("#" + a.jgrid.jqID(y.id))
                            })
                        } catch (p) {}
                    if (d.resize)
                        if (a.fn.jqResize) a(z).append("<div class='jqResize " + q.resizable + " " + u.icon_base + " " + q.icon_resizable + "'></div>"), a("#" + a.jgrid.jqID(b.themodal)).jqResize(".jqResize",
                            b.scrollelm ? "#" + a.jgrid.jqID(b.scrollelm) : !1);
                        else try {
                            a(z).resizable({
                                handles: "se, sw",
                                alsoResize: b.scrollelm ? "#" + a.jgrid.jqID(b.scrollelm) : !1
                            })
                        } catch (p) {}!0 === d.closeOnEscape && a(z).keydown(function(c) {
                            27 === c.which && (c = a("#" + a.jgrid.jqID(b.themodal)).data("onClose") || d.onClose, k.hideModal("#" + a.jgrid.jqID(b.themodal), {
                                gb: d.gbox,
                                jqm: d.jqModal,
                                onClose: c,
                                removemodal: d.removemodal || !1,
                                formprop: !d.recreateForm || !1,
                                form: d.form || ""
                            }))
                        })
                },
                viewModal: function(b, c) {
                    if (c = a.extend({
                            toTop: !0,
                            overlay: 10,
                            modal: !1,
                            overlayClass: "ui-widget-overlay",
                            onShow: a.jgrid.showModal,
                            onHide: a.jgrid.closeModal,
                            gbox: "",
                            jqm: !0,
                            jqM: !0
                        }, c || {}), void 0 === c.focusField && (c.focusField = 0), c.focusField = "number" == typeof c.focusField && 0 <= c.focusField ? parseInt(c.focusField, 10) : "boolean" != typeof c.focusField || c.focusField ? 0 : !1, a.fn.jqm && !0 === c.jqm) c.jqM ? a(b).attr("aria-hidden", "false").jqm(c).jqmShow() : a(b).attr("aria-hidden", "false").jqmShow();
                    else if ("" !== c.gbox && (a(".jqgrid-overlay:first", c.gbox).show(), a(b).data("gbox", c.gbox)), a(b).show().attr("aria-hidden",
                            "false"), 0 <= c.focusField) try {
                        a(":input:visible", b)[parseInt(c.focusField, 10)].focus()
                    } catch (d) {}
                },
                info_dialog: function(b, c, d, g) {
                    var l = {
                        width: 290,
                        height: "auto",
                        dataheight: "auto",
                        drag: !0,
                        resize: !1,
                        left: 250,
                        top: 170,
                        zIndex: 1E3,
                        jqModal: !0,
                        modal: !1,
                        closeOnEscape: !0,
                        align: "center",
                        buttonalign: "center",
                        buttons: []
                    };
                    a.extend(!0, l, a.jgrid.jqModal || {}, {
                        caption: "<b>" + b + "</b>"
                    }, g || {});
                    var e = l.jqModal,
                        n = this;
                    b = a.jgrid.styleUI[l.styleUI || "jQueryUI"].modal;
                    var k = a.jgrid.styleUI[l.styleUI || "jQueryUI"].common;
                    a.fn.jqm &&
                        !e && (e = !1);
                    var r;
                    g = "";
                    if (0 < l.buttons.length)
                        for (r = 0; r < l.buttons.length; r++) void 0 === l.buttons[r].id && (l.buttons[r].id = "info_button_" + r), g += "<a id='" + l.buttons[r].id + "' class='fm-button " + k.button + "'>" + l.buttons[r].text + "</a>";
                    r = isNaN(l.dataheight) ? l.dataheight : l.dataheight + "px";
                    c = "<div id='info_id'>" + ("<div id='infocnt' style='margin:0px;padding-bottom:1em;width:100%;overflow:auto;position:relative;height:" + r + ";" + ("text-align:" + l.align + ";") + "'>" + c + "</div>");
                    c += d ? "<div class='" + b.header + "' style='text-align:" +
                        l.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'><a id='closedialog' class='fm-button " + k.button + "'>" + d + "</a>" + g + "</div>" : "" !== g ? "<div class='" + b.header + "' style='text-align:" + l.buttonalign + ";padding-bottom:0.8em;padding-top:0.5em;background-image: none;border-width: 1px 0 0 0;'>" + g + "</div>" : "";
                    c += "</div>";
                    try {
                        "false" === a("#info_dialog").attr("aria-hidden") && a.jgrid.hideModal("#info_dialog", {
                            jqm: e
                        }), a("#info_dialog").remove()
                    } catch (q) {}
                    a.jgrid.createModal({
                        themodal: "info_dialog",
                        modalhead: "info_head",
                        modalcontent: "info_content",
                        scrollelm: "infocnt"
                    }, c, l, "", "", !0);
                    g && a.each(l.buttons, function(b) {
                        a("#" + a.jgrid.jqID(this.id), "#info_id").bind("click", function() {
                            return l.buttons[b].onClick.call(a("#info_dialog")), !1
                        })
                    });
                    a("#closedialog", "#info_id").click(function() {
                        return n.hideModal("#info_dialog", {
                            jqm: e,
                            onClose: a("#info_dialog").data("onClose") || l.onClose,
                            gb: a("#info_dialog").data("gbox") || l.gbox
                        }), !1
                    });
                    a(".fm-button", "#info_dialog").hover(function() {
                            a(this).addClass(k.hover)
                        },
                        function() {
                            a(this).removeClass(k.hover)
                        });
                    a.isFunction(l.beforeOpen) && l.beforeOpen();
                    a.jgrid.viewModal("#info_dialog", {
                        onHide: function(a) {
                            a.w.hide().remove();
                            a.o && a.o.remove()
                        },
                        modal: l.modal,
                        jqm: e
                    });
                    a.isFunction(l.afterOpen) && l.afterOpen();
                    try {
                        a("#info_dialog").focus()
                    } catch (q) {}
                },
                bindEv: function(b, c) {
                    a.isFunction(c.dataInit) && c.dataInit.call(this, b, c);
                    c.dataEvents && a.each(c.dataEvents, function() {
                        void 0 !== this.data ? a(b).bind(this.type, this.data, this.fn) : a(b).bind(this.type, this.fn)
                    })
                },
                createEl: function(b,
                    c, d, g, l) {
                    function e(b, f, c) {
                        var e = "dataInit dataEvents dataUrl buildSelect sopt searchhidden defaultValue attr custom_element custom_value oper".split(" ");
                        void 0 !== c && a.isArray(c) && a.merge(e, c);
                        a.each(f, function(f, c) {
                            -1 === a.inArray(f, e) && a(b).attr(f, c)
                        });
                        f.hasOwnProperty("id") || a(b).attr("id", a.jgrid.randId())
                    }
                    var n = "",
                        k = this;
                    switch (b) {
                        case "textarea":
                            n = document.createElement("textarea");
                            g ? c.cols || a(n).css({
                                width: "98%"
                            }) : c.cols || (c.cols = 20);
                            c.rows || (c.rows = 2);
                            ("&nbsp;" === d || "&#160;" === d || 1 === d.length &&
                                160 === d.charCodeAt(0)) && (d = "");
                            n.value = d;
                            e(n, c);
                            a(n).attr({
                                role: "textbox",
                                multiline: "true"
                            });
                            break;
                        case "checkbox":
                            if (n = document.createElement("input"), n.type = "checkbox", c.value) {
                                var r = c.value.split(":");
                                d === r[0] && (n.checked = !0, n.defaultChecked = !0);
                                n.value = r[0];
                                a(n).attr("offval", r[1])
                            } else r = (d + "").toLowerCase(), 0 > r.search(/(false|f|0|no|n|off|undefined)/i) && "" !== r ? (n.checked = !0, n.defaultChecked = !0, n.value = d) : n.value = "on", a(n).attr("offval", "off");
                            e(n, c, ["value"]);
                            a(n).attr("role", "checkbox");
                            break;
                        case "select":
                            n = document.createElement("select");
                            n.setAttribute("role", "select");
                            b = [];
                            if (!0 === c.multiple ? (r = !0, n.multiple = "multiple", a(n).attr("aria-multiselectable", "true")) : r = !1, null != c.dataUrl) {
                                var r = null,
                                    q = c.postData || l.postData;
                                try {
                                    r = c.rowId
                                } catch (C) {}
                                k.p && k.p.idPrefix && (r = a.jgrid.stripPref(k.p.idPrefix, r));
                                a.ajax(a.extend({
                                    url: a.isFunction(c.dataUrl) ? c.dataUrl.call(k, r, d, String(c.name)) : c.dataUrl,
                                    type: "GET",
                                    dataType: "html",
                                    data: a.isFunction(q) ? q.call(k, r, d, String(c.name)) : q,
                                    context: {
                                        elem: n,
                                        options: c,
                                        vl: d
                                    },
                                    success: function(b) {
                                        var f, c = [],
                                            d = this.elem,
                                            h = this.vl,
                                            m = a.extend({}, this.options),
                                            g = !0 === m.multiple,
                                            w = !0 === m.cacheUrlData,
                                            l = "";
                                        b = a.isFunction(m.buildSelect) ? m.buildSelect.call(k, b) : b;
                                        "string" == typeof b && (b = a(a.trim(b)).html());
                                        b && (a(d).append(b), e(d, m, q ? ["postData"] : void 0), void 0 === m.size && (m.size = g ? 3 : 1), g ? (c = h.split(","), c = a.map(c, function(b) {
                                            return a.trim(b)
                                        })) : c[0] = a.trim(h), setTimeout(function() {
                                            if (a("option", d).each(function(b) {
                                                    f = a(this).text();
                                                    h = a(this).val() || f;
                                                    w && (l += (0 !==
                                                        b ? ";" : "") + h + ":" + f);
                                                    0 === b && d.multiple && (this.selected = !1);
                                                    a(this).attr("role", "option");
                                                    (-1 < a.inArray(a.trim(f), c) || -1 < a.inArray(a.trim(h), c)) && (this.selected = "selected")
                                                }), w)
                                                if ("edit" === m.oper) a(k).jqGrid("setColProp", m.name, {
                                                    editoptions: {
                                                        buildSelect: null,
                                                        dataUrl: null,
                                                        value: l
                                                    }
                                                });
                                                else if ("search" === m.oper) a(k).jqGrid("setColProp", m.name, {
                                                searchoptions: {
                                                    dataUrl: null,
                                                    value: l
                                                }
                                            });
                                            else if ("filter" === m.oper && a("#fbox_" + k.p.id)[0].p) {
                                                var b, e = a("#fbox_" + k.p.id)[0].p.columns;
                                                a.each(e, function() {
                                                    return b = this.index ||
                                                        this.name, m.name === b ? (this.searchoptions.dataUrl = null, this.searchoptions.value = l, !1) : void 0
                                                })
                                            }
                                            a(k).triggerHandler("jqGridAddEditAfterSelectUrlComplete", [d])
                                        }, 0))
                                    }
                                }, l || {}))
                            } else if (c.value) {
                                void 0 === c.size && (c.size = r ? 3 : 1);
                                r && (b = d.split(","), b = a.map(b, function(b) {
                                    return a.trim(b)
                                }));
                                "function" == typeof c.value && (c.value = c.value());
                                var u, z, y;
                                g = void 0 === c.separator ? ":" : c.separator;
                                l = void 0 === c.delimiter ? ";" : c.delimiter;
                                if ("string" == typeof c.value)
                                    for (u = c.value.split(l), l = 0; l < u.length; l++) z = u[l].split(g),
                                        2 < z.length && (z[1] = a.map(z, function(a, b) {
                                            return 0 < b ? a : void 0
                                        }).join(g)), y = document.createElement("option"), y.setAttribute("role", "option"), y.value = z[0], y.innerHTML = z[1], n.appendChild(y), r || a.trim(z[0]) !== a.trim(d) && a.trim(z[1]) !== a.trim(d) || (y.selected = "selected"), r && (-1 < a.inArray(a.trim(z[1]), b) || -1 < a.inArray(a.trim(z[0]), b)) && (y.selected = "selected");
                                else if ("[object Array]" === Object.prototype.toString.call(c.value))
                                    for (g = c.value, l = 0; l < g.length; l++) 2 === g[l].length && (u = g[l][0], z = g[l][1], y = document.createElement("option"),
                                        y.setAttribute("role", "option"), y.value = u, y.innerHTML = z, n.appendChild(y), r || a.trim(u) !== a.trim(d) && a.trim(z) !== a.trim(d) || (y.selected = "selected"), r && (-1 < a.inArray(a.trim(z), b) || -1 < a.inArray(a.trim(u), b)) && (y.selected = "selected"));
                                else if ("object" == typeof c.value)
                                    for (u in g = c.value, g) g.hasOwnProperty(u) && (y = document.createElement("option"), y.setAttribute("role", "option"), y.value = u, y.innerHTML = g[u], n.appendChild(y), r || a.trim(u) !== a.trim(d) && a.trim(g[u]) !== a.trim(d) || (y.selected = "selected"), r && (-1 < a.inArray(a.trim(g[u]),
                                        b) || -1 < a.inArray(a.trim(u), b)) && (y.selected = "selected"));
                                e(n, c, ["value"])
                            }
                            break;
                        case "image":
                        case "file":
                            n = document.createElement("input");
                            n.type = b;
                            e(n, c);
                            break;
                        case "custom":
                            n = document.createElement("span");
                            try {
                                if (!a.isFunction(c.custom_element)) throw "e1";
                                var K = c.custom_element.call(k, d, c);
                                if (!K) throw "e2";
                                K = a(K).addClass("customelement").attr({
                                    id: c.id,
                                    name: c.name
                                });
                                a(n).empty().append(K)
                            } catch (C) {
                                c = a.jgrid.getRegional(k, "errors"), d = a.jgrid.getRegional(k, "edit"), "e1" === C ? a.jgrid.info_dialog(c.errcap,
                                    "function 'custom_element' " + d.msg.nodefined, d.bClose, {
                                        styleUI: k.p.styleUI
                                    }) : "e2" === C ? a.jgrid.info_dialog(c.errcap, "function 'custom_element' " + d.msg.novalue, d.bClose, {
                                    styleUI: k.p.styleUI
                                }) : a.jgrid.info_dialog(c.errcap, "string" == typeof C ? C : C.message, d.bClose, {
                                    styleUI: k.p.styleUI
                                })
                            }
                            break;
                        default:
                            r = "button" === b ? "button" : "textbox", n = document.createElement("input"), n.type = b, n.value = d, e(n, c), "button" !== b && (g ? c.size || a(n).css({
                                width: "96%"
                            }) : c.size || (c.size = 20)), a(n).attr("role", r)
                    }
                    return n
                },
                checkDate: function(a,
                    b) {
                    var c, d = {};
                    if (a = a.toLowerCase(), c = -1 !== a.indexOf("/") ? "/" : -1 !== a.indexOf("-") ? "-" : -1 !== a.indexOf(".") ? "." : "/", a = a.split(c), b = b.split(c), 3 !== b.length) return !1;
                    var g, e, n = -1,
                        k = c = -1;
                    for (e = 0; e < a.length; e++) g = isNaN(b[e]) ? 0 : parseInt(b[e], 10), d[a[e]] = g, g = a[e], -1 !== g.indexOf("y") && (n = e), -1 !== g.indexOf("m") && (k = e), -1 !== g.indexOf("d") && (c = e);
                    g = "y" === a[n] || "yyyy" === a[n] ? 4 : "yy" === a[n] ? 2 : -1;
                    var r;
                    e = [0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; - 1 === n ? d = !1 : (r = d[a[n]].toString(), 2 === g && 1 === r.length && (g = 1), r.length !==
                        g || 0 === d[a[n]] && "00" !== b[n] ? d = !1 : -1 === k ? d = !1 : (r = d[a[k]].toString(), 1 > r.length || 1 > d[a[k]] || 12 < d[a[k]] ? d = !1 : -1 === c ? d = !1 : (r = d[a[c]].toString(), !(g = 1 > r.length || 1 > d[a[c]] || 31 < d[a[c]]) && (g = 2 === d[a[k]]) && (n = d[a[n]], g = d[a[c]] > (0 !== n % 4 || 0 === n % 100 && 0 !== n % 400 ? 28 : 29)), d = g || d[a[c]] > e[d[a[k]]] ? !1 : !0)));
                    return d
                },
                isEmpty: function(a) {
                    return a.match(/^\s+$/) || "" === a ? !0 : !1
                },
                checkTime: function(b) {
                    var c, d = /^(\d{1,2}):(\d{2})([apAP][Mm])?$/;
                    if (!a.jgrid.isEmpty(b)) {
                        if (c = b.match(d), !c) return !1;
                        if (c[3]) {
                            if (1 > c[1] || 12 < c[1]) return !1
                        } else if (23 <
                            c[1]) return !1;
                        if (59 < c[2]) return !1
                    }
                    return !0
                },
                checkValues: function(b, c, d, g) {
                    var l, e, n, k, r = this.p.colModel,
                        q = a.jgrid.getRegional(this, "edit.msg");
                    if (void 0 === d)
                        if ("string" == typeof c)
                            for (d = 0, g = r.length; g > d; d++) {
                                if (r[d].name === c) {
                                    l = r[d].editrules;
                                    c = d;
                                    null != r[d].formoptions && (e = r[d].formoptions.label);
                                    break
                                }
                            } else 0 <= c && (l = r[c].editrules);
                        else l = d, e = void 0 === g ? "_" : g;
                    if (l) {
                        if (e || (e = null != this.p.colNames ? this.p.colNames[c] : r[c].label), !0 === l.required && a.jgrid.isEmpty(b)) return [!1, e + ": " + q.required, ""];
                        d = !1 ===
                            l.required ? !1 : !0;
                        if (!0 === l.number && (!1 !== d || !a.jgrid.isEmpty(b)) && isNaN(b)) return [!1, e + ": " + q.number, ""];
                        if (void 0 !== l.minValue && !isNaN(l.minValue) && parseFloat(b) < parseFloat(l.minValue)) return [!1, e + ": " + q.minValue + " " + l.minValue, ""];
                        if (void 0 !== l.maxValue && !isNaN(l.maxValue) && parseFloat(b) > parseFloat(l.maxValue)) return [!1, e + ": " + q.maxValue + " " + l.maxValue, ""];
                        var u;
                        if (!0 === l.email && !(!1 === d && a.jgrid.isEmpty(b) || (u = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i,
                                u.test(b)))) return [!1, e + ": " + q.email, ""];
                        if (!(!0 !== l.integer || !1 === d && a.jgrid.isEmpty(b) || !isNaN(b) && 0 === b % 1 && -1 === b.indexOf("."))) return [!1, e + ": " + q.integer, ""];
                        if (!0 === l.date && !(!1 === d && a.jgrid.isEmpty(b) || (r[c].formatoptions && r[c].formatoptions.newformat ? (n = r[c].formatoptions.newformat, k = a.jgrid.getRegional(this, "formatter.date.masks"), k && k.hasOwnProperty(n) && (n = k[n])) : n = r[c].datefmt || "Y-m-d", a.jgrid.checkDate(n, b)))) return [!1, e + ": " + q.date + " - " + n, ""];
                        if (!0 === l.time && !(!1 === d && a.jgrid.isEmpty(b) ||
                                a.jgrid.checkTime(b))) return [!1, e + ": " + q.date + " - hh:mm (am/pm)", ""];
                        if (!0 === l.url && !(!1 === d && a.jgrid.isEmpty(b) || (u = /^(((https?)|(ftp)):\/\/([\-\w]+\.)+\w{2,3}(\/[%\-\w]+(\.\w{2,})?)*(([\w\-\.\?\\\/+@&#;`~=%!]*)(\.\w{2,})?)*\/?)/i, u.test(b)))) return [!1, e + ": " + q.url, ""];
                        if (!0 === l.custom && (!1 !== d || !a.jgrid.isEmpty(b))) return a.isFunction(l.custom_func) ? (b = l.custom_func.call(this, b, e, c), a.isArray(b) ? b : [!1, q.customarray, ""]) : [!1, q.customfcheck, ""]
                    }
                    return [!0, "", ""]
                }
            });
            a.fn.jqFilter = function(b) {
                if ("string" ==
                    typeof b) {
                    var c = a.fn.jqFilter[b];
                    if (!c) throw "jqFilter - No such method: " + b;
                    var d = a.makeArray(arguments).slice(1);
                    return c.apply(this, d)
                }
                var g = a.extend(!0, {
                    filter: null,
                    columns: [],
                    sortStrategy: null,
                    onChange: null,
                    afterRedraw: null,
                    checkValues: null,
                    error: !1,
                    errmsg: "",
                    errorcheck: !0,
                    showQuery: !0,
                    sopt: null,
                    ops: [],
                    operands: null,
                    numopts: "eq ne lt le gt ge nu nn in ni".split(" "),
                    stropts: "eq ne bw bn ew en cn nc nu nn in ni".split(" "),
                    strarr: ["text", "string", "blob"],
                    groupOps: [{
                        op: "AND",
                        text: "AND"
                    }, {
                        op: "OR",
                        text: "OR"
                    }],
                    groupButton: !0,
                    ruleButtons: !0,
                    direction: "ltr"
                }, a.jgrid.filter, b || {});
                return this.each(function() {
                    if (!this.filter) {
                        this.p = g;
                        null !== this.p.filter && void 0 !== this.p.filter || (this.p.filter = {
                            groupOp: this.p.groupOps[0].op,
                            rules: [],
                            groups: []
                        });
                        null != this.p.sortStrategy && a.isFunction(this.p.sortStrategy) && this.p.columns.sort(this.p.sortStrategy);
                        var b, c, f = this.p.columns.length,
                            d = /msie/i.test(navigator.userAgent) && !window.opera;
                        if (this.p.initFilter = a.extend(!0, {}, this.p.filter), f) {
                            for (b = 0; f > b; b++) c =
                                this.p.columns[b], c.stype ? c.inputtype = c.stype : c.inputtype || (c.inputtype = "text"), c.sorttype ? c.searchtype = c.sorttype : c.searchtype || (c.searchtype = "string"), void 0 === c.hidden && (c.hidden = !1), c.label || (c.label = c.name), c.index && (c.name = c.index), c.hasOwnProperty("searchoptions") || (c.searchoptions = {}), c.hasOwnProperty("searchrules") || (c.searchrules = {});
                            var h = function() {
                                return a("#" + a.jgrid.jqID(g.id))[0] || null
                            };
                            b = h();
                            var m = a.jgrid.styleUI[b.p.styleUI || "jQueryUI"].filter,
                                u = a.jgrid.styleUI[b.p.styleUI || "jQueryUI"].common;
                            this.p.showQuery && a(this).append("<table class='queryresult " + m.table_widget + "' style='display:block;max-width:440px;border:0px none;' dir='" + this.p.direction + "'><tbody><tr><td class='query'></td></tr></tbody></table>");
                            var k = function(b, c) {
                                var f = [!0, ""],
                                    e = h();
                                if (a.isFunction(c.searchrules)) f = c.searchrules.call(e, b, c);
                                else if (a.jgrid && a.jgrid.checkValues) try {
                                    f = a.jgrid.checkValues.call(e, b, -1, c.searchrules, c.label)
                                } catch (d) {}
                                f && f.length && !1 === f[0] && (g.error = !f[0], g.errmsg = f[1])
                            };
                            this.onchange = function() {
                                return this.p.error = !1, this.p.errmsg = "", a.isFunction(this.p.onChange) ? this.p.onChange.call(this, this.p) : !1
                            };
                            this.reDraw = function() {
                                a("table.group:first", this).remove();
                                var b = this.createTableForGroup(g.filter, null);
                                a(this).append(b);
                                a.isFunction(this.p.afterRedraw) && this.p.afterRedraw.call(this, this.p)
                            };
                            this.createTableForGroup = function(b, c) {
                                var f, e = this,
                                    d = a("<table class='group " + m.table_widget + " ui-search-table' style='border:0px none;'><tbody></tbody></table>"),
                                    h = "left";
                                "rtl" === this.p.direction && (h = "right", d.attr("dir",
                                    "rtl"));
                                null === c && d.append("<tr class='error' style='display:none;'><th colspan='5' class='" + u.error + "' align='" + h + "'></th></tr>");
                                var l = a("<tr></tr>");
                                d.append(l);
                                h = a("<th colspan='5' align='" + h + "'></th>");
                                if (l.append(h), !0 === this.p.ruleButtons) {
                                    var n = a("<select class='opsel " + m.srSelect + "'></select>");
                                    h.append(n);
                                    var r = "";
                                    for (f = 0; f < g.groupOps.length; f++) l = b.groupOp === e.p.groupOps[f].op ? " selected='selected'" : "", r += "<option value='" + e.p.groupOps[f].op + "'" + l + ">" + e.p.groupOps[f].text + "</option>";
                                    n.append(r).bind("change",
                                        function() {
                                            b.groupOp = a(n).val();
                                            e.onchange()
                                        })
                                }
                                l = "<span></span>";
                                if (this.p.groupButton && (l = a("<input type='button' value='+ {}' title='Add subgroup' class='add-group " + u.button + "'/>"), l.bind("click", function() {
                                        return void 0 === b.groups && (b.groups = []), b.groups.push({
                                            groupOp: g.groupOps[0].op,
                                            rules: [],
                                            groups: []
                                        }), e.reDraw(), e.onchange(), !1
                                    })), h.append(l), !0 === this.p.ruleButtons) {
                                    var k, l = a("<input type='button' value='+' title='Add rule' class='add-rule ui-add " + u.button + "'/>");
                                    l.bind("click", function() {
                                        void 0 ===
                                            b.rules && (b.rules = []);
                                        for (f = 0; f < e.p.columns.length; f++) {
                                            var c = void 0 === e.p.columns[f].search ? !0 : e.p.columns[f].search,
                                                d = !0 === e.p.columns[f].hidden;
                                            if (!0 === e.p.columns[f].searchoptions.searchhidden && c || c && !d) {
                                                k = e.p.columns[f];
                                                break
                                            }
                                        }
                                        var h;
                                        return h = k.searchoptions.sopt ? k.searchoptions.sopt : e.p.sopt ? e.p.sopt : -1 !== a.inArray(k.searchtype, e.p.strarr) ? e.p.stropts : e.p.numopts, b.rules.push({
                                            field: k.name,
                                            op: h[0],
                                            data: ""
                                        }), e.reDraw(), !1
                                    });
                                    h.append(l)
                                }
                                null !== c && (l = a("<input type='button' value='-' title='Delete group' class='delete-group " +
                                    u.button + "'/>"), h.append(l), l.bind("click", function() {
                                    for (f = 0; f < c.groups.length; f++)
                                        if (c.groups[f] === b) {
                                            c.groups.splice(f, 1);
                                            break
                                        }
                                    return e.reDraw(), e.onchange(), !1
                                }));
                                if (void 0 !== b.groups)
                                    for (f = 0; f < b.groups.length; f++) h = a("<tr></tr>"), d.append(h), l = a("<td class='first'></td>"), h.append(l), l = a("<td colspan='4'></td>"), l.append(this.createTableForGroup(b.groups[f], b)), h.append(l);
                                if (void 0 === b.groupOp && (b.groupOp = e.p.groupOps[0].op), void 0 !== b.rules)
                                    for (f = 0; f < b.rules.length; f++) d.append(this.createTableRowForRule(b.rules[f],
                                        b));
                                return d
                            };
                            this.createTableRowForRule = function(b, c) {
                                var f, e, l, n, k, z = this,
                                    p = h(),
                                    v = a("<tr></tr>"),
                                    J = "";
                                v.append("<td class='first'></td>");
                                var G = a("<td class='columns'></td>");
                                v.append(G);
                                var Q, ka = a("<select class='" + m.srSelect + "'></select>"),
                                    R = [];
                                G.append(ka);
                                ka.bind("change", function() {
                                    b.field = a(ka).val();
                                    l = a(this).parents("tr:first");
                                    a(".data", l).empty();
                                    for (f = 0; f < z.p.columns.length; f++)
                                        if (z.p.columns[f].name === b.field) {
                                            n = z.p.columns[f];
                                            break
                                        }
                                    if (n) {
                                        n.searchoptions.id = a.jgrid.randId();
                                        n.searchoptions.name =
                                            b.field;
                                        n.searchoptions.oper = "filter";
                                        d && "text" === n.inputtype && (n.searchoptions.size || (n.searchoptions.size = 10));
                                        var c = a.jgrid.createEl.call(p, n.inputtype, n.searchoptions, "", !0, z.p.ajaxSelectOptions || {}, !0);
                                        a(c).addClass("input-elm " + m.srInput);
                                        e = n.searchoptions.sopt ? n.searchoptions.sopt : z.p.sopt ? z.p.sopt : -1 !== a.inArray(n.searchtype, z.p.strarr) ? z.p.stropts : z.p.numopts;
                                        var h = "",
                                            g = 0;
                                        R = [];
                                        a.each(z.p.ops, function() {
                                            R.push(this.oper)
                                        });
                                        for (f = 0; f < e.length; f++) Q = a.inArray(e[f], R), -1 !== Q && (0 === g && (b.op = z.p.ops[Q].oper),
                                            h += "<option value='" + z.p.ops[Q].oper + "'>" + z.p.ops[Q].text + "</option>", g++);
                                        if (a(".selectopts", l).empty().append(h), a(".selectopts", l)[0].selectedIndex = 0, a.jgrid.msie && 9 > a.jgrid.msiever()) h = parseInt(a("select.selectopts", l)[0].offsetWidth, 10) + 1, a(".selectopts", l).width(h), a(".selectopts", l).css("width", "auto");
                                        a(".data", l).append(c);
                                        a.jgrid.bindEv.call(p, c, n.searchoptions);
                                        a(".input-elm", l).bind("change", function(c) {
                                            c = c.target;
                                            b.data = "SPAN" === c.nodeName.toUpperCase() && n.searchoptions && a.isFunction(n.searchoptions.custom_value) ?
                                                n.searchoptions.custom_value.call(p, a(c).children(".customelement:first"), "get") : c.value;
                                            z.onchange()
                                        });
                                        setTimeout(function() {
                                            b.data = a(c).val();
                                            z.onchange()
                                        }, 0)
                                    }
                                });
                                for (f = G = 0; f < z.p.columns.length; f++) {
                                    var D = void 0 === z.p.columns[f].search ? !0 : z.p.columns[f].search,
                                        I = !0 === z.p.columns[f].hidden;
                                    (!0 === z.p.columns[f].searchoptions.searchhidden && D || D && !I) && (k = "", b.field === z.p.columns[f].name && (k = " selected='selected'", G = f), J += "<option value='" + z.p.columns[f].name + "'" + k + ">" + z.p.columns[f].label + "</option>")
                                }
                                ka.append(J);
                                J = a("<td class='operators'></td>");
                                v.append(J);
                                n = g.columns[G];
                                n.searchoptions.id = a.jgrid.randId();
                                d && "text" === n.inputtype && (n.searchoptions.size || (n.searchoptions.size = 10));
                                n.searchoptions.name = b.field;
                                n.searchoptions.oper = "filter";
                                G = a.jgrid.createEl.call(p, n.inputtype, n.searchoptions, b.data, !0, z.p.ajaxSelectOptions || {}, !0);
                                "nu" !== b.op && "nn" !== b.op || (a(G).attr("readonly", "true"), a(G).attr("disabled", "true"));
                                var F = a("<select class='selectopts " + m.srSelect + "'></select>");
                                J.append(F);
                                F.bind("change",
                                    function() {
                                        b.op = a(F).val();
                                        l = a(this).parents("tr:first");
                                        var c = a(".input-elm", l)[0];
                                        "nu" === b.op || "nn" === b.op ? (b.data = "", "SELECT" !== c.tagName.toUpperCase() && (c.value = ""), c.setAttribute("readonly", "true"), c.setAttribute("disabled", "true")) : ("SELECT" === c.tagName.toUpperCase() && (b.data = c.value), c.removeAttribute("readonly"), c.removeAttribute("disabled"));
                                        z.onchange()
                                    });
                                e = n.searchoptions.sopt ? n.searchoptions.sopt : z.p.sopt ? z.p.sopt : -1 !== a.inArray(n.searchtype, z.p.strarr) ? z.p.stropts : z.p.numopts;
                                J = "";
                                a.each(z.p.ops,
                                    function() {
                                        R.push(this.oper)
                                    });
                                for (f = 0; f < e.length; f++) Q = a.inArray(e[f], R), -1 !== Q && (k = b.op === z.p.ops[Q].oper ? " selected='selected'" : "", J += "<option value='" + z.p.ops[Q].oper + "'" + k + ">" + z.p.ops[Q].text + "</option>");
                                F.append(J);
                                k = a("<td class='data'></td>");
                                v.append(k);
                                k.append(G);
                                a.jgrid.bindEv.call(p, G, n.searchoptions);
                                a(G).addClass("input-elm " + m.srInput).bind("change", function() {
                                    b.data = "custom" === n.inputtype ? n.searchoptions.custom_value.call(p, a(this).children(".customelement:first"), "get") : a(this).val();
                                    z.onchange()
                                });
                                k = a("<td></td>");
                                if (v.append(k), !0 === this.p.ruleButtons) J = a("<input type='button' value='-' title='Delete rule' class='delete-rule ui-del " + u.button + "'/>"), k.append(J), J.bind("click", function() {
                                    for (f = 0; f < c.rules.length; f++)
                                        if (c.rules[f] === b) {
                                            c.rules.splice(f, 1);
                                            break
                                        }
                                    return z.reDraw(), z.onchange(), !1
                                });
                                return v
                            };
                            this.getStringForGroup = function(a) {
                                var b, c = "(";
                                if (void 0 !== a.groups)
                                    for (b = 0; b < a.groups.length; b++) {
                                        1 < c.length && (c += " " + a.groupOp + " ");
                                        try {
                                            c += this.getStringForGroup(a.groups[b])
                                        } catch (f) {
                                            alert(f)
                                        }
                                    }
                                if (void 0 !==
                                    a.rules) try {
                                    for (b = 0; b < a.rules.length; b++) 1 < c.length && (c += " " + a.groupOp + " "), c += this.getStringForRule(a.rules[b])
                                } catch (f) {
                                    alert(f)
                                }
                                return c += ")", "()" === c ? "" : c
                            };
                            this.getStringForRule = function(b) {
                                var c, f, e, d = "",
                                    h = "",
                                    m = ["int", "integer", "float", "number", "currency"];
                                for (c = 0; c < this.p.ops.length; c++)
                                    if (this.p.ops[c].oper === b.op) {
                                        d = this.p.operands.hasOwnProperty(b.op) ? this.p.operands[b.op] : "";
                                        h = this.p.ops[c].oper;
                                        break
                                    }
                                for (c = 0; c < this.p.columns.length; c++)
                                    if (this.p.columns[c].name === b.field) {
                                        f = this.p.columns[c];
                                        break
                                    }
                                return void 0 === f ? "" : (e = b.data, ("bw" === h || "bn" === h) && (e += "%"), ("ew" === h || "en" === h) && (e = "%" + e), ("cn" === h || "nc" === h) && (e = "%" + e + "%"), ("in" === h || "ni" === h) && (e = " (" + e + ")"), g.errorcheck && k(b.data, f), -1 !== a.inArray(f.searchtype, m) || "nn" === h || "nu" === h ? b.field + " " + d + " " + e : b.field + " " + d + ' "' + e + '"')
                            };
                            this.resetFilter = function() {
                                this.p.filter = a.extend(!0, {}, this.p.initFilter);
                                this.reDraw();
                                this.onchange()
                            };
                            this.hideError = function() {
                                a("th." + u.error, this).html("");
                                a("tr.error", this).hide()
                            };
                            this.showError =
                                function() {
                                    a("th." + u.error, this).html(this.p.errmsg);
                                    a("tr.error", this).show()
                                };
                            this.toUserFriendlyString = function() {
                                return this.getStringForGroup(g.filter)
                            };
                            this.toString = function() {
                                function a(c) {
                                    var f, e = "(";
                                    if (void 0 !== c.groups)
                                        for (f = 0; f < c.groups.length; f++) 1 < e.length && (e += "OR" === c.groupOp ? " || " : " && "), e += a(c.groups[f]);
                                    if (void 0 !== c.rules)
                                        for (f = 0; f < c.rules.length; f++) {
                                            1 < e.length && (e += "OR" === c.groupOp ? " || " : " && ");
                                            var d = c.rules[f];
                                            if (b.p.errorcheck) {
                                                for (var h = void 0, m = void 0, h = 0; h < b.p.columns.length; h++)
                                                    if (b.p.columns[h].name ===
                                                        d.field) {
                                                        m = b.p.columns[h];
                                                        break
                                                    }
                                                m && k(d.data, m)
                                            }
                                            e += d.op + "(item." + d.field + ",'" + d.data + "')"
                                        }
                                    return e += ")", "()" === e ? "" : e
                                }
                                var b = this;
                                return a(this.p.filter)
                            };
                            this.reDraw();
                            this.p.showQuery && this.onchange();
                            this.filter = !0
                        }
                    }
                })
            };
            a.extend(a.fn.jqFilter, {
                toSQLString: function() {
                    var a = "";
                    return this.each(function() {
                        a = this.toUserFriendlyString()
                    }), a
                },
                filterData: function() {
                    var a;
                    return this.each(function() {
                        a = this.p.filter
                    }), a
                },
                getParameter: function(a) {
                    return void 0 !== a && this.p.hasOwnProperty(a) ? this.p[a] : this.p
                },
                resetFilter: function() {
                    return this.each(function() {
                        this.resetFilter()
                    })
                },
                addFilter: function(b) {
                    "string" == typeof b && (b = a.jgrid.parse(b));
                    this.each(function() {
                        this.p.filter = b;
                        this.reDraw();
                        this.onchange()
                    })
                }
            });
            a.jgrid.extend({
                filterToolbar: function(b) {
                    var c = a.jgrid.getRegional(this[0], "search");
                    return b = a.extend({
                        autosearch: !0,
                        autosearchDelay: 500,
                        searchOnEnter: !0,
                        beforeSearch: null,
                        afterSearch: null,
                        beforeClear: null,
                        afterClear: null,
                        searchurl: "",
                        stringResult: !1,
                        groupOp: "AND",
                        defaultSearch: "bw",
                        searchOperators: !1,
                        resetIcon: "x",
                        operands: {
                            eq: "==",
                            ne: "!",
                            lt: "<",
                            le: "<=",
                            gt: ">",
                            ge: ">=",
                            bw: "^",
                            bn: "!^",
                            "in": "=",
                            ni: "!=",
                            ew: "|",
                            en: "!@",
                            cn: "~",
                            nc: "!~",
                            nu: "#",
                            nn: "!#"
                        }
                    }, c, b || {}), this.each(function() {
                        var d = this;
                        if (!d.p.filterToolbar) {
                            a(d).data("filterToolbar") || a(d).data("filterToolbar", b);
                            d.p.force_regional && (b = a.extend(b, c));
                            var g, l, e, n = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].filter,
                                k = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].common,
                                r = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].base,
                                q = function() {
                                    var c, e, m, g = {},
                                        w = 0,
                                        l = {};
                                    a.each(d.p.colModel, function() {
                                        var n = a("#gs_" + d.p.idPrefix + a.jgrid.jqID(this.name), !0 === this.frozen && !0 === d.p.frozenColumns ? d.grid.fhDiv : d.grid.hDiv);
                                        if (e = this.index || this.name, m = b.searchOperators ? n.parent().prev().children("a").attr("soper") || b.defaultSearch : this.searchoptions && this.searchoptions.sopt ? this.searchoptions.sopt[0] : "select" === this.stype ? "eq" : b.defaultSearch, c = "custom" === this.stype && a.isFunction(this.searchoptions.custom_value) && 0 < n.length && "SPAN" === n[0].nodeName.toUpperCase() ? this.searchoptions.custom_value.call(d,
                                                n.children(".customelement:first"), "get") : n.val(), c || "nu" === m || "nn" === m) g[e] = c, l[e] = m, w++;
                                        else try {
                                            delete d.p.postData[e]
                                        } catch (q) {}
                                    });
                                    var n = 0 < w ? !0 : !1;
                                    if (!0 === b.stringResult || "local" === d.p.datatype || !0 === b.searchOperators) {
                                        var q = '{"groupOp":"' + b.groupOp + '","rules":[',
                                            r = 0;
                                        a.each(g, function(a, b) {
                                            0 < r && (q += ",");
                                            q += '{"field":"' + a + '",';
                                            q += '"op":"' + l[a] + '",';
                                            q += '"data":"' + (b + "").replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}';
                                            r++
                                        });
                                        q += "]}";
                                        a.extend(d.p.postData, {
                                            filters: q
                                        });
                                        a.each(["searchField", "searchString",
                                            "searchOper"
                                        ], function(a, b) {
                                            d.p.postData.hasOwnProperty(b) && delete d.p.postData[b]
                                        })
                                    } else a.extend(d.p.postData, g);
                                    var u;
                                    d.p.searchurl && (u = d.p.url, a(d).jqGrid("setGridParam", {
                                        url: d.p.searchurl
                                    }));
                                    var k = "stop" === a(d).triggerHandler("jqGridToolbarBeforeSearch") ? !0 : !1;
                                    !k && a.isFunction(b.beforeSearch) && (k = b.beforeSearch.call(d));
                                    k || a(d).jqGrid("setGridParam", {
                                        search: n
                                    }).trigger("reloadGrid", [{
                                        page: 1
                                    }]);
                                    u && a(d).jqGrid("setGridParam", {
                                        url: u
                                    });
                                    a(d).triggerHandler("jqGridToolbarAfterSearch");
                                    a.isFunction(b.afterSearch) &&
                                        b.afterSearch.call(d)
                                },
                                u = function(c, e, m) {
                                    a("#sopt_menu").remove();
                                    e = parseInt(e, 10);
                                    m = parseInt(m, 10) + 18;
                                    var g, w;
                                    e = '<ul id="sopt_menu" class="ui-search-menu modal-content" role="menu" tabindex="0" style="font-size:' + (a(".ui-jqgrid-view").css("font-size") || "11px") + ";left:" + e + "px;top:" + m + 'px;">';
                                    m = a(c).attr("soper");
                                    var l = [],
                                        r = 0,
                                        u = a(c).attr("colname");
                                    for (w = d.p.colModel.length; w > r && d.p.colModel[r].name !== u;) r++;
                                    r = d.p.colModel[r];
                                    u = a.extend({}, r.searchoptions);
                                    u.sopt || (u.sopt = [], u.sopt[0] = "select" === r.stype ?
                                        "eq" : b.defaultSearch);
                                    a.each(b.odata, function() {
                                        l.push(this.oper)
                                    });
                                    for (r = 0; r < u.sopt.length; r++) w = a.inArray(u.sopt[r], l), -1 !== w && (g = m === b.odata[w].oper ? k.highlight : "", e += '<li class="ui-menu-item ' + g + '" role="presentation"><a class="' + k.cornerall + ' g-menu-item" tabindex="0" role="menuitem" value="' + b.odata[w].oper + '" oper="' + b.operands[b.odata[w].oper] + '"><table class="ui-common-table"><tr><td width="25px">' + b.operands[b.odata[w].oper] + "</td><td>" + b.odata[w].text + "</td></tr></table></a></li>");
                                    e +=
                                        "</ul>";
                                    a("body").append(e);
                                    a("#sopt_menu").addClass("ui-menu " + n.menu_widget);
                                    a("#sopt_menu > li > a").hover(function() {
                                        a(this).addClass(k.hover)
                                    }, function() {
                                        a(this).removeClass(k.hover)
                                    }).click(function() {
                                        var e = a(this).attr("value"),
                                            m = a(this).attr("oper");
                                        if (a(d).triggerHandler("jqGridToolbarSelectOper", [e, m, c]), a("#sopt_menu").hide(), a(c).text(m).attr("soper", e), !0 === b.autosearch) m = a(c).parent().next().children()[0], (a(m).val() || "nu" === e || "nn" === e) && q()
                                    })
                                },
                                z = a("<tr class='ui-search-toolbar' role='row'></tr>");
                            b.restoreFromFilters && (e = d.p.postData.filters, e && ("string" == typeof e && (e = a.jgrid.parse(e)), l = e.rules.length ? e.rules : !1));
                            a.each(d.p.colModel, function(c) {
                                var e, m, u, k, B, p, v;
                                m = "";
                                var N = "=",
                                    L = a("<th role='columnheader' class='" + r.headerBox + " ui-th-" + d.p.direction + "' id='gsh_" + d.p.id + "_" + this.name + "' ></th>"),
                                    J = a("<div></div>"),
                                    G = a("<table class='ui-search-table' cellspacing='0'><tr><td class='ui-search-oper' headers=''></td><td class='ui-search-input' headers=''></td><td class='ui-search-clear' headers=''></td></tr></table>");
                                if (!0 === this.hidden && a(L).css("display", "none"), this.search = !1 === this.search ? !1 : !0, void 0 === this.stype && (this.stype = "text"), e = a.extend({}, this.searchoptions || {}, {
                                        name: this.index || this.name,
                                        id: "gs_" + d.p.idPrefix + this.name,
                                        oper: "search"
                                    }), this.search) {
                                    if (b.restoreFromFilters && l)
                                        for (v = !1, u = 0; u < l.length; u++)
                                            if (l[u].field && (this.index || this.name) === l[u].field) {
                                                v = l[u];
                                                break
                                            }
                                    if (b.searchOperators) {
                                        m = e.sopt ? e.sopt[0] : "select" === this.stype ? "eq" : b.defaultSearch;
                                        b.restoreFromFilters && v && (m = v.op);
                                        for (u = 0; u < b.odata.length; u++)
                                            if (b.odata[u].oper ===
                                                m) {
                                                N = b.operands[m] || "";
                                                break
                                            }
                                        u = null != e.searchtitle ? e.searchtitle : b.operandTitle;
                                        m = "<a title='" + u + "' style='padding-right: 0.5em;' soper='" + m + "' class='soptclass' colname='" + this.name + "'>" + N + "</a>"
                                    }
                                    switch (a("td:eq(0)", G).attr("colindex", c).append(m), void 0 === e.clearSearch && (e.clearSearch = !0), e.clearSearch ? (k = b.resetTitle || "Clear Search Value", a("td:eq(2)", G).append("<a title='" + k + "' style='padding-right: 0.3em;padding-left: 0.3em;' class='clearsearchclass'>" + b.resetIcon + "</a>")) : a("td:eq(2)", G).hide(),
                                        this.surl && (e.dataUrl = this.surl), B = "", e.defaultValue && (B = a.isFunction(e.defaultValue) ? e.defaultValue.call(d) : e.defaultValue), b.restoreFromFilters && v && (B = v.data), p = a.jgrid.createEl.call(d, this.stype, e, B, !1, a.extend({}, a.jgrid.ajaxOptions, d.p.ajaxSelectOptions || {})), a(p).addClass(n.srInput), a("td:eq(1)", G).append(p), a(J).append(G), this.stype) {
                                        case "select":
                                            !0 === b.autosearch && (e.dataEvents = [{
                                                type: "change",
                                                fn: function() {
                                                    return q(), !1
                                                }
                                            }]);
                                            break;
                                        case "text":
                                            !0 === b.autosearch && (e.dataEvents = b.searchOnEnter ? [{
                                                type: "keypress",
                                                fn: function(a) {
                                                    return 13 === (a.charCode || a.keyCode || 0) ? (q(), !1) : this
                                                }
                                            }] : [{
                                                type: "keydown",
                                                fn: function(a) {
                                                    switch (a.which) {
                                                        case 13:
                                                            return !1;
                                                        case 9:
                                                        case 16:
                                                        case 37:
                                                        case 38:
                                                        case 39:
                                                        case 40:
                                                        case 27:
                                                            break;
                                                        default:
                                                            g && clearTimeout(g), g = setTimeout(function() {
                                                                q()
                                                            }, b.autosearchDelay)
                                                    }
                                                }
                                            }])
                                    }
                                    a.jgrid.bindEv.call(d, p, e)
                                }
                                a(L).append(J);
                                a(z).append(L);
                                b.searchOperators || a("td:eq(0)", G).hide()
                            });
                            a("table thead", d.grid.hDiv).append(z);
                            b.searchOperators && (a(".soptclass", z).click(function(b) {
                                var c = a(this).offset();
                                u(this, c.left, c.top);
                                b.stopPropagation()
                            }), a("body").on("click", function(b) {
                                "soptclass" !== b.target.className && a("#sopt_menu").hide()
                            }));
                            a(".clearsearchclass", z).click(function() {
                                var c = a(this).parents("tr:first"),
                                    e = parseInt(a("td.ui-search-oper", c).attr("colindex"), 10),
                                    m = a.extend({}, d.p.colModel[e].searchoptions || {}),
                                    m = m.defaultValue ? m.defaultValue : "";
                                "select" === d.p.colModel[e].stype ? m ? a("td.ui-search-input select", c).val(m) : a("td.ui-search-input select", c)[0].selectedIndex = 0 : a("td.ui-search-input input",
                                    c).val(m);
                                !0 === b.autosearch && q()
                            });
                            this.p.filterToolbar = !0;
                            this.triggerToolbar = q;
                            this.clearToolbar = function(c) {
                                var e, m = {},
                                    g = 0;
                                c = "boolean" != typeof c ? !0 : c;
                                a.each(d.p.colModel, function() {
                                    var b, c = a("#gs_" + d.p.idPrefix + a.jgrid.jqID(this.name), !0 === this.frozen && !0 === d.p.frozenColumns ? d.grid.fhDiv : d.grid.hDiv);
                                    switch (this.searchoptions && void 0 !== this.searchoptions.defaultValue && (b = this.searchoptions.defaultValue), e = this.index || this.name, this.stype) {
                                        case "select":
                                            if (c.find("option").each(function(c) {
                                                    return 0 ===
                                                        c && (this.selected = !0), a(this).val() === b ? (this.selected = !0, !1) : void 0
                                                }), void 0 !== b) m[e] = b, g++;
                                            else try {
                                                delete d.p.postData[e]
                                            } catch (f) {}
                                            break;
                                        case "text":
                                            if (c.val(b || ""), void 0 !== b) m[e] = b, g++;
                                            else try {
                                                delete d.p.postData[e]
                                            } catch (f) {}
                                            break;
                                        case "custom":
                                            a.isFunction(this.searchoptions.custom_value) && 0 < c.length && "SPAN" === c[0].nodeName.toUpperCase() && this.searchoptions.custom_value.call(d, c.children(".customelement:first"), "set", b || "")
                                    }
                                });
                                var w = 0 < g ? !0 : !1;
                                if (d.p.resetsearch = !0, !0 === b.stringResult || "local" ===
                                    d.p.datatype) {
                                    var l = '{"groupOp":"' + b.groupOp + '","rules":[',
                                        n = 0;
                                    a.each(m, function(a, b) {
                                        0 < n && (l += ",");
                                        l += '{"field":"' + a + '",';
                                        l += '"op":"eq",';
                                        l += '"data":"' + (b + "").replace(/\\/g, "\\\\").replace(/\"/g, '\\"') + '"}';
                                        n++
                                    });
                                    l += "]}";
                                    a.extend(d.p.postData, {
                                        filters: l
                                    });
                                    a.each(["searchField", "searchString", "searchOper"], function(a, b) {
                                        d.p.postData.hasOwnProperty(b) && delete d.p.postData[b]
                                    })
                                } else a.extend(d.p.postData, m);
                                var q;
                                d.p.searchurl && (q = d.p.url, a(d).jqGrid("setGridParam", {
                                    url: d.p.searchurl
                                }));
                                var r = "stop" ===
                                    a(d).triggerHandler("jqGridToolbarBeforeClear") ? !0 : !1;
                                !r && a.isFunction(b.beforeClear) && (r = b.beforeClear.call(d));
                                r || c && a(d).jqGrid("setGridParam", {
                                    search: w
                                }).trigger("reloadGrid", [{
                                    page: 1
                                }]);
                                q && a(d).jqGrid("setGridParam", {
                                    url: q
                                });
                                a(d).triggerHandler("jqGridToolbarAfterClear");
                                a.isFunction(b.afterClear) && b.afterClear()
                            };
                            this.toggleToolbar = function() {
                                var b = a("tr.ui-search-toolbar", d.grid.hDiv),
                                    c = !0 === d.p.frozenColumns ? a("tr.ui-search-toolbar", d.grid.fhDiv) : !1;
                                "none" === b.css("display") ? (b.show(), c &&
                                    c.show()) : (b.hide(), c && c.hide())
                            }
                        }
                    })
                },
                destroyFilterToolbar: function() {
                    return this.each(function() {
                        this.p.filterToolbar && (this.triggerToolbar = null, this.clearToolbar = null, this.toggleToolbar = null, this.p.filterToolbar = !1, a(this.grid.hDiv).find("table thead tr.ui-search-toolbar").remove())
                    })
                },
                searchGrid: function(b) {
                    var c = a.jgrid.getRegional(this[0], "search");
                    return b = a.extend(!0, {
                        recreateFilter: !1,
                        drag: !0,
                        sField: "searchField",
                        sValue: "searchString",
                        sOper: "searchOper",
                        sFilter: "filters",
                        loadDefaults: !0,
                        beforeShowSearch: null,
                        afterShowSearch: null,
                        onInitializeSearch: null,
                        afterRedraw: null,
                        afterChange: null,
                        sortStrategy: null,
                        closeAfterSearch: !1,
                        closeAfterReset: !1,
                        closeOnEscape: !1,
                        searchOnEnter: !1,
                        multipleSearch: !1,
                        multipleGroup: !1,
                        top: 0,
                        left: 0,
                        jqModal: !0,
                        modal: !1,
                        resize: !0,
                        width: 450,
                        height: "auto",
                        dataheight: "auto",
                        showQuery: !1,
                        errorcheck: !0,
                        sopt: null,
                        stringResult: void 0,
                        onClose: null,
                        onSearch: null,
                        onReset: null,
                        toTop: !0,
                        overlay: 30,
                        columns: [],
                        tmplNames: null,
                        tmplFilters: null,
                        tmplLabel: " Template: ",
                        showOnLoad: !1,
                        layer: null,
                        operands: {
                            eq: "=",
                            ne: "<>",
                            lt: "<",
                            le: "<=",
                            gt: ">",
                            ge: ">=",
                            bw: "LIKE",
                            bn: "NOT LIKE",
                            "in": "IN",
                            ni: "NOT IN",
                            ew: "LIKE",
                            en: "NOT LIKE",
                            cn: "LIKE",
                            nc: "NOT LIKE",
                            nu: "IS NULL",
                            nn: "ISNOT NULL"
                        }
                    }, c, b || {}), this.each(function() {
                        function c(h) {
                            g = a(d).triggerHandler("jqGridFilterBeforeShow", [h]);
                            void 0 === g && (g = !0);
                            g && a.isFunction(b.beforeShowSearch) && (g = b.beforeShowSearch.call(d, h));
                            g && (a.jgrid.viewModal("#" + a.jgrid.jqID(r.themodal), {
                                gbox: "#gbox_" + a.jgrid.jqID(e),
                                jqm: b.jqModal,
                                modal: b.modal,
                                overlay: b.overlay,
                                toTop: b.toTop
                            }), a(d).triggerHandler("jqGridFilterAfterShow", [h]), a.isFunction(b.afterShowSearch) && b.afterShowSearch.call(d, h))
                        }
                        var d = this;
                        if (d.grid) {
                            var m, e = "fbox_" + d.p.id,
                                g = !0,
                                k = !0,
                                r = {
                                    themodal: "searchmod" + e,
                                    modalhead: "searchhd" + e,
                                    modalcontent: "searchcnt" + e,
                                    scrollelm: e
                                },
                                q = d.p.postData[b.sFilter],
                                u = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].filter,
                                z = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].common;
                            if (b.styleUI = d.p.styleUI, "string" == typeof q && (q = a.jgrid.parse(q)), !0 === b.recreateFilter && a("#" + a.jgrid.jqID(r.themodal)).remove(), void 0 !== a("#" + a.jgrid.jqID(r.themodal))[0]) c(a("#fbox_" +
                                a.jgrid.jqID(d.p.id)));
                            else {
                                var y = a("<div><div id='" + e + "' class='searchFilter' style='overflow:auto'></div></div>").insertBefore("#gview_" + a.jgrid.jqID(d.p.id)),
                                    p = "left",
                                    C = "";
                                "rtl" === d.p.direction && (p = "right", C = " style='text-align:left'", y.attr("dir", "rtl"));
                                var v, A = a.extend([], d.p.colModel),
                                    x = "<a id='" + e + "_search' class='fm-button " + z.button + " fm-button-icon-right ui-search'><span class='" + z.icon_base + " " + u.icon_search + "'></span>" + b.Find + "</a>",
                                    H = "<a id='" + e + "_reset' class='fm-button " + z.button +
                                    " fm-button-icon-left ui-reset'><span class='" + z.icon_base + " " + u.icon_reset + "'></span>" + b.Reset + "</a>",
                                    E = "",
                                    N = "",
                                    L = !1,
                                    J = -1;
                                if (b.showQuery && (E = "<a id='" + e + "_query' class='fm-button " + z.button + " fm-button-icon-left'><span class='" + z.icon_base + " " + u.icon_query + "'></span>Query</a>"), b.columns.length ? (A = b.columns, J = 0, v = A[0].index || A[0].name) : a.each(A, function(a, b) {
                                        if (b.label || (b.label = d.p.colNames[a]), !L) {
                                            var c = void 0 === b.search ? !0 : b.search,
                                                f = !0 === b.hidden;
                                            (b.searchoptions && !0 === b.searchoptions.searchhidden &&
                                                c || c && !f) && (L = !0, v = b.index || b.name, J = a)
                                        }
                                    }), !q && v || !1 === b.multipleSearch) {
                                    var G = "eq";
                                    0 <= J && A[J].searchoptions && A[J].searchoptions.sopt ? G = A[J].searchoptions.sopt[0] : b.sopt && b.sopt.length && (G = b.sopt[0]);
                                    q = {
                                        groupOp: "AND",
                                        rules: [{
                                            field: v,
                                            op: G,
                                            data: ""
                                        }]
                                    }
                                }
                                L = !1;
                                b.tmplNames && b.tmplNames.length && (L = !0, N = "<tr><td class='ui-search-label'>" + b.tmplLabel + "</td>", N += "<td><select class='ui-template " + u.srSelect + "'>", N += "<option value='default'>Default</option>", a.each(b.tmplNames, function(a, b) {
                                    N += "<option value='" +
                                        a + "'>" + b + "</option>"
                                }), N += "</select></td></tr>");
                                u = "<table class='EditTable' style='border:0px none;margin-top:5px' id='" + e + "_2'><tbody><tr><td colspan='2'><hr class='" + z.content + "' style='margin:1px'/></td></tr>" + N + "<tr><td class='EditButton' style='text-align:" + p + "'>" + H + "</td><td class='EditButton' " + C + ">" + E + x + "</td></tr></tbody></table>";
                                e = a.jgrid.jqID(e);
                                a("#" + e).jqFilter({
                                    columns: A,
                                    sortStrategy: b.sortStrategy,
                                    filter: b.loadDefaults ? q : null,
                                    showQuery: b.showQuery,
                                    errorcheck: b.errorcheck,
                                    sopt: b.sopt,
                                    groupButton: b.multipleGroup,
                                    ruleButtons: b.multipleSearch,
                                    afterRedraw: b.afterRedraw,
                                    ops: b.odata,
                                    operands: b.operands,
                                    ajaxSelectOptions: d.p.ajaxSelectOptions,
                                    groupOps: b.groupOps,
                                    onChange: function() {
                                        this.p.showQuery && a(".query", this).html(this.toUserFriendlyString());
                                        a.isFunction(b.afterChange) && b.afterChange.call(d, a("#" + e), b)
                                    },
                                    direction: d.p.direction,
                                    id: d.p.id
                                });
                                y.append(u);
                                L && b.tmplFilters && b.tmplFilters.length && a(".ui-template", y).bind("change", function() {
                                    var c = a(this).val();
                                    return "default" === c ? a("#" +
                                        e).jqFilter("addFilter", q) : a("#" + e).jqFilter("addFilter", b.tmplFilters[parseInt(c, 10)]), !1
                                });
                                !0 === b.multipleGroup && (b.multipleSearch = !0);
                                a(d).triggerHandler("jqGridFilterInitialize", [a("#" + e)]);
                                a.isFunction(b.onInitializeSearch) && b.onInitializeSearch.call(d, a("#" + e));
                                b.gbox = "#gbox_" + e;
                                b.layer ? a.jgrid.createModal(r, y, b, "#gview_" + a.jgrid.jqID(d.p.id), a("#gbox_" + a.jgrid.jqID(d.p.id))[0], "#" + a.jgrid.jqID(b.layer), {
                                    position: "relative"
                                }) : a.jgrid.createModal(r, y, b, "#gview_" + a.jgrid.jqID(d.p.id), a("#gbox_" +
                                    a.jgrid.jqID(d.p.id))[0]);
                                (b.searchOnEnter || b.closeOnEscape) && a("#" + a.jgrid.jqID(r.themodal)).keydown(function(c) {
                                    var d = a(c.target);
                                    return !b.searchOnEnter || 13 !== c.which || d.hasClass("add-group") || d.hasClass("add-rule") || d.hasClass("delete-group") || d.hasClass("delete-rule") || d.hasClass("fm-button") && d.is("[id$=_query]") ? b.closeOnEscape && 27 === c.which ? (a("#" + a.jgrid.jqID(r.modalhead)).find(".ui-jqdialog-titlebar-close").click(), !1) : void 0 : (a("#" + e + "_search").click(), !1)
                                });
                                E && a("#" + e + "_query").bind("click",
                                    function() {
                                        return a(".queryresult", y).toggle(), !1
                                    });
                                void 0 === b.stringResult && (b.stringResult = b.multipleSearch);
                                a("#" + e + "_search").bind("click", function() {
                                    var c, h, g = {};
                                    if (m = a("#" + e), m.find(".input-elm:focus").change(), h = m.jqFilter("filterData"), b.errorcheck && (m[0].hideError(), b.showQuery || m.jqFilter("toSQLString"), m[0].p.error)) return m[0].showError(), !1;
                                    if (b.stringResult) {
                                        try {
                                            c = JSON.stringify(h)
                                        } catch (n) {}
                                        "string" == typeof c && (g[b.sFilter] = c, a.each([b.sField, b.sValue, b.sOper], function() {
                                            g[this] = ""
                                        }))
                                    } else b.multipleSearch ?
                                        (g[b.sFilter] = h, a.each([b.sField, b.sValue, b.sOper], function() {
                                            g[this] = ""
                                        })) : (g[b.sField] = h.rules[0].field, g[b.sValue] = h.rules[0].data, g[b.sOper] = h.rules[0].op, g[b.sFilter] = "");
                                    return d.p.search = !0, a.extend(d.p.postData, g), k = a(d).triggerHandler("jqGridFilterSearch"), void 0 === k && (k = !0), k && a.isFunction(b.onSearch) && (k = b.onSearch.call(d, d.p.filters)), !1 !== k && a(d).trigger("reloadGrid", [{
                                        page: 1
                                    }]), b.closeAfterSearch && a.jgrid.hideModal("#" + a.jgrid.jqID(r.themodal), {
                                        gb: "#gbox_" + a.jgrid.jqID(d.p.id),
                                        jqm: b.jqModal,
                                        onClose: b.onClose
                                    }), !1
                                });
                                a("#" + e + "_reset").bind("click", function() {
                                    var c = {},
                                        h = a("#" + e);
                                    return d.p.search = !1, d.p.resetsearch = !0, !1 === b.multipleSearch ? c[b.sField] = c[b.sValue] = c[b.sOper] = "" : c[b.sFilter] = "", h[0].resetFilter(), L && a(".ui-template", y).val("default"), a.extend(d.p.postData, c), k = a(d).triggerHandler("jqGridFilterReset"), void 0 === k && (k = !0), k && a.isFunction(b.onReset) && (k = b.onReset.call(d)), !1 !== k && a(d).trigger("reloadGrid", [{
                                        page: 1
                                    }]), b.closeAfterReset && a.jgrid.hideModal("#" + a.jgrid.jqID(r.themodal), {
                                        gb: "#gbox_" + a.jgrid.jqID(d.p.id),
                                        jqm: b.jqModal,
                                        onClose: b.onClose
                                    }), !1
                                });
                                c(a("#" + e));
                                a(".fm-button:not(." + z.disabled + ")", y).hover(function() {
                                    a(this).addClass(z.hover)
                                }, function() {
                                    a(this).removeClass(z.hover)
                                })
                            }
                        }
                    })
                }
            });
            var k = {};
            if (a.jgrid.extend({
                    editGridRow: function(b, c) {
                        var d = a.jgrid.getRegional(this[0], "edit"),
                            g = this[0].p.styleUI,
                            l = a.jgrid.styleUI[g].formedit,
                            e = a.jgrid.styleUI[g].common;
                        return c = a.extend(!0, {
                            top: 0,
                            left: 0,
                            width: "500",
                            datawidth: "auto",
                            height: "auto",
                            dataheight: "auto",
                            modal: !1,
                            overlay: 30,
                            drag: !0,
                            resize: !0,
                            url: null,
                            mtype: "POST",
                            clearAfterAdd: !0,
                            closeAfterEdit: !1,
                            reloadAfterSubmit: !0,
                            onInitializeForm: null,
                            beforeInitData: null,
                            beforeShowForm: null,
                            afterShowForm: null,
                            beforeSubmit: null,
                            afterSubmit: null,
                            onclickSubmit: null,
                            afterComplete: null,
                            onclickPgButtons: null,
                            afterclickPgButtons: null,
                            editData: {},
                            recreateForm: !1,
                            jqModal: !0,
                            closeOnEscape: !1,
                            addedrow: "first",
                            topinfo: "",
                            bottominfo: "",
                            saveicon: [],
                            closeicon: [],
                            savekey: [!1, 13],
                            navkeys: [!1, 38, 40],
                            checkOnSubmit: !1,
                            checkOnUpdate: !1,
                            _savedData: {},
                            processing: !1,
                            onClose: null,
                            ajaxEditOptions: {},
                            serializeEditData: null,
                            viewPagerButtons: !0,
                            overlayClass: e.overlay,
                            removemodal: !0,
                            form: "edit",
                            template: null,
                            focusField: !0
                        }, d, c || {}), k[a(this)[0].p.id] = c, this.each(function() {
                            function d() {
                                return a(D).find(".FormElement").each(function() {
                                    var b = a(".customelement", this);
                                    if (b.length) {
                                        var c = a(b[0]).attr("name");
                                        a.each(x.p.colModel, function() {
                                            if (this.name === c && this.editoptions && a.isFunction(this.editoptions.custom_value)) {
                                                try {
                                                    if (E[c] = this.editoptions.custom_value.call(x,
                                                            a("#" + a.jgrid.jqID(c), D), "get"), void 0 === E[c]) throw "e1";
                                                } catch (b) {
                                                    "e1" === b ? a.jgrid.info_dialog(S.errcap, "function 'custom_value' " + k[a(this)[0]].p.msg.novalue, k[a(this)[0]].p.bClose, {
                                                        styleUI: k[a(this)[0]].p.styleUI
                                                    }) : a.jgrid.info_dialog(S.errcap, b.message, k[a(this)[0]].p.bClose, {
                                                        styleUI: k[a(this)[0]].p.styleUI
                                                    })
                                                }
                                                return !0
                                            }
                                        })
                                    } else {
                                        switch (a(this).get(0).type) {
                                            case "checkbox":
                                                a(this).is(":checked") ? E[this.name] = a(this).val() : (b = a(this).attr("offval"), E[this.name] = b);
                                                break;
                                            case "select-one":
                                                E[this.name] =
                                                    a("option:selected", this).val();
                                                break;
                                            case "select-multiple":
                                                E[this.name] = a(this).val();
                                                E[this.name] = E[this.name] ? E[this.name].join(",") : "";
                                                a("option:selected", this).each(function(b, c) {
                                                    a(c).text()
                                                });
                                                break;
                                            case "password":
                                            case "text":
                                            case "textarea":
                                            case "button":
                                                E[this.name] = a(this).val()
                                        }
                                        x.p.autoencode && (E[this.name] = a.jgrid.htmlEncode(E[this.name]))
                                    }
                                }), !0
                            }

                            function h(b, c, f, e) {
                                var d, m, g, w, n, q, r, u = 0,
                                    t = [],
                                    B = !1,
                                    z = "";
                                for (r = 1; e >= r; r++) z += "<td class='CaptionTD'>&#160;</td><td class='DataTD'>&#160;</td>";
                                if ("_empty" !== b && (B = a(c).jqGrid("getInd", b)), a(c.p.colModel).each(function(h) {
                                        if (d = this.name, m = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1, n = m ? "style='display:none'" : "", "cb" !== d && "subgrid" !== d && !0 === this.editable && "rn" !== d) {
                                            if (!1 === B) w = "";
                                            else if (d === c.p.ExpandColumn && !0 === c.p.treeGrid) w = a("td[role='gridcell']:eq(" + h + ")", c.rows[B]).text();
                                            else {
                                                try {
                                                    w = a.unformat.call(c, a("td[role='gridcell']:eq(" + h + ")", c.rows[B]), {
                                                        rowId: b,
                                                        colModel: this
                                                    }, h)
                                                } catch (r) {
                                                    w = this.edittype && "textarea" ===
                                                        this.edittype ? a("td[role='gridcell']:eq(" + h + ")", c.rows[B]).text() : a("td[role='gridcell']:eq(" + h + ")", c.rows[B]).html()
                                                }(!w || "&nbsp;" === w || "&#160;" === w || 1 === w.length && 160 === w.charCodeAt(0)) && (w = "")
                                            }
                                            var y = a.extend({}, this.editoptions || {}, {
                                                    id: d,
                                                    name: d,
                                                    rowId: b,
                                                    oper: "edit"
                                                }),
                                                p = a.extend({}, {
                                                    elmprefix: "",
                                                    elmsuffix: "",
                                                    rowabove: !1,
                                                    rowcontent: ""
                                                }, this.formoptions || {}),
                                                A = parseInt(p.rowpos, 10) || u + 1,
                                                C = parseInt(2 * (parseInt(p.colpos, 10) || 1), 10);
                                            if ("_empty" === b && y.defaultValue && (w = a.isFunction(y.defaultValue) ? y.defaultValue.call(x) :
                                                    y.defaultValue), this.edittype || (this.edittype = "text"), x.p.autoencode && (w = a.jgrid.htmlDecode(w)), q = a.jgrid.createEl.call(x, this.edittype, y, w, !1, a.extend({}, a.jgrid.ajaxOptions, c.p.ajaxSelectOptions || {})), "select" === this.edittype && (w = a(q).val(), "select-multiple" === a(q).get(0).type && w && (w = w.join(","))), "checkbox" === this.edittype && (w = a(q).is(":checked") ? a(q).val() : a(q).attr("offval")), (k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (k[x.p.id]._savedData[d] = w), a(q).addClass("FormElement"), -1 < a.inArray(this.edittype, ["text", "textarea", "password", "select"]) && a(q).addClass(l.inputClass), O) a(P).find("#" + d).replaceWith(q);
                                            else {
                                                if (g = a(f).find("tr[rowpos=" + A + "]"), p.rowabove) {
                                                    var K = a("<tr><td class='contentinfo' colspan='" + 2 * e + "'>" + p.rowcontent + "</td></tr>");
                                                    a(f).append(K);
                                                    K[0].rp = A
                                                }
                                                0 === g.length && (g = a("<tr " + n + " rowpos='" + A + "'></tr>").addClass("FormData").attr("id", "tr_" + d), a(g).append(z), a(f).append(g), g[0].rp = A);
                                                a("td:eq(" + (C - 2) + ")", g[0]).html("<label for='" + d + "'>" + (void 0 === p.label ? c.p.colNames[h] : p.label) + "</label>");
                                                a("td:eq(" + (C - 1) + ")", g[0]).append(p.elmprefix).append(q).append(p.elmsuffix)
                                            }
                                            "custom" === this.edittype && a.isFunction(y.custom_value) && y.custom_value.call(x, a("#" + d, G), "set", w);
                                            a.jgrid.bindEv.call(x, q, y);
                                            t[u] = h;
                                            u++
                                        }
                                    }), 0 < u) {
                                    var y;
                                    O ? (y = "<div class='FormData' style='display:none'><input class='FormElement' id='id_g' type='text' name='" + c.p.id + "_id' value='" + b + "'/>", a(P).append(y)) : (y = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (2 * e - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='" +
                                        c.p.id + "_id' value='" + b + "'/></td></tr>"), y[0].rp = u + 999, a(f).append(y));
                                    (k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (k[x.p.id]._savedData[c.p.id + "_id"] = b)
                                }
                                return t
                            }

                            function g(b, c, f) {
                                var e, d, h, m, w, l, n = 0;
                                (k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (k[x.p.id]._savedData = {}, k[x.p.id]._savedData[c.p.id + "_id"] = b);
                                var q = c.p.colModel;
                                if ("_empty" === b) return a(q).each(function() {
                                    e = this.name;
                                    m = a.extend({}, this.editoptions || {});
                                    (h = a("#" + a.jgrid.jqID(e), f)) && h.length && null !== h[0] && (w = "", "custom" ===
                                        this.edittype && a.isFunction(m.custom_value) ? m.custom_value.call(x, a("#" + e, f), "set", w) : m.defaultValue ? (w = a.isFunction(m.defaultValue) ? m.defaultValue.call(x) : m.defaultValue, "checkbox" === h[0].type ? (l = w.toLowerCase(), 0 > l.search(/(false|f|0|no|n|off|undefined)/i) && "" !== l ? (h[0].checked = !0, h[0].defaultChecked = !0, h[0].value = w) : (h[0].checked = !1, h[0].defaultChecked = !1)) : h.val(w)) : "checkbox" === h[0].type ? (h[0].checked = !1, h[0].defaultChecked = !1, w = a(h).attr("offval")) : h[0].type && "select" === h[0].type.substr(0, 6) ?
                                        h[0].selectedIndex = 0 : h.val(w), (!0 === k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (k[x.p.id]._savedData[e] = w))
                                }), void a("#id_g", f).val(b);
                                var r = a(c).jqGrid("getInd", b, !0);
                                r && (a('td[role="gridcell"]', r).each(function(h) {
                                    if (e = q[h].name, "cb" !== e && "subgrid" !== e && "rn" !== e && !0 === q[h].editable) {
                                        if (e === c.p.ExpandColumn && !0 === c.p.treeGrid) d = a(this).text();
                                        else try {
                                            d = a.unformat.call(c, a(this), {
                                                rowId: b,
                                                colModel: q[h]
                                            }, h)
                                        } catch (m) {
                                            d = "textarea" === q[h].edittype ? a(this).text() : a(this).html()
                                        }
                                        switch (x.p.autoencode &&
                                            (d = a.jgrid.htmlDecode(d)), (!0 === k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (k[x.p.id]._savedData[e] = d), e = a.jgrid.jqID(e), q[h].edittype) {
                                            case "password":
                                            case "text":
                                            case "button":
                                            case "image":
                                            case "textarea":
                                                ("&nbsp;" === d || "&#160;" === d || 1 === d.length && 160 === d.charCodeAt(0)) && (d = "");
                                                a("#" + e, f).val(d);
                                                break;
                                            case "select":
                                                var g = d.split(","),
                                                    g = a.map(g, function(b) {
                                                        return a.trim(b)
                                                    });
                                                a("#" + e + " option", f).each(function() {
                                                    this.selected = q[h].editoptions.multiple || a.trim(d) !== a.trim(a(this).text()) &&
                                                        g[0] !== a.trim(a(this).text()) && g[0] !== a.trim(a(this).val()) ? q[h].editoptions.multiple && (-1 < a.inArray(a.trim(a(this).text()), g) || -1 < a.inArray(a.trim(a(this).val()), g)) ? !0 : !1 : !0
                                                });
                                                (!0 === k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (d = a("#" + e, f).val(), q[h].editoptions.multiple && (d = d.join(",")), k[x.p.id]._savedData[e] = d);
                                                break;
                                            case "checkbox":
                                                if (d = String(d), q[h].editoptions && q[h].editoptions.value) {
                                                    var w = q[h].editoptions.value.split(":");
                                                    a("#" + e, f)[x.p.useProp ? "prop" : "attr"](w[0] === d ? {
                                                        checked: !0,
                                                        defaultChecked: !0
                                                    } : {
                                                        checked: !1,
                                                        defaultChecked: !1
                                                    })
                                                } else d = d.toLowerCase(), 0 > d.search(/(false|f|0|no|n|off|undefined)/i) && "" !== d ? (a("#" + e, f)[x.p.useProp ? "prop" : "attr"]("checked", !0), a("#" + e, f)[x.p.useProp ? "prop" : "attr"]("defaultChecked", !0)) : (a("#" + e, f)[x.p.useProp ? "prop" : "attr"]("checked", !1), a("#" + e, f)[x.p.useProp ? "prop" : "attr"]("defaultChecked", !1));
                                                (!0 === k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) && (d = a("#" + e, f).is(":checked") ? a("#" + e, f).val() : a("#" + e, f).attr("offval"));
                                                break;
                                            case "custom":
                                                try {
                                                    if (!q[h].editoptions ||
                                                        !a.isFunction(q[h].editoptions.custom_value)) throw "e1";
                                                    q[h].editoptions.custom_value.call(x, a("#" + e, f), "set", d)
                                                } catch (m) {
                                                    "e1" === m ? a.jgrid.info_dialog(S.errcap, "function 'custom_value' " + k[a(this)[0]].p.msg.nodefined, a.rp_ge[a(this)[0]].p.bClose, {
                                                        styleUI: k[a(this)[0]].p.styleUI
                                                    }) : a.jgrid.info_dialog(S.errcap, m.message, a.rp_ge[a(this)[0]].p.bClose, {
                                                        styleUI: k[a(this)[0]].p.styleUI
                                                    })
                                                }
                                        }
                                        n++
                                    }
                                }), 0 < n && a("#id_g", D).val(b))
                            }

                            function w() {
                                a.each(x.p.colModel, function(a, b) {
                                    b.editoptions && !0 === b.editoptions.NullIfEmpty &&
                                        E.hasOwnProperty(b.name) && "" === E[b.name] && (E[b.name] = "null")
                                })
                            }

                            function u() {
                                var b, f, d, h, l, n, u, t = [!0, "", ""],
                                    B = {},
                                    z = x.p.prmNames,
                                    y = a(x).triggerHandler("jqGridAddEditBeforeCheckValues", [a(G), L]);
                                y && "object" == typeof y && (E = y);
                                a.isFunction(k[x.p.id].beforeCheckValues) && (y = k[x.p.id].beforeCheckValues.call(x, E, a(G), L), y && "object" == typeof y && (E = y));
                                for (h in E)
                                    if (E.hasOwnProperty(h) && (t = a.jgrid.checkValues.call(x, E[h], h), !1 === t[0])) break;
                                if (w(), t[0] && (B = a(x).triggerHandler("jqGridAddEditClickSubmit", [k[x.p.id],
                                        E, L
                                    ]), void 0 === B && a.isFunction(k[x.p.id].onclickSubmit) && (B = k[x.p.id].onclickSubmit.call(x, k[x.p.id], E, L) || {}), t = a(x).triggerHandler("jqGridAddEditBeforeSubmit", [E, a(G), L]), void 0 === t && (t = [!0, "", ""]), t[0] && a.isFunction(k[x.p.id].beforeSubmit) && (t = k[x.p.id].beforeSubmit.call(x, E, a(G), L))), t[0] && !k[x.p.id].processing) {
                                    if (k[x.p.id].processing = !0, a("#sData", D + "_2").addClass(e.active), u = k[x.p.id].url || a(x).jqGrid("getGridParam", "editurl"), d = z.oper, f = "clientArray" === u ? x.p.keyName : z.id, E[d] = "_empty" === a.trim(E[x.p.id +
                                            "_id"]) ? z.addoper : z.editoper, E[d] !== z.addoper ? E[f] = E[x.p.id + "_id"] : void 0 === E[f] && (E[f] = E[x.p.id + "_id"]), delete E[x.p.id + "_id"], E = a.extend(E, k[x.p.id].editData, B), !0 === x.p.treeGrid)
                                        for (n in E[d] === z.addoper && (l = a(x).jqGrid("getGridParam", "selrow"), E["adjacency" === x.p.treeGridModel ? x.p.treeReader.parent_id_field : "parent_id"] = l), x.p.treeReader) x.p.treeReader.hasOwnProperty(n) && (h = x.p.treeReader[n], !E.hasOwnProperty(h) || E[d] === z.addoper && "parent_id_field" === n || delete E[h]);
                                    E[f] = a.jgrid.stripPref(x.p.idPrefix,
                                        E[f]);
                                    n = a.extend({
                                        url: u,
                                        type: k[x.p.id].mtype,
                                        data: a.isFunction(k[x.p.id].serializeEditData) ? k[x.p.id].serializeEditData.call(x, E) : E,
                                        complete: function(h, w) {
                                            var n;
                                            if (a("#sData", D + "_2").removeClass(e.active), E[f] = x.p.idPrefix + E[f], 300 <= h.status && 304 !== h.status ? (t[0] = !1, t[1] = a(x).triggerHandler("jqGridAddEditErrorTextFormat", [h, L]), t[1] = a.isFunction(k[x.p.id].errorTextFormat) ? k[x.p.id].errorTextFormat.call(x, h, L) : w + " Status: '" + h.statusText + "'. Error code: " + h.status) : (t = a(x).triggerHandler("jqGridAddEditAfterSubmit", [h, E, L]), void 0 === t && (t = [!0, "", ""]), t[0] && a.isFunction(k[x.p.id].afterSubmit) && (t = k[x.p.id].afterSubmit.call(x, h, E, L))), !1 === t[0]) a(".FormError", G).html(t[1]), a(".FormError", G).show();
                                            else if (x.p.autoencode && a.each(E, function(b, c) {
                                                    E[b] = a.jgrid.htmlDecode(c)
                                                }), E[d] === z.addoper ? (t[2] || (t[2] = a.jgrid.randId()), null == E[f] || "_empty" === E[f] ? E[f] = t[2] : t[2] = E[f], k[x.p.id].reloadAfterSubmit ? a(x).trigger("reloadGrid") : !0 === x.p.treeGrid ? a(x).jqGrid("addChildNode", t[2], l, E) : a(x).jqGrid("addRowData", t[2], E, c.addedrow),
                                                    k[x.p.id].closeAfterAdd ? (!0 !== x.p.treeGrid && a(x).jqGrid("setSelection", t[2]), a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                                        gb: "#gbox_" + a.jgrid.jqID(J),
                                                        jqm: c.jqModal,
                                                        onClose: k[x.p.id].onClose,
                                                        removemodal: k[x.p.id].removemodal,
                                                        formprop: !k[x.p.id].recreateForm,
                                                        form: k[x.p.id].form
                                                    })) : k[x.p.id].clearAfterAdd && g("_empty", x, G)) : (k[x.p.id].reloadAfterSubmit ? (a(x).trigger("reloadGrid"), k[x.p.id].closeAfterEdit || setTimeout(function() {
                                                    a(x).jqGrid("setSelection", E[f])
                                                }, 1E3)) : !0 === x.p.treeGrid ? a(x).jqGrid("setTreeRow",
                                                    E[f], E) : a(x).jqGrid("setRowData", E[f], E), k[x.p.id].closeAfterEdit && a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                                    gb: "#gbox_" + a.jgrid.jqID(J),
                                                    jqm: c.jqModal,
                                                    onClose: k[x.p.id].onClose,
                                                    removemodal: k[x.p.id].removemodal,
                                                    formprop: !k[x.p.id].recreateForm,
                                                    form: k[x.p.id].form
                                                })), a.isFunction(k[x.p.id].afterComplete) && (b = h, setTimeout(function() {
                                                    a(x).triggerHandler("jqGridAddEditAfterComplete", [b, E, a(G), L]);
                                                    k[x.p.id].afterComplete.call(x, b, E, a(G), L);
                                                    b = null
                                                }, 500)), (k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) &&
                                                (a(G).data("disabled", !1), "_empty" !== k[x.p.id]._savedData[x.p.id + "_id"]))
                                                for (n in k[x.p.id]._savedData) k[x.p.id]._savedData.hasOwnProperty(n) && E[n] && (k[x.p.id]._savedData[n] = E[n]);
                                            k[x.p.id].processing = !1;
                                            try {
                                                a(":input:visible", G)[0].focus()
                                            } catch (q) {}
                                        }
                                    }, a.jgrid.ajaxOptions, k[x.p.id].ajaxEditOptions);
                                    if (n.url || k[x.p.id].useDataProxy || (a.isFunction(x.p.dataProxy) ? k[x.p.id].useDataProxy = !0 : (t[0] = !1, t[1] += " " + S.nourl)), t[0]) k[x.p.id].useDataProxy ? (u = x.p.dataProxy.call(x, n, "set_" + x.p.id), void 0 === u && (u = [!0, ""]), !1 === u[0] ? (t[0] = !1, t[1] = u[1] || "Error deleting the selected row!") : (n.data.oper === z.addoper && k[x.p.id].closeAfterAdd && a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                        gb: "#gbox_" + a.jgrid.jqID(J),
                                        jqm: c.jqModal,
                                        onClose: k[x.p.id].onClose,
                                        removemodal: k[x.p.id].removemodal,
                                        formprop: !k[x.p.id].recreateForm,
                                        form: k[x.p.id].form
                                    }), n.data.oper === z.editoper && k[x.p.id].closeAfterEdit && a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                        gb: "#gbox_" + a.jgrid.jqID(J),
                                        jqm: c.jqModal,
                                        onClose: k[x.p.id].onClose,
                                        removemodal: k[x.p.id].removemodal,
                                        formprop: !k[x.p.id].recreateForm,
                                        form: k[x.p.id].form
                                    }))) : "clientArray" === n.url ? (k[x.p.id].reloadAfterSubmit = !1, E = n.data, n.complete({
                                        status: 200,
                                        statusText: ""
                                    }, "")) : a.ajax(n)
                                }!1 === t[0] && (a(".FormError", G).html(t[1]), a(".FormError", G).show())
                            }

                            function z(a, b) {
                                var c, f = !1;
                                for (c in a)
                                    if (a.hasOwnProperty(c) && a[c] != b[c]) {
                                        f = !0;
                                        break
                                    }
                                return f
                            }

                            function y() {
                                var b = !0;
                                return a(".FormError", G).hide(), k[x.p.id].checkOnUpdate && (E = {}, d(), N = z(E, k[x.p.id]._savedData), N && (a(G).data("disabled", !0), a(".confirm", "#" + R.themodal).show(),
                                    b = !1)), b
                            }

                            function p() {
                                var c;
                                if ("_empty" !== b && void 0 !== x.p.savedRow && 0 < x.p.savedRow.length && a.isFunction(a.fn.jqGrid.restoreRow))
                                    for (c = 0; c < x.p.savedRow.length; c++)
                                        if (x.p.savedRow[c].id === b) {
                                            a(x).jqGrid("restoreRow", b);
                                            break
                                        }
                            }

                            function C(b, c) {
                                var f = c[1].length - 1;
                                0 === b ? a("#pData", H).addClass(e.disabled) : void 0 !== c[1][b - 1] && a("#" + a.jgrid.jqID(c[1][b - 1])).hasClass(e.disabled) ? a("#pData", H).addClass(e.disabled) : a("#pData", H).removeClass(e.disabled);
                                b === f ? a("#nData", H).addClass(e.disabled) : void 0 !== c[1][b +
                                    1
                                ] && a("#" + a.jgrid.jqID(c[1][b + 1])).hasClass(e.disabled) ? a("#nData", H).addClass(e.disabled) : a("#nData", H).removeClass(e.disabled)
                            }

                            function v() {
                                var b = a(x).jqGrid("getDataIDs"),
                                    c = a("#id_g", D).val();
                                return [a.inArray(c, b), b]
                            }

                            function A(a) {
                                var b = "";
                                return "string" == typeof a && (b = a.replace(/\{([\w\-]+)(?:\:([\w\.]*)(?:\((.*?)?\))?)?\}/g, function(a, b) {
                                    return '<span id="' + b + '" ></span>'
                                })), b
                            }
                            var x = this;
                            if (x.grid && b) {
                                var H, E, N, L, J = x.p.id,
                                    G = "FrmGrid_" + J,
                                    Q = "TblGrid_" + J,
                                    D = "#" + a.jgrid.jqID(Q),
                                    R = {
                                        themodal: "editmod" +
                                            J,
                                        modalhead: "edithd" + J,
                                        modalcontent: "editcnt" + J,
                                        scrollelm: G
                                    },
                                    F = !0,
                                    I = 1,
                                    M = 0,
                                    O = "string" == typeof k[x.p.id].template && 0 < k[x.p.id].template.length,
                                    S = a.jgrid.getRegional(this, "errors");
                                k[x.p.id].styleUI = x.p.styleUI || "jQueryUI";
                                a.jgrid.isMobile() && (k[x.p.id].resize = !1);
                                "new" === b ? (b = "_empty", L = "add", c.caption = k[x.p.id].addCaption) : (c.caption = k[x.p.id].editCaption, L = "edit");
                                c.recreateForm || a(x).data("formProp") && a.extend(k[a(this)[0].p.id], a(x).data("formProp"));
                                var Y = !0;
                                c.checkOnUpdate && c.jqModal && !c.modal &&
                                    (Y = !1);
                                var t, ea = isNaN(k[a(this)[0].p.id].dataheight) ? k[a(this)[0].p.id].dataheight : k[a(this)[0].p.id].dataheight + "px",
                                    ia = isNaN(k[a(this)[0].p.id].datawidth) ? k[a(this)[0].p.id].datawidth : k[a(this)[0].p.id].datawidth + "px",
                                    P = a("<form name='FormPost' id='" + G + "' class='FormGrid' onSubmit='return false;' style='width:" + ia + ";height:" + ea + ";'></form>").data("disabled", !1);
                                if (O ? (t = A(k[a(this)[0].p.id].template), H = D) : (t = a("<table id='" + Q + "' class='EditTable ui-common-table'><tbody></tbody></table>"), H = D + "_2"),
                                    G = "#" + a.jgrid.jqID(G), a(P).append("<div class='FormError " + e.error + "' style='display:none;'></div>"), a(P).append("<div class='tinfo topinfo'>" + k[x.p.id].topinfo + "</div>"), a(x.p.colModel).each(function() {
                                        var a = this.formoptions;
                                        I = Math.max(I, a ? a.colpos || 0 : 0);
                                        M = Math.max(M, a ? a.rowpos || 0 : 0)
                                    }), a(P).append(t), F = a(x).triggerHandler("jqGridAddEditBeforeInitData", [P, L]), void 0 === F && (F = !0), F && a.isFunction(k[x.p.id].beforeInitData) && (F = k[x.p.id].beforeInitData.call(x, P, L)), !1 !== F) {
                                    p();
                                    h(b, x, t, I);
                                    var Fa = "rtl" ===
                                        x.p.direction ? !0 : !1,
                                        V = "<a id='" + (Fa ? "nData" : "pData") + "' class='fm-button " + e.button + "'><span class='" + e.icon_base + " " + l.icon_prev + "'></span></a>",
                                        F = "<a id='" + (Fa ? "pData" : "nData") + "' class='fm-button " + e.button + "'><span class='" + e.icon_base + " " + l.icon_next + "'></span></a>",
                                        ea = "<a id='sData' class='fm-button " + e.button + "'>" + c.bSubmit + "</a>",
                                        ia = "<a id='cData' class='fm-button " + e.button + "'>" + c.bCancel + "</a>",
                                        W = "<table style='height:auto' class='EditTable ui-common-table' id='" + Q + "_2'><tbody><tr><td colspan='2'><hr class='" +
                                        e.content + "' style='margin:1px'/></td></tr><tr id='Act_Buttons'><td class='navButton'>" + (Fa ? F + V : V + F) + "</td><td class='EditButton'>" + ea + ia + "</td></tr>";
                                    if (W += "</tbody></table>", 0 < M) {
                                        var aa = [];
                                        a.each(a(t)[0].rows, function(a, b) {
                                            aa[a] = b
                                        });
                                        aa.sort(function(a, b) {
                                            return a.rp > b.rp ? 1 : a.rp < b.rp ? -1 : 0
                                        });
                                        a.each(aa, function(b, c) {
                                            a("tbody", t).append(c)
                                        })
                                    }
                                    c.gbox = "#gbox_" + a.jgrid.jqID(J);
                                    var na = !1;
                                    !0 === c.closeOnEscape && (c.closeOnEscape = !1, na = !0);
                                    var fa;
                                    if (O ? (a(P).find("#pData").replaceWith(V), a(P).find("#nData").replaceWith(F),
                                            a(P).find("#sData").replaceWith(ea), a(P).find("#cData").replaceWith(ia), fa = a("<div id=" + Q + "></div>").append(P)) : fa = a("<div></div>").append(P).append(W), a(P).append("<div class='binfo topinfo bottominfo'>" + k[x.p.id].bottominfo + "</div>"), a.jgrid.createModal(R, fa, k[a(this)[0].p.id], "#gview_" + a.jgrid.jqID(x.p.id), a("#gbox_" + a.jgrid.jqID(x.p.id))[0]), Fa && (a("#pData, #nData", D + "_2").css("float", "right"), a(".EditButton", D + "_2").css("text-align", "left")), k[x.p.id].topinfo && a(".tinfo", G).show(), k[x.p.id].bottominfo &&
                                        a(".binfo", G).show(), fa = null, W = null, a("#" + a.jgrid.jqID(R.themodal)).keydown(function(b) {
                                            var f = b.target;
                                            if (!0 === a(G).data("disabled")) return !1;
                                            if (!0 === k[x.p.id].savekey[0] && b.which === k[x.p.id].savekey[1] && "TEXTAREA" !== f.tagName) return a("#sData", D + "_2").trigger("click"), !1;
                                            if (27 === b.which) return y() ? (na && a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                                gb: c.gbox,
                                                jqm: c.jqModal,
                                                onClose: k[x.p.id].onClose,
                                                removemodal: k[x.p.id].removemodal,
                                                formprop: !k[x.p.id].recreateForm,
                                                form: k[x.p.id].form
                                            }), !1) : !1;
                                            if (!0 ===
                                                k[x.p.id].navkeys[0]) {
                                                if ("_empty" === a("#id_g", D).val()) return !0;
                                                if (b.which === k[x.p.id].navkeys[1]) return a("#pData", H).trigger("click"), !1;
                                                if (b.which === k[x.p.id].navkeys[2]) return a("#nData", H).trigger("click"), !1
                                            }
                                        }), c.checkOnUpdate && (a("a.ui-jqdialog-titlebar-close span", "#" + a.jgrid.jqID(R.themodal)).removeClass("jqmClose"), a("a.ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(R.themodal)).unbind("click").click(function() {
                                            return y() ? (a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                                gb: "#gbox_" + a.jgrid.jqID(J),
                                                jqm: c.jqModal,
                                                onClose: k[x.p.id].onClose,
                                                removemodal: k[x.p.id].removemodal,
                                                formprop: !k[x.p.id].recreateForm,
                                                form: k[x.p.id].form
                                            }), !1) : !1
                                        })), c.saveicon = a.extend([!0, "left", l.icon_save], c.saveicon), c.closeicon = a.extend([!0, "left", l.icon_close], c.closeicon), !0 === c.saveicon[0] && a("#sData", H).addClass("right" === c.saveicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='" + e.icon_base + " " + c.saveicon[2] + "'></span>"), !0 === c.closeicon[0] && a("#cData", H).addClass("right" === c.closeicon[1] ?
                                            "fm-button-icon-right" : "fm-button-icon-left").append("<span class='" + e.icon_base + " " + c.closeicon[2] + "'></span>"), k[x.p.id].checkOnSubmit || k[x.p.id].checkOnUpdate) ea = "<a id='sNew' class='fm-button " + e.button + "' style='z-index:1002'>" + c.bYes + "</a>", F = "<a id='nNew' class='fm-button " + e.button + "' style='z-index:1002;margin-left:5px'>" + c.bNo + "</a>", ia = "<a id='cNew' class='fm-button " + e.button + "' style='z-index:1002;margin-left:5px;'>" + c.bExit + "</a>", Q = c.zIndex || 999, Q++, a("<div class='" + c.overlayClass +
                                        " jqgrid-overlay confirm' style='z-index:" + Q + ";display:none;'>&#160;</div><div class='confirm ui-jqconfirm " + e.content + "' style='z-index:" + (Q + 1) + "'>" + c.saveData + "<br/><br/>" + ea + F + ia + "</div>").insertAfter(G), a("#sNew", "#" + a.jgrid.jqID(R.themodal)).click(function() {
                                        return u(), a(G).data("disabled", !1), a(".confirm", "#" + a.jgrid.jqID(R.themodal)).hide(), !1
                                    }), a("#nNew", "#" + a.jgrid.jqID(R.themodal)).click(function() {
                                        return a(".confirm", "#" + a.jgrid.jqID(R.themodal)).hide(), a(G).data("disabled", !1), setTimeout(function() {
                                            a(":input:visible",
                                                G)[0].focus()
                                        }, 0), !1
                                    }), a("#cNew", "#" + a.jgrid.jqID(R.themodal)).click(function() {
                                        return a(".confirm", "#" + a.jgrid.jqID(R.themodal)).hide(), a(G).data("disabled", !1), a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                            gb: "#gbox_" + a.jgrid.jqID(J),
                                            jqm: c.jqModal,
                                            onClose: k[x.p.id].onClose,
                                            removemodal: k[x.p.id].removemodal,
                                            formprop: !k[x.p.id].recreateForm,
                                            form: k[x.p.id].form
                                        }), !1
                                    });
                                    a(x).triggerHandler("jqGridAddEditInitializeForm", [a(G), L]);
                                    a.isFunction(k[x.p.id].onInitializeForm) && k[x.p.id].onInitializeForm.call(x,
                                        a(G), L);
                                    "_empty" !== b && k[x.p.id].viewPagerButtons ? a("#pData,#nData", H).show() : a("#pData,#nData", H).hide();
                                    a(x).triggerHandler("jqGridAddEditBeforeShowForm", [a(G), L]);
                                    a.isFunction(k[x.p.id].beforeShowForm) && k[x.p.id].beforeShowForm.call(x, a(G), L);
                                    a("#" + a.jgrid.jqID(R.themodal)).data("onClose", k[x.p.id].onClose);
                                    a.jgrid.viewModal("#" + a.jgrid.jqID(R.themodal), {
                                        gbox: "#gbox_" + a.jgrid.jqID(J),
                                        jqm: c.jqModal,
                                        overlay: c.overlay,
                                        modal: c.modal,
                                        overlayClass: c.overlayClass,
                                        focusField: c.focusField,
                                        onHide: function(b) {
                                            var c =
                                                a("#editmod" + J)[0].style.height,
                                                f = a("#editmod" + J)[0].style.width; - 1 < c.indexOf("px") && (c = parseFloat(c)); - 1 < f.indexOf("px") && (f = parseFloat(f));
                                            a(x).data("formProp", {
                                                top: parseFloat(a(b.w).css("top")),
                                                left: parseFloat(a(b.w).css("left")),
                                                width: f,
                                                height: c,
                                                dataheight: a(G).height(),
                                                datawidth: a(G).width()
                                            });
                                            b.w.remove();
                                            b.o && b.o.remove()
                                        }
                                    });
                                    Y || a("." + a.jgrid.jqID(c.overlayClass)).click(function() {
                                        return y() ? (a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                            gb: "#gbox_" + a.jgrid.jqID(J),
                                            jqm: c.jqModal,
                                            onClose: k[x.p.id].onClose,
                                            removemodal: k[x.p.id].removemodal,
                                            formprop: !k[x.p.id].recreateForm,
                                            form: k[x.p.id].form
                                        }), !1) : !1
                                    });
                                    a(".fm-button", "#" + a.jgrid.jqID(R.themodal)).hover(function() {
                                        a(this).addClass(e.hover)
                                    }, function() {
                                        a(this).removeClass(e.hover)
                                    });
                                    a("#sData", H).click(function() {
                                        return E = {}, a(".FormError", G).hide(), d(), "_empty" === E[x.p.id + "_id"] ? u() : !0 === c.checkOnSubmit ? (N = z(E, k[x.p.id]._savedData), N ? (a(G).data("disabled", !0), a(".confirm", "#" + a.jgrid.jqID(R.themodal)).show()) : u()) : u(), !1
                                    });
                                    a("#cData", H).click(function() {
                                        return y() ?
                                            (a.jgrid.hideModal("#" + a.jgrid.jqID(R.themodal), {
                                                gb: "#gbox_" + a.jgrid.jqID(J),
                                                jqm: c.jqModal,
                                                onClose: k[x.p.id].onClose,
                                                removemodal: k[x.p.id].removemodal,
                                                formprop: !k[x.p.id].recreateForm,
                                                form: k[x.p.id].form
                                            }), !1) : !1
                                    });
                                    a("#nData", H).click(function() {
                                        if (!y()) return !1;
                                        a(".FormError", G).hide();
                                        var b = v();
                                        if (b[0] = parseInt(b[0], 10), -1 !== b[0] && b[1][b[0] + 1]) {
                                            a(x).triggerHandler("jqGridAddEditClickPgButtons", ["next", a(G), b[1][b[0]]]);
                                            var f;
                                            if (a.isFunction(c.onclickPgButtons) && (f = c.onclickPgButtons.call(x, "next",
                                                    a(G), b[1][b[0]]), void 0 !== f && !1 === f) || a("#" + a.jgrid.jqID(b[1][b[0] + 1])).hasClass(e.disabled)) return !1;
                                            g(b[1][b[0] + 1], x, G);
                                            a(x).jqGrid("setSelection", b[1][b[0] + 1]);
                                            a(x).triggerHandler("jqGridAddEditAfterClickPgButtons", ["next", a(G), b[1][b[0]]]);
                                            a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(x, "next", a(G), b[1][b[0] + 1]);
                                            C(b[0] + 1, b)
                                        }
                                        return !1
                                    });
                                    a("#pData", H).click(function() {
                                        if (!y()) return !1;
                                        a(".FormError", G).hide();
                                        var b = v();
                                        if (-1 !== b[0] && b[1][b[0] - 1]) {
                                            a(x).triggerHandler("jqGridAddEditClickPgButtons", ["prev", a(G), b[1][b[0]]]);
                                            var f;
                                            if (a.isFunction(c.onclickPgButtons) && (f = c.onclickPgButtons.call(x, "prev", a(G), b[1][b[0]]), void 0 !== f && !1 === f) || a("#" + a.jgrid.jqID(b[1][b[0] - 1])).hasClass(e.disabled)) return !1;
                                            g(b[1][b[0] - 1], x, G);
                                            a(x).jqGrid("setSelection", b[1][b[0] - 1]);
                                            a(x).triggerHandler("jqGridAddEditAfterClickPgButtons", ["prev", a(G), b[1][b[0]]]);
                                            a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(x, "prev", a(G), b[1][b[0] - 1]);
                                            C(b[0] - 1, b)
                                        }
                                        return !1
                                    });
                                    a(x).triggerHandler("jqGridAddEditAfterShowForm", [a(G), L]);
                                    a.isFunction(k[x.p.id].afterShowForm) && k[x.p.id].afterShowForm.call(x, a(G), L);
                                    Y = v();
                                    C(Y[0], Y)
                                }
                            }
                        })
                    },
                    viewGridRow: function(b, c) {
                        var d = a.jgrid.getRegional(this[0], "view"),
                            g = this[0].p.styleUI,
                            l = a.jgrid.styleUI[g].formedit,
                            e = a.jgrid.styleUI[g].common;
                        return c = a.extend(!0, {
                            top: 0,
                            left: 0,
                            width: 500,
                            datawidth: "auto",
                            height: "auto",
                            dataheight: "auto",
                            modal: !1,
                            overlay: 30,
                            drag: !0,
                            resize: !0,
                            jqModal: !0,
                            closeOnEscape: !1,
                            labelswidth: "30%",
                            closeicon: [],
                            navkeys: [!1, 38, 40],
                            onClose: null,
                            beforeShowForm: null,
                            beforeInitData: null,
                            viewPagerButtons: !0,
                            recreateForm: !1,
                            removemodal: !0,
                            form: "view"
                        }, d, c || {}), k[a(this)[0].p.id] = c, this.each(function() {
                            function d() {
                                !0 !== k[z.p.id].closeOnEscape && !0 !== k[z.p.id].navkeys[0] || setTimeout(function() {
                                    a(".ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(x.modalhead)).attr("tabindex", "-1").focus()
                                }, 0)
                            }

                            function h(b, f, d, g) {
                                var w, l, n, q, r, u, k, B, z, y = 0,
                                    x = [],
                                    p = !1,
                                    A = "<td class='CaptionTD form-view-label " + e.content + "' width='" + c.labelswidth + "'>&#160;</td><td class='DataTD form-view-data ui-helper-reset " +
                                    e.content + "'>&#160;</td>",
                                    C = "",
                                    K = "<td class='CaptionTD form-view-label " + e.content + "'>&#160;</td><td class='DataTD form-view-data " + e.content + "'>&#160;</td>",
                                    v = ["integer", "number", "currency"],
                                    E = 0,
                                    G = 0;
                                for (u = 1; g >= u; u++) C += 1 === u ? A : K;
                                if (a(f.p.colModel).each(function() {
                                        (l = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1) || "right" !== this.align || (this.formatter && -1 !== a.inArray(this.formatter, v) ? E = Math.max(E, parseInt(this.width, 10)) : G = Math.max(G, parseInt(this.width, 10)))
                                    }), k = 0 !== E ?
                                    E : 0 !== G ? G : 0, p = a(f).jqGrid("getInd", b), a(f.p.colModel).each(function(b) {
                                        if (w = this.name, B = !1, l = this.editrules && !0 === this.editrules.edithidden ? !1 : !0 === this.hidden ? !0 : !1, r = l ? "style='display:none'" : "", z = "boolean" != typeof this.viewable ? !0 : this.viewable, "cb" !== w && "subgrid" !== w && "rn" !== w && z) {
                                            q = !1 === p ? "" : w === f.p.ExpandColumn && !0 === f.p.treeGrid ? a("td:eq(" + b + ")", f.rows[p]).text() : a("td:eq(" + b + ")", f.rows[p]).html();
                                            B = "right" === this.align && 0 !== k ? !0 : !1;
                                            var c = a.extend({}, {
                                                    rowabove: !1,
                                                    rowcontent: ""
                                                }, this.formoptions || {}),
                                                e = parseInt(c.rowpos, 10) || y + 1,
                                                h = parseInt(2 * (parseInt(c.colpos, 10) || 1), 10);
                                            if (c.rowabove) {
                                                var m = a("<tr><td class='contentinfo' colspan='" + 2 * g + "'>" + c.rowcontent + "</td></tr>");
                                                a(d).append(m);
                                                m[0].rp = e
                                            }
                                            n = a(d).find("tr[rowpos=" + e + "]");
                                            0 === n.length && (n = a("<tr " + r + " rowpos='" + e + "'></tr>").addClass("FormData").attr("id", "trv_" + w), a(n).append(C), a(d).append(n), n[0].rp = e);
                                            a("td:eq(" + (h - 2) + ")", n[0]).html("<b>" + (void 0 === c.label ? f.p.colNames[b] : c.label) + "</b>");
                                            a("td:eq(" + (h - 1) + ")", n[0]).append("<span>" + q +
                                                "</span>").attr("id", "v_" + w);
                                            B && a("td:eq(" + (h - 1) + ") span", n[0]).css({
                                                "text-align": "right",
                                                width: k + "px"
                                            });
                                            x[y] = b;
                                            y++
                                        }
                                    }), 0 < y) b = a("<tr class='FormData' style='display:none'><td class='CaptionTD'></td><td colspan='" + (2 * g - 1) + "' class='DataTD'><input class='FormElement' id='id_g' type='text' name='id' value='" + b + "'/></td></tr>"), b[0].rp = y + 99, a(d).append(b);
                                return x
                            }

                            function g(b, c) {
                                var f, e, d, h, m = 0;
                                (h = a(c).jqGrid("getInd", b, !0)) && (a("td", h).each(function(b) {
                                    f = c.p.colModel[b].name;
                                    e = c.p.colModel[b].editrules &&
                                        !0 === c.p.colModel[b].editrules.edithidden ? !1 : !0 === c.p.colModel[b].hidden ? !0 : !1;
                                    "cb" !== f && "subgrid" !== f && "rn" !== f && (d = f === c.p.ExpandColumn && !0 === c.p.treeGrid ? a(this).text() : a(this).html(), f = a.jgrid.jqID("v_" + f), a("#" + f + " span", "#" + C).html(d), e && a("#" + f, "#" + C).parents("tr:first").hide(), m++)
                                }), 0 < m && a("#id_g", "#" + C).val(b))
                            }

                            function w(b, c) {
                                var f = c[1].length - 1;
                                0 === b ? a("#pData", "#" + C + "_2").addClass(e.disabled) : void 0 !== c[1][b - 1] && a("#" + a.jgrid.jqID(c[1][b - 1])).hasClass(e.disabled) ? a("#pData", C + "_2").addClass(e.disabled) :
                                    a("#pData", "#" + C + "_2").removeClass(e.disabled);
                                b === f ? a("#nData", "#" + C + "_2").addClass(e.disabled) : void 0 !== c[1][b + 1] && a("#" + a.jgrid.jqID(c[1][b + 1])).hasClass(e.disabled) ? a("#nData", C + "_2").addClass(e.disabled) : a("#nData", "#" + C + "_2").removeClass(e.disabled)
                            }

                            function u() {
                                var b = a(z).jqGrid("getDataIDs"),
                                    c = a("#id_g", "#" + C).val();
                                return [a.inArray(c, b), b]
                            }
                            var z = this;
                            if (z.grid && b) {
                                var y = z.p.id,
                                    p = "ViewGrid_" + a.jgrid.jqID(y),
                                    C = "ViewTbl_" + a.jgrid.jqID(y),
                                    v = "ViewGrid_" + y,
                                    A = "ViewTbl_" + y,
                                    x = {
                                        themodal: "viewmod" +
                                            y,
                                        modalhead: "viewhd" + y,
                                        modalcontent: "viewcnt" + y,
                                        scrollelm: p
                                    },
                                    H = a.isFunction(k[z.p.id].beforeInitData) ? k[z.p.id].beforeInitData : !1,
                                    E = !0,
                                    N = 1,
                                    L = 0;
                                k[z.p.id].styleUI = z.p.styleUI || "jQueryUI";
                                c.recreateForm || a(z).data("viewProp") && a.extend(k[a(this)[0].p.id], a(z).data("viewProp"));
                                var J = isNaN(k[a(this)[0].p.id].dataheight) ? k[a(this)[0].p.id].dataheight : k[a(this)[0].p.id].dataheight + "px",
                                    G = isNaN(k[a(this)[0].p.id].datawidth) ? k[a(this)[0].p.id].datawidth : k[a(this)[0].p.id].datawidth + "px",
                                    v = a("<form name='FormPost' id='" +
                                        v + "' class='FormGrid' style='width:" + G + ";height:" + J + ";'></form>"),
                                    Q = a("<table id='" + A + "' class='EditTable ViewTable'><tbody></tbody></table>");
                                if (a(z.p.colModel).each(function() {
                                        var a = this.formoptions;
                                        N = Math.max(N, a ? a.colpos || 0 : 0);
                                        L = Math.max(L, a ? a.rowpos || 0 : 0)
                                    }), a(v).append(Q), H && (E = H.call(z, v), void 0 === E && (E = !0)), !1 !== E) {
                                    h(b, z, Q, N);
                                    A = "rtl" === z.p.direction ? !0 : !1;
                                    H = "<a id='" + (A ? "nData" : "pData") + "' class='fm-button " + e.button + "'><span class='" + e.icon_base + " " + l.icon_prev + "'></span></a>";
                                    E = "<a id='" +
                                        (A ? "pData" : "nData") + "' class='fm-button " + e.button + "'><span class='" + e.icon_base + " " + l.icon_next + "'></span></a>";
                                    J = "<a id='cData' class='fm-button " + e.button + "'>" + c.bClose + "</a>";
                                    if (0 < L) {
                                        var D = [];
                                        a.each(a(Q)[0].rows, function(a, b) {
                                            D[a] = b
                                        });
                                        D.sort(function(a, b) {
                                            return a.rp > b.rp ? 1 : a.rp < b.rp ? -1 : 0
                                        });
                                        a.each(D, function(b, c) {
                                            a("tbody", Q).append(c)
                                        })
                                    }
                                    c.gbox = "#gbox_" + a.jgrid.jqID(y);
                                    v = a("<div></div>").append(v).append("<table border='0' class='EditTable' id='" + C + "_2'><tbody><tr id='Act_Buttons'><td class='navButton' width='" +
                                        c.labelswidth + "'>" + (A ? E + H : H + E) + "</td><td class='EditButton'>" + J + "</td></tr></tbody></table>");
                                    a.jgrid.createModal(x, v, k[a(this)[0].p.id], "#gview_" + a.jgrid.jqID(z.p.id), a("#gview_" + a.jgrid.jqID(z.p.id))[0]);
                                    A && (a("#pData, #nData", "#" + C + "_2").css("float", "right"), a(".EditButton", "#" + C + "_2").css("text-align", "left"));
                                    c.viewPagerButtons || a("#pData, #nData", "#" + C + "_2").hide();
                                    v = null;
                                    a("#" + x.themodal).keydown(function(b) {
                                        if (27 === b.which) return k[z.p.id].closeOnEscape && a.jgrid.hideModal("#" + a.jgrid.jqID(x.themodal), {
                                            gb: c.gbox,
                                            jqm: c.jqModal,
                                            onClose: c.onClose,
                                            removemodal: k[z.p.id].removemodal,
                                            formprop: !k[z.p.id].recreateForm,
                                            form: k[z.p.id].form
                                        }), !1;
                                        if (!0 === c.navkeys[0]) {
                                            if (b.which === c.navkeys[1]) return a("#pData", "#" + C + "_2").trigger("click"), !1;
                                            if (b.which === c.navkeys[2]) return a("#nData", "#" + C + "_2").trigger("click"), !1
                                        }
                                    });
                                    c.closeicon = a.extend([!0, "left", l.icon_close], c.closeicon);
                                    !0 === c.closeicon[0] && a("#cData", "#" + C + "_2").addClass("right" === c.closeicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='" +
                                        e.icon_base + " " + c.closeicon[2] + "'></span>");
                                    a.isFunction(c.beforeShowForm) && c.beforeShowForm.call(z, a("#" + p));
                                    a.jgrid.viewModal("#" + a.jgrid.jqID(x.themodal), {
                                        gbox: "#gbox_" + a.jgrid.jqID(y),
                                        jqm: c.jqModal,
                                        overlay: c.overlay,
                                        modal: c.modal,
                                        onHide: function(b) {
                                            a(z).data("viewProp", {
                                                top: parseFloat(a(b.w).css("top")),
                                                left: parseFloat(a(b.w).css("left")),
                                                width: a(b.w).width(),
                                                height: a(b.w).height(),
                                                dataheight: a("#" + p).height(),
                                                datawidth: a("#" + p).width()
                                            });
                                            b.w.remove();
                                            b.o && b.o.remove()
                                        }
                                    });
                                    a(".fm-button:not(." +
                                        e.disabled + ")", "#" + C + "_2").hover(function() {
                                        a(this).addClass(e.hover)
                                    }, function() {
                                        a(this).removeClass(e.hover)
                                    });
                                    d();
                                    a("#cData", "#" + C + "_2").click(function() {
                                        return a.jgrid.hideModal("#" + a.jgrid.jqID(x.themodal), {
                                            gb: "#gbox_" + a.jgrid.jqID(y),
                                            jqm: c.jqModal,
                                            onClose: c.onClose,
                                            removemodal: k[z.p.id].removemodal,
                                            formprop: !k[z.p.id].recreateForm,
                                            form: k[z.p.id].form
                                        }), !1
                                    });
                                    a("#nData", "#" + C + "_2").click(function() {
                                        a("#FormError", "#" + C).hide();
                                        var b = u();
                                        return b[0] = parseInt(b[0], 10), -1 !== b[0] && b[1][b[0] + 1] && (a.isFunction(c.onclickPgButtons) &&
                                            c.onclickPgButtons.call(z, "next", a("#" + p), b[1][b[0]]), g(b[1][b[0] + 1], z), a(z).jqGrid("setSelection", b[1][b[0] + 1]), a.isFunction(c.afterclickPgButtons) && c.afterclickPgButtons.call(z, "next", a("#" + p), b[1][b[0] + 1]), w(b[0] + 1, b)), d(), !1
                                    });
                                    a("#pData", "#" + C + "_2").click(function() {
                                        a("#FormError", "#" + C).hide();
                                        var b = u();
                                        return -1 !== b[0] && b[1][b[0] - 1] && (a.isFunction(c.onclickPgButtons) && c.onclickPgButtons.call(z, "prev", a("#" + p), b[1][b[0]]), g(b[1][b[0] - 1], z), a(z).jqGrid("setSelection", b[1][b[0] - 1]), a.isFunction(c.afterclickPgButtons) &&
                                            c.afterclickPgButtons.call(z, "prev", a("#" + p), b[1][b[0] - 1]), w(b[0] - 1, b)), d(), !1
                                    });
                                    v = u();
                                    w(v[0], v)
                                }
                            }
                        })
                    },
                    delGridRow: function(b, c) {
                        var d = a.jgrid.getRegional(this[0], "del"),
                            g = this[0].p.styleUI,
                            l = a.jgrid.styleUI[g].formedit,
                            e = a.jgrid.styleUI[g].common;
                        return c = a.extend(!0, {
                            top: 0,
                            left: 0,
                            width: 240,
                            height: "auto",
                            dataheight: "auto",
                            modal: !1,
                            overlay: 30,
                            drag: !0,
                            resize: !0,
                            url: "",
                            mtype: "POST",
                            reloadAfterSubmit: !0,
                            beforeShowForm: null,
                            beforeInitData: null,
                            afterShowForm: null,
                            beforeSubmit: null,
                            onclickSubmit: null,
                            afterSubmit: null,
                            jqModal: !0,
                            closeOnEscape: !1,
                            delData: {},
                            delicon: [],
                            cancelicon: [],
                            onClose: null,
                            ajaxDelOptions: {},
                            processing: !1,
                            serializeDelData: null,
                            useDataProxy: !1
                        }, d, c || {}), k[a(this)[0].p.id] = c, this.each(function() {
                            var d = this;
                            if (d.grid && b) {
                                var h, g, w, u, z = a.isFunction(k[d.p.id].beforeShowForm),
                                    y = a.isFunction(k[d.p.id].afterShowForm),
                                    p = a.isFunction(k[d.p.id].beforeInitData) ? k[d.p.id].beforeInitData : !1,
                                    C = d.p.id,
                                    v = {},
                                    A = !0,
                                    x = "DelTbl_" + a.jgrid.jqID(C),
                                    H = "DelTbl_" + C,
                                    E = {
                                        themodal: "delmod" + C,
                                        modalhead: "delhd" + C,
                                        modalcontent: "delcnt" +
                                            C,
                                        scrollelm: x
                                    };
                                if (k[d.p.id].styleUI = d.p.styleUI || "jQueryUI", a.isArray(b) && (b = b.join()), void 0 !== a("#" + a.jgrid.jqID(E.themodal))[0]) {
                                    if (p && (A = p.call(d, a("#" + x)), void 0 === A && (A = !0)), !1 === A) return;
                                    a("#DelData>td", "#" + x).text(b);
                                    a("#DelError", "#" + x).hide();
                                    !0 === k[d.p.id].processing && (k[d.p.id].processing = !1, a("#dData", "#" + x).removeClass(e.active));
                                    z && k[d.p.id].beforeShowForm.call(d, a("#" + x));
                                    a.jgrid.viewModal("#" + a.jgrid.jqID(E.themodal), {
                                        gbox: "#gbox_" + a.jgrid.jqID(C),
                                        jqm: k[d.p.id].jqModal,
                                        jqM: !1,
                                        overlay: k[d.p.id].overlay,
                                        modal: k[d.p.id].modal
                                    })
                                } else {
                                    var N = isNaN(k[d.p.id].dataheight) ? k[d.p.id].dataheight : k[d.p.id].dataheight + "px",
                                        L = isNaN(c.datawidth) ? c.datawidth : c.datawidth + "px",
                                        H = "<div id='" + H + "' class='formdata' style='width:" + L + ";overflow:auto;position:relative;height:" + N + ";'><table class='DelTable'><tbody>",
                                        H = H + ("<tr id='DelError' style='display:none'><td class='" + e.error + "'></td></tr>"),
                                        H = H + ("<tr id='DelData' style='display:none'><td >" + b + "</td></tr>"),
                                        H = H + ('<tr><td class="delmsg" style="white-space:pre;">' + k[d.p.id].msg +
                                            "</td></tr><tr><td >&#160;</td></tr>"),
                                        H = H + "</tbody></table></div>";
                                    if (H += "<table class='EditTable ui-common-table' id='" + x + "_2'><tbody><tr><td><hr class='" + e.content + "' style='margin:1px'/></td></tr><tr><td class='DelButton EditButton'>" + ("<a id='dData' class='fm-button " + e.button + "'>" + c.bSubmit + "</a>") + "&#160;" + ("<a id='eData' class='fm-button " + e.button + "'>" + c.bCancel + "</a>") + "</td></tr></tbody></table>", c.gbox = "#gbox_" + a.jgrid.jqID(C), a.jgrid.createModal(E, H, k[d.p.id], "#gview_" + a.jgrid.jqID(d.p.id),
                                            a("#gview_" + a.jgrid.jqID(d.p.id))[0]), p && (A = p.call(d, a(H)), void 0 === A && (A = !0)), !1 === A) return;
                                    a(".fm-button", "#" + x + "_2").hover(function() {
                                        a(this).addClass(e.hover)
                                    }, function() {
                                        a(this).removeClass(e.hover)
                                    });
                                    c.delicon = a.extend([!0, "left", l.icon_del], k[d.p.id].delicon);
                                    c.cancelicon = a.extend([!0, "left", l.icon_cancel], k[d.p.id].cancelicon);
                                    !0 === c.delicon[0] && a("#dData", "#" + x + "_2").addClass("right" === c.delicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='" + e.icon_base + " " + c.delicon[2] +
                                        "'></span>");
                                    !0 === c.cancelicon[0] && a("#eData", "#" + x + "_2").addClass("right" === c.cancelicon[1] ? "fm-button-icon-right" : "fm-button-icon-left").append("<span class='" + e.icon_base + " " + c.cancelicon[2] + "'></span>");
                                    a("#dData", "#" + x + "_2").click(function() {
                                        var b, f = [!0, ""],
                                            l = a("#DelData>td", "#" + x).text();
                                        if (v = {}, a.isFunction(k[d.p.id].onclickSubmit) && (v = k[d.p.id].onclickSubmit.call(d, k[d.p.id], l) || {}), a.isFunction(k[d.p.id].beforeSubmit) && (f = k[d.p.id].beforeSubmit.call(d, l)), f[0] && !k[d.p.id].processing) {
                                            if (k[d.p.id].processing = !0, w = d.p.prmNames, h = a.extend({}, k[d.p.id].delData, v), u = w.oper, h[u] = w.deloper, g = w.id, l = String(l).split(","), !l.length) return !1;
                                            for (b in l) l.hasOwnProperty(b) && (l[b] = a.jgrid.stripPref(d.p.idPrefix, l[b]));
                                            h[g] = l.join();
                                            a(this).addClass(e.active);
                                            b = a.extend({
                                                url: k[d.p.id].url || a(d).jqGrid("getGridParam", "editurl"),
                                                type: k[d.p.id].mtype,
                                                data: a.isFunction(k[d.p.id].serializeDelData) ? k[d.p.id].serializeDelData.call(d, h) : h,
                                                complete: function(b, g) {
                                                    var w;
                                                    if (a("#dData", "#" + x + "_2").removeClass(e.active), 300 <= b.status &&
                                                        304 !== b.status ? (f[0] = !1, f[1] = a.isFunction(k[d.p.id].errorTextFormat) ? k[d.p.id].errorTextFormat.call(d, b) : g + " Status: '" + b.statusText + "'. Error code: " + b.status) : a.isFunction(k[d.p.id].afterSubmit) && (f = k[d.p.id].afterSubmit.call(d, b, h)), !1 === f[0]) a("#DelError>td", "#" + x).html(f[1]), a("#DelError", "#" + x).show();
                                                    else {
                                                        if (k[d.p.id].reloadAfterSubmit && "local" !== d.p.datatype) a(d).trigger("reloadGrid");
                                                        else {
                                                            if (!0 === d.p.treeGrid) try {
                                                                a(d).jqGrid("delTreeNode", d.p.idPrefix + l[0])
                                                            } catch (q) {} else
                                                                for (w = 0; w < l.length; w++) a(d).jqGrid("delRowData",
                                                                    d.p.idPrefix + l[w]);
                                                            d.p.selrow = null;
                                                            d.p.selarrrow = []
                                                        }
                                                        a.isFunction(k[d.p.id].afterComplete) && setTimeout(function() {
                                                            k[d.p.id].afterComplete.call(d, b, l)
                                                        }, 500)
                                                    }
                                                    k[d.p.id].processing = !1;
                                                    f[0] && a.jgrid.hideModal("#" + a.jgrid.jqID(E.themodal), {
                                                        gb: "#gbox_" + a.jgrid.jqID(C),
                                                        jqm: c.jqModal,
                                                        onClose: k[d.p.id].onClose
                                                    })
                                                }
                                            }, a.jgrid.ajaxOptions, k[d.p.id].ajaxDelOptions);
                                            if (b.url || k[d.p.id].useDataProxy || (a.isFunction(d.p.dataProxy) ? k[d.p.id].useDataProxy = !0 : (f[0] = !1, f[1] += " " + a.jgrid.getRegional(d, "errors.nourl"))), f[0]) k[d.p.id].useDataProxy ?
                                                (b = d.p.dataProxy.call(d, b, "del_" + d.p.id), void 0 === b && (b = [!0, ""]), !1 === b[0] ? (f[0] = !1, f[1] = b[1] || "Error deleting the selected row!") : a.jgrid.hideModal("#" + a.jgrid.jqID(E.themodal), {
                                                    gb: "#gbox_" + a.jgrid.jqID(C),
                                                    jqm: c.jqModal,
                                                    onClose: k[d.p.id].onClose
                                                })) : "clientArray" === b.url ? (h = b.data, b.complete({
                                                    status: 200,
                                                    statusText: ""
                                                }, "")) : a.ajax(b)
                                        }
                                        return !1 === f[0] && (a("#DelError>td", "#" + x).html(f[1]), a("#DelError", "#" + x).show()), !1
                                    });
                                    a("#eData", "#" + x + "_2").click(function() {
                                        return a.jgrid.hideModal("#" + a.jgrid.jqID(E.themodal), {
                                            gb: "#gbox_" + a.jgrid.jqID(C),
                                            jqm: k[d.p.id].jqModal,
                                            onClose: k[d.p.id].onClose
                                        }), !1
                                    });
                                    z && k[d.p.id].beforeShowForm.call(d, a("#" + x));
                                    a.jgrid.viewModal("#" + a.jgrid.jqID(E.themodal), {
                                        gbox: "#gbox_" + a.jgrid.jqID(C),
                                        jqm: k[d.p.id].jqModal,
                                        overlay: k[d.p.id].overlay,
                                        modal: k[d.p.id].modal
                                    })
                                }
                                y && k[d.p.id].afterShowForm.call(d, a("#" + x));
                                !0 === k[d.p.id].closeOnEscape && setTimeout(function() {
                                    a(".ui-jqdialog-titlebar-close", "#" + a.jgrid.jqID(E.modalhead)).attr("tabindex", "-1").focus()
                                }, 0)
                            }
                        })
                    },
                    navGrid: function(b, c, d, g,
                        l, e, n) {
                        var k = a.jgrid.getRegional(this[0], "nav"),
                            r = this[0].p.styleUI,
                            q = a.jgrid.styleUI[r].navigator,
                            u = a.jgrid.styleUI[r].common;
                        return c = a.extend({
                            edit: !0,
                            editicon: q.icon_edit_nav,
                            add: !0,
                            addicon: q.icon_add_nav,
                            del: !0,
                            delicon: q.icon_del_nav,
                            search: !0,
                            searchicon: q.icon_search_nav,
                            refresh: !0,
                            refreshicon: q.icon_refresh_nav,
                            refreshstate: "firstpage",
                            view: !1,
                            viewicon: q.icon_view_nav,
                            position: "left",
                            closeOnEscape: !0,
                            beforeRefresh: null,
                            afterRefresh: null,
                            cloneToTop: !1,
                            alertwidth: 200,
                            alertheight: "auto",
                            alerttop: null,
                            alertleft: null,
                            alertzIndex: null,
                            dropmenu: !1,
                            navButtonText: ""
                        }, k, c || {}), this.each(function() {
                            if (!this.p.navGrid) {
                                var q, y, p = {
                                        themodal: "alertmod_" + this.p.id,
                                        modalhead: "alerthd_" + this.p.id,
                                        modalcontent: "alertcnt_" + this.p.id
                                    },
                                    C = this;
                                if (C.grid && "string" == typeof b) {
                                    a(C).data("navGrid") || a(C).data("navGrid", c);
                                    y = a(C).data("navGrid");
                                    C.p.force_regional && (y = a.extend(y, k));
                                    void 0 === a("#" + p.themodal)[0] && (y.alerttop || y.alertleft || (void 0 !== window.innerWidth ? (y.alertleft = window.innerWidth, y.alerttop = window.innerHeight) :
                                        void 0 !== document.documentElement && void 0 !== document.documentElement.clientWidth && 0 !== document.documentElement.clientWidth ? (y.alertleft = document.documentElement.clientWidth, y.alerttop = document.documentElement.clientHeight) : (y.alertleft = 1024, y.alerttop = 768), y.alertleft = y.alertleft / 2 - parseInt(y.alertwidth, 10) / 2, y.alerttop = y.alerttop / 2 - 25), a.jgrid.createModal(p, "<div>" + y.alerttext + "</div><span tabindex='0'><span tabindex='-1' id='jqg_alrt'></span></span>", {
                                        gbox: "#gbox_" + a.jgrid.jqID(C.p.id),
                                        jqModal: !0,
                                        drag: !0,
                                        resize: !0,
                                        caption: y.alertcap,
                                        top: y.alerttop,
                                        left: y.alertleft,
                                        width: y.alertwidth,
                                        height: y.alertheight,
                                        closeOnEscape: y.closeOnEscape,
                                        zIndex: y.alertzIndex,
                                        styleUI: C.p.styleUI
                                    }, "#gview_" + a.jgrid.jqID(C.p.id), a("#gbox_" + a.jgrid.jqID(C.p.id))[0], !0));
                                    var v, A = 1,
                                        x = function() {
                                            a(this).hasClass(u.disabled) || a(this).addClass(u.hover)
                                        },
                                        H = function() {
                                            a(this).removeClass(u.hover)
                                        };
                                    y.cloneToTop && C.p.toppager && (A = 2);
                                    for (v = 0; A > v; v++) {
                                        var E, N, L, J = a("<table class='ui-pg-table navtable ui-common-table'><tbody><tr></tr></tbody></table>");
                                        q = "<td class='ui-pg-button " + u.disabled + "' style='width:4px;'><span class='ui-separator'></span></td>";
                                        0 === v ? (N = b, L = C.p.id, N === C.p.toppager && (L += "_top", A = 1)) : (N = C.p.toppager, L = C.p.id + "_top");
                                        "rtl" === C.p.direction && a(J).attr("dir", "rtl").css("float", "right");
                                        g = g || {};
                                        y.add && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.addicon + "'></span>" + y.addtext + "</div>"), a("tr", J).append(E), a(E, J).attr({
                                            title: y.addtitle || "",
                                            id: g.id || "add_" +
                                                L
                                        }).click(function() {
                                            return a(this).hasClass(u.disabled) || (a.isFunction(y.addfunc) ? y.addfunc.call(C) : a(C).jqGrid("editGridRow", "new", g)), !1
                                        }).hover(x, H), E = null);
                                        d = d || {};
                                        y.edit && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.editicon + "'></span>" + y.edittext + "</div>"), a("tr", J).append(E), a(E, J).attr({
                                            title: y.edittitle || "",
                                            id: d.id || "edit_" + L
                                        }).click(function() {
                                            if (!a(this).hasClass(u.disabled)) {
                                                var b = C.p.selrow;
                                                b ? a.isFunction(y.editfunc) ?
                                                    y.editfunc.call(C, b) : a(C).jqGrid("editGridRow", b, d) : (a.jgrid.viewModal("#" + p.themodal, {
                                                        gbox: "#gbox_" + a.jgrid.jqID(C.p.id),
                                                        jqm: !0
                                                    }), a("#jqg_alrt").focus())
                                            }
                                            return !1
                                        }).hover(x, H), E = null);
                                        n = n || {};
                                        y.view && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.viewicon + "'></span>" + y.viewtext + "</div>"), a("tr", J).append(E), a(E, J).attr({
                                            title: y.viewtitle || "",
                                            id: n.id || "view_" + L
                                        }).click(function() {
                                            if (!a(this).hasClass(u.disabled)) {
                                                var b = C.p.selrow;
                                                b ? a.isFunction(y.viewfunc) ? y.viewfunc.call(C, b) : a(C).jqGrid("viewGridRow", b, n) : (a.jgrid.viewModal("#" + p.themodal, {
                                                    gbox: "#gbox_" + a.jgrid.jqID(C.p.id),
                                                    jqm: !0
                                                }), a("#jqg_alrt").focus())
                                            }
                                            return !1
                                        }).hover(x, H), E = null);
                                        l = l || {};
                                        y.del && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.delicon + "'></span>" + y.deltext + "</div>"), a("tr", J).append(E), a(E, J).attr({
                                            title: y.deltitle || "",
                                            id: l.id || "del_" + L
                                        }).click(function() {
                                            if (!a(this).hasClass(u.disabled)) {
                                                var b;
                                                C.p.multiselect ? (b = C.p.selarrrow, 0 === b.length && (b = null)) : b = C.p.selrow;
                                                b ? a.isFunction(y.delfunc) ? y.delfunc.call(C, b) : a(C).jqGrid("delGridRow", b, l) : (a.jgrid.viewModal("#" + p.themodal, {
                                                    gbox: "#gbox_" + a.jgrid.jqID(C.p.id),
                                                    jqm: !0
                                                }), a("#jqg_alrt").focus())
                                            }
                                            return !1
                                        }).hover(x, H), E = null);
                                        (y.add || y.edit || y.del || y.view) && a("tr", J).append(q);
                                        e = e || {};
                                        y.search && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.searchicon + "'></span>" + y.searchtext +
                                            "</div>"), a("tr", J).append(E), a(E, J).attr({
                                            title: y.searchtitle || "",
                                            id: e.id || "search_" + L
                                        }).click(function() {
                                            return a(this).hasClass(u.disabled) || (a.isFunction(y.searchfunc) ? y.searchfunc.call(C, e) : a(C).jqGrid("searchGrid", e)), !1
                                        }).hover(x, H), e.showOnLoad && !0 === e.showOnLoad && a(E, J).click(), E = null);
                                        y.refresh && (E = a("<td class='ui-pg-button " + u.cornerall + "'></td>"), a(E).append("<div class='ui-pg-div'><span class='" + u.icon_base + " " + y.refreshicon + "'></span>" + y.refreshtext + "</div>"), a("tr", J).append(E), a(E,
                                            J).attr({
                                            title: y.refreshtitle || "",
                                            id: "refresh_" + L
                                        }).click(function() {
                                            if (!a(this).hasClass(u.disabled)) {
                                                a.isFunction(y.beforeRefresh) && y.beforeRefresh.call(C);
                                                C.p.search = !1;
                                                C.p.resetsearch = !0;
                                                try {
                                                    if ("currentfilter" !== y.refreshstate) {
                                                        var b = C.p.id;
                                                        C.p.postData.filters = "";
                                                        try {
                                                            a("#fbox_" + a.jgrid.jqID(b)).jqFilter("resetFilter")
                                                        } catch (c) {}
                                                        a.isFunction(C.clearToolbar) && C.clearToolbar.call(C, !1)
                                                    }
                                                } catch (c) {}
                                                switch (y.refreshstate) {
                                                    case "firstpage":
                                                        a(C).trigger("reloadGrid", [{
                                                            page: 1
                                                        }]);
                                                        break;
                                                    case "current":
                                                    case "currentfilter":
                                                        a(C).trigger("reloadGrid", [{
                                                            current: !0
                                                        }])
                                                }
                                                a.isFunction(y.afterRefresh) && y.afterRefresh.call(C)
                                            }
                                            return !1
                                        }).hover(x, H), E = null);
                                        q = a(".ui-jqgrid").css("font-size") || "11px";
                                        a("body").append("<div id='testpg2' class='ui-jqgrid " + a.jgrid.styleUI[r].base.entrieBox + "' style='font-size:" + q + ";visibility:hidden;' ></div>");
                                        q = a(J).clone().appendTo("#testpg2").width();
                                        a("#testpg2").remove();
                                        C.p._nvtd && (y.dropmenu ? (J = null, a(C).jqGrid("_buildNavMenu", N, L, c, d, g, l, e, n)) : q > C.p._nvtd[0] ? (C.p.responsive ? (J = null, a(C).jqGrid("_buildNavMenu", N, L,
                                            c, d, g, l, e, n)) : a(N + "_" + y.position, N).append(J).width(q), C.p._nvtd[0] = q) : a(N + "_" + y.position, N).append(J), C.p._nvtd[1] = q);
                                        C.p.navGrid = !0
                                    }
                                    C.p.storeNavOptions && (C.p.navOptions = y, C.p.editOptions = d, C.p.addOptions = g, C.p.delOptions = l, C.p.searchOptions = e, C.p.viewOptions = n, C.p.navButtons = [])
                                }
                            }
                        })
                    },
                    navButtonAdd: function(b, c) {
                        var d = this[0].p.styleUI;
                        return c = a.extend({
                                caption: "newButton",
                                title: "",
                                buttonicon: a.jgrid.styleUI[d].navigator.icon_newbutton_nav,
                                onClickButton: null,
                                position: "last",
                                cursor: "pointer",
                                internal: !1
                            },
                            c || {}), this.each(function() {
                            if (this.grid) {
                                "string" == typeof b && 0 !== b.indexOf("#") && (b = "#" + a.jgrid.jqID(b));
                                var g = a(".navtable", b)[0],
                                    l = this,
                                    e = a.jgrid.styleUI[d].common.disabled,
                                    n = a.jgrid.styleUI[d].common.hover,
                                    k = a.jgrid.styleUI[d].common.cornerall,
                                    r = a.jgrid.styleUI[d].common.icon_base;
                                if (l.p.storeNavOptions && !c.internal && l.p.navButtons.push([b, c]), g) {
                                    if (!c.id || void 0 === a("#" + a.jgrid.jqID(c.id), g)[0]) {
                                        var q = a("<td></td>");
                                        a(q).addClass("ui-pg-button " + k).append("NONE" === c.buttonicon.toString().toUpperCase() ?
                                            "<div class='ui-pg-div'>" + c.caption + "</div>" : "<div class='ui-pg-div'><span class='" + r + " " + c.buttonicon + "'></span>" + c.caption + "</div>");
                                        c.id && a(q).attr("id", c.id);
                                        "first" === c.position ? 0 === g.rows[0].cells.length ? a("tr", g).append(q) : a("tr td:eq(0)", g).before(q) : a("tr", g).append(q);
                                        a(q, g).attr("title", c.title || "").click(function(b) {
                                            return a(this).hasClass(e) || a.isFunction(c.onClickButton) && c.onClickButton.call(l, b), !1
                                        }).hover(function() {
                                            a(this).hasClass(e) || a(this).addClass(n)
                                        }, function() {
                                            a(this).removeClass(n)
                                        })
                                    }
                                } else if (g =
                                    a(".dropdownmenu", b)[0]) {
                                    var u = a(g).val(),
                                        g = c.id || a.jgrid.randId(),
                                        k = a('<li class="ui-menu-item" role="presentation"><a class="' + k + ' g-menu-item" tabindex="0" role="menuitem" id="' + g + '">' + (c.caption || c.title) + "</a></li>");
                                    u && ("first" === c.position ? a("#" + u).prepend(k) : a("#" + u).append(k), a(k).on("click", function(b) {
                                        return a(this).hasClass(e) || (a("#" + u).hide(), a.isFunction(c.onClickButton) && c.onClickButton.call(l, b)), !1
                                    }).find("a").hover(function() {
                                        a(this).hasClass(e) || a(this).addClass(n)
                                    }, function() {
                                        a(this).removeClass(n)
                                    }))
                                }
                            }
                        })
                    },
                    navSeparatorAdd: function(b, c) {
                        var d = a.jgrid.styleUI[this[0].p.styleUI].common;
                        return c = a.extend({
                            sepclass: "ui-separator",
                            sepcontent: "",
                            position: "last"
                        }, c || {}), this.each(function() {
                            if (this.grid) {
                                "string" == typeof b && 0 !== b.indexOf("#") && (b = "#" + a.jgrid.jqID(b));
                                var g, l, e = a(".navtable", b)[0];
                                this.p.storeNavOptions && this.p.navButtons.push([b, c]);
                                e ? (g = "<td class='ui-pg-button " + d.disabled + "' style='width:4px;'><span class='" + c.sepclass + "'></span>" + c.sepcontent + "</td>", "first" === c.position ? 0 === e.rows[0].cells.length ?
                                    a("tr", e).append(g) : a("tr td:eq(0)", e).before(g) : a("tr", e).append(g)) : (e = a(".dropdownmenu", b)[0], g = "<li class='ui-menu-item " + d.disabled + "' style='width:100%' role='presentation'><hr class='ui-separator-li'></li>", e && (l = a(e).val(), l && ("first" === c.position ? a("#" + l).prepend(g) : a("#" + l).append(g))))
                            }
                        })
                    },
                    _buildNavMenu: function(b, c, d, g, l, e, n, k) {
                        return this.each(function() {
                            var r = this,
                                q = a.jgrid.getRegional(r, "nav"),
                                u = r.p.styleUI,
                                z = (a.jgrid.styleUI[u].navigator, a.jgrid.styleUI[u].filter),
                                y = a.jgrid.styleUI[u].common,
                                p = "form_menu_" + a.jgrid.randId(),
                                q = "<button class='dropdownmenu " + y.button + "' value='" + p + "'>" + (d.navButtonText ? d.navButtonText : q.selectcaption || "Actions") + "</button>";
                            a(b + "_" + d.position, b).append(q);
                            var C = "alertmod_" + this.p.id;
                            (function() {
                                var b, f, q = a(".ui-jqgrid-view").css("font-size") || "11px",
                                    u = a('<ul id="' + p + '" class="ui-nav-menu modal-content" role="menu" tabindex="0" style="display:none;font-size:' + q + '"></ul>');
                                d.add && (l = l || {}, b = l.id || "add_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' +
                                    y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' + b + '">' + (d.addtext || d.addtitle) + "</a></li>").click(function() {
                                    return a(this).hasClass(y.disabled) || (a.isFunction(d.addfunc) ? d.addfunc.call(r) : a(r).jqGrid("editGridRow", "new", l), a(u).hide()), !1
                                }), a(u).append(f));
                                d.edit && (g = g || {}, b = g.id || "edit_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' + y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' + b + '">' + (d.edittext || d.edittitle) + "</a></li>").click(function() {
                                    if (!a(this).hasClass(y.disabled)) {
                                        var b =
                                            r.p.selrow;
                                        b ? a.isFunction(d.editfunc) ? d.editfunc.call(r, b) : a(r).jqGrid("editGridRow", b, g) : (a.jgrid.viewModal("#" + C, {
                                            gbox: "#gbox_" + a.jgrid.jqID(r.p.id),
                                            jqm: !0
                                        }), a("#jqg_alrt").focus());
                                        a(u).hide()
                                    }
                                    return !1
                                }), a(u).append(f));
                                d.view && (k = k || {}, b = k.id || "view_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' + y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' + b + '">' + (d.viewtext || d.viewtitle) + "</a></li>").click(function() {
                                    if (!a(this).hasClass(y.disabled)) {
                                        var b = r.p.selrow;
                                        b ? a.isFunction(d.editfunc) ?
                                            d.viewfunc.call(r, b) : a(r).jqGrid("viewGridRow", b, k) : (a.jgrid.viewModal("#" + C, {
                                                gbox: "#gbox_" + a.jgrid.jqID(r.p.id),
                                                jqm: !0
                                            }), a("#jqg_alrt").focus());
                                        a(u).hide()
                                    }
                                    return !1
                                }), a(u).append(f));
                                d.del && (e = e || {}, b = e.id || "del_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' + y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' + b + '">' + (d.deltext || d.deltitle) + "</a></li>").click(function() {
                                    if (!a(this).hasClass(y.disabled)) {
                                        var b;
                                        r.p.multiselect ? (b = r.p.selarrrow, 0 === b.length && (b = null)) : b =
                                            r.p.selrow;
                                        b ? a.isFunction(d.delfunc) ? d.delfunc.call(r, b) : a(r).jqGrid("delGridRow", b, e) : (a.jgrid.viewModal("#" + C, {
                                            gbox: "#gbox_" + a.jgrid.jqID(r.p.id),
                                            jqm: !0
                                        }), a("#jqg_alrt").focus());
                                        a(u).hide()
                                    }
                                    return !1
                                }), a(u).append(f));
                                (d.add || d.edit || d.del || d.view) && a(u).append("<li class='ui-menu-item " + y.disabled + "' style='width:100%' role='presentation'><hr class='ui-separator-li'></li>");
                                d.search && (n = n || {}, b = n.id || "search_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' + y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' +
                                    b + '">' + (d.searchtext || d.searchtitle) + "</a></li>").click(function() {
                                    return a(this).hasClass(y.disabled) || (a.isFunction(d.searchfunc) ? d.searchfunc.call(r, n) : a(r).jqGrid("searchGrid", n), a(u).hide()), !1
                                }), a(u).append(f), n.showOnLoad && !0 === n.showOnLoad && a(f).click());
                                d.refresh && (b = n.id || "search_" + c, f = a('<li class="ui-menu-item" role="presentation"><a class="' + y.cornerall + ' g-menu-item" tabindex="0" role="menuitem" id="' + b + '">' + (d.refreshtext || d.refreshtitle) + "</a></li>").click(function() {
                                        if (!a(this).hasClass(y.disabled)) {
                                            a.isFunction(d.beforeRefresh) &&
                                                d.beforeRefresh.call(r);
                                            r.p.search = !1;
                                            r.p.resetsearch = !0;
                                            try {
                                                if ("currentfilter" !== d.refreshstate) {
                                                    var b = r.p.id;
                                                    r.p.postData.filters = "";
                                                    try {
                                                        a("#fbox_" + a.jgrid.jqID(b)).jqFilter("resetFilter")
                                                    } catch (c) {}
                                                    a.isFunction(r.clearToolbar) && r.clearToolbar.call(r, !1)
                                                }
                                            } catch (c) {}
                                            switch (d.refreshstate) {
                                                case "firstpage":
                                                    a(r).trigger("reloadGrid", [{
                                                        page: 1
                                                    }]);
                                                    break;
                                                case "current":
                                                case "currentfilter":
                                                    a(r).trigger("reloadGrid", [{
                                                        current: !0
                                                    }])
                                            }
                                            a.isFunction(d.afterRefresh) && d.afterRefresh.call(r);
                                            a(u).hide()
                                        }
                                        return !1
                                    }),
                                    a(u).append(f));
                                a(u).hide();
                                a("body").append(u);
                                a("#" + p).addClass("ui-menu " + z.menu_widget);
                                a("#" + p + " > li > a").hover(function() {
                                    a(this).addClass(y.hover)
                                }, function() {
                                    a(this).removeClass(y.hover)
                                })
                            })();
                            a(".dropdownmenu", b + "_" + d.position).on("click", function(b) {
                                var c = a(this).offset(),
                                    f = c.left,
                                    c = parseInt(c.top),
                                    d = a(this).val();
                                a("#" + d).show().css({
                                    top: c - (a("#" + d).height() + 10) + "px",
                                    left: f + "px"
                                });
                                b.stopPropagation()
                            });
                            a("body").on("click", function(b) {
                                a(b.target).hasClass("dropdownmenu") || a("#" + p).hide()
                            })
                        })
                    },
                    GridToForm: function(b, c) {
                        return this.each(function() {
                            var d, g = this;
                            if (g.grid) {
                                var l = a(g).jqGrid("getRowData", b);
                                if (l)
                                    for (d in l) l.hasOwnProperty(d) && (a("[name=" + a.jgrid.jqID(d) + "]", c).is("input:radio") || a("[name=" + a.jgrid.jqID(d) + "]", c).is("input:checkbox") ? a("[name=" + a.jgrid.jqID(d) + "]", c).each(function() {
                                        a(this).val() == l[d] ? a(this)[g.p.useProp ? "prop" : "attr"]("checked", !0) : a(this)[g.p.useProp ? "prop" : "attr"]("checked", !1)
                                    }) : a("[name=" + a.jgrid.jqID(d) + "]", c).val(l[d]))
                            }
                        })
                    },
                    FormToGrid: function(b, c, d,
                        g) {
                        return this.each(function() {
                            if (this.grid) {
                                d || (d = "set");
                                g || (g = "first");
                                var l = a(c).serializeArray(),
                                    e = {};
                                a.each(l, function(a, b) {
                                    e[b.name] = b.value
                                });
                                "add" === d ? a(this).jqGrid("addRowData", b, e, g) : "set" === d && a(this).jqGrid("setRowData", b, e)
                            }
                        })
                    }
                }), a.jgrid.extend({
                    groupingSetup: function() {
                        return this.each(function() {
                            var b, c, d = this.p.colModel,
                                g = this.p.groupingView;
                            b = a.jgrid.styleUI[this.p.styleUI || "jQueryUI"].grouping;
                            if (null === g || "object" != typeof g && !a.isFunction(g)) this.p.grouping = !1;
                            else if (g.plusicon ||
                                (g.plusicon = b.icon_plus), g.minusicon || (g.minusicon = b.icon_minus), g.groupField.length) {
                                void 0 === g.visibiltyOnNextGrouping && (g.visibiltyOnNextGrouping = []);
                                g.lastvalues = [];
                                g._locgr || (g.groups = []);
                                g.counters = [];
                                for (b = 0; b < g.groupField.length; b++) g.groupOrder[b] || (g.groupOrder[b] = "asc"), g.groupText[b] || (g.groupText[b] = "{0}"), "boolean" != typeof g.groupColumnShow[b] && (g.groupColumnShow[b] = !0), "boolean" != typeof g.groupSummary[b] && (g.groupSummary[b] = !1), g.groupSummaryPos[b] || (g.groupSummaryPos[b] = "footer"), !0 === g.groupColumnShow[b] ? (g.visibiltyOnNextGrouping[b] = !0, a(this).jqGrid("showCol", g.groupField[b])) : (g.visibiltyOnNextGrouping[b] = a("#" + a.jgrid.jqID(this.p.id + "_" + g.groupField[b])).is(":visible"), a(this).jqGrid("hideCol", g.groupField[b]));
                                g.summary = [];
                                g.hideFirstGroupCol && (g.formatDisplayField[0] = function(a) {
                                    return a
                                });
                                b = 0;
                                for (c = d.length; c > b; b++) g.hideFirstGroupCol && (d[b].hidden || g.groupField[0] !== d[b].name || (d[b].formatter = function() {
                                    return ""
                                })), d[b].summaryType && g.summary.push(d[b].summaryDivider ? {
                                    nm: d[b].name,
                                    st: d[b].summaryType,
                                    v: "",
                                    sd: d[b].summaryDivider,
                                    vd: "",
                                    sr: d[b].summaryRound,
                                    srt: d[b].summaryRoundType || "round"
                                } : {
                                    nm: d[b].name,
                                    st: d[b].summaryType,
                                    v: "",
                                    sr: d[b].summaryRound,
                                    srt: d[b].summaryRoundType || "round"
                                })
                            } else this.p.grouping = !1
                        })
                    },
                    groupingPrepare: function(b, c) {
                        return this.each(function() {
                            var d, g, l, e, n = this.p.groupingView,
                                k = this,
                                r = function() {
                                    a.isFunction(this.st) ? this.v = this.st.call(k, this.v, this.nm, b) : (this.v = a(k).jqGrid("groupingCalculations.handler", this.st, this.v, this.nm, this.sr,
                                        this.srt, b), "avg" === this.st.toLowerCase() && this.sd && (this.vd = a(k).jqGrid("groupingCalculations.handler", this.st, this.vd, this.sd, this.sr, this.srt, b)))
                                },
                                q = n.groupField.length,
                                u = 0;
                            for (d = 0; q > d; d++) g = n.groupField[d], e = n.displayField[d], l = b[g], e = null == e ? null : b[e], null == e && (e = l), void 0 !== l && (0 === c ? (n.groups.push({
                                    idx: d,
                                    dataIndex: g,
                                    value: l,
                                    displayValue: e,
                                    startRow: c,
                                    cnt: 1,
                                    summary: []
                                }), n.lastvalues[d] = l, n.counters[d] = {
                                    cnt: 1,
                                    pos: n.groups.length - 1,
                                    summary: a.extend(!0, [], n.summary)
                                }, a.each(n.counters[d].summary,
                                    r), n.groups[n.counters[d].pos].summary = n.counters[d].summary) : "object" == typeof l || (a.isArray(n.isInTheSameGroup) && a.isFunction(n.isInTheSameGroup[d]) ? n.isInTheSameGroup[d].call(k, n.lastvalues[d], l, d, n) : n.lastvalues[d] === l) ? 1 === u ? (n.groups.push({
                                    idx: d,
                                    dataIndex: g,
                                    value: l,
                                    displayValue: e,
                                    startRow: c,
                                    cnt: 1,
                                    summary: []
                                }), n.lastvalues[d] = l, n.counters[d] = {
                                    cnt: 1,
                                    pos: n.groups.length - 1,
                                    summary: a.extend(!0, [], n.summary)
                                }, a.each(n.counters[d].summary, r), n.groups[n.counters[d].pos].summary = n.counters[d].summary) :
                                (n.counters[d].cnt += 1, n.groups[n.counters[d].pos].cnt = n.counters[d].cnt, a.each(n.counters[d].summary, r), n.groups[n.counters[d].pos].summary = n.counters[d].summary) : (n.groups.push({
                                    idx: d,
                                    dataIndex: g,
                                    value: l,
                                    displayValue: e,
                                    startRow: c,
                                    cnt: 1,
                                    summary: []
                                }), n.lastvalues[d] = l, u = 1, n.counters[d] = {
                                    cnt: 1,
                                    pos: n.groups.length - 1,
                                    summary: a.extend(!0, [], n.summary)
                                }, a.each(n.counters[d].summary, r), n.groups[n.counters[d].pos].summary = n.counters[d].summary))
                        }), this
                    },
                    groupingToggle: function(b) {
                        return this.each(function() {
                            var c =
                                this.p.groupingView,
                                d = b.split("_"),
                                g = parseInt(d[d.length - 2], 10);
                            d.splice(d.length - 2, 2);
                            var l, e, n = d.join("_"),
                                d = c.minusicon,
                                c = c.plusicon,
                                k = a("#" + a.jgrid.jqID(b)),
                                k = k.length ? k[0].nextSibling : null,
                                r = a("#" + a.jgrid.jqID(b) + " span.tree-wrap-" + this.p.direction),
                                q = function(b) {
                                    b = a.map(b.split(" "), function(a) {
                                        return a.substring(0, n.length + 1) === n + "_" ? parseInt(a.substring(n.length + 1), 10) : void 0
                                    });
                                    return 0 < b.length ? b[0] : void 0
                                },
                                u = !1,
                                z = !1,
                                y = this.p.frozenColumns ? this.p.id + "_frozen" : !1,
                                p = (e = y ? a("#" + a.jgrid.jqID(b),
                                    "#" + a.jgrid.jqID(y)) : !1) && e.length ? e[0].nextSibling : null;
                            if (r.hasClass(d)) {
                                if (k)
                                    for (; k && (l = q(k.className), !(void 0 !== l && g >= l));) a(k).hide(), k = k.nextSibling, y && (a(p).hide(), p = p.nextSibling);
                                r.removeClass(d).addClass(c);
                                u = !0
                            } else {
                                if (k)
                                    for (e = void 0; k;) {
                                        if (l = q(k.className), void 0 === e && (e = void 0 === l), z = a(k).hasClass("ui-subgrid") && a(k).hasClass("ui-sg-collapsed"), void 0 !== l) {
                                            if (g >= l) break;
                                            l === g + 1 && (z || (a(k).show().find(">td>span.tree-wrap-" + this.p.direction).removeClass(d).addClass(c), y && a(p).show().find(">td>span.tree-wrap-" +
                                                this.p.direction).removeClass(d).addClass(c)))
                                        } else e && (z || (a(k).show(), y && a(p).show()));
                                        k = k.nextSibling;
                                        y && (p = p.nextSibling)
                                    }
                                r.removeClass(c).addClass(d)
                            }
                            a(this).triggerHandler("jqGridGroupingClickGroup", [b, u]);
                            a.isFunction(this.p.onClickGroup) && this.p.onClickGroup.call(this, b, u)
                        }), !1
                    },
                    groupingRender: function(b, c, d, g) {
                        return this.each(function() {
                            function l(a, b, c) {
                                var d = !1;
                                if (0 === b) d = c[a];
                                else {
                                    var f = c[a].idx;
                                    if (0 === f) d = c[a];
                                    else
                                        for (; 0 <= a; a--)
                                            if (c[a].idx === f - b) {
                                                d = c[a];
                                                break
                                            }
                                }
                                return d
                            }

                            function e(b,
                                d, f, e) {
                                var h, g, w = l(b, d, f),
                                    n = q.p.colModel,
                                    r = w.cnt;
                                b = "";
                                for (g = e; c > g; g++) {
                                    var u = "<td " + q.formatCol(g, 1, "") + ">&#160;</td>",
                                        k = "{0}";
                                    a.each(w.summary, function() {
                                        if (this.nm === n[g].name) {
                                            n[g].summaryTpl && (k = n[g].summaryTpl);
                                            "string" == typeof this.st && "avg" === this.st.toLowerCase() && (this.sd && this.vd ? this.v /= this.vd : this.v && 0 < r && (this.v /= r));
                                            try {
                                                this.groupCount = w.cnt, this.groupIndex = w.dataIndex, this.groupValue = w.value, h = q.formatter("", this.v, g, this)
                                            } catch (b) {
                                                h = this.v
                                            }
                                            return u = "<td " + q.formatCol(g, 1, "") + ">" +
                                                a.jgrid.template(k, h) + "</td>", !1
                                        }
                                    });
                                    b += u
                                }
                                return b
                            }
                            var n, k, r, q = this,
                                u = q.p.groupingView,
                                z = "",
                                y = "",
                                p = u.groupCollapse ? u.plusicon : u.minusicon,
                                C = [],
                                v = u.groupField.length,
                                A = a.jgrid.styleUI[q.p.styleUI || "jQueryUI"].common,
                                p = p + " tree-wrap-" + q.p.direction;
                            a.each(q.p.colModel, function(a, b) {
                                var c;
                                for (c = 0; v > c; c++)
                                    if (u.groupField[c] === b.name) {
                                        C[c] = a;
                                        break
                                    }
                            });
                            var x, H = 0,
                                E = a.makeArray(u.groupSummary);
                            E.reverse();
                            x = q.p.multiselect ? ' colspan="2"' : "";
                            a.each(u.groups, function(l, L) {
                                if (u._locgr && !(L.startRow + L.cnt > (d - 1) *
                                        g && L.startRow < d * g)) return !0;
                                H++;
                                k = q.p.id + "ghead_" + L.idx;
                                n = k + "_" + l;
                                y = "<span style='cursor:pointer;margin-right:8px;margin-left:5px;' class='" + A.icon_base + " " + p + "' onclick=\"jQuery('#" + a.jgrid.jqID(q.p.id) + "').jqGrid('groupingToggle','" + n + "');return false;\"></span>";
                                try {
                                    a.isArray(u.formatDisplayField) && a.isFunction(u.formatDisplayField[L.idx]) ? (L.displayValue = u.formatDisplayField[L.idx].call(q, L.displayValue, L.value, q.p.colModel[C[L.idx]], L.idx, u), r = L.displayValue) : r = q.formatter(n, L.displayValue, C[L.idx],
                                        L.value)
                                } catch (D) {
                                    r = L.displayValue
                                }
                                var J = "",
                                    J = a.isFunction(u.groupText[L.idx]) ? u.groupText[L.idx].call(q, r, L.cnt, L.summary) : a.jgrid.template(u.groupText[L.idx], r, L.cnt, L.summary);
                                "string" != typeof J && "number" != typeof J && (J = r);
                                "header" === u.groupSummaryPos[L.idx] ? (z += '<tr id="' + n + '"' + (u.groupCollapse && 0 < L.idx ? ' style="display:none;" ' : " ") + 'role="row" class= "' + A.content + " jqgroup ui-row-" + q.p.direction + " " + k + '"><td style="padding-left:' + 12 * L.idx + 'px;"' + x + ">" + y + J + "</td>", z += e(l, 0, u.groups, !1 === u.groupColumnShow[L.idx] ?
                                    "" === x ? 2 : 3 : "" === x ? 1 : 2), z += "</tr>") : z += '<tr id="' + n + '"' + (u.groupCollapse && 0 < L.idx ? ' style="display:none;" ' : " ") + 'role="row" class= "' + A.content + " jqgroup ui-row-" + q.p.direction + " " + k + '"><td style="padding-left:' + 12 * L.idx + 'px;" colspan="' + (!1 === u.groupColumnShow[L.idx] ? c - 1 : c) + '">' + y + J + "</td></tr>";
                                if (v - 1 === L.idx) {
                                    var G, J = u.groups[l + 1],
                                        Q = 0;
                                    G = L.startRow;
                                    var F = void 0 !== J ? J.startRow : u.groups[l].startRow + u.groups[l].cnt;
                                    for (u._locgr && (Q = (d - 1) * g, Q > L.startRow && (G = Q)); F > G && b[G - Q]; G++) z += b[G - Q].join("");
                                    if ("header" !==
                                        u.groupSummaryPos[L.idx]) {
                                        var I;
                                        if (void 0 !== J) {
                                            for (I = 0; I < u.groupField.length && J.dataIndex !== u.groupField[I]; I++);
                                            H = u.groupField.length - I
                                        }
                                        for (J = 0; H > J; J++) E[J] && (Q = "", u.groupCollapse && !u.showSummaryOnHide && (Q = ' style="display:none;"'), z += "<tr" + Q + ' jqfootlevel="' + (L.idx - J) + '" role="row" class="' + A.content + " jqfoot ui-row-" + q.p.direction + '">', z += e(l, J, u.groups, 0), z += "</tr>");
                                        H = I
                                    }
                                }
                            });
                            a("#" + a.jgrid.jqID(q.p.id) + " tbody:first").append(z);
                            z = null
                        })
                    },
                    groupingGroupBy: function(b, c) {
                        return this.each(function() {
                            "string" ==
                            typeof b && (b = [b]);
                            var d = this.p.groupingView;
                            this.p.grouping = !0;
                            d._locgr = !1;
                            void 0 === d.visibiltyOnNextGrouping && (d.visibiltyOnNextGrouping = []);
                            var g;
                            for (g = 0; g < d.groupField.length; g++) !d.groupColumnShow[g] && d.visibiltyOnNextGrouping[g] && a(this).jqGrid("showCol", d.groupField[g]);
                            for (g = 0; g < b.length; g++) d.visibiltyOnNextGrouping[g] = a("#" + a.jgrid.jqID(this.p.id) + "_" + a.jgrid.jqID(b[g])).is(":visible");
                            this.p.groupingView = a.extend(this.p.groupingView, c || {});
                            d.groupField = b;
                            a(this).trigger("reloadGrid")
                        })
                    },
                    groupingRemove: function(b) {
                        return this.each(function() {
                            if (void 0 === b && (b = !0), this.p.grouping = !1, !0 === b) {
                                var c, d = this.p.groupingView;
                                for (c = 0; c < d.groupField.length; c++) !d.groupColumnShow[c] && d.visibiltyOnNextGrouping[c] && a(this).jqGrid("showCol", d.groupField);
                                a("tr.jqgroup, tr.jqfoot", "#" + a.jgrid.jqID(this.p.id) + " tbody:first").remove();
                                a("tr.jqgrow:hidden", "#" + a.jgrid.jqID(this.p.id) + " tbody:first").show()
                            } else a(this).trigger("reloadGrid")
                        })
                    },
                    groupingCalculations: {
                        handler: function(a, b, c, d, g, e) {
                            var n = {
                                sum: function() {
                                    return parseFloat(b || 0) + parseFloat(e[c] || 0)
                                },
                                min: function() {
                                    return "" === b ? parseFloat(e[c] || 0) : Math.min(parseFloat(b), parseFloat(e[c] || 0))
                                },
                                max: function() {
                                    return "" === b ? parseFloat(e[c] || 0) : Math.max(parseFloat(b), parseFloat(e[c] || 0))
                                },
                                count: function() {
                                    return "" === b && (b = 0), e.hasOwnProperty(c) ? b + 1 : 0
                                },
                                avg: function() {
                                    return n.sum()
                                }
                            };
                            if (!n[a]) throw "jqGrid Grouping No such method: " + a;
                            a = n[a]();
                            null != d && ("fixed" === g ? a = a.toFixed(d) : (d = Math.pow(10, d), a = Math.round(a * d) / d));
                            return a
                        }
                    },
                    setGroupHeaders: function(b) {
                        return b =
                            a.extend({
                                useColSpanStyle: !1,
                                groupHeaders: []
                            }, b || {}), this.each(function() {
                                var c, d, g, l, e, n, k, r, q, u, z;
                                q = 0;
                                var y = this.p.colModel,
                                    p = y.length,
                                    C = this.grid.headers,
                                    v = a("table.ui-jqgrid-htable", this.grid.hDiv),
                                    A = v.children("thead").children("tr.ui-jqgrid-labels:last").addClass("jqg-second-row-header");
                                g = v.children("thead");
                                var x = v.find(".jqg-first-row-header"),
                                    H = a.jgrid.styleUI[this.p.styleUI || "jQueryUI"].base;
                                this.p.groupHeader || (this.p.groupHeader = []);
                                this.p.groupHeader.push(b);
                                void 0 === x[0] ? x = a("<tr>", {
                                    role: "row",
                                    "aria-hidden": "true"
                                }).addClass("jqg-first-row-header").css("height", "auto") : x.empty();
                                var E, N = function(a, b) {
                                    var c, d = b.length;
                                    for (c = 0; d > c; c++)
                                        if (b[c].startColumnName === a) return c;
                                    return -1
                                };
                                a(this).prepend(g);
                                g = a("<tr>", {
                                    role: "row"
                                }).addClass("ui-jqgrid-labels jqg-third-row-header");
                                for (c = 0; p > c; c++)
                                    if (e = C[c].el, n = a(e), d = y[c], k = {
                                            height: "0px",
                                            width: C[c].width + "px",
                                            display: d.hidden ? "none" : ""
                                        }, a("<th>", {
                                            role: "gridcell"
                                        }).css(k).addClass("ui-first-th-" + this.p.direction).appendTo(x), e.style.width =
                                        "", r = N(d.name, b.groupHeaders), 0 <= r) {
                                        r = b.groupHeaders[r];
                                        q = r.numberOfColumns;
                                        l = r.titleText;
                                        z = r.className || "";
                                        for (r = u = 0; q > r && p > c + r; r++) y[c + r].hidden || u++;
                                        l = a("<th>").attr({
                                            role: "columnheader"
                                        }).addClass(H.headerBox + " ui-th-column-header ui-th-" + this.p.direction + " " + z).html(l);
                                        0 < u && l.attr("colspan", String(u));
                                        this.p.headertitles && l.attr("title", l.text());
                                        0 === u && l.hide();
                                        n.before(l);
                                        g.append(e);
                                        --q
                                    } else 0 === q ? b.useColSpanStyle ? n.attr("rowspan", "2") : (a("<th>", {
                                        role: "columnheader"
                                    }).addClass(H.headerBox +
                                        " ui-th-column-header ui-th-" + this.p.direction).css({
                                        display: d.hidden ? "none" : ""
                                    }).insertBefore(n), g.append(e)) : (g.append(e), q--);
                                d = a(this).children("thead");
                                d.prepend(x);
                                g.insertAfter(A);
                                v.append(d);
                                b.useColSpanStyle && (v.find("span.ui-jqgrid-resize").each(function() {
                                    var b = a(this).parent();
                                    b.is(":visible") && (this.style.cssText = "height: " + b.height() + "px !important; cursor: col-resize;")
                                }), v.find("div.ui-jqgrid-sortable").each(function() {
                                    var b = a(this),
                                        c = b.parent();
                                    c.is(":visible") && c.is(":has(span.ui-jqgrid-resize)") &&
                                        b.css("top", (c.height() - b.outerHeight()) / 2 - 4 + "px")
                                }));
                                E = d.find("tr.jqg-first-row-header");
                                a(this).bind("jqGridResizeStop.setGroupHeaders", function(a, b, c) {
                                    E.find("th").eq(c).width(b)
                                })
                            })
                    },
                    destroyGroupHeader: function(b) {
                        return void 0 === b && (b = !0), this.each(function() {
                            var c, d, g, l, e, n;
                            d = this.grid;
                            var k = a("table.ui-jqgrid-htable thead", d.hDiv),
                                r = this.p.colModel;
                            if (d) {
                                a(this).unbind(".setGroupHeaders");
                                c = a("<tr>", {
                                    role: "row"
                                }).addClass("ui-jqgrid-labels");
                                l = d.headers;
                                d = 0;
                                for (g = l.length; g > d; d++) {
                                    e = r[d].hidden ?
                                        "none" : "";
                                    e = a(l[d].el).width(l[d].width).css("display", e);
                                    try {
                                        e.removeAttr("rowSpan")
                                    } catch (q) {
                                        e.attr("rowSpan", 1)
                                    }
                                    c.append(e);
                                    n = e.children("span.ui-jqgrid-resize");
                                    0 < n.length && (n[0].style.height = "");
                                    e.children("div")[0].style.top = ""
                                }
                                a(k).children("tr.ui-jqgrid-labels").remove();
                                a(k).prepend(c);
                                !0 === b && a(this).jqGrid("setGridParam", {
                                    groupHeader: null
                                })
                            }
                        })
                    }
                }), a.jgrid = a.jgrid || {}, a.extend(a.jgrid, {
                    saveState: function(b, c) {
                        if (c = a.extend({
                                useStorage: !0,
                                storageType: "localStorage",
                                beforeSetItem: null,
                                compression: !1,
                                compressionModule: "LZString",
                                compressionMethod: "compressToUTF16"
                            }, c || {}), b) {
                            var d, g, l = "",
                                e = "",
                                n = a("#" + b)[0];
                            if (n.grid) {
                                if (g = a(n).data("inlineNav"), g && n.p.inlineNav && a(n).jqGrid("setGridParam", {
                                        _iN: g
                                    }), g = a(n).data("filterToolbar"), g && n.p.filterToolbar && a(n).jqGrid("setGridParam", {
                                        _fT: g
                                    }), l = a(n).jqGrid("jqGridExport", {
                                        exptype: "jsonstring",
                                        ident: "",
                                        root: ""
                                    }), a(n.grid.bDiv).find(".ui-jqgrid-btable tr:gt(0)").each(function(a, b) {
                                        e += b.outerHTML
                                    }), a.isFunction(c.beforeSetItem) && (d = c.beforeSetItem.call(n,
                                        l), null != d && (l = d)), c.compression && c.compressionModule) try {
                                    d = window[c.compressionModule][c.compressionMethod](l), null != d && (l = d, e = window[c.compressionModule][c.compressionMethod](e))
                                } catch (k) {}
                                if (c.useStorage && a.jgrid.isLocalStorage()) try {
                                    window[c.storageType].setItem("jqGrid" + n.p.id, l), window[c.storageType].setItem("jqGrid" + n.p.id + "_data", e)
                                } catch (k) {
                                    22 === k.code && alert("Local storage limit is over!")
                                }
                                return l
                            }
                        }
                    },
                    loadState: function(b, c, d) {
                        if (d = a.extend({
                                useStorage: !0,
                                storageType: "localStorage",
                                clearAfterLoad: !1,
                                beforeSetGrid: null,
                                afterSetGrid: null,
                                decompression: !1,
                                decompressionModule: "LZString",
                                decompressionMethod: "decompressFromUTF16"
                            }, d || {}), b) {
                            var g, l, e, n, k, r = a("#" + b)[0];
                            if (d.useStorage) try {
                                c = window[d.storageType].getItem("jqGrid" + r.id), e = window[d.storageType].getItem("jqGrid" + r.id + "_data")
                            } catch (q) {}
                            if (c) {
                                if (d.decompression && d.decompressionModule) try {
                                    g = window[d.decompressionModule][d.decompressionMethod](c), null != g && (c = g, e = window[d.decompressionModule][d.decompressionMethod](e))
                                } catch (q) {}
                                if (g = jqGridUtils.parse(c),
                                    g && "object" === a.type(g)) {
                                    r.grid && a.jgrid.gridUnload(b);
                                    a.isFunction(d.beforeSetGrid) && (l = d.beforeSetGrid(g), l && "object" === a.type(l) && (g = l));
                                    c = {
                                        reccount: g.reccount,
                                        records: g.records,
                                        lastpage: g.lastpage,
                                        shrinkToFit: g.shrinkToFit,
                                        data: g.data,
                                        datatype: g.datatype,
                                        grouping: g.grouping
                                    };
                                    g.shrinkToFit = !1;
                                    g.data = [];
                                    g.datatype = "local";
                                    g.grouping = !1;
                                    g.inlineNav && (n = g._iN, g._iN = null, delete g._iN);
                                    g.filterToolbar && (k = g._fT, g._fT = null, delete g._fT);
                                    b = a("#" + b).jqGrid(g);
                                    if (b.append(e), b.jqGrid("setGridParam", c),
                                        g.storeNavOptions && g.navGrid && (b[0].p.navGrid = !1, b.jqGrid("navGrid", g.pager, g.navOptions, g.editOptions, g.addOptions, g.delOptions, g.searchOptions, g.viewOptions), g.navButtons && g.navButtons.length))
                                        for (e = 0; e < g.navButtons.length; e++) "sepclass" in g.navButtons[e][1] ? b.jqGrid("navSeparatorAdd", g.navButtons[e][0], g.navButtons[e][1]) : b.jqGrid("navButtonAdd", g.navButtons[e][0], g.navButtons[e][1]);
                                    g.inlineNav && n && (b.jqGrid("setGridParam", {
                                        inlineNav: !1
                                    }), b.jqGrid("inlineNav", g.pager, n));
                                    g.filterToolbar && k && (b.jqGrid("setGridParam", {
                                        filterToolbar: !1
                                    }), k.restoreFromFilters = !0, b.jqGrid("filterToolbar", k));
                                    g.frozenColumns && b.jqGrid("setFrozenColumns");
                                    b[0].updatepager(!0, !0);
                                    a.isFunction(d.afterSetGrid) && d.afterSetGrid(b);
                                    d.clearAfterLoad && (window[d.storageType].removeItem("jqGrid" + r.id), window[d.storageType].removeItem("jqGrid" + r.id + "_data"))
                                } else alert("can not convert to object")
                            }
                        }
                    },
                    isGridInStorage: function(b, c) {
                        var d = {
                                storageType: "localStorage"
                            },
                            d = a.extend(d, c || {}),
                            g, l, e;
                        try {
                            l = window[d.storageType].getItem("jqGrid" + b), e = window[d.storageType].getItem("jqGrid" +
                                b + "_data"), g = null != l && null != e && "string" == typeof l && "string" == typeof e
                        } catch (n) {
                            g = !1
                        }
                        return g
                    },
                    setRegional: function(b, c) {
                        var d = {
                            storageType: "sessionStorage"
                        };
                        if (d = a.extend(d, c || {}), d.regional) {
                            a.jgrid.saveState(b, d);
                            d.beforeSetGrid = function(a) {
                                return a.regional = d.regional, a.force_regional = !0, a
                            };
                            a.jgrid.loadState(b, null, d);
                            var g = a("#" + b)[0],
                                l = a(g).jqGrid("getGridParam", "colModel"),
                                e = -1,
                                n = a.jgrid.getRegional(g, "nav");
                            a.each(l, function(a) {
                                return this.formatter && "actions" === this.formatter ? (e = a, !1) : void 0
                            }); - 1 !== e && n && a("#" + b + " tbody tr").each(function() {
                                var b = this.cells[e];
                                a(b).find(".ui-inline-edit").attr("title", n.edittitle);
                                a(b).find(".ui-inline-del").attr("title", n.deltitle);
                                a(b).find(".ui-inline-save").attr("title", n.savetitle);
                                a(b).find(".ui-inline-cancel").attr("title", n.canceltitle)
                            });
                            try {
                                window[d.storageType].removeItem("jqGrid" + g.id), window[d.storageType].removeItem("jqGrid" + g.id + "_data")
                            } catch (k) {}
                        }
                    },
                    jqGridImport: function(b, c) {
                        c = a.extend({
                            imptype: "xml",
                            impstring: "",
                            impurl: "",
                            mtype: "GET",
                            impData: {},
                            xmlGrid: {
                                config: "root>grid",
                                data: "root>rows"
                            },
                            jsonGrid: {
                                config: "grid",
                                data: "data"
                            },
                            ajaxOptions: {}
                        }, c || {});
                        var d = (0 === b.indexOf("#") ? "" : "#") + a.jgrid.jqID(b),
                            g = function(b, c) {
                                var f, e, g;
                                f = a(c.xmlGrid.config, b)[0];
                                var m = a(c.xmlGrid.data, b)[0];
                                if (jqGridUtils.xmlToJSON) {
                                    f = jqGridUtils.xmlToJSON(f);
                                    for (g in f) f.hasOwnProperty(g) && (e = f[g]);
                                    m ? (g = f.grid.datatype, f.grid.datatype = "xmlstring", f.grid.datastr = b, a(d).jqGrid(e).jqGrid("setGridParam", {
                                        datatype: g
                                    })) : setTimeout(function() {
                                        a(d).jqGrid(e)
                                    }, 0)
                                } else alert("xml2json or parse are not present")
                            },
                            l = function(b, c) {
                                if (b && "string" == typeof b) {
                                    var f = jqGridUtils.parse(b),
                                        e = f[c.jsonGrid.config];
                                    if (f = f[c.jsonGrid.data]) {
                                        var g = e.datatype;
                                        e.datatype = "jsonstring";
                                        e.datastr = f;
                                        a(d).jqGrid(e).jqGrid("setGridParam", {
                                            datatype: g
                                        })
                                    } else a(d).jqGrid(e)
                                }
                            };
                        switch (c.imptype) {
                            case "xml":
                                a.ajax(a.extend({
                                        url: c.impurl,
                                        type: c.mtype,
                                        data: c.impData,
                                        dataType: "xml",
                                        complete: function(b, f) {
                                            "success" === f && (g(b.responseXML, c), a(d).triggerHandler("jqGridImportComplete", [b, c]), a.isFunction(c.importComplete) && c.importComplete(b))
                                        }
                                    },
                                    c.ajaxOptions));
                                break;
                            case "xmlstring":
                                if (c.impstring && "string" == typeof c.impstring) {
                                    var e = a.parseXML(c.impstring);
                                    e && (g(e, c), a(d).triggerHandler("jqGridImportComplete", [e, c]), a.isFunction(c.importComplete) && c.importComplete(e))
                                }
                                break;
                            case "json":
                                a.ajax(a.extend({
                                    url: c.impurl,
                                    type: c.mtype,
                                    data: c.impData,
                                    dataType: "json",
                                    complete: function(b) {
                                        try {
                                            l(b.responseText, c), a(d).triggerHandler("jqGridImportComplete", [b, c]), a.isFunction(c.importComplete) && c.importComplete(b)
                                        } catch (f) {}
                                    }
                                }, c.ajaxOptions));
                                break;
                            case "jsonstring":
                                c.impstring && "string" == typeof c.impstring && (l(c.impstring, c), a(d).triggerHandler("jqGridImportComplete", [c.impstring, c]), a.isFunction(c.importComplete) && c.importComplete(c.impstring))
                        }
                    }
                }), a.jgrid.extend({
                    jqGridExport: function(b) {
                        b = a.extend({
                            exptype: "xmlstring",
                            root: "grid",
                            ident: "\t",
                            addOptions: {}
                        }, b || {});
                        var c = null;
                        return this.each(function() {
                            if (this.grid) {
                                var d, g = a.extend(!0, {}, a(this).jqGrid("getGridParam"), b.addOptions);
                                if (g.rownumbers && (g.colNames.splice(0, 1), g.colModel.splice(0,
                                        1)), g.multiselect && (g.colNames.splice(0, 1), g.colModel.splice(0, 1)), g.subGrid && (g.colNames.splice(0, 1), g.colModel.splice(0, 1)), g.knv = null, g.treeGrid)
                                    for (d in g.treeReader) g.treeReader.hasOwnProperty(d) && (g.colNames.splice(g.colNames.length - 1), g.colModel.splice(g.colModel.length - 1));
                                switch (b.exptype) {
                                    case "xmlstring":
                                        c = "<" + b.root + ">" + jqGridUtils.jsonToXML(g, {
                                            xmlDecl: ""
                                        }) + "</" + b.root + ">";
                                        break;
                                    case "jsonstring":
                                        c = jqGridUtils.stringify(g), b.root && (c = "{" + b.root + ":" + c + "}")
                                }
                            }
                        }), c
                    },
                    excelExport: function(b) {
                        return b =
                            a.extend({
                                exptype: "remote",
                                url: null,
                                oper: "oper",
                                tag: "excel",
                                exportOptions: {}
                            }, b || {}), this.each(function() {
                                if (this.grid) {
                                    var c;
                                    "remote" === b.exptype && (c = a.extend({}, this.p.postData), c[b.oper] = b.tag, c = jQuery.param(c), c = -1 !== b.url.indexOf("?") ? b.url + "&" + c : b.url + "?" + c, window.location = c)
                                }
                            })
                    }
                }), a.jgrid.inlineEdit = a.jgrid.inlineEdit || {}, a.jgrid.extend({
                    editRow: function(b, c, d, g, l, e, n, k, r) {
                        var q = {},
                            u = a.makeArray(arguments).slice(1);
                        return "object" === a.type(u[0]) ? q = u[0] : (void 0 !== c && (q.keys = c), a.isFunction(d) &&
                            (q.oneditfunc = d), a.isFunction(g) && (q.successfunc = g), void 0 !== l && (q.url = l), void 0 !== e && (q.extraparam = e), a.isFunction(n) && (q.aftersavefunc = n), a.isFunction(k) && (q.errorfunc = k), a.isFunction(r) && (q.afterrestorefunc = r)), q = a.extend(!0, {
                            keys: !1,
                            keyevent: "keydown",
                            oneditfunc: null,
                            successfunc: null,
                            url: null,
                            extraparam: {},
                            aftersavefunc: null,
                            errorfunc: null,
                            afterrestorefunc: null,
                            restoreAfterError: !0,
                            mtype: "POST",
                            focusField: !0
                        }, a.jgrid.inlineEdit, q), this.each(function() {
                            var c, d, e, h, g, m, l = this,
                                w = 0,
                                n = null,
                                k = {},
                                r =
                                a(this).jqGrid("getStyleUI", l.p.styleUI + ".inlinedit", "inputClass", !0);
                            l.grid && (h = a(l).jqGrid("getInd", b, !0), !1 !== h && (m = a.isFunction(q.beforeEditRow) ? q.beforeEditRow.call(l, q, b) : void 0, void 0 === m && (m = !0), m && (e = a(h).attr("editable") || "0", "0" !== e || a(h).hasClass("not-editable-row") || (g = l.p.colModel, a('td[role="gridcell"]', h).each(function(e) {
                                c = g[e].name;
                                var h = !0 === l.p.treeGrid && c === l.p.ExpandColumn;
                                if (h) d = a("span:first", this).html();
                                else try {
                                    d = a.unformat.call(l, this, {
                                        rowId: b,
                                        colModel: g[e]
                                    }, e)
                                } catch (m) {
                                    d =
                                        g[e].edittype && "textarea" === g[e].edittype ? a(this).text() : a(this).html()
                                }
                                if ("cb" !== c && "subgrid" !== c && "rn" !== c && (l.p.autoencode && (d = a.jgrid.htmlDecode(d)), k[c] = d, !0 === g[e].editable)) {
                                    null === n && (n = e);
                                    h ? a("span:first", this).html("") : a(this).html("");
                                    var q = a.extend({}, g[e].editoptions || {}, {
                                        id: b + "_" + c,
                                        name: c,
                                        rowId: b,
                                        oper: "edit"
                                    });
                                    g[e].edittype || (g[e].edittype = "text");
                                    ("&nbsp;" === d || "&#160;" === d || 1 === d.length && 160 === d.charCodeAt(0)) && (d = "");
                                    var u = a.jgrid.createEl.call(l, g[e].edittype, q, d, !0, a.extend({},
                                        a.jgrid.ajaxOptions, l.p.ajaxSelectOptions || {}));
                                    a(u).addClass("editable inline-edit-cell"); - 1 < a.inArray(g[e].edittype, ["text", "textarea", "password", "select"]) && a(u).addClass(r);
                                    h ? a("span:first", this).append(u) : a(this).append(u);
                                    a.jgrid.bindEv.call(l, u, q);
                                    "select" === g[e].edittype && void 0 !== g[e].editoptions && !0 === g[e].editoptions.multiple && void 0 === g[e].editoptions.dataUrl && a.jgrid.msie && a(u).width(a(u).width());
                                    w++
                                }
                            }), 0 < w && (k.id = b, l.p.savedRow.push(k), a(h).attr("editable", "1"), q.focusField && ("number" ==
                                    typeof q.focusField && parseInt(q.focusField, 10) <= g.length && (n = q.focusField), setTimeout(function() {
                                        var b = a("td:eq(" + n + ") :input:visible", h).not(":disabled");
                                        0 < b.length && b.focus()
                                    }, 0)), !0 === q.keys && a(h).bind(q.keyevent, function(c) {
                                    if (27 === c.keyCode) {
                                        if (a(l).jqGrid("restoreRow", b, q.afterrestorefunc), l.p.inlineNav) try {
                                            a(l).jqGrid("showAddEditButtons")
                                        } catch (d) {}
                                        return !1
                                    }
                                    if (13 === c.keyCode) {
                                        if ("TEXTAREA" === c.target.tagName) return !0;
                                        if (a(l).jqGrid("saveRow", b, q) && l.p.inlineNav) try {
                                            a(l).jqGrid("showAddEditButtons")
                                        } catch (d) {}
                                        return !1
                                    }
                                }),
                                a(l).triggerHandler("jqGridInlineEditRow", [b, q]), a.isFunction(q.oneditfunc) && q.oneditfunc.call(l, b))))))
                        })
                    },
                    saveRow: function(b, c, d, g, l, e, n) {
                        var k = a.makeArray(arguments).slice(1),
                            r = {},
                            q = this[0];
                        "object" === a.type(k[0]) ? r = k[0] : (a.isFunction(c) && (r.successfunc = c), void 0 !== d && (r.url = d), void 0 !== g && (r.extraparam = g), a.isFunction(l) && (r.aftersavefunc = l), a.isFunction(e) && (r.errorfunc = e), a.isFunction(n) && (r.afterrestorefunc = n));
                        var r = a.extend(!0, {
                                successfunc: null,
                                url: null,
                                extraparam: {},
                                aftersavefunc: null,
                                errorfunc: null,
                                afterrestorefunc: null,
                                restoreAfterError: !0,
                                mtype: "POST",
                                saveui: "enable",
                                savetext: a.jgrid.getRegional(q, "defaults.savetext")
                            }, a.jgrid.inlineEdit, r),
                            u, z, y, p, C, v = !1,
                            A = {},
                            x = {},
                            H = {},
                            E = !1,
                            N = a.trim(a(q).jqGrid("getStyleUI", q.p.styleUI + ".common", "error", !0));
                        if (!q.grid || (C = a(q).jqGrid("getInd", b, !0), !1 === C)) return v;
                        var L = a.jgrid.getRegional(this, "errors"),
                            J = a.jgrid.getRegional(this, "edit"),
                            k = a.isFunction(r.beforeSaveRow) ? r.beforeSaveRow.call(q, r, b) : void 0;
                        if (void 0 === k && (k = !0), k) {
                            if (z = a(C).attr("editable"),
                                r.url = r.url || q.p.editurl, "1" === z) {
                                var G;
                                if (a('td[role="gridcell"]', C).each(function(b) {
                                        if (G = q.p.colModel[b], u = G.name, "cb" !== u && "subgrid" !== u && !0 === G.editable && "rn" !== u && !a(this).hasClass("not-editable-cell")) {
                                            switch (G.edittype) {
                                                case "checkbox":
                                                    var c = ["Yes", "No"];
                                                    G.editoptions && (c = G.editoptions.value.split(":"));
                                                    A[u] = a("input", this).is(":checked") ? c[0] : c[1];
                                                    break;
                                                case "text":
                                                case "password":
                                                case "textarea":
                                                case "button":
                                                    A[u] = a("input, textarea", this).val();
                                                    break;
                                                case "select":
                                                    if (G.editoptions.multiple) {
                                                        var c =
                                                            a("select", this),
                                                            d = [];
                                                        A[u] = a(c).val();
                                                        A[u] = A[u] ? A[u].join(",") : "";
                                                        a("select option:selected", this).each(function(b, c) {
                                                            d[b] = a(c).text()
                                                        });
                                                        x[u] = d.join(",")
                                                    } else A[u] = a("select option:selected", this).val(), x[u] = a("select option:selected", this).text();
                                                    G.formatter && "select" === G.formatter && (x = {});
                                                    break;
                                                case "custom":
                                                    try {
                                                        if (!G.editoptions || !a.isFunction(G.editoptions.custom_value)) throw "e1";
                                                        if (A[u] = G.editoptions.custom_value.call(q, a(".customelement", this), "get"), void 0 === A[u]) throw "e2";
                                                    } catch (f) {
                                                        "e1" ===
                                                        f ? a.jgrid.info_dialog(L.errcap, "function 'custom_value' " + J.msg.nodefined, J.bClose, {
                                                            styleUI: q.p.styleUI
                                                        }) : a.jgrid.info_dialog(L.errcap, f.message, J.bClose, {
                                                            styleUI: q.p.styleUI
                                                        })
                                                    }
                                            }
                                            if (p = a.jgrid.checkValues.call(q, A[u], b), !1 === p[0]) return !1;
                                            q.p.autoencode && (A[u] = a.jgrid.htmlEncode(A[u]));
                                            "clientArray" !== r.url && G.editoptions && !0 === G.editoptions.NullIfEmpty && "" === A[u] && (H[u] = "null", E = !0)
                                        }
                                    }), !1 === p[0]) {
                                    try {
                                        var D = a(q).jqGrid("getGridRowById", b),
                                            F = a.jgrid.findPos(D);
                                        a.jgrid.info_dialog(L.errcap, p[1], J.bClose, {
                                            left: F[0],
                                            top: F[1] + a(D).outerHeight(),
                                            styleUI: q.p.styleUI
                                        })
                                    } catch (I) {
                                        alert(p[1])
                                    }
                                    return v
                                }
                                F = q.p.prmNames;
                                z = b;
                                if (D = !1 === q.p.keyName ? F.id : q.p.keyName, A) {
                                    if (A[F.oper] = F.editoper, void 0 === A[D] || "" === A[D]) A[D] = b;
                                    else if (C.id !== q.p.idPrefix + A[D]) {
                                        F = a.jgrid.stripPref(q.p.idPrefix, b);
                                        if (void 0 !== q.p._index[F] && (q.p._index[A[D]] = q.p._index[F], delete q.p._index[F]), b = q.p.idPrefix + A[D], a(C).attr("id", b), q.p.selrow === z && (q.p.selrow = b), a.isArray(q.p.selarrrow)) F = a.inArray(z, q.p.selarrrow), 0 <= F && (q.p.selarrrow[F] =
                                            b);
                                        q.p.multiselect && (F = "jqg_" + q.p.id + "_" + b, a("input.cbox", C).attr("id", F).attr("name", F))
                                    }
                                    void 0 === q.p.inlineData && (q.p.inlineData = {});
                                    A = a.extend({}, A, q.p.inlineData, r.extraparam)
                                }
                                if ("clientArray" === r.url) {
                                    A = a.extend({}, A, x);
                                    q.p.autoencode && a.each(A, function(b, c) {
                                        A[b] = a.jgrid.htmlDecode(c)
                                    });
                                    F = a(q).jqGrid("setRowData", b, A);
                                    a(C).attr("editable", "0");
                                    for (D = 0; D < q.p.savedRow.length; D++)
                                        if (String(q.p.savedRow[D].id) === String(z)) {
                                            y = D;
                                            break
                                        }
                                    0 <= y && q.p.savedRow.splice(y, 1);
                                    a(q).triggerHandler("jqGridInlineAfterSaveRow", [b, F, A, r]);
                                    a.isFunction(r.aftersavefunc) && r.aftersavefunc.call(q, b, F, A, r);
                                    v = !0;
                                    a(C).removeClass("jqgrid-new-row").unbind("keydown")
                                } else a(q).jqGrid("progressBar", {
                                    method: "show",
                                    loadtype: r.saveui,
                                    htmlcontent: r.savetext
                                }), H = a.extend({}, A, H), H[D] = a.jgrid.stripPref(q.p.idPrefix, H[D]), a.ajax(a.extend({
                                    url: r.url,
                                    data: a.isFunction(q.p.serializeRowData) ? q.p.serializeRowData.call(q, H) : H,
                                    type: r.mtype,
                                    async: !1,
                                    complete: function(c, d) {
                                        if (a(q).jqGrid("progressBar", {
                                                method: "hide",
                                                loadtype: r.saveui,
                                                htmlcontent: r.savetext
                                            }),
                                            "success" === d) {
                                            var e, h = !0;
                                            if (e = a(q).triggerHandler("jqGridInlineSuccessSaveRow", [c, b, r]), a.isArray(e) || (e = [!0, H]), e[0] && a.isFunction(r.successfunc) && (e = r.successfunc.call(q, c)), a.isArray(e) ? (h = e[0], A = e[1] || A) : h = e, !0 === h) {
                                                q.p.autoencode && a.each(A, function(b, c) {
                                                    A[b] = a.jgrid.htmlDecode(c)
                                                });
                                                E && a.each(A, function(a) {
                                                    "null" === A[a] && (A[a] = "")
                                                });
                                                A = a.extend({}, A, x);
                                                a(q).jqGrid("setRowData", b, A);
                                                a(C).attr("editable", "0");
                                                for (e = 0; e < q.p.savedRow.length; e++)
                                                    if (String(q.p.savedRow[e].id) === String(b)) {
                                                        y = e;
                                                        break
                                                    }
                                                0 <=
                                                    y && q.p.savedRow.splice(y, 1);
                                                a(q).triggerHandler("jqGridInlineAfterSaveRow", [b, c, A, r]);
                                                a.isFunction(r.aftersavefunc) && r.aftersavefunc.call(q, b, c, A, r);
                                                v = !0;
                                                a(C).removeClass("jqgrid-new-row").unbind("keydown")
                                            } else a(q).triggerHandler("jqGridInlineErrorSaveRow", [b, c, d, null, r]), a.isFunction(r.errorfunc) && r.errorfunc.call(q, b, c, d, null), !0 === r.restoreAfterError && a(q).jqGrid("restoreRow", b, r.afterrestorefunc)
                                        }
                                    },
                                    error: function(c, d, e) {
                                        if (a("#lui_" + a.jgrid.jqID(q.p.id)).hide(), a(q).triggerHandler("jqGridInlineErrorSaveRow", [b, c, d, e, r]), a.isFunction(r.errorfunc)) r.errorfunc.call(q, b, c, d, e);
                                        else {
                                            c = c.responseText || c.statusText;
                                            try {
                                                a.jgrid.info_dialog(L.errcap, '<div class="' + N + '">' + c + "</div>", J.bClose, {
                                                    buttonalign: "right",
                                                    styleUI: q.p.styleUI
                                                })
                                            } catch (h) {
                                                alert(c)
                                            }
                                        }!0 === r.restoreAfterError && a(q).jqGrid("restoreRow", b, r.afterrestorefunc)
                                    }
                                }, a.jgrid.ajaxOptions, q.p.ajaxRowOptions || {}))
                            }
                            return v
                        }
                    },
                    restoreRow: function(b, c) {
                        var d = a.makeArray(arguments).slice(1),
                            g = {};
                        return "object" === a.type(d[0]) ? g = d[0] : a.isFunction(c) && (g.afterrestorefunc =
                            c), g = a.extend(!0, {}, a.jgrid.inlineEdit, g), this.each(function() {
                            var c, d, h = this,
                                m = -1,
                                k = {};
                            if (h.grid && (c = a(h).jqGrid("getInd", b, !0), !1 !== c) && (d = a.isFunction(g.beforeCancelRow) ? g.beforeCancelRow.call(h, g, b) : void 0, void 0 === d && (d = !0), d)) {
                                for (d = 0; d < h.p.savedRow.length; d++)
                                    if (String(h.p.savedRow[d].id) === String(b)) {
                                        m = d;
                                        break
                                    }
                                if (0 <= m) {
                                    if (a.isFunction(a.fn.datepicker)) try {
                                        a("input.hasDatepicker", "#" + a.jgrid.jqID(c.id)).datepicker("hide")
                                    } catch (q) {}
                                    a.each(h.p.colModel, function() {
                                        !0 === this.editable && h.p.savedRow[m].hasOwnProperty(this.name) &&
                                            (k[this.name] = h.p.savedRow[m][this.name])
                                    });
                                    a(h).jqGrid("setRowData", b, k);
                                    a(c).attr("editable", "0").unbind("keydown");
                                    h.p.savedRow.splice(m, 1);
                                    a("#" + a.jgrid.jqID(b), "#" + a.jgrid.jqID(h.p.id)).hasClass("jqgrid-new-row") && setTimeout(function() {
                                        a(h).jqGrid("delRowData", b);
                                        a(h).jqGrid("showAddEditButtons")
                                    }, 0)
                                }
                                a(h).triggerHandler("jqGridInlineAfterRestoreRow", [b]);
                                a.isFunction(g.afterrestorefunc) && g.afterrestorefunc.call(h, b)
                            }
                        })
                    },
                    addRow: function(b) {
                        return b = a.extend(!0, {
                            rowID: null,
                            initdata: {},
                            position: "first",
                            useDefValues: !0,
                            useFormatter: !1,
                            addRowParams: {
                                extraparam: {}
                            }
                        }, b || {}), this.each(function() {
                            if (this.grid) {
                                var c = this,
                                    d = a.isFunction(b.beforeAddRow) ? b.beforeAddRow.call(c, b.addRowParams) : void 0;
                                if (void 0 === d && (d = !0), d)(b.rowID = a.isFunction(b.rowID) ? b.rowID.call(c, b) : null != b.rowID ? b.rowID : a.jgrid.randId(), !0 === b.useDefValues && a(c.p.colModel).each(function() {
                                        if (this.editoptions && this.editoptions.defaultValue) {
                                            var d = this.editoptions.defaultValue,
                                                d = a.isFunction(d) ? d.call(c) : d;
                                            b.initdata[this.name] = d
                                        }
                                    }),
                                    a(c).jqGrid("addRowData", b.rowID, b.initdata, b.position), b.rowID = c.p.idPrefix + b.rowID, a("#" + a.jgrid.jqID(b.rowID), "#" + a.jgrid.jqID(c.p.id)).addClass("jqgrid-new-row"), b.useFormatter) ? a("#" + a.jgrid.jqID(b.rowID) + " .ui-inline-edit", "#" + a.jgrid.jqID(c.p.id)).click() : (d = c.p.prmNames, b.addRowParams.extraparam[d.oper] = d.addoper, a(c).jqGrid("editRow", b.rowID, b.addRowParams), a(c).jqGrid("setSelection", b.rowID))
                            }
                        })
                    },
                    inlineNav: function(b, c) {
                        var d = this[0],
                            g = a.jgrid.getRegional(d, "nav"),
                            l = a.jgrid.styleUI[d.p.styleUI].inlinedit;
                        return c = a.extend(!0, {
                            edit: !0,
                            editicon: l.icon_edit_nav,
                            add: !0,
                            addicon: l.icon_add_nav,
                            save: !0,
                            saveicon: l.icon_save_nav,
                            cancel: !0,
                            cancelicon: l.icon_cancel_nav,
                            addParams: {
                                addRowParams: {
                                    extraparam: {}
                                }
                            },
                            editParams: {},
                            restoreAfterSelect: !0
                        }, g, c || {}), this.each(function() {
                            if (this.grid && !this.p.inlineNav) {
                                var e = a.jgrid.jqID(d.p.id),
                                    l = a.trim(a(d).jqGrid("getStyleUI", d.p.styleUI + ".common", "disabled", !0));
                                if (d.p.navGrid || a(d).jqGrid("navGrid", b, {
                                        refresh: !1,
                                        edit: !1,
                                        add: !1,
                                        del: !1,
                                        search: !1,
                                        view: !1
                                    }), a(d).data("inlineNav") ||
                                    a(d).data("inlineNav", c), d.p.force_regional && (c = a.extend(c, g)), d.p.inlineNav = !0, !0 === c.addParams.useFormatter) {
                                    var k, r = d.p.colModel;
                                    for (k = 0; k < r.length; k++)
                                        if (r[k].formatter && "actions" === r[k].formatter) {
                                            r[k].formatoptions && (k = a.extend({
                                                keys: !1,
                                                onEdit: null,
                                                onSuccess: null,
                                                afterSave: null,
                                                onError: null,
                                                afterRestore: null,
                                                extraparam: {},
                                                url: null
                                            }, r[k].formatoptions), c.addParams.addRowParams = {
                                                keys: k.keys,
                                                oneditfunc: k.onEdit,
                                                successfunc: k.onSuccess,
                                                url: k.url,
                                                extraparam: k.extraparam,
                                                aftersavefunc: k.afterSave,
                                                errorfunc: k.onError,
                                                afterrestorefunc: k.afterRestore
                                            });
                                            break
                                        }
                                }
                                c.add && a(d).jqGrid("navButtonAdd", b, {
                                    caption: c.addtext,
                                    title: c.addtitle,
                                    buttonicon: c.addicon,
                                    id: d.p.id + "_iladd",
                                    internal: !0,
                                    onClickButton: function() {
                                        a(d).jqGrid("addRow", c.addParams);
                                        c.addParams.useFormatter || (a("#" + e + "_ilsave").removeClass(l), a("#" + e + "_ilcancel").removeClass(l), a("#" + e + "_iladd").addClass(l), a("#" + e + "_iledit").addClass(l))
                                    }
                                });
                                c.edit && a(d).jqGrid("navButtonAdd", b, {
                                    caption: c.edittext,
                                    title: c.edittitle,
                                    buttonicon: c.editicon,
                                    id: d.p.id + "_iledit",
                                    internal: !0,
                                    onClickButton: function() {
                                        var b = a(d).jqGrid("getGridParam", "selrow");
                                        b ? (a(d).jqGrid("editRow", b, c.editParams), a("#" + e + "_ilsave").removeClass(l), a("#" + e + "_ilcancel").removeClass(l), a("#" + e + "_iladd").addClass(l), a("#" + e + "_iledit").addClass(l)) : (a.jgrid.viewModal("#alertmod_" + e, {
                                            gbox: "#gbox_" + e,
                                            jqm: !0
                                        }), a("#jqg_alrt").focus())
                                    }
                                });
                                c.save && (a(d).jqGrid("navButtonAdd", b, {
                                    caption: c.savetext || "",
                                    title: c.savetitle || "Save row",
                                    buttonicon: c.saveicon,
                                    id: d.p.id + "_ilsave",
                                    internal: !0,
                                    onClickButton: function() {
                                        var b = d.p.savedRow[0].id;
                                        if (b) {
                                            var f = d.p.prmNames,
                                                g = f.oper,
                                                l = c.editParams;
                                            a("#" + a.jgrid.jqID(b), "#" + e).hasClass("jqgrid-new-row") ? (c.addParams.addRowParams.extraparam[g] = f.addoper, l = c.addParams.addRowParams) : (c.editParams.extraparam || (c.editParams.extraparam = {}), c.editParams.extraparam[g] = f.editoper);
                                            a(d).jqGrid("saveRow", b, l) && a(d).jqGrid("showAddEditButtons")
                                        } else a.jgrid.viewModal("#alertmod_" + e, {
                                            gbox: "#gbox_" + e,
                                            jqm: !0
                                        }), a("#jqg_alrt").focus()
                                    }
                                }), a("#" + e + "_ilsave").addClass(l));
                                c.cancel && (a(d).jqGrid("navButtonAdd", b, {
                                    caption: c.canceltext || "",
                                    title: c.canceltitle || "Cancel row editing",
                                    buttonicon: c.cancelicon,
                                    id: d.p.id + "_ilcancel",
                                    internal: !0,
                                    onClickButton: function() {
                                        var b = d.p.savedRow[0].id,
                                            f = c.editParams;
                                        b ? (a("#" + a.jgrid.jqID(b), "#" + e).hasClass("jqgrid-new-row") && (f = c.addParams.addRowParams), a(d).jqGrid("restoreRow", b, f), a(d).jqGrid("showAddEditButtons")) : (a.jgrid.viewModal("#alertmod", {
                                            gbox: "#gbox_" + e,
                                            jqm: !0
                                        }), a("#jqg_alrt").focus())
                                    }
                                }), a("#" + e + "_ilcancel").addClass(l));
                                !0 === c.restoreAfterSelect && a(d).bind("jqGridBeforeSelectRow.inlineNav", function(b, e) {
                                    0 < d.p.savedRow.length && !0 === d.p.inlineNav && e !== d.p.selrow && null !== d.p.selrow && (d.p.selrow === c.addParams.rowID ? a(d).jqGrid("delRowData", d.p.selrow) : a(d).jqGrid("restoreRow", d.p.selrow, c.editParams), a(d).jqGrid("showAddEditButtons"))
                                })
                            }
                        })
                    },
                    showAddEditButtons: function() {
                        return this.each(function() {
                            if (this.grid) {
                                var b = a.jgrid.jqID(this.p.id),
                                    c = a.trim(a(this).jqGrid("getStyleUI", this.p.styleUI + ".common", "disabled", !0));
                                a("#" + b + "_ilsave").addClass(c);
                                a("#" + b + "_ilcancel").addClass(c);
                                a("#" + b + "_iladd").removeClass(c);
                                a("#" + b + "_iledit").removeClass(c)
                            }
                        })
                    }
                }), a.jgrid.msie && 8 === a.jgrid.msiever() && (a.expr[":"].hidden = function(a) {
                    return 0 === a.offsetWidth || 0 === a.offsetHeight || "none" === a.style.display
                }), a.jgrid._multiselect = !1, a.ui && a.ui.multiselect) {
                if (a.ui.multiselect.prototype._setSelected) {
                    var D = a.ui.multiselect.prototype._setSelected;
                    a.ui.multiselect.prototype._setSelected = function(b, c) {
                        var d = D.call(this, b, c);
                        if (c && this.selectedList) {
                            var g =
                                this.element;
                            this.selectedList.find("li").each(function() {
                                a(this).data("optionLink") && a(this).data("optionLink").remove().appendTo(g)
                            })
                        }
                        return d
                    }
                }
                a.ui.multiselect.prototype.destroy && (a.ui.multiselect.prototype.destroy = function() {
                    this.element.show();
                    this.container.remove();
                    void 0 === a.Widget ? a.widget.prototype.destroy.apply(this, arguments) : a.Widget.prototype.destroy.apply(this, arguments)
                });
                a.jgrid._multiselect = !0
            }
            a.jgrid.extend({
                sortableColumns: function(b) {
                    return this.each(function() {
                        function c() {
                            d.p.disableClick = !0
                        }
                        var d = this,
                            g = a.jgrid.jqID(d.p.id),
                            g = {
                                tolerance: "pointer",
                                axis: "x",
                                scrollSensitivity: "1",
                                items: ">th:not(:has(#jqgh_" + g + "_cb,#jqgh_" + g + "_rn,#jqgh_" + g + "_subgrid),:hidden)",
                                placeholder: {
                                    element: function(b) {
                                        return a(document.createElement(b[0].nodeName)).addClass(b[0].className + " ui-sortable-placeholder ui-state-highlight").removeClass("ui-sortable-helper")[0]
                                    },
                                    update: function(a, b) {
                                        b.height(a.currentItem.innerHeight() - parseInt(a.currentItem.css("paddingTop") || 0, 10) - parseInt(a.currentItem.css("paddingBottom") ||
                                            0, 10));
                                        b.width(a.currentItem.innerWidth() - parseInt(a.currentItem.css("paddingLeft") || 0, 10) - parseInt(a.currentItem.css("paddingRight") || 0, 10))
                                    }
                                },
                                update: function(b, c) {
                                    var f = a(c.item).parent(),
                                        f = a(">th", f),
                                        g = {},
                                        m = d.p.id + "_";
                                    a.each(d.p.colModel, function(a) {
                                        g[this.name] = a
                                    });
                                    var l = [];
                                    f.each(function() {
                                        var b = a(">div", this).get(0).id.replace(/^jqgh_/, "").replace(m, "");
                                        g.hasOwnProperty(b) && l.push(g[b])
                                    });
                                    a(d).jqGrid("remapColumns", l, !0, !0);
                                    a.isFunction(d.p.sortable.update) && d.p.sortable.update(l);
                                    setTimeout(function() {
                                        d.p.disableClick = !1
                                    }, 50)
                                }
                            };
                        if (d.p.sortable.options ? a.extend(g, d.p.sortable.options) : a.isFunction(d.p.sortable) && (d.p.sortable = {
                                update: d.p.sortable
                            }), g.start) {
                            var l = g.start;
                            g.start = function(a, b) {
                                c();
                                l.call(this, a, b)
                            }
                        } else g.start = c;
                        d.p.sortable.exclude && (g.items += ":not(" + d.p.sortable.exclude + ")");
                        g = b.sortable(g);
                        g = g.data("sortable") || g.data("uiSortable");
                        null != g && (g.data("sortable").floating = !0)
                    })
                },
                columnChooser: function(b) {
                    function c(b, d) {
                        b && ("string" == typeof b ? a.fn[b] && a.fn[b].apply(d, a.makeArray(arguments).slice(2)) :
                            a.isFunction(b) && b.apply(d, a.makeArray(arguments).slice(2)))
                    }
                    var d, g, l, e, n = this,
                        k = {},
                        r = [],
                        q = n.jqGrid("getGridParam", "colModel"),
                        u = n.jqGrid("getGridParam", "colNames"),
                        z = function(b) {
                            return a.ui.multiselect.prototype && b.data(a.ui.multiselect.prototype.widgetFullName || a.ui.multiselect.prototype.widgetName) || b.data("ui-multiselect") || b.data("multiselect")
                        };
                    l = a.jgrid.getRegional(this[0], "col");
                    if (!a("#colchooser_" + a.jgrid.jqID(n[0].p.id)).length) {
                        if (d = a('<div id="colchooser_' + n[0].p.id + '" style="position:relative;overflow:hidden"><div><select multiple="multiple"></select></div></div>'),
                            g = a("select", d), b = a.extend({
                                width: 400,
                                height: 240,
                                classname: null,
                                done: function(a) {
                                    a && n.jqGrid("remapColumns", a, !0)
                                },
                                msel: "multiselect",
                                dlog: "dialog",
                                dialog_opts: {
                                    minWidth: 470,
                                    dialogClass: "ui-jqdialog"
                                },
                                dlog_opts: function(b) {
                                    var c = {};
                                    return c[b.bSubmit] = function() {
                                        b.apply_perm();
                                        b.cleanup(!1)
                                    }, c[b.bCancel] = function() {
                                        b.cleanup(!0)
                                    }, a.extend(!0, {
                                        buttons: c,
                                        close: function() {
                                            b.cleanup(!0)
                                        },
                                        modal: b.modal || !1,
                                        resizable: b.resizable || !0,
                                        width: b.width + 70,
                                        resize: function() {
                                            var a = z(g),
                                                b = a.container.closest(".ui-dialog-content");
                                            0 < b.length && "object" == typeof b[0].style ? b[0].style.width = "" : b.css("width", "");
                                            a.selectedList.height(Math.max(a.selectedContainer.height() - a.selectedActions.outerHeight() - 1, 1));
                                            a.availableList.height(Math.max(a.availableContainer.height() - a.availableActions.outerHeight() - 1, 1))
                                        }
                                    }, b.dialog_opts || {})
                                },
                                apply_perm: function() {
                                    var c = [];
                                    a("option", g).each(function() {
                                        a(this).is(":selected") ? n.jqGrid("showCol", q[this.value].name) : n.jqGrid("hideCol", q[this.value].name)
                                    });
                                    a("option[selected]", g).each(function() {
                                        c.push(parseInt(this.value,
                                            10))
                                    });
                                    a.each(c, function() {
                                        delete k[q[parseInt(this, 10)].name]
                                    });
                                    a.each(k, function() {
                                        var a = parseInt(this, 10),
                                            b = c,
                                            d = a,
                                            e, f;
                                        c = 0 <= d ? (e = b.slice(), f = e.splice(d, Math.max(b.length - d, d)), d > b.length && (d = b.length), e[d] = a, e.concat(f)) : b
                                    });
                                    b.done && b.done.call(n, c);
                                    n.jqGrid("setGridWidth", n[0].p.width, n[0].p.shrinkToFit)
                                },
                                cleanup: function(a) {
                                    c(b.dlog, d, "destroy");
                                    c(b.msel, g, "destroy");
                                    d.remove();
                                    a && b.done && b.done.call(n)
                                },
                                msel_opts: {}
                            }, l, b || {}), a.ui && a.ui.multiselect && a.ui.multiselect.defaults) {
                            if (!a.jgrid._multiselect) return void alert("Multiselect plugin loaded after jqGrid. Please load the plugin before the jqGrid!");
                            b.msel_opts = a.extend(a.ui.multiselect.defaults, b.msel_opts)
                        }
                        b.caption && d.attr("title", b.caption);
                        b.classname && (d.addClass(b.classname), g.addClass(b.classname));
                        b.width && (a(">div", d).css({
                            width: b.width,
                            margin: "0 auto"
                        }), g.css("width", b.width));
                        b.height && (a(">div", d).css("height", b.height), g.css("height", b.height - 10));
                        g.empty();
                        a.each(q, function(b) {
                            return k[this.name] = b, this.hidedlg ? void(this.hidden || r.push(b)) : void g.append("<option value='" + b + "' " + (this.hidden ? "" : "selected='selected'") + ">" + a.jgrid.stripHtml(u[b]) +
                                "</option>")
                        });
                        l = a.isFunction(b.dlog_opts) ? b.dlog_opts.call(n, b) : b.dlog_opts;
                        c(b.dlog, d, l);
                        l = a.isFunction(b.msel_opts) ? b.msel_opts.call(n, b) : b.msel_opts;
                        c(b.msel, g, l);
                        l = a("#colchooser_" + a.jgrid.jqID(n[0].p.id));
                        l.css({
                            margin: "auto"
                        });
                        l.find(">div").css({
                            width: "100%",
                            height: "100%",
                            margin: "auto"
                        });
                        l = z(g);
                        l.container.css({
                            width: "100%",
                            height: "100%",
                            margin: "auto"
                        });
                        l.selectedContainer.css({
                            width: 100 * l.options.dividerLocation + "%",
                            height: "100%",
                            margin: "auto",
                            boxSizing: "border-box"
                        });
                        l.availableContainer.css({
                            width: 100 -
                                100 * l.options.dividerLocation + "%",
                            height: "100%",
                            margin: "auto",
                            boxSizing: "border-box"
                        });
                        l.selectedList.css("height", "auto");
                        l.availableList.css("height", "auto");
                        e = Math.max(l.selectedList.height(), l.availableList.height());
                        e = Math.min(e, a(window).height());
                        l.selectedList.css("height", e);
                        l.availableList.css("height", e)
                    }
                },
                sortableRows: function(b) {
                    return this.each(function() {
                        var c = this;
                        c.grid && (c.p.treeGrid || a.fn.sortable && (b = a.extend({
                                cursor: "move",
                                axis: "y",
                                items: " > .jqgrow"
                            }, b || {}), b.start && a.isFunction(b.start) ?
                            (b._start_ = b.start, delete b.start) : b._start_ = !1, b.update && a.isFunction(b.update) ? (b._update_ = b.update, delete b.update) : b._update_ = !1, b.start = function(d, g) {
                                if (a(g.item).css("border-width", "0"), a("td", g.item).each(function(a) {
                                        this.style.width = c.grid.cols[a].style.width
                                    }), c.p.subGrid) {
                                    var l = a(g.item).attr("id");
                                    try {
                                        a(c).jqGrid("collapseSubGridRow", l)
                                    } catch (e) {}
                                }
                                b._start_ && b._start_.apply(this, [d, g])
                            }, b.update = function(d, g) {
                                a(g.item).css("border-width", "");
                                !0 === c.p.rownumbers && a("td.jqgrid-rownum", c.rows).each(function(b) {
                                    a(this).html(b +
                                        1 + (parseInt(c.p.page, 10) - 1) * parseInt(c.p.rowNum, 10))
                                });
                                b._update_ && b._update_.apply(this, [d, g])
                            }, a("tbody:first", c).sortable(b), a("tbody:first > .jqgrow", c).disableSelection()))
                    })
                },
                gridDnD: function(b) {
                    return this.each(function() {
                        function c() {
                            var b = a.data(l, "dnd");
                            a("tr.jqgrow:not(.ui-draggable)", l).draggable(a.isFunction(b.drag) ? b.drag.call(a(l), b) : b.drag)
                        }
                        var d, g, l = this;
                        if (l.grid && !l.p.treeGrid && a.fn.draggable && a.fn.droppable) {
                            if (void 0 === a("#jqgrid_dnd")[0] && a("body").append("<table id='jqgrid_dnd' class='ui-jqgrid-dnd'></table>"),
                                "string" == typeof b && "updateDnD" === b && !0 === l.p.jqgdnd) return void c();
                            if (b = a.extend({
                                    drag: function(b) {
                                        return a.extend({
                                            start: function(c, d) {
                                                var f;
                                                if (l.p.subGrid) {
                                                    f = a(d.helper).attr("id");
                                                    try {
                                                        a(l).jqGrid("collapseSubGridRow", f)
                                                    } catch (g) {}
                                                }
                                                for (f = 0; f < a.data(l, "dnd").connectWith.length; f++) 0 === a(a.data(l, "dnd").connectWith[f]).jqGrid("getGridParam", "reccount") && a(a.data(l, "dnd").connectWith[f]).jqGrid("addRowData", "jqg_empty_row", {});
                                                d.helper.addClass("ui-state-highlight");
                                                a("td", d.helper).each(function(a) {
                                                    this.style.width =
                                                        l.grid.headers[a].width + "px"
                                                });
                                                b.onstart && a.isFunction(b.onstart) && b.onstart.call(a(l), c, d)
                                            },
                                            stop: function(c, d) {
                                                var f;
                                                d.helper.dropped && !b.dragcopy && (f = a(d.helper).attr("id"), void 0 === f && (f = a(this).attr("id")), a(l).jqGrid("delRowData", f));
                                                for (f = 0; f < a.data(l, "dnd").connectWith.length; f++) a(a.data(l, "dnd").connectWith[f]).jqGrid("delRowData", "jqg_empty_row");
                                                b.onstop && a.isFunction(b.onstop) && b.onstop.call(a(l), c, d)
                                            }
                                        }, b.drag_opts || {})
                                    },
                                    drop: function(b) {
                                        return a.extend({
                                            accept: function(b) {
                                                if (!a(b).hasClass("jqgrow")) return b;
                                                b = a(b).closest("table.ui-jqgrid-btable");
                                                return 0 < b.length && void 0 !== a.data(b[0], "dnd") ? (b = a.data(b[0], "dnd").connectWith, -1 !== a.inArray("#" + a.jgrid.jqID(this.id), b) ? !0 : !1) : !1
                                            },
                                            drop: function(c, d) {
                                                if (a(d.draggable).hasClass("jqgrow")) {
                                                    var f = a(d.draggable).attr("id"),
                                                        f = d.draggable.parent().parent().jqGrid("getRowData", f);
                                                    if (!b.dropbyname) {
                                                        var g, h, m = 0,
                                                            w = {},
                                                            k = a("#" + a.jgrid.jqID(this.id)).jqGrid("getGridParam", "colModel");
                                                        try {
                                                            for (h in f) f.hasOwnProperty(h) && (g = k[m].name, "cb" !== g && "rn" !== g && "subgrid" !==
                                                                g && f.hasOwnProperty(h) && k[m] && (w[g] = f[h]), m++);
                                                            f = w
                                                        } catch (p) {}
                                                    }
                                                    if (d.helper.dropped = !0, b.beforedrop && a.isFunction(b.beforedrop)) g = b.beforedrop.call(this, c, d, f, a("#" + a.jgrid.jqID(l.p.id)), a(this)), void 0 !== g && null !== g && "object" == typeof g && (f = g);
                                                    if (d.helper.dropped) {
                                                        var v;
                                                        b.autoid && (a.isFunction(b.autoid) ? v = b.autoid.call(this, f) : (v = Math.ceil(1E3 * Math.random()), v = b.autoidprefix + v));
                                                        a("#" + a.jgrid.jqID(this.id)).jqGrid("addRowData", v, f, b.droppos)
                                                    }
                                                    b.ondrop && a.isFunction(b.ondrop) && b.ondrop.call(this, c, d,
                                                        f)
                                                }
                                            }
                                        }, b.drop_opts || {})
                                    },
                                    onstart: null,
                                    onstop: null,
                                    beforedrop: null,
                                    ondrop: null,
                                    drop_opts: {
                                        activeClass: "ui-state-active",
                                        hoverClass: "ui-state-hover"
                                    },
                                    drag_opts: {
                                        revert: "invalid",
                                        helper: "clone",
                                        cursor: "move",
                                        appendTo: "#jqgrid_dnd",
                                        zIndex: 5E3
                                    },
                                    dragcopy: !1,
                                    dropbyname: !1,
                                    droppos: "first",
                                    autoid: !0,
                                    autoidprefix: "dnd_"
                                }, b || {}), b.connectWith)
                                for (b.connectWith = b.connectWith.split(","), b.connectWith = a.map(b.connectWith, function(b) {
                                        return a.trim(b)
                                    }), a.data(l, "dnd", b), 0 === l.p.reccount || l.p.jqgdnd || c(), l.p.jqgdnd = !0, d = 0; d < b.connectWith.length; d++) g = b.connectWith[d], a(g).droppable(a.isFunction(b.drop) ? b.drop.call(a(l), b) : b.drop)
                        }
                    })
                },
                gridResize: function(b) {
                    return this.each(function() {
                        var c = this,
                            d = a.jgrid.jqID(c.p.id),
                            g;
                        c.grid && a.fn.resizable && ((b = a.extend({}, b || {}), b.alsoResize ? (b._alsoResize_ = b.alsoResize, delete b.alsoResize) : b._alsoResize_ = !1, b.stop && a.isFunction(b.stop) ? (b._stop_ = b.stop, delete b.stop) : b._stop_ = !1, b.stop = function(l, e) {
                            a(c).jqGrid("setGridParam", {
                                height: a("#gview_" + d + " .ui-jqgrid-bdiv").height()
                            });
                            a(c).jqGrid("setGridWidth", e.size.width, b.shrinkToFit);
                            b._stop_ && b._stop_.call(c, l, e);
                            c.p.caption && a("#gbox_" + d).css({
                                height: "auto"
                            });
                            c.p.frozenColumns && (g && clearTimeout(g), g = setTimeout(function() {
                                g && clearTimeout(g);
                                a("#" + d).jqGrid("destroyFrozenColumns");
                                a("#" + d).jqGrid("setFrozenColumns")
                            }))
                        }, b._alsoResize_) ? b.alsoResize = eval("(" + ("{'#gview_" + d + " .ui-jqgrid-bdiv':true,'" + b._alsoResize_ + "':true}") + ")") : b.alsoResize = a(".ui-jqgrid-bdiv", "#gview_" + d), delete b._alsoResize_, a("#gbox_" + d).resizable(b))
                    })
                }
            });
            a.assocArraySize = function(a) {
                var b, c = 0;
                for (b in a) a.hasOwnProperty(b) && c++;
                return c
            };
            a.jgrid.extend({
                pivotSetup: function(b, c) {
                    var d = [],
                        g = [],
                        l = [],
                        e = [],
                        n = [],
                        k = {
                            grouping: !0,
                            groupingView: {
                                groupField: [],
                                groupSummary: [],
                                groupSummaryPos: []
                            }
                        },
                        r = [],
                        q = a.extend({
                            rowTotals: !1,
                            rowTotalsText: "Total",
                            colTotals: !1,
                            groupSummary: !0,
                            groupSummaryPos: "header",
                            frozenStaticCols: !1
                        }, c || {});
                    return this.each(function() {
                        function c(a, b, d) {
                            var e;
                            return e = p.call(a, b, d), 0 < e.length ? e[0] : null
                        }

                        function m(a, b) {
                            var c, d = 0,
                                e = !0;
                            for (c in a)
                                if (a.hasOwnProperty(c)) {
                                    if (a[c] !=
                                        this[d]) {
                                        e = !1;
                                        break
                                    }
                                    if (d++, d >= this.length) break
                                }
                            return e && (D = b), e
                        }

                        function y(b, c, d, f) {
                            var g, h, m, l, w = c.length,
                                q = "",
                                k = [];
                            a.isArray(d) ? (l = d.length, k = d) : (l = 1, k[0] = d);
                            e = [];
                            n = [];
                            e.root = 0;
                            f._count ? f._count++ : f._count = 1;
                            for (m = 0; l > m; m++) {
                                var u, r = [];
                                for (g = 0; w > g; g++) {
                                    if (null == d) u = h = a.trim(c[g].member) + "_" + c[g].aggregator, k[0] = c[g].label || c[g].aggregator + " " + a.trim(c[g].member);
                                    else {
                                        u = d[m].replace(/\s+/g, "");
                                        try {
                                            h = 1 === w ? q + u : q + u + "_" + c[g].aggregator + "_" + String(g)
                                        } catch (z) {}
                                        k[m] = d[m]
                                    }
                                    var y = h = isNaN(parseInt(h, 10)) ?
                                        h : h + " ",
                                        B = r,
                                        p = h,
                                        x = f[h],
                                        v = c[g].member,
                                        A = b,
                                        C = f._count,
                                        K = void 0;
                                    switch (c[g].aggregator) {
                                        case "sum":
                                            K = parseFloat(x || 0) + parseFloat(A[v] || 0);
                                            break;
                                        case "count":
                                            "" !== x && null != x || (x = 0);
                                            K = A.hasOwnProperty(v) ? x + 1 : 0;
                                            break;
                                        case "min":
                                            K = "" === x || null == x ? parseFloat(A[v] || 0) : Math.min(parseFloat(x), parseFloat(A[v] || 0));
                                            break;
                                        case "max":
                                            K = "" === x || null == x ? parseFloat(A[v] || 0) : Math.max(parseFloat(x), parseFloat(A[v] || 0));
                                            break;
                                        case "avg":
                                            K = (parseFloat(x || 0) * (C - 1) + parseFloat(A[v] || 0)) / C
                                    }
                                    f[y] = B[p] = K;
                                    1 >= m && "_r_Totals" !==
                                        u && "" === q && (q = u)
                                }
                                e[h] = r;
                                n[h] = k[m]
                            }
                            return f
                        }

                        function v(a) {
                            var b, c, e, f, g;
                            for (e in a)
                                if (a.hasOwnProperty(e)) {
                                    if ("object" != typeof a[e]) {
                                        if ("level" === e) {
                                            if (void 0 === S[a.level] && (S[a.level] = "", 0 < a.level && -1 === a.text.indexOf("_r_Totals") && (r[a.level - 1] = {
                                                    useColSpanStyle: !1,
                                                    groupHeaders: []
                                                })), S[a.level] !== a.text && a.children.length && -1 === a.text.indexOf("_r_Totals") && 0 < a.level) {
                                                r[a.level - 1].groupHeaders.push({
                                                    titleText: a.label,
                                                    numberOfColumns: 0
                                                });
                                                c = r[a.level - 1].groupHeaders.length - 1;
                                                g = 0 === c ? V : Aa + E;
                                                if (a.level -
                                                    1 === (q.rowTotals ? 1 : 0) && 0 < c) {
                                                    for (var m = 0, l = 0; c > l; l++) m += r[a.level - 1].groupHeaders[l].numberOfColumns;
                                                    m && (g = m + x)
                                                }
                                                d[g] && (r[a.level - 1].groupHeaders[c].startColumnName = d[g].name, r[a.level - 1].groupHeaders[c].numberOfColumns = d.length - g);
                                                Aa = d.length
                                            }
                                            S[a.level] = a.text
                                        }
                                        if (a.level === H && "level" === e && 0 < H)
                                            if (1 < E) {
                                                c = 1;
                                                for (b in a.fields) a.fields.hasOwnProperty(b) && (1 === c && r[H - 1].groupHeaders.push({
                                                    startColumnName: b,
                                                    numberOfColumns: 1,
                                                    titleText: a.label || a.text
                                                }), c++);
                                                r[H - 1].groupHeaders[r[H - 1].groupHeaders.length -
                                                    1].numberOfColumns = c - 1
                                            } else r.splice(H - 1, 1)
                                    }
                                    if (null != a[e] && "object" == typeof a[e] && v(a[e]), "level" === e && 0 < a.level && (a.level === (0 === H ? a.level : H) || -1 !== S[a.level].indexOf("_r_Totals")))
                                        for (b in c = 0, a.fields)
                                            if (a.fields.hasOwnProperty(b)) {
                                                g = {};
                                                for (f in q.aggregates[c])
                                                    if (q.aggregates[c].hasOwnProperty(f)) switch (f) {
                                                        case "member":
                                                        case "label":
                                                        case "aggregator":
                                                            break;
                                                        default:
                                                            g[f] = q.aggregates[c][f]
                                                    }
                                                1 < E ? (g.name = b, g.label = q.aggregates[c].label || a.label) : (g.name = a.text, g.label = "_r_Totals" === a.text ? q.rowTotalsText :
                                                    a.label);
                                                d.push(g);
                                                c++
                                            }
                                }
                        }
                        var C, D, A, x, H, E, N, L = b.length,
                            J = 0;
                        q.rowTotals && 0 < q.yDimension.length && (q.yDimension.splice(0, 0, {
                            dataName: q.yDimension[0].dataName
                        }), q.yDimension[0].converter = function() {
                            return "_r_Totals"
                        });
                        if (x = a.isArray(q.xDimension) ? q.xDimension.length : 0, H = q.yDimension.length, E = a.isArray(q.aggregates) ? q.aggregates.length : 0, 0 === x || 0 === E) throw "xDimension or aggregates optiona are not set!";
                        var G;
                        for (A = 0; x > A; A++) G = {
                                name: q.xDimension[A].dataName,
                                frozen: q.frozenStaticCols
                            }, null == q.xDimension[A].isGroupField &&
                            (q.xDimension[A].isGroupField = !0), G = a.extend(!0, G, q.xDimension[A]), d.push(G);
                        G = x - 1;
                        for (var F = {}; L > J;) {
                            C = b[J];
                            var I = [],
                                M = [];
                            N = {};
                            A = 0;
                            do I[A] = a.trim(C[q.xDimension[A].dataName]), N[q.xDimension[A].dataName] = I[A], A++; while (x > A);
                            var O = 0;
                            if (D = -1, A = c(g, m, I)) {
                                if (0 <= D) {
                                    if (O = 0, 1 <= H) {
                                        for (O = 0; H > O; O++) M[O] = a.trim(C[q.yDimension[O].dataName]), q.yDimension[O].converter && a.isFunction(q.yDimension[O].converter) && (M[O] = q.yDimension[O].converter.call(this, M[O], I, M));
                                        A = y(C, q.aggregates, M, A)
                                    } else 0 === H && (A = y(C, q.aggregates,
                                        null, A));
                                    g[D] = A
                                }
                            } else {
                                if (O = 0, 1 <= H) {
                                    for (O = 0; H > O; O++) M[O] = a.trim(C[q.yDimension[O].dataName]), q.yDimension[O].converter && a.isFunction(q.yDimension[O].converter) && (M[O] = q.yDimension[O].converter.call(this, M[O], I, M));
                                    N = y(C, q.aggregates, M, N)
                                } else 0 === H && (N = y(C, q.aggregates, null, N));
                                g.push(N)
                            }
                            var P;
                            C = 0;
                            I = N = null;
                            for (P in e)
                                if (e.hasOwnProperty(P)) {
                                    if (0 === C) F.children && void 0 !== F.children || (F = {
                                        text: P,
                                        level: 0,
                                        children: [],
                                        label: P
                                    }), N = F.children;
                                    else {
                                        I = null;
                                        for (A = 0; A < N.length; A++)
                                            if (N[A].text === P) {
                                                I = N[A];
                                                break
                                            }
                                        I ?
                                            N = I.children : (N.push({
                                                children: [],
                                                text: P,
                                                level: C,
                                                fields: e[P],
                                                label: n[P]
                                            }), N = N[N.length - 1].children)
                                    }
                                    C++
                                }
                            J++
                        }
                        var S = [],
                            Aa = d.length,
                            V = Aa;
                        0 < H && (r[H - 1] = {
                            useColSpanStyle: !1,
                            groupHeaders: []
                        });
                        v(F);
                        if (q.colTotals)
                            for (J = g.length; J--;)
                                for (A = x; A < d.length; A++) L = d[A].name, l[L] ? l[L] += parseFloat(g[J][L] || 0) : l[L] = parseFloat(g[J][L] || 0);
                        if (0 < G)
                            for (A = 0; G > A; A++) d[A].isGroupField && (k.groupingView.groupField.push(d[A].name), k.groupingView.groupSummary.push(q.groupSummary), k.groupingView.groupSummaryPos.push(q.groupSummaryPos));
                        else k.grouping = !1;
                        k.sortname = d[G].name;
                        k.groupingView.hideFirstGroupCol = !0
                    }), {
                        colModel: d,
                        rows: g,
                        groupOptions: k,
                        groupHeaders: r,
                        summary: l
                    }
                },
                jqPivot: function(b, c, d, g) {
                    return this.each(function() {
                        function l(b) {
                            var f, g, l = jQuery(e).jqGrid("pivotSetup", b, c),
                                w = 0 < a.assocArraySize(l.summary) ? !0 : !1,
                                k = a.jgrid.from.call(e, l.rows);
                            c.ignoreCase && (k = k.ignoreCase());
                            for (b = 0; b < l.groupOptions.groupingView.groupField.length; b++) f = c.xDimension[b].sortorder ? c.xDimension[b].sortorder : "asc", g = c.xDimension[b].sorttype ? c.xDimension[b].sorttype :
                                "text", k.orderBy(l.groupOptions.groupingView.groupField[b], f, g, "", g);
                            b = c.xDimension.length;
                            l.groupOptions.sortname && b && (f = c.xDimension[b - 1].sortorder ? c.xDimension[b - 1].sortorder : "asc", g = c.xDimension[b - 1].sorttype ? c.xDimension[b - 1].sorttype : "text", k.orderBy(l.groupOptions.sortname, f, g, "", g));
                            jQuery(e).jqGrid(a.extend(!0, {
                                    datastr: a.extend(k.select(), w ? {
                                        userdata: l.summary
                                    } : {}),
                                    datatype: "jsonstring",
                                    footerrow: w,
                                    userDataOnFooter: w,
                                    colModel: l.colModel,
                                    viewrecords: !0,
                                    sortname: c.xDimension[0].dataName
                                }, l.groupOptions,
                                d || {}));
                            f = l.groupHeaders;
                            if (f.length)
                                for (b = 0; b < f.length; b++) f[b] && f[b].groupHeaders.length && jQuery(e).jqGrid("setGroupHeaders", f[b]);
                            c.frozenStaticCols && jQuery(e).jqGrid("setFrozenColumns")
                        }
                        var e = this;
                        "string" == typeof b ? a.ajax(a.extend({
                            url: b,
                            dataType: "json",
                            success: function(b) {
                                l(a.jgrid.getAccessor(b, g && g.reader ? g.reader : "rows"))
                            }
                        }, g || {})) : l(b)
                    })
                }
            });
            a.jgrid.extend({
                setSubGrid: function() {
                    return this.each(function() {
                        var b, c;
                        c = a.jgrid.styleUI[this.p.styleUI || "jQueryUI"].subgrid;
                        if (this.p.subGridOptions =
                            a.extend({
                                plusicon: c.icon_plus,
                                minusicon: c.icon_minus,
                                openicon: c.icon_open,
                                expandOnLoad: !1,
                                delayOnLoad: 50,
                                selectOnExpand: !1,
                                selectOnCollapse: !1,
                                reloadOnExpand: !0
                            }, this.p.subGridOptions || {}), this.p.colNames.unshift(""), this.p.colModel.unshift({
                                name: "subgrid",
                                width: a.jgrid.cell_width ? this.p.subGridWidth + this.p.cellLayout : this.p.subGridWidth,
                                sortable: !1,
                                resizable: !1,
                                hidedlg: !0,
                                search: !1,
                                fixed: !0
                            }), b = this.p.subGridModel, b[0])
                            for (b[0].align = a.extend([], b[0].align || []), c = 0; c < b[0].name.length; c++) b[0].align[c] =
                                b[0].align[c] || "left"
                    })
                },
                addSubGridCell: function(b, c) {
                    var d, g, l, e = "";
                    return this.each(function() {
                        e = this.formatCol(b, c);
                        g = this.p.id;
                        d = this.p.subGridOptions.plusicon;
                        l = a.jgrid.styleUI[this.p.styleUI || "jQueryUI"].common
                    }), '<td role="gridcell" aria-describedby="' + g + '_subgrid" class="ui-sgcollapsed sgcollapsed" ' + e + "><a style='cursor:pointer;' class='ui-sghref'><span class='" + l.icon_base + " " + d + "'></span></a></td>"
                },
                addSubGrid: function(b, c) {
                    return this.each(function() {
                        var d = this;
                        if (d.grid) {
                            var g, l, e, n,
                                k, r = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].base,
                                q = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].common,
                                u = function(b, c, e) {
                                    c = a("<td align='" + d.p.subGridModel[0].align[e] + "'></td>").html(c);
                                    a(b).append(c)
                                },
                                z = function(b, c) {
                                    var e, f, g, m = a("<table class='" + r.rowTable + " ui-common-table'><tbody></tbody></table>"),
                                        l = a("<tr></tr>");
                                    for (f = 0; f < d.p.subGridModel[0].name.length; f++) e = a("<th class='" + r.headerBox + " ui-th-subgrid ui-th-column ui-th-" + d.p.direction + "'></th>"), a(e).html(d.p.subGridModel[0].name[f]), a(e).width(d.p.subGridModel[0].width[f]),
                                        a(l).append(e);
                                    a(m).append(l);
                                    b && (g = d.p.xmlReader.subgrid, a(g.root + " " + g.row, b).each(function() {
                                        if (l = a("<tr class='" + q.content + " ui-subtblcell'></tr>"), !0 === g.repeatitems) a(g.cell, this).each(function(b) {
                                            u(l, a(this).text() || "&#160;", b)
                                        });
                                        else {
                                            var b = d.p.subGridModel[0].mapping || d.p.subGridModel[0].name;
                                            if (b)
                                                for (f = 0; f < b.length; f++) u(l, a(b[f], this).text() || "&#160;", f)
                                        }
                                        a(m).append(l)
                                    }));
                                    e = a("table:first", d.grid.bDiv).attr("id") + "_";
                                    return a("#" + a.jgrid.jqID(e + c)).append(m), d.grid.hDiv.loading = !1, a("#load_" +
                                        a.jgrid.jqID(d.p.id)).hide(), !1
                                },
                                y = function(b, c) {
                                    var e, f, g, m, l, w = a("<table class='" + r.rowTable + " ui-common-table'><tbody></tbody></table>"),
                                        n = a("<tr></tr>");
                                    for (g = 0; g < d.p.subGridModel[0].name.length; g++) e = a("<th class='" + r.headerBox + " ui-th-subgrid ui-th-column ui-th-" + d.p.direction + "'></th>"), a(e).html(d.p.subGridModel[0].name[g]), a(e).width(d.p.subGridModel[0].width[g]), a(n).append(e);
                                    if (a(w).append(n), b && (m = d.p.jsonReader.subgrid, f = a.jgrid.getAccessor(b, m.root), void 0 !== f))
                                        for (g = 0; g < f.length; g++) {
                                            if (e =
                                                f[g], n = a("<tr class='" + q.content + " ui-subtblcell'></tr>"), !0 === m.repeatitems)
                                                for (m.cell && (e = e[m.cell]), l = 0; l < e.length; l++) u(n, e[l] || "&#160;", l);
                                            else {
                                                var k = d.p.subGridModel[0].mapping || d.p.subGridModel[0].name;
                                                if (k.length)
                                                    for (l = 0; l < k.length; l++) u(n, e[k[l]] || "&#160;", l)
                                            }
                                            a(w).append(n)
                                        }
                                    f = a("table:first", d.grid.bDiv).attr("id") + "_";
                                    return a("#" + a.jgrid.jqID(f + c)).append(w), d.grid.hDiv.loading = !1, a("#load_" + a.jgrid.jqID(d.p.id)).hide(), !1
                                },
                                p = function(b) {
                                    var c, e, f, g;
                                    if (c = a(b).attr("id"), e = {
                                            nd_: (new Date).getTime()
                                        },
                                        e[d.p.prmNames.subgridid] = c, !d.p.subGridModel[0]) return !1;
                                    if (d.p.subGridModel[0].params)
                                        for (g = 0; g < d.p.subGridModel[0].params.length; g++)
                                            for (f = 0; f < d.p.colModel.length; f++) d.p.colModel[f].name === d.p.subGridModel[0].params[g] && (e[d.p.colModel[f].name] = a("td:eq(" + f + ")", b).text().replace(/\&#160\;/gi, ""));
                                    if (!d.grid.hDiv.loading) switch (d.grid.hDiv.loading = !0, a("#load_" + a.jgrid.jqID(d.p.id)).show(), d.p.subgridtype || (d.p.subgridtype = d.p.datatype), a.isFunction(d.p.subgridtype) ? d.p.subgridtype.call(d, e) : d.p.subgridtype =
                                        d.p.subgridtype.toLowerCase(), d.p.subgridtype) {
                                        case "xml":
                                        case "json":
                                            a.ajax(a.extend({
                                                type: d.p.mtype,
                                                url: a.isFunction(d.p.subGridUrl) ? d.p.subGridUrl.call(d, e) : d.p.subGridUrl,
                                                dataType: d.p.subgridtype,
                                                data: a.isFunction(d.p.serializeSubGridData) ? d.p.serializeSubGridData.call(d, e) : e,
                                                complete: function(b) {
                                                    "xml" === d.p.subgridtype ? z(b.responseXML, c) : y(a.jgrid.parse(b.responseText), c)
                                                }
                                            }, a.jgrid.ajaxOptions, d.p.ajaxSubgridOptions || {}))
                                    }
                                    return !1
                                },
                                v = 0;
                            a.each(d.p.colModel, function() {
                                !0 !== this.hidden && "rn" !==
                                    this.name && "cb" !== this.name || v++
                            });
                            var D = d.rows.length,
                                A = 1;
                            for (void 0 !== c && 0 < c && (A = c, D = c + 1); D > A;) a(d.rows[A]).hasClass("jqgrow") && (d.p.scroll && a(d.rows[A].cells[b]).unbind("click"), a(d.rows[A].cells[b]).bind("click", function() {
                                var c = a(this).parent("tr")[0];
                                if (l = d.p.id, g = c.id, k = a("#" + l + "_" + g + "_expandedContent"), a(this).hasClass("sgcollapsed")) {
                                    if (n = a(d).triggerHandler("jqGridSubGridBeforeExpand", [l + "_" + g, g]), n = !1 === n || "stop" === n ? !1 : !0, n && a.isFunction(d.p.subGridBeforeExpand) && (n = d.p.subGridBeforeExpand.call(d,
                                            l + "_" + g, g)), !1 === n) return !1;
                                    !0 === d.p.subGridOptions.reloadOnExpand || !1 === d.p.subGridOptions.reloadOnExpand && !k.hasClass("ui-subgrid") ? (e = 1 <= b ? "<td colspan='" + b + "'>&#160;</td>" : "", a(c).after("<tr role='row' id='" + l + "_" + g + "_expandedContent' class='ui-subgrid ui-sg-expanded'>" + e + "<td class='" + q.content + " subgrid-cell'><span class='" + q.icon_base + " " + d.p.subGridOptions.openicon + "'></span></td><td colspan='" + parseInt(d.p.colNames.length - 1 - v, 10) + "' class='" + q.content + " subgrid-data'><div id=" + l + "_" + g + " class='tablediv'></div></td></tr>"),
                                        a(d).triggerHandler("jqGridSubGridRowExpanded", [l + "_" + g, g]), a.isFunction(d.p.subGridRowExpanded) ? d.p.subGridRowExpanded.call(d, l + "_" + g, g) : p(c)) : k.show().removeClass("ui-sg-collapsed").addClass("ui-sg-expanded");
                                    a(this).html("<a style='cursor:pointer;' class='ui-sghref'><span class='" + q.icon_base + " " + d.p.subGridOptions.minusicon + "'></span></a>").removeClass("sgcollapsed").addClass("sgexpanded");
                                    d.p.subGridOptions.selectOnExpand && a(d).jqGrid("setSelection", g)
                                } else if (a(this).hasClass("sgexpanded")) {
                                    if (n =
                                        a(d).triggerHandler("jqGridSubGridRowColapsed", [l + "_" + g, g]), n = !1 === n || "stop" === n ? !1 : !0, n && a.isFunction(d.p.subGridRowColapsed) && (n = d.p.subGridRowColapsed.call(d, l + "_" + g, g)), !1 === n) return !1;
                                    !0 === d.p.subGridOptions.reloadOnExpand ? k.remove(".ui-subgrid") : k.hasClass("ui-subgrid") && k.hide().addClass("ui-sg-collapsed").removeClass("ui-sg-expanded");
                                    a(this).html("<a style='cursor:pointer;' class='ui-sghref'><span class='" + q.icon_base + " " + d.p.subGridOptions.plusicon + "'></span></a>").removeClass("sgexpanded").addClass("sgcollapsed");
                                    d.p.subGridOptions.selectOnCollapse && a(d).jqGrid("setSelection", g)
                                }
                                return !1
                            })), A++;
                            !0 === d.p.subGridOptions.expandOnLoad && a(d.rows).filter(".jqgrow").each(function(b, c) {
                                a(c.cells[0]).click()
                            });
                            d.subGridXml = function(a, b) {
                                z(a, b)
                            };
                            d.subGridJson = function(a, b) {
                                y(a, b)
                            }
                        }
                    })
                },
                expandSubGridRow: function(b) {
                    return this.each(function() {
                        if ((this.grid || b) && !0 === this.p.subGrid) {
                            var c = a(this).jqGrid("getInd", b, !0);
                            c && (c = a("td.sgcollapsed", c)[0]) && a(c).trigger("click")
                        }
                    })
                },
                collapseSubGridRow: function(b) {
                    return this.each(function() {
                        if ((this.grid ||
                                b) && !0 === this.p.subGrid) {
                            var c = a(this).jqGrid("getInd", b, !0);
                            c && (c = a("td.sgexpanded", c)[0]) && a(c).trigger("click")
                        }
                    })
                },
                toggleSubGridRow: function(b) {
                    return this.each(function() {
                        if ((this.grid || b) && !0 === this.p.subGrid) {
                            var c = a(this).jqGrid("getInd", b, !0);
                            if (c) {
                                var d = a("td.sgcollapsed", c)[0];
                                d ? a(d).trigger("click") : (d = a("td.sgexpanded", c)[0], d && a(d).trigger("click"))
                            }
                        }
                    })
                }
            });
            a.jgrid.extend({
                setTreeNode: function(b, c) {
                    return this.each(function() {
                        var d = this;
                        if (d.grid && d.p.treeGrid)
                            for (var g, l, e, n, k, r, q, u,
                                    z = d.p.expColInd, y = d.p.treeReader.expanded_field, p = d.p.treeReader.leaf_field, v = d.p.treeReader.level_field, D = d.p.treeReader.icon_field, A = d.p.treeReader.loaded, x = a.jgrid.styleUI[d.p.styleUI || "jQueryUI"].common; c > b;) {
                                var H;
                                e = a.jgrid.stripPref(d.p.idPrefix, d.rows[b].id);
                                q = d.p.data[d.p._index[e]];
                                "nested" === d.p.treeGridModel && (q[p] || (g = parseInt(q[d.p.treeReader.left_field], 10), l = parseInt(q[d.p.treeReader.right_field], 10), q[p] = l === g + 1 ? "true" : "false", d.rows[b].cells[d.p._treeleafpos].innerHTML = q[p]));
                                e = parseInt(q[v],
                                    10);
                                0 === d.p.tree_root_level ? (n = e + 1, k = e) : (n = e, k = e - 1);
                                r = "<div class='tree-wrap tree-wrap-" + d.p.direction + "' style='width:" + 18 * n + "px;'>";
                                r += "<div style='" + ("rtl" === d.p.direction ? "right:" : "left:") + 18 * k + "px;' class='" + x.icon_base + " ";
                                void 0 !== q[A] && (q[A] = "true" === q[A] || !0 === q[A] ? !0 : !1);
                                "true" === q[p] || !0 === q[p] ? (r += (void 0 !== q[D] && "" !== q[D] ? q[D] : d.p.treeIcons.leaf) + " tree-leaf treeclick", q[p] = !0, u = "leaf") : (q[p] = !1, u = "");
                                q[y] = ("true" === q[y] || !0 === q[y] ? !0 : !1) && (q[A] || void 0 === q[A]);
                                r += !1 === q[y] ? !0 === q[p] ?
                                    "'" : d.p.treeIcons.plus + " tree-plus treeclick'" : !0 === q[p] ? "'" : d.p.treeIcons.minus + " tree-minus treeclick'";
                                r += "></div></div>";
                                a(d.rows[b].cells[z]).wrapInner("<span class='cell-wrapper" + u + "'></span>").prepend(r);
                                e !== parseInt(d.p.tree_root_level, 10) && (H = a(d).jqGrid("isVisibleNode", q), H || a(d.rows[b]).css("display", "none"));
                                a(d.rows[b].cells[z]).find("div.treeclick").bind("click", function(b) {
                                    b = a.jgrid.stripPref(d.p.idPrefix, a(b.target || b.srcElement, d.rows).closest("tr.jqgrow")[0].id);
                                    b = d.p._index[b];
                                    return d.p.data[b][p] || (d.p.data[b][y] ? (a(d).jqGrid("collapseRow", d.p.data[b]), a(d).jqGrid("collapseNode", d.p.data[b])) : (a(d).jqGrid("expandRow", d.p.data[b]), a(d).jqGrid("expandNode", d.p.data[b]))), !1
                                });
                                !0 === d.p.ExpandColClick && a(d.rows[b].cells[z]).find("span.cell-wrapper").css("cursor", "pointer").bind("click", function(b) {
                                    b = a.jgrid.stripPref(d.p.idPrefix, a(b.target || b.srcElement, d.rows).closest("tr.jqgrow")[0].id);
                                    var c = d.p._index[b];
                                    return d.p.data[c][p] || (d.p.data[c][y] ? (a(d).jqGrid("collapseRow",
                                        d.p.data[c]), a(d).jqGrid("collapseNode", d.p.data[c])) : (a(d).jqGrid("expandRow", d.p.data[c]), a(d).jqGrid("expandNode", d.p.data[c]))), a(d).jqGrid("setSelection", b), !1
                                });
                                b++
                            }
                    })
                },
                setTreeGrid: function() {
                    return this.each(function() {
                        var b, c, d, g = this,
                            l = 0,
                            e = !1,
                            n = [],
                            k = a.jgrid.styleUI[g.p.styleUI || "jQueryUI"].treegrid;
                        if (g.p.treeGrid) {
                            g.p.treedatatype || a.extend(g.p, {
                                treedatatype: g.p.datatype
                            });
                            g.p.loadonce && (g.p.treedatatype = "local");
                            g.p.subGrid = !1;
                            g.p.altRows = !1;
                            g.p.pgbuttons = !1;
                            g.p.pginput = !1;
                            g.p.gridview = !0;
                            null === g.p.rowTotal && (g.p.rowNum = 1E4);
                            g.p.multiselect = !1;
                            g.p.rowList = [];
                            g.p.expColInd = 0;
                            b = k.icon_plus;
                            "jQueryUI" === g.p.styleUI && (b += "rtl" === g.p.direction ? "w" : "e");
                            g.p.treeIcons = a.extend({
                                plus: b,
                                minus: k.icon_minus,
                                leaf: k.icon_leaf
                            }, g.p.treeIcons || {});
                            "nested" === g.p.treeGridModel ? g.p.treeReader = a.extend({
                                level_field: "level",
                                left_field: "lft",
                                right_field: "rgt",
                                leaf_field: "isLeaf",
                                expanded_field: "expanded",
                                loaded: "loaded",
                                icon_field: "icon"
                            }, g.p.treeReader) : "adjacency" === g.p.treeGridModel && (g.p.treeReader =
                                a.extend({
                                    level_field: "level",
                                    parent_id_field: "parent",
                                    leaf_field: "isLeaf",
                                    expanded_field: "expanded",
                                    loaded: "loaded",
                                    icon_field: "icon"
                                }, g.p.treeReader));
                            for (c in g.p.colModel)
                                if (g.p.colModel.hasOwnProperty(c))
                                    for (d in b = g.p.colModel[c].name, b !== g.p.ExpandColumn || e || (e = !0, g.p.expColInd = l), l++, g.p.treeReader) g.p.treeReader.hasOwnProperty(d) && g.p.treeReader[d] === b && n.push(b);
                            a.each(g.p.treeReader, function(b, c) {
                                c && -1 === a.inArray(c, n) && ("leaf_field" === b && (g.p._treeleafpos = l), l++, g.p.colNames.push(c), g.p.colModel.push({
                                    name: c,
                                    width: 1,
                                    hidden: !0,
                                    sortable: !1,
                                    resizable: !1,
                                    hidedlg: !0,
                                    editable: !0,
                                    search: !1
                                }))
                            })
                        }
                    })
                },
                expandRow: function(b) {
                    this.each(function() {
                        var c = this;
                        if (c.grid && c.p.treeGrid) {
                            var d = a(c).jqGrid("getNodeChildren", b),
                                g = c.p.treeReader.expanded_field,
                                l = b[c.p.localReader.id];
                            !1 !== (a.isFunction(c.p.beforeExpandTreeGridRow) ? c.p.beforeExpandTreeGridRow.call(c, l, b, d) : !0) && (a(d).each(function() {
                                var b = c.p.idPrefix + a.jgrid.getAccessor(this, c.p.localReader.id);
                                a(a(c).jqGrid("getGridRowById", b)).css("display", "");
                                this[g] &&
                                    a(c).jqGrid("expandRow", this)
                            }), a.isFunction(c.p.afterExpandTreeGridRow) && c.p.afterExpandTreeGridRow.call(c, l, b, d))
                        }
                    })
                },
                collapseRow: function(b) {
                    this.each(function() {
                        var c = this;
                        if (c.grid && c.p.treeGrid) {
                            var d = a(c).jqGrid("getNodeChildren", b),
                                g = c.p.treeReader.expanded_field,
                                l = b[c.p.localReader.id];
                            !1 !== (a.isFunction(c.p.beforeCollapseTreeGridRow) ? c.p.beforeCollapseTreeGridRow.call(c, l, b, d) : !0) && (a(d).each(function() {
                                var b = c.p.idPrefix + a.jgrid.getAccessor(this, c.p.localReader.id);
                                a(a(c).jqGrid("getGridRowById",
                                    b)).css("display", "none");
                                this[g] && a(c).jqGrid("collapseRow", this)
                            }), a.isFunction(c.p.afterCollapseTreeGridRow) && c.p.afterCollapseTreeGridRow.call(c, l, b, d))
                        }
                    })
                },
                getRootNodes: function(b) {
                    var c = [];
                    return this.each(function() {
                        var d, g, l, e = this;
                        if (e.grid && e.p.treeGrid) switch ("boolean" != typeof b && (b = !1), l = b ? a(e).jqGrid("getRowData", null, !0) : e.p.data, e.p.treeGridModel) {
                            case "nested":
                                d = e.p.treeReader.level_field;
                                a(l).each(function() {
                                    parseInt(this[d], 10) === parseInt(e.p.tree_root_level, 10) && c.push(b ? e.p.data[e.p._index[this[e.p.keyName]]] :
                                        this)
                                });
                                break;
                            case "adjacency":
                                g = e.p.treeReader.parent_id_field, a(l).each(function() {
                                    null !== this[g] && "null" !== String(this[g]).toLowerCase() || c.push(b ? e.p.data[e.p._index[this[e.p.keyName]]] : this)
                                })
                        }
                    }), c
                },
                getNodeDepth: function(b) {
                    var c = null;
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) switch (this.p.treeGridModel) {
                            case "nested":
                                c = parseInt(b[this.p.treeReader.level_field], 10) - parseInt(this.p.tree_root_level, 10);
                                break;
                            case "adjacency":
                                c = a(this).jqGrid("getNodeAncestors", b).length
                        }
                    }), c
                },
                getNodeParent: function(b) {
                    var c =
                        null;
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) switch (this.p.treeGridModel) {
                            case "nested":
                                var d = this.p.treeReader.left_field,
                                    g = this.p.treeReader.right_field,
                                    l = this.p.treeReader.level_field,
                                    e = parseInt(b[d], 10),
                                    n = parseInt(b[g], 10),
                                    k = parseInt(b[l], 10);
                                a(this.p.data).each(function() {
                                    return parseInt(this[l], 10) === k - 1 && parseInt(this[d], 10) < e && parseInt(this[g], 10) > n ? (c = this, !1) : void 0
                                });
                                break;
                            case "adjacency":
                                for (var r = this.p.treeReader.parent_id_field, q = this.p.localReader.id, u = this.p._index[b[q]]; u--;)
                                    if (this.p.data[u][q] ===
                                        a.jgrid.stripPref(this.p.idPrefix, b[r])) {
                                        c = this.p.data[u];
                                        break
                                    }
                        }
                    }), c
                },
                getNodeChildren: function(b) {
                    var c = [];
                    return this.each(function() {
                        var d = this;
                        if (d.grid && d.p.treeGrid) switch (d.p.treeGridModel) {
                            case "nested":
                                var g = d.p.treeReader.left_field,
                                    l = d.p.treeReader.right_field,
                                    e = d.p.treeReader.level_field,
                                    n = parseInt(b[g], 10),
                                    k = parseInt(b[l], 10),
                                    r = parseInt(b[e], 10);
                                a(this.p.data).each(function() {
                                    parseInt(this[e], 10) === r + 1 && parseInt(this[g], 10) > n && parseInt(this[l], 10) < k && c.push(this)
                                });
                                break;
                            case "adjacency":
                                var q =
                                    d.p.treeReader.parent_id_field,
                                    u = d.p.localReader.id;
                                a(this.p.data).each(function() {
                                    this[q] == a.jgrid.stripPref(d.p.idPrefix, b[u]) && c.push(this)
                                })
                        }
                    }), c
                },
                getFullTreeNode: function(b, c) {
                    var d = [];
                    return this.each(function() {
                        var g, l = this,
                            e = l.p.treeReader.expanded_field;
                        if (l.grid && l.p.treeGrid) switch ((null == c || "boolean" != typeof c) && (c = !1), l.p.treeGridModel) {
                            case "nested":
                                var n = l.p.treeReader.left_field,
                                    k = l.p.treeReader.right_field,
                                    r = l.p.treeReader.level_field,
                                    q = parseInt(b[n], 10),
                                    u = parseInt(b[k], 10),
                                    z = parseInt(b[r],
                                        10);
                                a(this.p.data).each(function() {
                                    parseInt(this[r], 10) >= z && parseInt(this[n], 10) >= q && parseInt(this[n], 10) <= u && (c && (this[e] = !0), d.push(this))
                                });
                                break;
                            case "adjacency":
                                if (b) {
                                    d.push(b);
                                    var y = l.p.treeReader.parent_id_field,
                                        p = l.p.localReader.id;
                                    a(this.p.data).each(function(b) {
                                        g = d.length;
                                        for (b = 0; g > b; b++)
                                            if (a.jgrid.stripPref(l.p.idPrefix, d[b][p]) === this[y]) {
                                                c && (this[e] = !0);
                                                d.push(this);
                                                break
                                            }
                                    })
                                }
                        }
                    }), d
                },
                getNodeAncestors: function(b) {
                    var c = [];
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid)
                            for (var d =
                                    a(this).jqGrid("getNodeParent", b); d;) c.push(d), d = a(this).jqGrid("getNodeParent", d)
                    }), c
                },
                isVisibleNode: function(b) {
                    var c = !0;
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var d = a(this).jqGrid("getNodeAncestors", b),
                                g = this.p.treeReader.expanded_field;
                            a(d).each(function() {
                                return c = c && this[g], c ? void 0 : !1
                            })
                        }
                    }), c
                },
                isNodeLoaded: function(b) {
                    var c;
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var d = this.p.treeReader.leaf_field,
                                g = this.p.treeReader.loaded;
                            c = void 0 !== b ? void 0 !== b[g] ? b[g] :
                                b[d] || 0 < a(this).jqGrid("getNodeChildren", b).length ? !0 : !1 : !1
                        }
                    }), c
                },
                reloadNode: function(b) {
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var c = this.p.localReader.id,
                                d = this.p.selrow;
                            a(this).jqGrid("delChildren", b[c]);
                            var c = this.p.treeReader.expanded_field,
                                g = this.p.treeReader.parent_id_field,
                                l = this.p.treeReader.loaded,
                                e = this.p.treeReader.level_field,
                                k = this.p.treeReader.left_field,
                                p = this.p.treeReader.right_field,
                                r = a.jgrid.getAccessor(b, this.p.localReader.id),
                                q = a("#" + r, this.grid.bDiv)[0];
                            b[c] = !0;
                            a("div.treeclick", q).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus");
                            this.p.treeANode = q.rowIndex;
                            this.p.datatype = this.p.treedatatype;
                            "nested" === this.p.treeGridModel ? a(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: r,
                                    n_left: b[k],
                                    n_right: b[p],
                                    n_level: b[e]
                                }
                            }) : a(this).jqGrid("setGridParam", {
                                postData: {
                                    nodeid: r,
                                    parentid: b[g],
                                    n_level: b[e]
                                }
                            });
                            a(this).trigger("reloadGrid");
                            b[l] = !0;
                            "nested" === this.p.treeGridModel ? a(this).jqGrid("setGridParam", {
                                selrow: d,
                                postData: {
                                    nodeid: "",
                                    n_left: "",
                                    n_right: "",
                                    n_level: ""
                                }
                            }) : a(this).jqGrid("setGridParam", {
                                selrow: d,
                                postData: {
                                    nodeid: "",
                                    parentid: "",
                                    n_level: ""
                                }
                            })
                        }
                    })
                },
                expandNode: function(b) {
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var c = this.p.treeReader.expanded_field,
                                d = this.p.treeReader.parent_id_field,
                                g = this.p.treeReader.loaded,
                                l = this.p.treeReader.level_field,
                                e = this.p.treeReader.left_field,
                                k = this.p.treeReader.right_field;
                            if (!b[c]) {
                                var p = a.jgrid.getAccessor(b, this.p.localReader.id),
                                    r = a("#" + this.p.idPrefix + a.jgrid.jqID(p),
                                        this.grid.bDiv)[0],
                                    q = this.p._index[p];
                                !1 !== (a.isFunction(this.p.beforeExpandTreeGridNode) ? this.p.beforeExpandTreeGridNode.call(this, p, b) : !0) && (a(this).jqGrid("isNodeLoaded", this.p.data[q]) ? (b[c] = !0, a("div.treeclick", r).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus")) : this.grid.hDiv.loading || (b[c] = !0, a("div.treeclick", r).removeClass(this.p.treeIcons.plus + " tree-plus").addClass(this.p.treeIcons.minus + " tree-minus"), this.p.treeANode = r.rowIndex, this.p.datatype =
                                        this.p.treedatatype, "nested" === this.p.treeGridModel ? a(this).jqGrid("setGridParam", {
                                            postData: {
                                                nodeid: p,
                                                n_left: b[e],
                                                n_right: b[k],
                                                n_level: b[l]
                                            }
                                        }) : a(this).jqGrid("setGridParam", {
                                            postData: {
                                                nodeid: p,
                                                parentid: b[d],
                                                n_level: b[l]
                                            }
                                        }), a(this).trigger("reloadGrid"), b[g] = !0, "nested" === this.p.treeGridModel ? a(this).jqGrid("setGridParam", {
                                            postData: {
                                                nodeid: "",
                                                n_left: "",
                                                n_right: "",
                                                n_level: ""
                                            }
                                        }) : a(this).jqGrid("setGridParam", {
                                            postData: {
                                                nodeid: "",
                                                parentid: "",
                                                n_level: ""
                                            }
                                        })), a.isFunction(this.p.afterExpandTreeGridNode) &&
                                    this.p.afterExpandTreeGridNode.call(this, p, b))
                            }
                        }
                    })
                },
                collapseNode: function(b) {
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var c = this.p.treeReader.expanded_field;
                            if (b[c]) {
                                var d = a.jgrid.getAccessor(b, this.p.localReader.id),
                                    g = a.isFunction(this.p.beforeCollapseTreeGridNode) ? this.p.beforeCollapseTreeGridNode.call(this, d, b) : !0,
                                    l = a("#" + this.p.idPrefix + a.jgrid.jqID(d), this.grid.bDiv)[0];
                                if (b[c] = !1, !1 !== g) a("div.treeclick", l).removeClass(this.p.treeIcons.minus + " tree-minus").addClass(this.p.treeIcons.plus +
                                    " tree-plus"), a.isFunction(this.p.afterCollapseTreeGridNode) && this.p.afterCollapseTreeGridNode.call(this, d, b)
                            }
                        }
                    })
                },
                SortTree: function(b, c, d, g) {
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid) {
                            var l, e, k, p, r = [],
                                q = this;
                            l = a(this).jqGrid("getRootNodes", q.p.search);
                            l = a.jgrid.from.call(this, l);
                            l.orderBy(b, c, d, g);
                            p = l.select();
                            l = 0;
                            for (e = p.length; e > l; l++) k = p[l], r.push(k), a(this).jqGrid("collectChildrenSortTree", r, k, b, c, d, g);
                            a.each(r, function(b) {
                                var c = a.jgrid.getAccessor(this, q.p.localReader.id);
                                a("#" +
                                    a.jgrid.jqID(q.p.id) + " tbody tr:eq(" + b + ")").after(a("tr#" + a.jgrid.jqID(c), q.grid.bDiv))
                            });
                            r = p = l = null
                        }
                    })
                },
                searchTree: function(b) {
                    var c, d, g, l = b.length || 0,
                        e = [],
                        k = [],
                        p = [];
                    return this.each(function() {
                        if (this.grid && this.p.treeGrid && l)
                            for (d = this.p.localReader.id, c = 0; l > c; c++) e = a(this).jqGrid("getNodeAncestors", b[c]), e.length || e.push(b[c]), g = e[e.length - 1][d], -1 === a.inArray(g, k) && (k.push(g), e = a(this).jqGrid("getFullTreeNode", e[e.length - 1], !0), p = p.concat(e))
                    }), p
                },
                collectChildrenSortTree: function(b, c, d, g, l, e) {
                    return this.each(function() {
                        if (this.grid &&
                            this.p.treeGrid) {
                            var k, p, r, q;
                            k = a(this).jqGrid("getNodeChildren", c);
                            k = a.jgrid.from.call(this, k);
                            k.orderBy(d, g, l, e);
                            q = k.select();
                            k = 0;
                            for (p = q.length; p > k; k++) r = q[k], b.push(r), a(this).jqGrid("collectChildrenSortTree", b, r, d, g, l, e)
                        }
                    })
                },
                setTreeRow: function(b, c) {
                    var d = !1;
                    return this.each(function() {
                        this.grid && this.p.treeGrid && (d = a(this).jqGrid("setRowData", b, c))
                    }), d
                },
                delTreeNode: function(b) {
                    return this.each(function() {
                        var c, d, g, l, e, k = this.p.localReader.id,
                            p = this.p.treeReader.left_field,
                            r = this.p.treeReader.right_field;
                        if (this.grid && this.p.treeGrid && (c = this.p._index[b], void 0 !== c)) {
                            d = parseInt(this.p.data[c][r], 10);
                            g = d - parseInt(this.p.data[c][p], 10) + 1;
                            var q = a(this).jqGrid("getFullTreeNode", this.p.data[c]);
                            if (0 < q.length)
                                for (c = 0; c < q.length; c++) a(this).jqGrid("delRowData", q[c][k]);
                            if ("nested" === this.p.treeGridModel) {
                                if (l = a.jgrid.from.call(this, this.p.data).greater(p, d, {
                                        stype: "integer"
                                    }).select(), l.length)
                                    for (e in l) l.hasOwnProperty(e) && (l[e][p] = parseInt(l[e][p], 10) - g);
                                if (l = a.jgrid.from.call(this, this.p.data).greater(r,
                                        d, {
                                            stype: "integer"
                                        }).select(), l.length)
                                    for (e in l) l.hasOwnProperty(e) && (l[e][r] = parseInt(l[e][r], 10) - g)
                            }
                        }
                    })
                },
                delChildren: function(b) {
                    return this.each(function() {
                        var c, d, g, l, e = this.p.localReader.id,
                            k = this.p.treeReader.left_field,
                            p = this.p.treeReader.right_field;
                        if (this.grid && this.p.treeGrid) {
                            var r = this.p._index[b];
                            if (void 0 !== r) {
                                c = parseInt(this.p.data[r][p], 10);
                                d = c - parseInt(this.p.data[r][k], 10) + 1;
                                r = a(this).jqGrid("getFullTreeNode", this.p.data[r]);
                                if (0 < r.length)
                                    for (var q = 0; q < r.length; q++) r[q][e] !==
                                        b && a(this).jqGrid("delRowData", r[q][e]);
                                if ("nested" === this.p.treeGridModel) {
                                    if (g = a.jgrid.from(this.p.data).greater(k, c, {
                                            stype: "integer"
                                        }).select(), g.length)
                                        for (l in g) g.hasOwnProperty(l) && (g[l][k] = parseInt(g[l][k], 10) - d);
                                    if (g = a.jgrid.from(this.p.data).greater(p, c, {
                                            stype: "integer"
                                        }).select(), g.length)
                                        for (l in g) g.hasOwnProperty(l) && (g[l][p] = parseInt(g[l][p], 10) - d)
                                }
                            }
                        }
                    })
                },
                addChildNode: function(b, c, d, g) {
                    var l = this[0];
                    if (d) {
                        var e, k, p, r, q, u, z, y = l.p.treeReader.expanded_field,
                            v = l.p.treeReader.leaf_field,
                            C = l.p.treeReader.level_field,
                            D = l.p.treeReader.parent_id_field,
                            A = l.p.treeReader.left_field,
                            x = l.p.treeReader.right_field,
                            H = l.p.treeReader.loaded;
                        e = 0;
                        var E = c;
                        if (void 0 === g && (g = !1), null == b) {
                            if (q = l.p.data.length - 1, 0 <= q)
                                for (; 0 <= q;) e = Math.max(e, parseInt(l.p.data[q][l.p.localReader.id], 10)), q--;
                            b = e + 1
                        }
                        var F = a(l).jqGrid("getInd", c);
                        if (u = !1, void 0 === c || null === c || "" === c) E = c = null, e = "last", r = l.p.tree_root_level, q = l.p.data.length + 1;
                        else {
                            e = "after";
                            k = l.p._index[c];
                            p = l.p.data[k];
                            c = p[l.p.localReader.id];
                            r = parseInt(p[C],
                                10) + 1;
                            var L = a(l).jqGrid("getFullTreeNode", p);
                            L.length ? (q = L[L.length - 1][l.p.localReader.id], E = q, q = a(l).jqGrid("getInd", E) + 1) : q = a(l).jqGrid("getInd", c) + 1;
                            p[v] && (u = !0, p[y] = !0, a(l.rows[F]).find("span.cell-wrapperleaf").removeClass("cell-wrapperleaf").addClass("cell-wrapper").end().find("div.tree-leaf").removeClass(l.p.treeIcons.leaf + " tree-leaf").addClass(l.p.treeIcons.minus + " tree-minus"), l.p.data[k][v] = !1, p[H] = !0)
                        }
                        if (k = q + 1, void 0 === d[y] && (d[y] = !1), void 0 === d[H] && (d[H] = !1), d[C] = r, void 0 === d[v] && (d[v] = !0), "adjacency" === l.p.treeGridModel && (d[D] = c), "nested" === l.p.treeGridModel) {
                            var J, G, I;
                            if (null !== c) {
                                if (z = parseInt(p[x], 10), J = a.jgrid.from.call(l, l.p.data), J = J.greaterOrEquals(x, z, {
                                        stype: "integer"
                                    }), G = J.select(), G.length)
                                    for (I in G) G.hasOwnProperty(I) && (G[I][A] = G[I][A] > z ? parseInt(G[I][A], 10) + 2 : G[I][A], G[I][x] = G[I][x] >= z ? parseInt(G[I][x], 10) + 2 : G[I][x]);
                                d[A] = z;
                                d[x] = z + 1
                            } else {
                                if (z = parseInt(a(l).jqGrid("getCol", x, !1, "max"), 10), G = a.jgrid.from.call(l, l.p.data).greater(A, z, {
                                        stype: "integer"
                                    }).select(), G.length)
                                    for (I in G) G.hasOwnProperty(I) &&
                                        (G[I][A] = parseInt(G[I][A], 10) + 2);
                                if (G = a.jgrid.from.call(l, l.p.data).greater(x, z, {
                                        stype: "integer"
                                    }).select(), G.length)
                                    for (I in G) G.hasOwnProperty(I) && (G[I][x] = parseInt(G[I][x], 10) + 2);
                                d[A] = z + 1;
                                d[x] = z + 2
                            }
                        }(null === c || a(l).jqGrid("isNodeLoaded", p) || u) && (a(l).jqGrid("addRowData", b, d, e, E), a(l).jqGrid("setTreeNode", q, k));
                        p && !p[y] && g && a(l.rows[F]).find("div.treeclick").click()
                    }
                }
            });
            a.fn.jqDrag = function(a) {
                return O(this, a, "d")
            };
            a.fn.jqResize = function(a, b) {
                return O(this, a, "r", b)
            };
            a.jqDnR = {
                dnr: {},
                e: 0,
                drag: function(a) {
                    return "d" ==
                        F.k ? M.css({
                            left: F.X + a.pageX - F.pX,
                            top: F.Y + a.pageY - F.pY
                        }) : (M.css({
                            width: Math.max(a.pageX - F.pX + F.W, 0),
                            height: Math.max(a.pageY - F.pY + F.H, 0)
                        }), S && I.css({
                            width: Math.max(a.pageX - S.pX + S.W, 0),
                            height: Math.max(a.pageY - S.pY + S.H, 0)
                        })), !1
                },
                stop: function() {
                    a(document).unbind("mousemove", v.drag).unbind("mouseup", v.stop)
                }
            };
            var v = a.jqDnR,
                F = v.dnr,
                M = v.e,
                I, S, O = function(b, c, d, g) {
                    return b.each(function() {
                        c = c ? a(c, b) : b;
                        c.bind("mousedown", {
                            e: b,
                            k: d
                        }, function(b) {
                            var c = b.data,
                                d = {};
                            if (M = c.e, I = g ? a(g) : !1, "relative" != M.css("position")) try {
                                M.position(d)
                            } catch (f) {}
                            if (F = {
                                    X: d.left || P("left") || 0,
                                    Y: d.top || P("top") || 0,
                                    W: P("width") || M[0].scrollWidth || 0,
                                    H: P("height") || M[0].scrollHeight || 0,
                                    pX: b.pageX,
                                    pY: b.pageY,
                                    k: c.k
                                }, S = I && "d" != c.k ? {
                                    X: d.left || V("left") || 0,
                                    Y: d.top || V("top") || 0,
                                    W: I[0].offsetWidth || V("width") || 0,
                                    H: I[0].offsetHeight || V("height") || 0,
                                    pX: b.pageX,
                                    pY: b.pageY,
                                    k: c.k
                                } : !1, a("input.hasDatepicker", M[0])[0]) try {
                                a("input.hasDatepicker", M[0]).datepicker("hide")
                            } catch (f) {}
                            return a(document).mousemove(a.jqDnR.drag).mouseup(a.jqDnR.stop), !1
                        })
                    })
                },
                P = function(a) {
                    return parseInt(M.css(a),
                        10) || !1
                },
                V = function(a) {
                    return parseInt(I.css(a), 10) || !1
                };
            a.fn.tinyDraggable = function(b) {
                var c = a.extend({
                    handle: 0,
                    exclude: 0
                }, b);
                return this.each(function() {
                    var b, d, f = a(this);
                    (c.handle ? a(c.handle, f) : f).on({
                        mousedown: function(e) {
                            if (!c.exclude || !~a.inArray(e.target, a(c.exclude, f))) {
                                e.preventDefault();
                                var g = f.offset();
                                b = e.pageX - g.left;
                                d = e.pageY - g.top;
                                a(document).on("mousemove.drag", function(a) {
                                    f.offset({
                                        top: a.pageY - d,
                                        left: a.pageX - b
                                    })
                                })
                            }
                        },
                        mouseup: function() {
                            a(document).off("mousemove.drag")
                        }
                    })
                })
            };
            a.fn.jqm =
                function(b) {
                    var c = {
                        overlay: 50,
                        closeoverlay: !0,
                        overlayClass: "jqmOverlay",
                        closeClass: "jqmClose",
                        trigger: ".jqModal",
                        ajax: W,
                        ajaxText: "",
                        target: W,
                        modal: W,
                        toTop: W,
                        onShow: W,
                        onHide: W,
                        onLoad: W
                    };
                    return this.each(function() {
                        return this._jqm ? fa[this._jqm].c = a.extend({}, fa[this._jqm].c, b) : (ma++, this._jqm = ma, fa[ma] = {
                            c: a.extend(c, a.jqm.params, b),
                            a: W,
                            w: a(this).addClass("jqmID" + ma),
                            s: ma
                        }, void(c.trigger && a(this).jqmAddTrigger(c.trigger)))
                    })
                };
            a.fn.jqmAddClose = function(a) {
                return g(this, a, "jqmHide")
            };
            a.fn.jqmAddTrigger =
                function(a) {
                    return g(this, a, "jqmShow")
                };
            a.fn.jqmShow = function(b) {
                return this.each(function() {
                    a.jqm.open(this._jqm, b)
                })
            };
            a.fn.jqmHide = function(b) {
                return this.each(function() {
                    a.jqm.close(this._jqm, b)
                })
            };
            a.jqm = {
                hash: {},
                open: function(d, g) {
                    var h = fa[d],
                        k = h.c,
                        l = "." + k.closeClass,
                        e = parseInt(h.w.css("z-index")),
                        e = 0 < e ? e : 3E3,
                        n = a("<div></div>").css({
                            height: "100%",
                            width: "100%",
                            position: "fixed",
                            left: 0,
                            top: 0,
                            "z-index": e - 1,
                            opacity: k.overlay / 100
                        });
                    if (h.a) return W;
                    (h.t = g, h.a = !0, h.w.css("z-index", e), k.modal ? (aa[0] ||
                        setTimeout(function() {
                            new c("bind")
                        }, 1), aa.push(d)) : 0 < k.overlay ? k.closeoverlay && h.w.jqmAddClose(n) : n = W, h.o = n ? n.addClass(k.overlayClass).prependTo("body") : W, k.ajax) ? (e = k.target || h.w, n = k.ajax, e = "string" == typeof e ? a(e, h.w) : a(e), n = "@" === n.substr(0, 1) ? a(g).attr(n.substring(1)) : n, e.html(k.ajaxText).load(n, function() {
                        k.onLoad && k.onLoad.call(this, h);
                        l && h.w.jqmAddClose(a(l, h.w));
                        b(h)
                    })) : l && h.w.jqmAddClose(a(l, h.w));
                    return k.toTop && h.o && h.w.before('<span id="jqmP' + h.w[0]._jqm + '"></span>').insertAfter(h.o),
                        k.onShow ? k.onShow(h) : h.w.show(), b(h), W
                },
                close: function(b) {
                    b = fa[b];
                    return b.a ? (b.a = W, aa[0] && (aa.pop(), aa[0] || new c("unbind")), b.c.toTop && b.o && a("#jqmP" + b.w[0]._jqm).after(b.w).remove(), b.c.onHide ? b.c.onHide(b) : (b.w.hide(), b.o && b.o.remove()), W) : W
                },
                params: {}
            };
            var ma = 0,
                fa = a.jqm.hash,
                aa = [],
                W = !1,
                b = function(a) {
                    void 0 === a.c.focusField && (a.c.focusField = 0);
                    0 <= a.c.focusField && P(a)
                },
                P = function(b) {
                    try {
                        a(":input:visible", b.w)[parseInt(b.c.focusField, 10)].focus()
                    } catch (c) {}
                },
                c = function(b) {
                    a(document)[b]("keypress",
                        d)[b]("keydown", d)[b]("mousedown", d)
                },
                d = function(b) {
                    var c = fa[aa[aa.length - 1]],
                        d = !a(b.target).parents(".jqmID" + c.s)[0];
                    return d && (a(".jqmID" + c.s).each(function() {
                        var c = a(this),
                            g = c.offset();
                        return g.top <= b.pageY && b.pageY <= g.top + c.height() && g.left <= b.pageX && b.pageX <= g.left + c.width() ? (d = !1, !1) : void 0
                    }), P(c)), !d
                },
                g = function(b, c, d) {
                    return b.each(function() {
                        var b = this._jqm;
                        a(c).each(function() {
                            this[d] || (this[d] = [], a(this).click(function() {
                                for (var a in {
                                        jqmShow: 1,
                                        jqmHide: 1
                                    })
                                    for (var b in this[a]) fa[this[a][b]] &&
                                        fa[this[a][b]].w[a](this);
                                return W
                            }));
                            this[d].push(b)
                        })
                    })
                };
            a.fmatter = {};
            a.extend(a.fmatter, {
                isBoolean: function(a) {
                    return "boolean" == typeof a
                },
                isObject: function(b) {
                    return b && ("object" == typeof b || a.isFunction(b)) || !1
                },
                isString: function(a) {
                    return "string" == typeof a
                },
                isNumber: function(a) {
                    return "number" == typeof a && isFinite(a)
                },
                isValue: function(a) {
                    return this.isObject(a) || this.isString(a) || this.isNumber(a) || this.isBoolean(a)
                },
                isEmpty: function(b) {
                    return !this.isString(b) && this.isValue(b) ? !1 : this.isValue(b) ?
                        (b = a.trim(b).replace(/\&nbsp\;/gi, "").replace(/\&#160\;/gi, ""), "" === b) : !0
                }
            });
            a.fn.fmatter = function(b, c, d, g, l) {
                var e = c;
                d = a.extend({}, a.jgrid.getRegional(this, "formatter"), d);
                try {
                    e = a.fn.fmatter[b].call(this, c, d, g, l)
                } catch (k) {}
                return e
            };
            a.fmatter.util = {
                NumberFormat: function(b, c) {
                    if (a.fmatter.isNumber(b) || (b *= 1), a.fmatter.isNumber(b)) {
                        var d, g = 0 > b,
                            l = String(b),
                            e = c.decimalSeparator || ".";
                        if (a.fmatter.isNumber(c.decimalPlaces)) {
                            var k = c.decimalPlaces;
                            d = Math.pow(10, k);
                            if (l = String(Math.round(b * d) / d), d = l.lastIndexOf("."),
                                0 < k)
                                for (0 > d ? (l += e, d = l.length - 1) : "." !== e && (l = l.replace(".", e)); l.length - 1 - d < k;) l += "0"
                        }
                        if (c.thousandsSeparator) {
                            k = c.thousandsSeparator;
                            d = l.lastIndexOf(e);
                            d = -1 < d ? d : l.length;
                            for (var p = l.substring(d), r = -1, e = d; 0 < e; e--) r++, 0 === r % 3 && e !== d && (!g || 1 < e) && (p = k + p), p = l.charAt(e - 1) + p;
                            l = p
                        }
                        return l = c.prefix ? c.prefix + l : l, c.suffix ? l + c.suffix : l
                    }
                    return b
                }
            };
            a.fn.fmatter.defaultFormat = function(b, c) {
                return a.fmatter.isValue(b) && "" !== b ? b : c.defaultValue || "&#160;"
            };
            a.fn.fmatter.email = function(b, c) {
                return a.fmatter.isEmpty(b) ?
                    a.fn.fmatter.defaultFormat(b, c) : '<a href="mailto:' + b + '">' + b + "</a>"
            };
            a.fn.fmatter.checkbox = function(b, c) {
                var d, g = a.extend({}, c.checkbox);
                void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (g = a.extend({}, g, c.colModel.formatoptions));
                d = !0 === g.disabled ? 'disabled="disabled"' : "";
                (a.fmatter.isEmpty(b) || void 0 === b) && (b = a.fn.fmatter.defaultFormat(b, g));
                b = String(b);
                b = (b + "").toLowerCase();
                return '<input type="checkbox" ' + (0 > b.search(/(false|f|0|no|n|off|undefined)/i) ? " checked='checked' " : "") + ' value="' +
                    b + '" offval="no" ' + d + "/>"
            };
            a.fn.fmatter.link = function(b, c) {
                var d = {
                        target: c.target
                    },
                    g = "";
                return void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (d = a.extend({}, d, c.colModel.formatoptions)), d.target && (g = "target=" + d.target), a.fmatter.isEmpty(b) ? a.fn.fmatter.defaultFormat(b, c) : "<a " + g + ' href="' + b + '">' + b + "</a>"
            };
            a.fn.fmatter.showlink = function(b, c) {
                var d, g = {
                        baseLinkUrl: c.baseLinkUrl,
                        showAction: c.showAction,
                        addParam: c.addParam || "",
                        target: c.target,
                        idName: c.idName
                    },
                    l = "";
                return void 0 !== c.colModel &&
                    void 0 !== c.colModel.formatoptions && (g = a.extend({}, g, c.colModel.formatoptions)), g.target && (l = "target=" + g.target), d = g.baseLinkUrl + g.showAction + "?" + g.idName + "=" + c.rowId + g.addParam, a.fmatter.isString(b) || a.fmatter.isNumber(b) ? "<a " + l + ' href="' + d + '">' + b + "</a>" : a.fn.fmatter.defaultFormat(b, c)
            };
            a.fn.fmatter.integer = function(b, c) {
                var d = a.extend({}, c.integer);
                return void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (d = a.extend({}, d, c.colModel.formatoptions)), a.fmatter.isEmpty(b) ? d.defaultValue : a.fmatter.util.NumberFormat(b,
                    d)
            };
            a.fn.fmatter.number = function(b, c) {
                var d = a.extend({}, c.number);
                return void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (d = a.extend({}, d, c.colModel.formatoptions)), a.fmatter.isEmpty(b) ? d.defaultValue : a.fmatter.util.NumberFormat(b, d)
            };
            a.fn.fmatter.currency = function(b, c) {
                var d = a.extend({}, c.currency);
                return void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (d = a.extend({}, d, c.colModel.formatoptions)), a.fmatter.isEmpty(b) ? d.defaultValue : a.fmatter.util.NumberFormat(b, d)
            };
            a.fn.fmatter.date =
                function(b, c, d, g) {
                    d = a.extend({}, c.date);
                    return void 0 !== c.colModel && void 0 !== c.colModel.formatoptions && (d = a.extend({}, d, c.colModel.formatoptions)), d.reformatAfterEdit || "edit" !== g ? a.fmatter.isEmpty(b) ? a.fn.fmatter.defaultFormat(b, c) : a.jgrid.parseDate.call(this, d.srcformat, b, d.newformat, d) : a.fn.fmatter.defaultFormat(b, c)
                };
            a.fn.fmatter.select = function(b, c) {
                b = String(b);
                var d, g, l = !1,
                    e = [];
                if (void 0 !== c.colModel.formatoptions ? (l = c.colModel.formatoptions.value, d = void 0 === c.colModel.formatoptions.separator ?
                        ":" : c.colModel.formatoptions.separator, g = void 0 === c.colModel.formatoptions.delimiter ? ";" : c.colModel.formatoptions.delimiter) : void 0 !== c.colModel.editoptions && (l = c.colModel.editoptions.value, d = void 0 === c.colModel.editoptions.separator ? ":" : c.colModel.editoptions.separator, g = void 0 === c.colModel.editoptions.delimiter ? ";" : c.colModel.editoptions.delimiter), l) {
                    var k, p = 1 == (null != c.colModel.editoptions && !0 === c.colModel.editoptions.multiple) ? !0 : !1,
                        r = [];
                    if (p && (r = b.split(","), r = a.map(r, function(b) {
                            return a.trim(b)
                        })),
                        a.fmatter.isString(l)) {
                        var q = l.split(g),
                            u = 0;
                        for (g = 0; g < q.length; g++)
                            if (k = q[g].split(d), 2 < k.length && (k[1] = a.map(k, function(a, b) {
                                    return 0 < b ? a : void 0
                                }).join(d)), p) - 1 < a.inArray(k[0], r) && (e[u] = k[1], u++);
                            else if (a.trim(k[0]) === a.trim(b)) {
                            e[0] = k[1];
                            break
                        }
                    } else a.fmatter.isObject(l) && (p ? e = a.map(r, function(a) {
                        return l[a]
                    }) : e[0] = l[b] || "")
                }
                return b = e.join(", "), "" === b ? a.fn.fmatter.defaultFormat(b, c) : b
            };
            a.fn.fmatter.rowactions = function(b) {
                var c = a(this).closest("tr.jqgrow"),
                    d = c.attr("id"),
                    g = a(this).closest("table.ui-jqgrid-btable").attr("id").replace(/_frozen([^_]*)$/,
                        "$1"),
                    g = a("#" + g),
                    l = g[0],
                    e = l.p,
                    k = e.colModel[a.jgrid.getCellIndex(this)],
                    p = k.frozen ? a("tr#" + d + " td:eq(" + a.jgrid.getCellIndex(this) + ") > div", g) : a(this).parent(),
                    r = {
                        extraparam: {}
                    },
                    q = function(b) {
                        a.isFunction(r.afterRestore) && r.afterRestore.call(l, b);
                        p.find("div.ui-inline-edit,div.ui-inline-del").show();
                        p.find("div.ui-inline-save,div.ui-inline-cancel").hide()
                    };
                void 0 !== k.formatoptions && (r = a.extend(r, k.formatoptions));
                void 0 !== e.editOptions && (r.editOptions = e.editOptions);
                void 0 !== e.delOptions && (r.delOptions =
                    e.delOptions);
                c.hasClass("jqgrid-new-row") && (r.extraparam[e.prmNames.oper] = e.prmNames.addoper);
                c = {
                    keys: r.keys,
                    oneditfunc: r.onEdit,
                    successfunc: r.onSuccess,
                    url: r.url,
                    extraparam: r.extraparam,
                    aftersavefunc: function(b, c) {
                        a.isFunction(r.afterSave) && r.afterSave.call(l, b, c);
                        p.find("div.ui-inline-edit,div.ui-inline-del").show();
                        p.find("div.ui-inline-save,div.ui-inline-cancel").hide()
                    },
                    errorfunc: r.onError,
                    afterrestorefunc: q,
                    restoreAfterError: r.restoreAfterError,
                    mtype: r.mtype
                };
                switch (b) {
                    case "edit":
                        g.jqGrid("editRow",
                            d, c);
                        p.find("div.ui-inline-edit,div.ui-inline-del").hide();
                        p.find("div.ui-inline-save,div.ui-inline-cancel").show();
                        g.triggerHandler("jqGridAfterGridComplete");
                        break;
                    case "save":
                        g.jqGrid("saveRow", d, c) && (p.find("div.ui-inline-edit,div.ui-inline-del").show(), p.find("div.ui-inline-save,div.ui-inline-cancel").hide(), g.triggerHandler("jqGridAfterGridComplete"));
                        break;
                    case "cancel":
                        g.jqGrid("restoreRow", d, q);
                        p.find("div.ui-inline-edit,div.ui-inline-del").show();
                        p.find("div.ui-inline-save,div.ui-inline-cancel").hide();
                        g.triggerHandler("jqGridAfterGridComplete");
                        break;
                    case "del":
                        g.jqGrid("delGridRow", d, r.delOptions);
                        break;
                    case "formedit":
                        g.jqGrid("setSelection", d), g.jqGrid("editGridRow", d, r.editOptions)
                }
            };
            a.fn.fmatter.actions = function(b, c) {
                var d, g = {
                        keys: !1,
                        editbutton: !0,
                        delbutton: !0,
                        editformbutton: !1
                    },
                    l = c.rowId,
                    e = "",
                    k = a.jgrid.getRegional(this, "nav"),
                    p = a.jgrid.styleUI[c.styleUI || "jQueryUI"].fmatter,
                    r = a.jgrid.styleUI[c.styleUI || "jQueryUI"].common;
                if (void 0 !== c.colModel.formatoptions && (g = a.extend(g, c.colModel.formatoptions)),
                    void 0 === l || a.fmatter.isEmpty(l)) return "";
                var q = "onmouseover=jQuery(this).addClass('" + r.hover + "'); onmouseout=jQuery(this).removeClass('" + r.hover + "');  ";
                return g.editformbutton ? (d = "id='jEditButton_" + l + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'formedit'); " + q, e += "<div title='" + k.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + d + "><span class='" + r.icon_base + " " + p.icon_edit + "'></span></div>") : g.editbutton && (d = "id='jEditButton_" + l + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'edit'); " +
                        q, e += "<div title='" + k.edittitle + "' style='float:left;cursor:pointer;' class='ui-pg-div ui-inline-edit' " + d + "><span class='" + r.icon_base + " " + p.icon_edit + "'></span></div>"), g.delbutton && (d = "id='jDeleteButton_" + l + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'del'); " + q, e += "<div title='" + k.deltitle + "' style='float:left;' class='ui-pg-div ui-inline-del' " + d + "><span class='" + r.icon_base + " " + p.icon_del + "'></span></div>"), d = "id='jSaveButton_" + l + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'save'); " +
                    q, e += "<div title='" + k.savetitle + "' style='float:left;display:none' class='ui-pg-div ui-inline-save' " + d + "><span class='" + r.icon_base + " " + p.icon_save + "'></span></div>", d = "id='jCancelButton_" + l + "' onclick=jQuery.fn.fmatter.rowactions.call(this,'cancel'); " + q, e += "<div title='" + k.canceltitle + "' style='float:left;display:none;' class='ui-pg-div ui-inline-cancel' " + d + "><span class='" + r.icon_base + " " + p.icon_cancel + "'></span></div>", "<div style='margin-left:8px;'>" + e + "</div>"
            };
            a.unformat = function(b, c, d, g) {
                var l,
                    e = c.colModel.formatter,
                    k = c.colModel.formatoptions || {},
                    p = /([\.\*\_\'\(\)\{\}\+\?\\])/g,
                    r = c.colModel.unformat || a.fn.fmatter[e] && a.fn.fmatter[e].unformat;
                if (void 0 !== r && a.isFunction(r)) l = r.call(this, a(b).text(), c, b);
                else if (void 0 !== e && a.fmatter.isString(e)) switch (l = a.jgrid.getRegional(this, "formatter") || {}, e) {
                    case "integer":
                        k = a.extend({}, l.integer, k);
                        c = k.thousandsSeparator.replace(p, "\\$1");
                        c = new RegExp(c, "g");
                        l = a(b).text().replace(c, "");
                        break;
                    case "number":
                        k = a.extend({}, l.number, k);
                        c = k.thousandsSeparator.replace(p,
                            "\\$1");
                        c = new RegExp(c, "g");
                        l = a(b).text().replace(c, "").replace(k.decimalSeparator, ".");
                        break;
                    case "currency":
                        k = a.extend({}, l.currency, k);
                        c = k.thousandsSeparator.replace(p, "\\$1");
                        c = new RegExp(c, "g");
                        l = a(b).text();
                        k.prefix && k.prefix.length && (l = l.substr(k.prefix.length));
                        k.suffix && k.suffix.length && (l = l.substr(0, l.length - k.suffix.length));
                        l = l.replace(c, "").replace(k.decimalSeparator, ".");
                        break;
                    case "checkbox":
                        k = c.colModel.editoptions ? c.colModel.editoptions.value.split(":") : ["Yes", "No"];
                        l = a("input", b).is(":checked") ?
                            k[0] : k[1];
                        break;
                    case "select":
                        l = a.unformat.select(b, c, d, g);
                        break;
                    case "actions":
                        return "";
                    default:
                        l = a(b).text()
                }
                return void 0 !== l ? l : !0 === g ? a(b).text() : a.jgrid.htmlDecode(a(b).html())
            };
            a.unformat.select = function(b, c, d, g) {
                d = [];
                b = a(b).text();
                if (!0 === g) return b;
                g = a.extend({}, void 0 !== c.colModel.formatoptions ? c.colModel.formatoptions : c.colModel.editoptions);
                c = void 0 === g.separator ? ":" : g.separator;
                var l = void 0 === g.delimiter ? ";" : g.delimiter;
                if (g.value) {
                    var e, k = g.value;
                    g = !0 === g.multiple ? !0 : !1;
                    var p = [];
                    if (g &&
                        (p = b.split(","), p = a.map(p, function(b) {
                            return a.trim(b)
                        })), a.fmatter.isString(k))
                        for (var r = k.split(l), q = 0, l = 0; l < r.length; l++)
                            if (e = r[l].split(c), 2 < e.length && (e[1] = a.map(e, function(a, b) {
                                    return 0 < b ? a : void 0
                                }).join(c)), g) - 1 < a.inArray(a.trim(e[1]), p) && (d[q] = e[0], q++);
                            else {
                                if (a.trim(e[1]) === a.trim(b)) {
                                    d[0] = e[0];
                                    break
                                }
                            } else(a.fmatter.isObject(k) || a.isArray(k)) && (g || (p[0] = b), d = a.map(p, function(b) {
                        var c;
                        return a.each(k, function(a, d) {
                            return d === b ? (c = a, !1) : void 0
                        }), void 0 !== c ? c : void 0
                    }));
                    return d.join(", ")
                }
                return b ||
                    ""
            };
            a.unformat.date = function(b, c) {
                var d = a.jgrid.getRegional(this, "formatter.date") || {};
                return void 0 !== c.formatoptions && (d = a.extend({}, d, c.formatoptions)), a.fmatter.isEmpty(b) ? a.fn.fmatter.defaultFormat(b, c) : a.jgrid.parseDate.call(this, d.newformat, b, d.srcformat, d)
            };
            window.jqGridUtils = {
                stringify: function(a) {
                    return JSON.stringify(a, function(a, b) {
                        return "function" == typeof b ? b.toString() : b
                    })
                },
                parse: function(a) {
                    return JSON.parse(a, function(a, b) {
                        return "string" == typeof b && -1 !== b.indexOf("function") ? eval("(" +
                            b + ")") : b
                    })
                },
                encode: function(a) {
                    return String(a).replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;")
                },
                jsonToXML: function(b, c) {
                    var d = a.extend({
                            xmlDecl: '<?xml version="1.0" encoding="UTF-8" ?>\n',
                            attr_prefix: "-",
                            encode: !0
                        }, c || {}),
                        g = this,
                        l = function(a, b) {
                            return "#text" === a ? d.encode ? g.encode(b) : b : "function" == typeof b ? "<" + a + "><![CDATA[" + b + "]]\x3e</" + a + ">\n" : "" === b ? "<" + a + ">__EMPTY_STRING_</" + a + ">\n" : "<" + a + ">" + (d.encode ? g.encode(b) : b) + "</" + a + ">\n"
                        },
                        e = function(a, b) {
                            for (var c = [], d = 0; d < b.length; d++) {
                                var f = b[d];
                                c[c.length] = "undefined" == typeof f || null == f ? "<" + a + " />" : "object" == typeof f && f.constructor == Array ? e(a, f) : "object" == typeof f ? k(a, f) : l(a, f)
                            }
                            return c.length || (c[0] = "<" + a + ">__EMPTY_ARRAY_</" + a + ">\n"), c.join("")
                        },
                        k = function(a, b) {
                            var c = [],
                                f = [],
                                m;
                            for (m in b)
                                if (b.hasOwnProperty(m)) {
                                    var p = b[m];
                                    m.charAt(0) !== d.attr_prefix ? c[c.length] = null == p ? "<" + m + " />" : "object" == typeof p && p.constructor === Array ? e(m, p) : "object" == typeof p ? k(m, p) : l(m, p) : f[f.length] = " " + m.substring(1) + '="' + (d.encode ?
                                        g.encode(p) : p) + '"'
                                }
                            f = f.join("");
                            m = c.join("");
                            return null == a || (m = 0 < c.length ? m.match(/\n/) ? "<" + a + f + ">\n" + m + "</" + a + ">\n" : "<" + a + f + ">" + m + "</" + a + ">\n" : "<" + a + f + " />\n"), m
                        },
                        p = k(null, b);
                    return d.xmlDecl + p
                },
                xmlToJSON: function(b, c) {
                    var d = a.extend({
                        force_array: [],
                        attr_prefix: "-"
                    }, c || {});
                    if (b) {
                        var g = {};
                        if (d.force_array)
                            for (var l = 0; l < d.force_array.length; l++) g[d.force_array[l]] = 1;
                        "string" == typeof b && (b = a.parseXML(b));
                        b.documentElement && (b = b.documentElement);
                        var e = function(a, b, c, d) {
                                if ("string" == typeof d)
                                    if (-1 !==
                                        d.indexOf("function")) d = eval("(" + d + ")");
                                    else switch (d) {
                                        case "__EMPTY_ARRAY_":
                                            d = [];
                                            break;
                                        case "__EMPTY_STRING_":
                                            d = "";
                                            break;
                                        case "false":
                                            d = !1;
                                            break;
                                        case "true":
                                            d = !0
                                    }
                                g[b] ? (1 === c && (a[b] = []), a[b][a[b].length] = d) : 1 === c ? a[b] = d : 2 === c ? a[b] = [a[b], d] : a[b][a[b].length] = d
                            },
                            k = function(a) {
                                if (7 !== a.nodeType) {
                                    if (3 === a.nodeType || 4 === a.nodeType) return null == a.nodeValue.match(/[^\x00-\x20]/) ? void 0 : a.nodeValue;
                                    var b, c, f, g, m = {};
                                    if (a.attributes && a.attributes.length)
                                        for (b = {}, c = 0; c < a.attributes.length; c++) f = a.attributes[c].nodeName,
                                            "string" == typeof f && (g = a.attributes[c].nodeValue, g && (f = d.attr_prefix + f, "undefined" == typeof m[f] && (m[f] = 0), m[f]++, e(b, f, m[f], g)));
                                    if (a.childNodes && a.childNodes.length) {
                                        f = !0;
                                        b && (f = !1);
                                        for (c = 0; c < a.childNodes.length && f; c++) {
                                            var l = a.childNodes[c].nodeType;
                                            3 !== l && 4 !== l && (f = !1)
                                        }
                                        if (f)
                                            for (b || (b = ""), c = 0; c < a.childNodes.length; c++) b += a.childNodes[c].nodeValue;
                                        else
                                            for (b || (b = {}), c = 0; c < a.childNodes.length; c++) f = a.childNodes[c].nodeName, "string" == typeof f && (g = k(a.childNodes[c]), g && ("undefined" == typeof m[f] && (m[f] =
                                                0), m[f]++, e(b, f, m[f], g)))
                                    }
                                    return b
                                }
                            },
                            l = k(b);
                        if (g[b.nodeName] && (l = [l]), 11 !== b.nodeType) {
                            var p = {};
                            p[b.nodeName] = l;
                            l = p
                        }
                        return l
                    }
                }
            }
        });
        (function(a) {
            "function" === typeof define && define.amd ? define(["jquery", "../grid.base"], a) : a(jQuery)
        })(function(a) {
            a.jgrid = a.jgrid || {};
            a.jgrid.hasOwnProperty("regional") || (a.jgrid.regional = []);
            a.jgrid.regional.en = {
                defaults: {
                    recordtext: "View {0} - {1} of {2}",
                    emptyrecords: "No records to view",
                    loadtext: "Loading...",
                    savetext: "Saving...",
                    pgtext: "Page {0} of {1}",
                    pgfirst: "First Page",
                    pglast: "Last Page",
                    pgnext: "Next Page",
                    pgprev: "Previous Page",
                    pgrecs: "Records per Page",
                    showhide: "Toggle Expand Collapse Grid",
                    pagerCaption: "Grid::Page Settings",
                    pageText: "Page:",
                    recordPage: "Records per Page",
                    nomorerecs: "No more records...",
                    scrollPullup: "Pull up to load more...",
                    scrollPulldown: "Pull down to refresh...",
                    scrollRefresh: "Release to refresh..."
                },
                search: {
                    caption: "Search...",
                    Find: "Find",
                    Reset: "Reset",
                    odata: [{
                        oper: "eq",
                        text: "equal"
                    }, {
                        oper: "ne",
                        text: "not equal"
                    }, {
                        oper: "lt",
                        text: "less"
                    }, {
                        oper: "le",
                        text: "less or equal"
                    }, {
                        oper: "gt",
                        text: "greater"
                    }, {
                        oper: "ge",
                        text: "greater or equal"
                    }, {
                        oper: "bw",
                        text: "begins with"
                    }, {
                        oper: "bn",
                        text: "does not begin with"
                    }, {
                        oper: "in",
                        text: "is in"
                    }, {
                        oper: "ni",
                        text: "is not in"
                    }, {
                        oper: "ew",
                        text: "ends with"
                    }, {
                        oper: "en",
                        text: "does not end with"
                    }, {
                        oper: "cn",
                        text: "contains"
                    }, {
                        oper: "nc",
                        text: "does not contain"
                    }, {
                        oper: "nu",
                        text: "is null"
                    }, {
                        oper: "nn",
                        text: "is not null"
                    }],
                    groupOps: [{
                        op: "AND",
                        text: "all"
                    }, {
                        op: "OR",
                        text: "any"
                    }],
                    operandTitle: "Click to select search operation.",
                    resetTitle: "Reset Search Value"
                },
                edit: {
                    addCaption: "Add Record",
                    editCaption: "Edit Record",
                    bSubmit: "Submit",
                    bCancel: "Cancel",
                    bClose: "Close",
                    saveData: "Data has been changed! Save changes?",
                    bYes: "Yes",
                    bNo: "No",
                    bExit: "Cancel",
                    msg: {
                        required: "Field is required",
                        number: "Please, enter valid number",
                        minValue: "value must be greater than or equal to ",
                        maxValue: "value must be less than or equal to",
                        email: "is not a valid e-mail",
                        integer: "Please, enter valid integer value",
                        date: "Please, enter valid date value",
                        url: "is not a valid URL. Prefix required ('http://' or 'https://')",
                        nodefined: " is not defined!",
                        novalue: " return value is required!",
                        customarray: "Custom function should return array!",
                        customfcheck: "Custom function should be present in case of custom checking!"
                    }
                },
                view: {
                    caption: "View Record",
                    bClose: "Close"
                },
                del: {
                    caption: "Delete",
                    msg: "Delete selected record(s)?",
                    bSubmit: "Delete",
                    bCancel: "Cancel"
                },
                nav: {
                    edittext: "",
                    edittitle: "Edit selected row",
                    addtext: "",
                    addtitle: "Add new row",
                    deltext: "",
                    deltitle: "Delete selected row",
                    searchtext: "",
                    searchtitle: "Find records",
                    refreshtext: "",
                    refreshtitle: "Reload Grid",
                    alertcap: "Warning",
                    alerttext: "Please, select row",
                    viewtext: "",
                    viewtitle: "View selected row",
                    savetext: "",
                    savetitle: "Save row",
                    canceltext: "",
                    canceltitle: "Cancel row editing",
                    selectcaption: "Actions..."
                },
                col: {
                    caption: "Select columns",
                    bSubmit: "Ok",
                    bCancel: "Cancel"
                },
                errors: {
                    errcap: "Error",
                    nourl: "No url is set",
                    norecords: "No records to process",
                    model: "Length of colNames <> colModel!"
                },
                formatter: {
                    integer: {
                        thousandsSeparator: ",",
                        defaultValue: "0"
                    },
                    number: {
                        decimalSeparator: ".",
                        thousandsSeparator: ",",
                        decimalPlaces: 2,
                        defaultValue: "0.00"
                    },
                    currency: {
                        decimalSeparator: ".",
                        thousandsSeparator: ",",
                        decimalPlaces: 2,
                        prefix: "",
                        suffix: "",
                        defaultValue: "0.00"
                    },
                    date: {
                        dayNames: "Sun Mon Tue Wed Thr Fri Sat Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
                        monthNames: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec January February March April May June July August September October November December".split(" "),
                        AmPm: ["am", "pm", "AM", "PM"],
                        S: function(a) {
                            return 11 > a || 13 < a ? ["st", "nd", "rd", "th"][Math.min((a - 1) % 10, 3)] : "th"
                        },
                        srcformat: "Y-m-d",
                        newformat: "n/j/Y",
                        parseRe: /[#%\\\/:_;.,\t\s-]/,
                        masks: {
                            ISO8601Long: "Y-m-d H:i:s",
                            ISO8601Short: "Y-m-d",
                            ShortDate: "n/j/Y",
                            LongDate: "l, F d, Y",
                            FullDateTime: "l, F d, Y g:i:s A",
                            MonthDay: "F d",
                            ShortTime: "g:i A",
                            LongTime: "g:i:s A",
                            SortableDateTime: "Y-m-d\\TH:i:s",
                            UniversalSortableDateTime: "Y-m-d H:i:sO",
                            YearMonth: "F, Y"
                        },
                        reformatAfterEdit: !1,
                        userLocalTime: !1
                    },
                    baseLinkUrl: "",
                    showAction: "",
                    target: "",
                    checkbox: {
                        disabled: !0
                    },
                    idName: "id"
                }
            }
        });
        (function(a) {
            "function" === typeof define && define.amd ? define(["jquery"], a) : a(jQuery)
        })(function(a) {
            function p(b, c) {
                var d, g;
                d = b.nodeName.toLowerCase();
                if ("area" === d) {
                    d = b.parentNode;
                    g = d.name;
                    if (!b.href || !g || "map" !== d.nodeName.toLowerCase()) return !1;
                    d = a("img[usemap='#" + g + "']")[0];
                    return !!d && k(d)
                }
                return (/^(input|select|textarea|button|object)$/.test(d) ? !b.disabled : "a" === d ? b.href || c : c) && k(b)
            }

            function k(b) {
                return a.expr.filters.visible(b) && !a(b).parents().addBack().filter(function() {
                    return "hidden" === a.css(this,
                        "visibility")
                }).length
            }

            function D(a) {
                for (var c; a.length && a[0] !== document;) {
                    c = a.css("position");
                    if ("absolute" === c || "relative" === c || "fixed" === c)
                        if (c = parseInt(a.css("zIndex"), 10), !isNaN(c) && 0 !== c) return c;
                    a = a.parent()
                }
                return 0
            }

            function v() {
                this._curInst = null;
                this._keyEvent = !1;
                this._disabledInputs = [];
                this._inDialog = this._datepickerShowing = !1;
                this._mainDivId = "ui-datepicker-div";
                this._inlineClass = "ui-datepicker-inline";
                this._appendClass = "ui-datepicker-append";
                this._triggerClass = "ui-datepicker-trigger";
                this._dialogClass = "ui-datepicker-dialog";
                this._disableClass = "ui-datepicker-disabled";
                this._unselectableClass = "ui-datepicker-unselectable";
                this._currentClass = "ui-datepicker-current-day";
                this._dayOverClass = "ui-datepicker-days-cell-over";
                this.regional = [];
                this.regional[""] = {
                    closeText: "Done",
                    prevText: "Prev",
                    nextText: "Next",
                    currentText: "Today",
                    monthNames: "January February March April May June July August September October November December".split(" "),
                    monthNamesShort: "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),
                    dayNames: "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
                    dayNamesShort: "Sun Mon Tue Wed Thu Fri Sat".split(" "),
                    dayNamesMin: "Su Mo Tu We Th Fr Sa".split(" "),
                    weekHeader: "Wk",
                    dateFormat: "mm/dd/yy",
                    firstDay: 0,
                    isRTL: !1,
                    showMonthAfterYear: !1,
                    yearSuffix: ""
                };
                this._defaults = {
                    showOn: "focus",
                    showAnim: "fadeIn",
                    showOptions: {},
                    defaultDate: null,
                    appendText: "",
                    buttonText: "...",
                    buttonImage: "",
                    buttonImageOnly: !1,
                    hideIfNoPrevNext: !1,
                    navigationAsDateFormat: !1,
                    gotoCurrent: !1,
                    changeMonth: !1,
                    changeYear: !1,
                    yearRange: "c-10:c+10",
                    showOtherMonths: !1,
                    selectOtherMonths: !1,
                    showWeek: !1,
                    calculateWeek: this.iso8601Week,
                    shortYearCutoff: "+10",
                    minDate: null,
                    maxDate: null,
                    duration: "fast",
                    beforeShowDay: null,
                    beforeShow: null,
                    onSelect: null,
                    onChangeMonthYear: null,
                    onClose: null,
                    numberOfMonths: 1,
                    showCurrentAtPos: 0,
                    stepMonths: 1,
                    stepBigMonths: 12,
                    altField: "",
                    altFormat: "",
                    constrainInput: !0,
                    showButtonPanel: !1,
                    autoSize: !1,
                    disabled: !1
                };
                a.extend(this._defaults, this.regional[""]);
                this.regional.en = a.extend(!0, {}, this.regional[""]);
                this.regional["en-US"] = a.extend(!0, {}, this.regional.en);
                this.dpDiv = F(a("<div id='" + this._mainDivId + "' class='ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>"))
            }

            function F(b) {
                return b.delegate("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a", "mouseout", function() {
                    a(this).removeClass("ui-state-hover"); - 1 !== this.className.indexOf("ui-datepicker-prev") && a(this).removeClass("ui-datepicker-prev-hover"); - 1 !== this.className.indexOf("ui-datepicker-next") &&
                        a(this).removeClass("ui-datepicker-next-hover")
                }).delegate("button, .ui-datepicker-prev, .ui-datepicker-next, .ui-datepicker-calendar td a", "mouseover", M)
            }

            function M() {
                a.datepicker._isDisabledDatepicker(W.inline ? W.dpDiv.parent()[0] : W.input[0]) || (a(this).parents(".ui-datepicker-calendar").find("a").removeClass("ui-state-hover"), a(this).addClass("ui-state-hover"), -1 !== this.className.indexOf("ui-datepicker-prev") && a(this).addClass("ui-datepicker-prev-hover"), -1 !== this.className.indexOf("ui-datepicker-next") &&
                    a(this).addClass("ui-datepicker-next-hover"))
            }

            function I(b, c) {
                a.extend(b, c);
                for (var d in c) null == c[d] && (b[d] = c[d]);
                return b
            }

            function S(a) {
                return function() {
                    var c = this.element.val();
                    a.apply(this, arguments);
                    this._refresh();
                    c !== this.element.val() && this._trigger("change")
                }
            }
            a.ui = a.ui || {};
            a.extend(a.ui, {
                version: "1.11.4",
                keyCode: {
                    BACKSPACE: 8,
                    COMMA: 188,
                    DELETE: 46,
                    DOWN: 40,
                    END: 35,
                    ENTER: 13,
                    ESCAPE: 27,
                    HOME: 36,
                    LEFT: 37,
                    PAGE_DOWN: 34,
                    PAGE_UP: 33,
                    PERIOD: 190,
                    RIGHT: 39,
                    SPACE: 32,
                    TAB: 9,
                    UP: 38
                }
            });
            a.fn.extend({
                scrollParent: function(b) {
                    var c =
                        this.css("position"),
                        d = "absolute" === c,
                        g = b ? /(auto|scroll|hidden)/ : /(auto|scroll)/;
                    b = this.parents().filter(function() {
                        var b = a(this);
                        return d && "static" === b.css("position") ? !1 : g.test(b.css("overflow") + b.css("overflow-y") + b.css("overflow-x"))
                    }).eq(0);
                    return "fixed" !== c && b.length ? b : a(this[0].ownerDocument || document)
                },
                uniqueId: function() {
                    var a = 0;
                    return function() {
                        return this.each(function() {
                            this.id || (this.id = "ui-id-" + ++a)
                        })
                    }
                }(),
                removeUniqueId: function() {
                    return this.each(function() {
                        /^ui-id-\d+$/.test(this.id) &&
                            a(this).removeAttr("id")
                    })
                }
            });
            a.extend(a.expr[":"], {
                data: a.expr.createPseudo ? a.expr.createPseudo(function(b) {
                    return function(c) {
                        return !!a.data(c, b)
                    }
                }) : function(b, c, d) {
                    return !!a.data(b, d[3])
                },
                focusable: function(b) {
                    return p(b, !isNaN(a.attr(b, "tabindex")))
                },
                tabbable: function(b) {
                    var c = a.attr(b, "tabindex"),
                        d = isNaN(c);
                    return (d || 0 <= c) && p(b, !d)
                }
            });
            a("<a>").outerWidth(1).jquery || a.each(["Width", "Height"], function(b, c) {
                function d(b, c, d, e) {
                    a.each(g, function() {
                        c -= parseFloat(a.css(b, "padding" + this)) || 0;
                        d && (c -=
                            parseFloat(a.css(b, "border" + this + "Width")) || 0);
                        e && (c -= parseFloat(a.css(b, "margin" + this)) || 0)
                    });
                    return c
                }
                var g = "Width" === c ? ["Left", "Right"] : ["Top", "Bottom"],
                    f = c.toLowerCase(),
                    m = {
                        innerWidth: a.fn.innerWidth,
                        innerHeight: a.fn.innerHeight,
                        outerWidth: a.fn.outerWidth,
                        outerHeight: a.fn.outerHeight
                    };
                a.fn["inner" + c] = function(b) {
                    return void 0 === b ? m["inner" + c].call(this) : this.each(function() {
                        a(this).css(f, d(this, b) + "px")
                    })
                };
                a.fn["outer" + c] = function(b, g) {
                    return "number" !== typeof b ? m["outer" + c].call(this, b) : this.each(function() {
                        a(this).css(f,
                            d(this, b, !0, g) + "px")
                    })
                }
            });
            a.fn.addBack || (a.fn.addBack = function(a) {
                return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
            });
            a("<a>").data("a-b", "a").removeData("a-b").data("a-b") && (a.fn.removeData = function(b) {
                return function(c) {
                    return arguments.length ? b.call(this, a.camelCase(c)) : b.call(this)
                }
            }(a.fn.removeData));
            a.ui.ie = !!/msie [\w.]+/.exec(navigator.userAgent.toLowerCase());
            a.fn.extend({
                focus: function(b) {
                    return function(c, d) {
                        return "number" === typeof c ? this.each(function() {
                            var b = this;
                            setTimeout(function() {
                                a(b).focus();
                                d && d.call(b)
                            }, c)
                        }) : b.apply(this, arguments)
                    }
                }(a.fn.focus),
                disableSelection: function() {
                    var a = "onselectstart" in document.createElement("div") ? "selectstart" : "mousedown";
                    return function() {
                        return this.bind(a + ".ui-disableSelection", function(a) {
                            a.preventDefault()
                        })
                    }
                }(),
                enableSelection: function() {
                    return this.unbind(".ui-disableSelection")
                },
                zIndex: function(b) {
                    if (void 0 !== b) return this.css("zIndex", b);
                    if (this.length) {
                        b = a(this[0]);
                        for (var c; b.length && b[0] !== document;) {
                            c = b.css("position");
                            if ("absolute" === c || "relative" ===
                                c || "fixed" === c)
                                if (c = parseInt(b.css("zIndex"), 10), !isNaN(c) && 0 !== c) return c;
                            b = b.parent()
                        }
                    }
                    return 0
                }
            });
            a.ui.plugin = {
                add: function(b, c, d) {
                    var g;
                    b = a.ui[b].prototype;
                    for (g in d) b.plugins[g] = b.plugins[g] || [], b.plugins[g].push([c, d[g]])
                },
                call: function(a, c, d, g) {
                    if ((c = a.plugins[c]) && (g || a.element[0].parentNode && 11 !== a.element[0].parentNode.nodeType))
                        for (g = 0; g < c.length; g++) a.options[c[g][0]] && c[g][1].apply(a.element, d)
                }
            };
            var O = 0,
                P = Array.prototype.slice;
            a.cleanData = function(b) {
                return function(c) {
                    var d, g, f;
                    for (f =
                        0; null != (g = c[f]); f++) try {
                        (d = a._data(g, "events")) && d.remove && a(g).triggerHandler("remove")
                    } catch (m) {}
                    b(c)
                }
            }(a.cleanData);
            a.widget = function(b, c, d) {
                var g, f, m, h, k = {},
                    l = b.split(".")[0];
                b = b.split(".")[1];
                g = l + "-" + b;
                d || (d = c, c = a.Widget);
                a.expr[":"][g.toLowerCase()] = function(b) {
                    return !!a.data(b, g)
                };
                a[l] = a[l] || {};
                f = a[l][b];
                m = a[l][b] = function(a, b) {
                    if (!this._createWidget) return new m(a, b);
                    arguments.length && this._createWidget(a, b)
                };
                a.extend(m, f, {
                    version: d.version,
                    _proto: a.extend({}, d),
                    _childConstructors: []
                });
                h =
                    new c;
                h.options = a.widget.extend({}, h.options);
                a.each(d, function(b, d) {
                    a.isFunction(d) ? k[b] = function() {
                        var a = function() {
                                return c.prototype[b].apply(this, arguments)
                            },
                            f = function(a) {
                                return c.prototype[b].apply(this, a)
                            };
                        return function() {
                            var b = this._super,
                                c = this._superApply,
                                e;
                            this._super = a;
                            this._superApply = f;
                            e = d.apply(this, arguments);
                            this._super = b;
                            this._superApply = c;
                            return e
                        }
                    }() : k[b] = d
                });
                m.prototype = a.widget.extend(h, {
                    widgetEventPrefix: f ? h.widgetEventPrefix || b : b
                }, k, {
                    constructor: m,
                    namespace: l,
                    widgetName: b,
                    widgetFullName: g
                });
                f ? (a.each(f._childConstructors, function(b, c) {
                    var d = c.prototype;
                    a.widget(d.namespace + "." + d.widgetName, m, c._proto)
                }), delete f._childConstructors) : c._childConstructors.push(m);
                a.widget.bridge(b, m);
                return m
            };
            a.widget.extend = function(b) {
                for (var c = P.call(arguments, 1), d = 0, g = c.length, f, m; d < g; d++)
                    for (f in c[d]) m = c[d][f], c[d].hasOwnProperty(f) && void 0 !== m && (a.isPlainObject(m) ? b[f] = a.isPlainObject(b[f]) ? a.widget.extend({}, b[f], m) : a.widget.extend({}, m) : b[f] = m);
                return b
            };
            a.widget.bridge = function(b,
                c) {
                var d = c.prototype.widgetFullName || b;
                a.fn[b] = function(g) {
                    var f = "string" === typeof g,
                        m = P.call(arguments, 1),
                        h = this;
                    f ? this.each(function() {
                        var c, f = a.data(this, d);
                        if ("instance" === g) return h = f, !1;
                        if (!f) return a.error("cannot call methods on " + b + " prior to initialization; attempted to call method '" + g + "'");
                        if (!a.isFunction(f[g]) || "_" === g.charAt(0)) return a.error("no such method '" + g + "' for " + b + " widget instance");
                        c = f[g].apply(f, m);
                        if (c !== f && void 0 !== c) return h = c && c.jquery ? h.pushStack(c.get()) : c, !1
                    }) : (m.length &&
                        (g = a.widget.extend.apply(null, [g].concat(m))), this.each(function() {
                            var b = a.data(this, d);
                            b ? (b.option(g || {}), b._init && b._init()) : a.data(this, d, new c(g, this))
                        }));
                    return h
                }
            };
            a.Widget = function() {};
            a.Widget._childConstructors = [];
            a.Widget.prototype = {
                widgetName: "widget",
                widgetEventPrefix: "",
                defaultElement: "<div>",
                options: {
                    disabled: !1,
                    create: null
                },
                _createWidget: function(b, c) {
                    c = a(c || this.defaultElement || this)[0];
                    this.element = a(c);
                    this.uuid = O++;
                    this.eventNamespace = "." + this.widgetName + this.uuid;
                    this.bindings =
                        a();
                    this.hoverable = a();
                    this.focusable = a();
                    c !== this && (a.data(c, this.widgetFullName, this), this._on(!0, this.element, {
                        remove: function(a) {
                            a.target === c && this.destroy()
                        }
                    }), this.document = a(c.style ? c.ownerDocument : c.document || c), this.window = a(this.document[0].defaultView || this.document[0].parentWindow));
                    this.options = a.widget.extend({}, this.options, this._getCreateOptions(), b);
                    this._create();
                    this._trigger("create", null, this._getCreateEventData());
                    this._init()
                },
                _getCreateOptions: a.noop,
                _getCreateEventData: a.noop,
                _create: a.noop,
                _init: a.noop,
                destroy: function() {
                    this._destroy();
                    this.element.unbind(this.eventNamespace).removeData(this.widgetFullName).removeData(a.camelCase(this.widgetFullName));
                    this.widget().unbind(this.eventNamespace).removeAttr("aria-disabled").removeClass(this.widgetFullName + "-disabled ui-state-disabled");
                    this.bindings.unbind(this.eventNamespace);
                    this.hoverable.removeClass("ui-state-hover");
                    this.focusable.removeClass("ui-state-focus")
                },
                _destroy: a.noop,
                widget: function() {
                    return this.element
                },
                option: function(b, c) {
                    var d = b,
                        g, f, m;
                    if (0 === arguments.length) return a.widget.extend({}, this.options);
                    if ("string" === typeof b)
                        if (d = {}, g = b.split("."), b = g.shift(), g.length) {
                            f = d[b] = a.widget.extend({}, this.options[b]);
                            for (m = 0; m < g.length - 1; m++) f[g[m]] = f[g[m]] || {}, f = f[g[m]];
                            b = g.pop();
                            if (1 === arguments.length) return void 0 === f[b] ? null : f[b];
                            f[b] = c
                        } else {
                            if (1 === arguments.length) return void 0 === this.options[b] ? null : this.options[b];
                            d[b] = c
                        }
                    this._setOptions(d);
                    return this
                },
                _setOptions: function(a) {
                    for (var c in a) this._setOption(c,
                        a[c]);
                    return this
                },
                _setOption: function(a, c) {
                    this.options[a] = c;
                    "disabled" === a && (this.widget().toggleClass(this.widgetFullName + "-disabled", !!c), c && (this.hoverable.removeClass("ui-state-hover"), this.focusable.removeClass("ui-state-focus")));
                    return this
                },
                enable: function() {
                    return this._setOptions({
                        disabled: !1
                    })
                },
                disable: function() {
                    return this._setOptions({
                        disabled: !0
                    })
                },
                _on: function(b, c, d) {
                    var g, f = this;
                    "boolean" !== typeof b && (d = c, c = b, b = !1);
                    d ? (c = g = a(c), this.bindings = this.bindings.add(c)) : (d = c, c = this.element,
                        g = this.widget());
                    a.each(d, function(d, h) {
                        function k() {
                            if (b || !0 !== f.options.disabled && !a(this).hasClass("ui-state-disabled")) return ("string" === typeof h ? f[h] : h).apply(f, arguments)
                        }
                        "string" !== typeof h && (k.guid = h.guid = h.guid || k.guid || a.guid++);
                        var l = d.match(/^([\w:-]*)\s*(.*)$/),
                            e = l[1] + f.eventNamespace;
                        (l = l[2]) ? g.delegate(l, e, k): c.bind(e, k)
                    })
                },
                _off: function(b, c) {
                    c = (c || "").split(" ").join(this.eventNamespace + " ") + this.eventNamespace;
                    b.unbind(c).undelegate(c);
                    this.bindings = a(this.bindings.not(b).get());
                    this.focusable = a(this.focusable.not(b).get());
                    this.hoverable = a(this.hoverable.not(b).get())
                },
                _delay: function(a, c) {
                    var d = this;
                    return setTimeout(function() {
                        return ("string" === typeof a ? d[a] : a).apply(d, arguments)
                    }, c || 0)
                },
                _hoverable: function(b) {
                    this.hoverable = this.hoverable.add(b);
                    this._on(b, {
                        mouseenter: function(b) {
                            a(b.currentTarget).addClass("ui-state-hover")
                        },
                        mouseleave: function(b) {
                            a(b.currentTarget).removeClass("ui-state-hover")
                        }
                    })
                },
                _focusable: function(b) {
                    this.focusable = this.focusable.add(b);
                    this._on(b, {
                        focusin: function(b) {
                            a(b.currentTarget).addClass("ui-state-focus")
                        },
                        focusout: function(b) {
                            a(b.currentTarget).removeClass("ui-state-focus")
                        }
                    })
                },
                _trigger: function(b, c, d) {
                    var g, f = this.options[b];
                    d = d || {};
                    c = a.Event(c);
                    c.type = (b === this.widgetEventPrefix ? b : this.widgetEventPrefix + b).toLowerCase();
                    c.target = this.element[0];
                    if (b = c.originalEvent)
                        for (g in b) g in c || (c[g] = b[g]);
                    this.element.trigger(c, d);
                    return !(a.isFunction(f) && !1 === f.apply(this.element[0], [c].concat(d)) || c.isDefaultPrevented())
                }
            };
            a.each({
                show: "fadeIn",
                hide: "fadeOut"
            }, function(b, c) {
                a.Widget.prototype["_" + b] = function(d, g, f) {
                    "string" === typeof g && (g = {
                        effect: g
                    });
                    var m, h = g ? !0 === g || "number" === typeof g ? c : g.effect || c : b;
                    g = g || {};
                    "number" === typeof g && (g = {
                        duration: g
                    });
                    m = !a.isEmptyObject(g);
                    g.complete = f;
                    g.delay && d.delay(g.delay);
                    if (m && a.effects && a.effects.effect[h]) d[b](g);
                    else if (h !== b && d[h]) d[h](g.duration, g.easing, f);
                    else d.queue(function(c) {
                        a(this)[b]();
                        f && f.call(d[0]);
                        c()
                    })
                }
            });
            var V = !1;
            a(document).mouseup(function() {
                V = !1
            });
            a.widget("ui.mouse", {
                version: "1.11.4",
                options: {
                    cancel: "input,textarea,button,select,option",
                    distance: 1,
                    delay: 0
                },
                _mouseInit: function() {
                    var b = this;
                    this.element.bind("mousedown." + this.widgetName, function(a) {
                        return b._mouseDown(a)
                    }).bind("click." + this.widgetName, function(c) {
                        if (!0 === a.data(c.target, b.widgetName + ".preventClickEvent")) return a.removeData(c.target, b.widgetName + ".preventClickEvent"), c.stopImmediatePropagation(), !1
                    });
                    this.started = !1
                },
                _mouseDestroy: function() {
                    this.element.unbind("." + this.widgetName);
                    this._mouseMoveDelegate && this.document.unbind("mousemove." +
                        this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate)
                },
                _mouseDown: function(b) {
                    if (!V) {
                        this._mouseMoved = !1;
                        this._mouseStarted && this._mouseUp(b);
                        this._mouseDownEvent = b;
                        var c = this,
                            d = 1 === b.which,
                            g = "string" === typeof this.options.cancel && b.target.nodeName ? a(b.target).closest(this.options.cancel).length : !1;
                        if (!d || g || !this._mouseCapture(b)) return !0;
                        this.mouseDelayMet = !this.options.delay;
                        this.mouseDelayMet || (this._mouseDelayTimer = setTimeout(function() {
                            c.mouseDelayMet = !0
                        }, this.options.delay));
                        if (this._mouseDistanceMet(b) && this._mouseDelayMet(b) && (this._mouseStarted = !1 !== this._mouseStart(b), !this._mouseStarted)) return b.preventDefault(), !0;
                        !0 === a.data(b.target, this.widgetName + ".preventClickEvent") && a.removeData(b.target, this.widgetName + ".preventClickEvent");
                        this._mouseMoveDelegate = function(a) {
                            return c._mouseMove(a)
                        };
                        this._mouseUpDelegate = function(a) {
                            return c._mouseUp(a)
                        };
                        this.document.bind("mousemove." + this.widgetName, this._mouseMoveDelegate).bind("mouseup." + this.widgetName,
                            this._mouseUpDelegate);
                        b.preventDefault();
                        return V = !0
                    }
                },
                _mouseMove: function(b) {
                    if (this._mouseMoved && (a.ui.ie && (!document.documentMode || 9 > document.documentMode) && !b.button || !b.which)) return this._mouseUp(b);
                    if (b.which || b.button) this._mouseMoved = !0;
                    if (this._mouseStarted) return this._mouseDrag(b), b.preventDefault();
                    this._mouseDistanceMet(b) && this._mouseDelayMet(b) && ((this._mouseStarted = !1 !== this._mouseStart(this._mouseDownEvent, b)) ? this._mouseDrag(b) : this._mouseUp(b));
                    return !this._mouseStarted
                },
                _mouseUp: function(b) {
                    this.document.unbind("mousemove." +
                        this.widgetName, this._mouseMoveDelegate).unbind("mouseup." + this.widgetName, this._mouseUpDelegate);
                    this._mouseStarted && (this._mouseStarted = !1, b.target === this._mouseDownEvent.target && a.data(b.target, this.widgetName + ".preventClickEvent", !0), this._mouseStop(b));
                    return V = !1
                },
                _mouseDistanceMet: function(a) {
                    return Math.max(Math.abs(this._mouseDownEvent.pageX - a.pageX), Math.abs(this._mouseDownEvent.pageY - a.pageY)) >= this.options.distance
                },
                _mouseDelayMet: function() {
                    return this.mouseDelayMet
                },
                _mouseStart: function() {},
                _mouseDrag: function() {},
                _mouseStop: function() {},
                _mouseCapture: function() {
                    return !0
                }
            });
            (function() {
                function b(a, b, c) {
                    return [parseFloat(a[0]) * (p.test(a[0]) ? b / 100 : 1), parseFloat(a[1]) * (p.test(a[1]) ? c / 100 : 1)]
                }

                function c(b) {
                    var c = b[0];
                    return 9 === c.nodeType ? {
                        width: b.width(),
                        height: b.height(),
                        offset: {
                            top: 0,
                            left: 0
                        }
                    } : a.isWindow(c) ? {
                        width: b.width(),
                        height: b.height(),
                        offset: {
                            top: b.scrollTop(),
                            left: b.scrollLeft()
                        }
                    } : c.preventDefault ? {
                        width: 0,
                        height: 0,
                        offset: {
                            top: c.pageY,
                            left: c.pageX
                        }
                    } : {
                        width: b.outerWidth(),
                        height: b.outerHeight(),
                        offset: b.offset()
                    }
                }
                a.ui = a.ui || {};
                var d, g, f = Math.max,
                    m = Math.abs,
                    h = Math.round,
                    k = /left|center|right/,
                    l = /top|center|bottom/,
                    e = /[\+\-]\d+(\.[\d]+)?%?/,
                    n = /^\w+/,
                    p = /%$/,
                    r = a.fn.position;
                a.position = {
                    scrollbarWidth: function() {
                        if (void 0 !== d) return d;
                        var b, c, e = a("<div style='display:block;position:absolute;width:50px;height:50px;overflow:hidden;'><div style='height:100px;width:auto;'></div></div>");
                        c = e.children()[0];
                        a("body").append(e);
                        b = c.offsetWidth;
                        e.css("overflow", "scroll");
                        c = c.offsetWidth;
                        b === c && (c = e[0].clientWidth);
                        e.remove();
                        return d = b - c
                    },
                    getScrollInfo: function(b) {
                        var c = b.isWindow || b.isDocument ? "" : b.element.css("overflow-x"),
                            d = b.isWindow || b.isDocument ? "" : b.element.css("overflow-y"),
                            c = "scroll" === c || "auto" === c && b.width < b.element[0].scrollWidth;
                        return {
                            width: "scroll" === d || "auto" === d && b.height < b.element[0].scrollHeight ? a.position.scrollbarWidth() : 0,
                            height: c ? a.position.scrollbarWidth() : 0
                        }
                    },
                    getWithinInfo: function(b) {
                        b = a(b || window);
                        var c = a.isWindow(b[0]),
                            d = !!b[0] && 9 === b[0].nodeType;
                        return {
                            element: b,
                            isWindow: c,
                            isDocument: d,
                            offset: b.offset() || {
                                left: 0,
                                top: 0
                            },
                            scrollLeft: b.scrollLeft(),
                            scrollTop: b.scrollTop(),
                            width: c || d ? b.width() : b.outerWidth(),
                            height: c || d ? b.height() : b.outerHeight()
                        }
                    }
                };
                a.fn.position = function(d) {
                    if (!d || !d.of) return r.apply(this, arguments);
                    d = a.extend({}, d);
                    var u, p, y, v, B, D, A = a(d.of),
                        x = a.position.getWithinInfo(d.within),
                        H = a.position.getScrollInfo(x),
                        E = (d.collision || "flip").split(" "),
                        F = {};
                    D = c(A);
                    A[0].preventDefault && (d.at = "left top");
                    p = D.width;
                    y = D.height;
                    v = D.offset;
                    B = a.extend({}, v);
                    a.each(["my", "at"], function() {
                        var a =
                            (d[this] || "").split(" "),
                            b, c;
                        1 === a.length && (a = k.test(a[0]) ? a.concat(["center"]) : l.test(a[0]) ? ["center"].concat(a) : ["center", "center"]);
                        a[0] = k.test(a[0]) ? a[0] : "center";
                        a[1] = l.test(a[1]) ? a[1] : "center";
                        b = e.exec(a[0]);
                        c = e.exec(a[1]);
                        F[this] = [b ? b[0] : 0, c ? c[0] : 0];
                        d[this] = [n.exec(a[0])[0], n.exec(a[1])[0]]
                    });
                    1 === E.length && (E[1] = E[0]);
                    "right" === d.at[0] ? B.left += p : "center" === d.at[0] && (B.left += p / 2);
                    "bottom" === d.at[1] ? B.top += y : "center" === d.at[1] && (B.top += y / 2);
                    u = b(F.at, p, y);
                    B.left += u[0];
                    B.top += u[1];
                    return this.each(function() {
                        var c,
                            e, l = a(this),
                            k = l.outerWidth(),
                            n = l.outerHeight(),
                            r = parseInt(a.css(this, "marginLeft"), 10) || 0,
                            w = parseInt(a.css(this, "marginTop"), 10) || 0,
                            D = k + r + (parseInt(a.css(this, "marginRight"), 10) || 0) + H.width,
                            I = n + w + (parseInt(a.css(this, "marginBottom"), 10) || 0) + H.height,
                            T = a.extend({}, B),
                            M = b(F.my, l.outerWidth(), l.outerHeight());
                        "right" === d.my[0] ? T.left -= k : "center" === d.my[0] && (T.left -= k / 2);
                        "bottom" === d.my[1] ? T.top -= n : "center" === d.my[1] && (T.top -= n / 2);
                        T.left += M[0];
                        T.top += M[1];
                        g || (T.left = h(T.left), T.top = h(T.top));
                        c = {
                            marginLeft: r,
                            marginTop: w
                        };
                        a.each(["left", "top"], function(b, e) {
                            if (a.ui.position[E[b]]) a.ui.position[E[b]][e](T, {
                                targetWidth: p,
                                targetHeight: y,
                                elemWidth: k,
                                elemHeight: n,
                                collisionPosition: c,
                                collisionWidth: D,
                                collisionHeight: I,
                                offset: [u[0] + M[0], u[1] + M[1]],
                                my: d.my,
                                at: d.at,
                                within: x,
                                elem: l
                            })
                        });
                        d.using && (e = function(a) {
                            var b = v.left - T.left,
                                c = b + p - k,
                                e = v.top - T.top,
                                g = e + y - n,
                                h = {
                                    target: {
                                        element: A,
                                        left: v.left,
                                        top: v.top,
                                        width: p,
                                        height: y
                                    },
                                    element: {
                                        element: l,
                                        left: T.left,
                                        top: T.top,
                                        width: k,
                                        height: n
                                    },
                                    horizontal: 0 > c ? "left" : 0 < b ? "right" : "center",
                                    vertical: 0 > g ? "top" : 0 < e ? "bottom" : "middle"
                                };
                            p < k && m(b + c) < p && (h.horizontal = "center");
                            y < n && m(e + g) < y && (h.vertical = "middle");
                            f(m(b), m(c)) > f(m(e), m(g)) ? h.important = "horizontal" : h.important = "vertical";
                            d.using.call(this, a, h)
                        });
                        l.offset(a.extend(T, {
                            using: e
                        }))
                    })
                };
                a.ui.position = {
                    fit: {
                        left: function(a, b) {
                            var c = b.within,
                                d = c.isWindow ? c.scrollLeft : c.offset.left,
                                e = c.width,
                                g = a.left - b.collisionPosition.marginLeft,
                                c = d - g,
                                h = g + b.collisionWidth - e - d;
                            b.collisionWidth > e ? 0 < c && 0 >= h ? (d = a.left + c + b.collisionWidth - e - d, a.left += c - d) :
                                a.left = 0 < h && 0 >= c ? d : c > h ? d + e - b.collisionWidth : d : a.left = 0 < c ? a.left + c : 0 < h ? a.left - h : f(a.left - g, a.left)
                        },
                        top: function(a, b) {
                            var c = b.within,
                                d = c.isWindow ? c.scrollTop : c.offset.top,
                                e = b.within.height,
                                g = a.top - b.collisionPosition.marginTop,
                                c = d - g,
                                h = g + b.collisionHeight - e - d;
                            b.collisionHeight > e ? 0 < c && 0 >= h ? (d = a.top + c + b.collisionHeight - e - d, a.top += c - d) : a.top = 0 < h && 0 >= c ? d : c > h ? d + e - b.collisionHeight : d : a.top = 0 < c ? a.top + c : 0 < h ? a.top - h : f(a.top - g, a.top)
                        }
                    },
                    flip: {
                        left: function(a, b) {
                            var c = b.within,
                                d = c.offset.left + c.scrollLeft,
                                e = c.width,
                                f = c.isWindow ? c.scrollLeft : c.offset.left,
                                g = a.left - b.collisionPosition.marginLeft,
                                c = g - f,
                                h = g + b.collisionWidth - e - f,
                                g = "left" === b.my[0] ? -b.elemWidth : "right" === b.my[0] ? b.elemWidth : 0,
                                l = "left" === b.at[0] ? b.targetWidth : "right" === b.at[0] ? -b.targetWidth : 0,
                                k = -2 * b.offset[0];
                            if (0 > c) {
                                if (d = a.left + g + l + k + b.collisionWidth - e - d, 0 > d || d < m(c)) a.left += g + l + k
                            } else 0 < h && (d = a.left - b.collisionPosition.marginLeft + g + l + k - f, 0 < d || m(d) < h) && (a.left += g + l + k)
                        },
                        top: function(a, b) {
                            var c = b.within,
                                d = c.offset.top + c.scrollTop,
                                e = c.height,
                                f = c.isWindow ?
                                c.scrollTop : c.offset.top,
                                g = a.top - b.collisionPosition.marginTop,
                                c = g - f,
                                h = g + b.collisionHeight - e - f,
                                g = "top" === b.my[1] ? -b.elemHeight : "bottom" === b.my[1] ? b.elemHeight : 0,
                                l = "top" === b.at[1] ? b.targetHeight : "bottom" === b.at[1] ? -b.targetHeight : 0,
                                k = -2 * b.offset[1];
                            if (0 > c) {
                                if (d = a.top + g + l + k + b.collisionHeight - e - d, 0 > d || d < m(c)) a.top += g + l + k
                            } else 0 < h && (d = a.top - b.collisionPosition.marginTop + g + l + k - f, 0 < d || m(d) < h) && (a.top += g + l + k)
                        }
                    },
                    flipfit: {
                        left: function() {
                            a.ui.position.flip.left.apply(this, arguments);
                            a.ui.position.fit.left.apply(this,
                                arguments)
                        },
                        top: function() {
                            a.ui.position.flip.top.apply(this, arguments);
                            a.ui.position.fit.top.apply(this, arguments)
                        }
                    }
                };
                (function() {
                    var b, c, d, e, f = document.getElementsByTagName("body")[0];
                    d = document.createElement("div");
                    b = document.createElement(f ? "div" : "body");
                    c = {
                        visibility: "hidden",
                        width: 0,
                        height: 0,
                        border: 0,
                        margin: 0,
                        background: "none"
                    };
                    f && a.extend(c, {
                        position: "absolute",
                        left: "-1000px",
                        top: "-1000px"
                    });
                    for (e in c) b.style[e] = c[e];
                    b.appendChild(d);
                    c = f || document.documentElement;
                    c.insertBefore(b, c.firstChild);
                    d.style.cssText = "position: absolute; left: 10.7432222px;";
                    d = a(d).offset().left;
                    g = 10 < d && 11 > d;
                    b.innerHTML = "";
                    c.removeChild(b)
                })()
            })();
            a.widget("ui.accordion", {
                version: "1.11.4",
                options: {
                    active: 0,
                    animate: {},
                    collapsible: !1,
                    event: "click",
                    header: "> li > :first-child,> :not(li):even",
                    heightStyle: "auto",
                    icons: {
                        activeHeader: "ui-icon-triangle-1-s",
                        header: "ui-icon-triangle-1-e"
                    },
                    activate: null,
                    beforeActivate: null
                },
                hideProps: {
                    borderTopWidth: "hide",
                    borderBottomWidth: "hide",
                    paddingTop: "hide",
                    paddingBottom: "hide",
                    height: "hide"
                },
                showProps: {
                    borderTopWidth: "show",
                    borderBottomWidth: "show",
                    paddingTop: "show",
                    paddingBottom: "show",
                    height: "show"
                },
                _create: function() {
                    var b = this.options;
                    this.prevShow = this.prevHide = a();
                    this.element.addClass("ui-accordion ui-widget ui-helper-reset").attr("role", "tablist");
                    b.collapsible || !1 !== b.active && null != b.active || (b.active = 0);
                    this._processPanels();
                    0 > b.active && (b.active += this.headers.length);
                    this._refresh()
                },
                _getCreateEventData: function() {
                    return {
                        header: this.active,
                        panel: this.active.length ?
                            this.active.next() : a()
                    }
                },
                _createIcons: function() {
                    var b = this.options.icons;
                    b && (a("<span>").addClass("ui-accordion-header-icon ui-icon " + b.header).prependTo(this.headers), this.active.children(".ui-accordion-header-icon").removeClass(b.header).addClass(b.activeHeader), this.headers.addClass("ui-accordion-icons"))
                },
                _destroyIcons: function() {
                    this.headers.removeClass("ui-accordion-icons").children(".ui-accordion-header-icon").remove()
                },
                _destroy: function() {
                    var a;
                    this.element.removeClass("ui-accordion ui-widget ui-helper-reset").removeAttr("role");
                    this.headers.removeClass("ui-accordion-header ui-accordion-header-active ui-state-default ui-corner-all ui-state-active ui-state-disabled ui-corner-top").removeAttr("role").removeAttr("aria-expanded").removeAttr("aria-selected").removeAttr("aria-controls").removeAttr("tabIndex").removeUniqueId();
                    this._destroyIcons();
                    a = this.headers.next().removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-state-disabled").css("display", "").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeUniqueId();
                    "content" !== this.options.heightStyle && a.css("height", "")
                },
                _setOption: function(a, c) {
                    "active" === a ? this._activate(c) : ("event" === a && (this.options.event && this._off(this.headers, this.options.event), this._setupEvents(c)), this._super(a, c), "collapsible" !== a || c || !1 !== this.options.active || this._activate(0), "icons" === a && (this._destroyIcons(), c && this._createIcons()), "disabled" === a && (this.element.toggleClass("ui-state-disabled", !!c).attr("aria-disabled", c), this.headers.add(this.headers.next()).toggleClass("ui-state-disabled", !!c)))
                },
                _keydown: function(b) {
                    if (!b.altKey && !b.ctrlKey) {
                        var c = a.ui.keyCode,
                            d = this.headers.length,
                            g = this.headers.index(b.target),
                            f = !1;
                        switch (b.keyCode) {
                            case c.RIGHT:
                            case c.DOWN:
                                f = this.headers[(g + 1) % d];
                                break;
                            case c.LEFT:
                            case c.UP:
                                f = this.headers[(g - 1 + d) % d];
                                break;
                            case c.SPACE:
                            case c.ENTER:
                                this._eventHandler(b);
                                break;
                            case c.HOME:
                                f = this.headers[0];
                                break;
                            case c.END:
                                f = this.headers[d - 1]
                        }
                        f && (a(b.target).attr("tabIndex", -1), a(f).attr("tabIndex", 0), f.focus(), b.preventDefault())
                    }
                },
                _panelKeyDown: function(b) {
                    b.keyCode ===
                        a.ui.keyCode.UP && b.ctrlKey && a(b.currentTarget).prev().focus()
                },
                refresh: function() {
                    var b = this.options;
                    this._processPanels();
                    !1 === b.active && !0 === b.collapsible || !this.headers.length ? (b.active = !1, this.active = a()) : !1 === b.active ? this._activate(0) : this.active.length && !a.contains(this.element[0], this.active[0]) ? this.headers.length === this.headers.find(".ui-state-disabled").length ? (b.active = !1, this.active = a()) : this._activate(Math.max(0, b.active - 1)) : b.active = this.headers.index(this.active);
                    this._destroyIcons();
                    this._refresh()
                },
                _processPanels: function() {
                    var a = this.headers,
                        c = this.panels;
                    this.headers = this.element.find(this.options.header).addClass("ui-accordion-header ui-state-default ui-corner-all");
                    this.panels = this.headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom").filter(":not(.ui-accordion-content-active)").hide();
                    c && (this._off(a.not(this.headers)), this._off(c.not(this.panels)))
                },
                _refresh: function() {
                    var b, c = this.options,
                        d = c.heightStyle,
                        g = this.element.parent();
                    this.active = this._findActive(c.active).addClass("ui-accordion-header-active ui-state-active ui-corner-top").removeClass("ui-corner-all");
                    this.active.next().addClass("ui-accordion-content-active").show();
                    this.headers.attr("role", "tab").each(function() {
                        var b = a(this),
                            c = b.uniqueId().attr("id"),
                            d = b.next(),
                            g = d.uniqueId().attr("id");
                        b.attr("aria-controls", g);
                        d.attr("aria-labelledby", c)
                    }).next().attr("role", "tabpanel");
                    this.headers.not(this.active).attr({
                        "aria-selected": "false",
                        "aria-expanded": "false",
                        tabIndex: -1
                    }).next().attr({
                        "aria-hidden": "true"
                    }).hide();
                    this.active.length ? this.active.attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    }).next().attr({
                        "aria-hidden": "false"
                    }) : this.headers.eq(0).attr("tabIndex", 0);
                    this._createIcons();
                    this._setupEvents(c.event);
                    "fill" === d ? (b = g.height(), this.element.siblings(":visible").each(function() {
                        var c = a(this),
                            d = c.css("position");
                        "absolute" !== d && "fixed" !== d && (b -= c.outerHeight(!0))
                    }), this.headers.each(function() {
                        b -= a(this).outerHeight(!0)
                    }), this.headers.next().each(function() {
                        a(this).height(Math.max(0,
                            b - a(this).innerHeight() + a(this).height()))
                    }).css("overflow", "auto")) : "auto" === d && (b = 0, this.headers.next().each(function() {
                        b = Math.max(b, a(this).css("height", "").height())
                    }).height(b))
                },
                _activate: function(b) {
                    b = this._findActive(b)[0];
                    b !== this.active[0] && (b = b || this.active[0], this._eventHandler({
                        target: b,
                        currentTarget: b,
                        preventDefault: a.noop
                    }))
                },
                _findActive: function(b) {
                    return "number" === typeof b ? this.headers.eq(b) : a()
                },
                _setupEvents: function(b) {
                    var c = {
                        keydown: "_keydown"
                    };
                    b && a.each(b.split(" "), function(a,
                        b) {
                        c[b] = "_eventHandler"
                    });
                    this._off(this.headers.add(this.headers.next()));
                    this._on(this.headers, c);
                    this._on(this.headers.next(), {
                        keydown: "_panelKeyDown"
                    });
                    this._hoverable(this.headers);
                    this._focusable(this.headers)
                },
                _eventHandler: function(b) {
                    var c = this.options,
                        d = this.active,
                        g = a(b.currentTarget),
                        f = g[0] === d[0],
                        m = f && c.collapsible,
                        h = m ? a() : g.next(),
                        k = d.next(),
                        h = {
                            oldHeader: d,
                            oldPanel: k,
                            newHeader: m ? a() : g,
                            newPanel: h
                        };
                    b.preventDefault();
                    f && !c.collapsible || !1 === this._trigger("beforeActivate", b, h) || (c.active =
                        m ? !1 : this.headers.index(g), this.active = f ? a() : g, this._toggle(h), d.removeClass("ui-accordion-header-active ui-state-active"), c.icons && d.children(".ui-accordion-header-icon").removeClass(c.icons.activeHeader).addClass(c.icons.header), f || (g.removeClass("ui-corner-all").addClass("ui-accordion-header-active ui-state-active ui-corner-top"), c.icons && g.children(".ui-accordion-header-icon").removeClass(c.icons.header).addClass(c.icons.activeHeader), g.next().addClass("ui-accordion-content-active")))
                },
                _toggle: function(b) {
                    var c =
                        b.newPanel,
                        d = this.prevShow.length ? this.prevShow : b.oldPanel;
                    this.prevShow.add(this.prevHide).stop(!0, !0);
                    this.prevShow = c;
                    this.prevHide = d;
                    this.options.animate ? this._animate(c, d, b) : (d.hide(), c.show(), this._toggleComplete(b));
                    d.attr({
                        "aria-hidden": "true"
                    });
                    d.prev().attr({
                        "aria-selected": "false",
                        "aria-expanded": "false"
                    });
                    c.length && d.length ? d.prev().attr({
                        tabIndex: -1,
                        "aria-expanded": "false"
                    }) : c.length && this.headers.filter(function() {
                        return 0 === parseInt(a(this).attr("tabIndex"), 10)
                    }).attr("tabIndex", -1);
                    c.attr("aria-hidden", "false").prev().attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    })
                },
                _animate: function(a, c, d) {
                    var g, f, m, h = this,
                        k = 0,
                        l = a.css("box-sizing"),
                        e = a.length && (!c.length || a.index() < c.index()),
                        n = this.options.animate || {},
                        e = e && n.down || n,
                        p = function() {
                            h._toggleComplete(d)
                        };
                    "number" === typeof e && (m = e);
                    "string" === typeof e && (f = e);
                    f = f || e.easing || n.easing;
                    m = m || e.duration || n.duration;
                    if (!c.length) return a.animate(this.showProps, m, f, p);
                    if (!a.length) return c.animate(this.hideProps, m, f, p);
                    g = a.show().outerHeight();
                    c.animate(this.hideProps, {
                        duration: m,
                        easing: f,
                        step: function(a, b) {
                            b.now = Math.round(a)
                        }
                    });
                    a.hide().animate(this.showProps, {
                        duration: m,
                        easing: f,
                        complete: p,
                        step: function(a, b) {
                            b.now = Math.round(a);
                            "height" !== b.prop ? "content-box" === l && (k += b.now) : "content" !== h.options.heightStyle && (b.now = Math.round(g - c.outerHeight() - k), k = 0)
                        }
                    })
                },
                _toggleComplete: function(a) {
                    var c = a.oldPanel;
                    c.removeClass("ui-accordion-content-active").prev().removeClass("ui-corner-top").addClass("ui-corner-all");
                    c.length &&
                        (c.parent()[0].className = c.parent()[0].className);
                    this._trigger("activate", null, a)
                }
            });
            a.widget("ui.menu", {
                version: "1.11.4",
                defaultElement: "<ul>",
                delay: 300,
                options: {
                    icons: {
                        submenu: "ui-icon-carat-1-e"
                    },
                    items: "> *",
                    menus: "ul",
                    position: {
                        my: "left-1 top",
                        at: "right top"
                    },
                    role: "menu",
                    blur: null,
                    focus: null,
                    select: null
                },
                _create: function() {
                    this.activeMenu = this.element;
                    this.mouseHandled = !1;
                    this.element.uniqueId().addClass("ui-menu ui-widget ui-widget-content").toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length).attr({
                        role: this.options.role,
                        tabIndex: 0
                    });
                    this.options.disabled && this.element.addClass("ui-state-disabled").attr("aria-disabled", "true");
                    this._on({
                        "mousedown .ui-menu-item": function(a) {
                            a.preventDefault()
                        },
                        "click .ui-menu-item": function(b) {
                            var c = a(b.target);
                            !this.mouseHandled && c.not(".ui-state-disabled").length && (this.select(b), b.isPropagationStopped() || (this.mouseHandled = !0), c.has(".ui-menu").length ? this.expand(b) : !this.element.is(":focus") && a(this.document[0].activeElement).closest(".ui-menu").length && (this.element.trigger("focus", [!0]), this.active && 1 === this.active.parents(".ui-menu").length && clearTimeout(this.timer)))
                        },
                        "mouseenter .ui-menu-item": function(b) {
                            if (!this.previousFilter) {
                                var c = a(b.currentTarget);
                                c.siblings(".ui-state-active").removeClass("ui-state-active");
                                this.focus(b, c)
                            }
                        },
                        mouseleave: "collapseAll",
                        "mouseleave .ui-menu": "collapseAll",
                        focus: function(a, c) {
                            var d = this.active || this.element.find(this.options.items).eq(0);
                            c || this.focus(a, d)
                        },
                        blur: function(b) {
                            this._delay(function() {
                                a.contains(this.element[0], this.document[0].activeElement) ||
                                    this.collapseAll(b)
                            })
                        },
                        keydown: "_keydown"
                    });
                    this.refresh();
                    this._on(this.document, {
                        click: function(a) {
                            this._closeOnDocumentClick(a) && this.collapseAll(a);
                            this.mouseHandled = !1
                        }
                    })
                },
                _destroy: function() {
                    this.element.removeAttr("aria-activedescendant").find(".ui-menu").addBack().removeClass("ui-menu ui-widget ui-widget-content ui-menu-icons ui-front").removeAttr("role").removeAttr("tabIndex").removeAttr("aria-labelledby").removeAttr("aria-expanded").removeAttr("aria-hidden").removeAttr("aria-disabled").removeUniqueId().show();
                    this.element.find(".ui-menu-item").removeClass("ui-menu-item").removeAttr("role").removeAttr("aria-disabled").removeUniqueId().removeClass("ui-state-hover").removeAttr("tabIndex").removeAttr("role").removeAttr("aria-haspopup").children().each(function() {
                        var b = a(this);
                        b.data("ui-menu-submenu-carat") && b.remove()
                    });
                    this.element.find(".ui-menu-divider").removeClass("ui-menu-divider ui-widget-content")
                },
                _keydown: function(b) {
                    var c, d, g, f = !0;
                    switch (b.keyCode) {
                        case a.ui.keyCode.PAGE_UP:
                            this.previousPage(b);
                            break;
                        case a.ui.keyCode.PAGE_DOWN:
                            this.nextPage(b);
                            break;
                        case a.ui.keyCode.HOME:
                            this._move("first", "first", b);
                            break;
                        case a.ui.keyCode.END:
                            this._move("last", "last", b);
                            break;
                        case a.ui.keyCode.UP:
                            this.previous(b);
                            break;
                        case a.ui.keyCode.DOWN:
                            this.next(b);
                            break;
                        case a.ui.keyCode.LEFT:
                            this.collapse(b);
                            break;
                        case a.ui.keyCode.RIGHT:
                            this.active && !this.active.is(".ui-state-disabled") && this.expand(b);
                            break;
                        case a.ui.keyCode.ENTER:
                        case a.ui.keyCode.SPACE:
                            this._activate(b);
                            break;
                        case a.ui.keyCode.ESCAPE:
                            this.collapse(b);
                            break;
                        default:
                            f = !1, c = this.previousFilter || "", d = String.fromCharCode(b.keyCode), g = !1, clearTimeout(this.filterTimer), d === c ? g = !0 : d = c + d, c = this._filterMenuItems(d), c = g && -1 !== c.index(this.active.next()) ? this.active.nextAll(".ui-menu-item") : c, c.length || (d = String.fromCharCode(b.keyCode), c = this._filterMenuItems(d)), c.length ? (this.focus(b, c), this.previousFilter = d, this.filterTimer = this._delay(function() {
                                delete this.previousFilter
                            }, 1E3)) : delete this.previousFilter
                    }
                    f && b.preventDefault()
                },
                _activate: function(a) {
                    this.active.is(".ui-state-disabled") ||
                        (this.active.is("[aria-haspopup='true']") ? this.expand(a) : this.select(a))
                },
                refresh: function() {
                    var b, c = this,
                        d = this.options.icons.submenu;
                    b = this.element.find(this.options.menus);
                    this.element.toggleClass("ui-menu-icons", !!this.element.find(".ui-icon").length);
                    b.filter(":not(.ui-menu)").addClass("ui-menu ui-widget ui-widget-content ui-front").hide().attr({
                        role: this.options.role,
                        "aria-hidden": "true",
                        "aria-expanded": "false"
                    }).each(function() {
                        var b = a(this),
                            c = b.parent(),
                            m = a("<span>").addClass("ui-menu-icon ui-icon " +
                                d).data("ui-menu-submenu-carat", !0);
                        c.attr("aria-haspopup", "true").prepend(m);
                        b.attr("aria-labelledby", c.attr("id"))
                    });
                    b = b.add(this.element).find(this.options.items);
                    b.not(".ui-menu-item").each(function() {
                        var b = a(this);
                        c._isDivider(b) && b.addClass("ui-widget-content ui-menu-divider")
                    });
                    b.not(".ui-menu-item, .ui-menu-divider").addClass("ui-menu-item").uniqueId().attr({
                        tabIndex: -1,
                        role: this._itemRole()
                    });
                    b.filter(".ui-state-disabled").attr("aria-disabled", "true");
                    this.active && !a.contains(this.element[0],
                        this.active[0]) && this.blur()
                },
                _itemRole: function() {
                    return {
                        menu: "menuitem",
                        listbox: "option"
                    }[this.options.role]
                },
                _setOption: function(a, c) {
                    "icons" === a && this.element.find(".ui-menu-icon").removeClass(this.options.icons.submenu).addClass(c.submenu);
                    "disabled" === a && this.element.toggleClass("ui-state-disabled", !!c).attr("aria-disabled", c);
                    this._super(a, c)
                },
                focus: function(a, c) {
                    var d;
                    this.blur(a, a && "focus" === a.type);
                    this._scrollIntoView(c);
                    this.active = c.first();
                    d = this.active.addClass("ui-state-focus").removeClass("ui-state-active");
                    this.options.role && this.element.attr("aria-activedescendant", d.attr("id"));
                    this.active.parent().closest(".ui-menu-item").addClass("ui-state-active");
                    a && "keydown" === a.type ? this._close() : this.timer = this._delay(function() {
                        this._close()
                    }, this.delay);
                    d = c.children(".ui-menu");
                    d.length && a && /^mouse/.test(a.type) && this._startOpening(d);
                    this.activeMenu = c.parent();
                    this._trigger("focus", a, {
                        item: c
                    })
                },
                _scrollIntoView: function(b) {
                    var c, d, g;
                    this._hasScroll() && (c = parseFloat(a.css(this.activeMenu[0], "borderTopWidth")) ||
                        0, d = parseFloat(a.css(this.activeMenu[0], "paddingTop")) || 0, c = b.offset().top - this.activeMenu.offset().top - c - d, d = this.activeMenu.scrollTop(), g = this.activeMenu.height(), b = b.outerHeight(), 0 > c ? this.activeMenu.scrollTop(d + c) : c + b > g && this.activeMenu.scrollTop(d + c - g + b))
                },
                blur: function(a, c) {
                    c || clearTimeout(this.timer);
                    this.active && (this.active.removeClass("ui-state-focus"), this.active = null, this._trigger("blur", a, {
                        item: this.active
                    }))
                },
                _startOpening: function(a) {
                    clearTimeout(this.timer);
                    "true" === a.attr("aria-hidden") &&
                        (this.timer = this._delay(function() {
                            this._close();
                            this._open(a)
                        }, this.delay))
                },
                _open: function(b) {
                    var c = a.extend({
                        of: this.active
                    }, this.options.position);
                    clearTimeout(this.timer);
                    this.element.find(".ui-menu").not(b.parents(".ui-menu")).hide().attr("aria-hidden", "true");
                    b.show().removeAttr("aria-hidden").attr("aria-expanded", "true").position(c)
                },
                collapseAll: function(b, c) {
                    clearTimeout(this.timer);
                    this.timer = this._delay(function() {
                        var d = c ? this.element : a(b && b.target).closest(this.element.find(".ui-menu"));
                        d.length || (d = this.element);
                        this._close(d);
                        this.blur(b);
                        this.activeMenu = d
                    }, this.delay)
                },
                _close: function(a) {
                    a || (a = this.active ? this.active.parent() : this.element);
                    a.find(".ui-menu").hide().attr("aria-hidden", "true").attr("aria-expanded", "false").end().find(".ui-state-active").not(".ui-state-focus").removeClass("ui-state-active")
                },
                _closeOnDocumentClick: function(b) {
                    return !a(b.target).closest(".ui-menu").length
                },
                _isDivider: function(a) {
                    return !/[^\-\u2014\u2013\s]/.test(a.text())
                },
                collapse: function(a) {
                    var c =
                        this.active && this.active.parent().closest(".ui-menu-item", this.element);
                    c && c.length && (this._close(), this.focus(a, c))
                },
                expand: function(a) {
                    var c = this.active && this.active.children(".ui-menu ").find(this.options.items).first();
                    c && c.length && (this._open(c.parent()), this._delay(function() {
                        this.focus(a, c)
                    }))
                },
                next: function(a) {
                    this._move("next", "first", a)
                },
                previous: function(a) {
                    this._move("prev", "last", a)
                },
                isFirstItem: function() {
                    return this.active && !this.active.prevAll(".ui-menu-item").length
                },
                isLastItem: function() {
                    return this.active &&
                        !this.active.nextAll(".ui-menu-item").length
                },
                _move: function(a, c, d) {
                    var g;
                    this.active && (g = "first" === a || "last" === a ? this.active["first" === a ? "prevAll" : "nextAll"](".ui-menu-item").eq(-1) : this.active[a + "All"](".ui-menu-item").eq(0));
                    g && g.length && this.active || (g = this.activeMenu.find(this.options.items)[c]());
                    this.focus(d, g)
                },
                nextPage: function(b) {
                    var c, d, g;
                    this.active ? this.isLastItem() || (this._hasScroll() ? (d = this.active.offset().top, g = this.element.height(), this.active.nextAll(".ui-menu-item").each(function() {
                        c =
                            a(this);
                        return 0 > c.offset().top - d - g
                    }), this.focus(b, c)) : this.focus(b, this.activeMenu.find(this.options.items)[this.active ? "last" : "first"]())) : this.next(b)
                },
                previousPage: function(b) {
                    var c, d, g;
                    this.active ? this.isFirstItem() || (this._hasScroll() ? (d = this.active.offset().top, g = this.element.height(), this.active.prevAll(".ui-menu-item").each(function() {
                        c = a(this);
                        return 0 < c.offset().top - d + g
                    }), this.focus(b, c)) : this.focus(b, this.activeMenu.find(this.options.items).first())) : this.next(b)
                },
                _hasScroll: function() {
                    return this.element.outerHeight() <
                        this.element.prop("scrollHeight")
                },
                select: function(b) {
                    this.active = this.active || a(b.target).closest(".ui-menu-item");
                    var c = {
                        item: this.active
                    };
                    this.active.has(".ui-menu").length || this.collapseAll(b, !0);
                    this._trigger("select", b, c)
                },
                _filterMenuItems: function(b) {
                    b = b.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&");
                    var c = new RegExp("^" + b, "i");
                    return this.activeMenu.find(this.options.items).filter(".ui-menu-item").filter(function() {
                        return c.test(a.trim(a(this).text()))
                    })
                }
            });
            a.widget("ui.autocomplete", {
                version: "1.11.4",
                defaultElement: "<input>",
                options: {
                    appendTo: null,
                    autoFocus: !1,
                    delay: 300,
                    minLength: 1,
                    position: {
                        my: "left top",
                        at: "left bottom",
                        collision: "none"
                    },
                    source: null,
                    change: null,
                    close: null,
                    focus: null,
                    open: null,
                    response: null,
                    search: null,
                    select: null
                },
                requestIndex: 0,
                pending: 0,
                _create: function() {
                    var b, c, d, g = this.element[0].nodeName.toLowerCase(),
                        f = "textarea" === g,
                        g = "input" === g;
                    this.isMultiLine = f ? !0 : g ? !1 : this.element.prop("isContentEditable");
                    this.valueMethod = this.element[f || g ? "val" : "text"];
                    this.isNewMenu = !0;
                    this.element.addClass("ui-autocomplete-input").attr("autocomplete",
                        "off");
                    this._on(this.element, {
                        keydown: function(f) {
                            if (this.element.prop("readOnly")) c = d = b = !0;
                            else {
                                c = d = b = !1;
                                var g = a.ui.keyCode;
                                switch (f.keyCode) {
                                    case g.PAGE_UP:
                                        b = !0;
                                        this._move("previousPage", f);
                                        break;
                                    case g.PAGE_DOWN:
                                        b = !0;
                                        this._move("nextPage", f);
                                        break;
                                    case g.UP:
                                        b = !0;
                                        this._keyEvent("previous", f);
                                        break;
                                    case g.DOWN:
                                        b = !0;
                                        this._keyEvent("next", f);
                                        break;
                                    case g.ENTER:
                                        this.menu.active && (b = !0, f.preventDefault(), this.menu.select(f));
                                        break;
                                    case g.TAB:
                                        this.menu.active && this.menu.select(f);
                                        break;
                                    case g.ESCAPE:
                                        this.menu.element.is(":visible") &&
                                            (this.isMultiLine || this._value(this.term), this.close(f), f.preventDefault());
                                        break;
                                    default:
                                        c = !0, this._searchTimeout(f)
                                }
                            }
                        },
                        keypress: function(d) {
                            if (b) b = !1, this.isMultiLine && !this.menu.element.is(":visible") || d.preventDefault();
                            else if (!c) {
                                var f = a.ui.keyCode;
                                switch (d.keyCode) {
                                    case f.PAGE_UP:
                                        this._move("previousPage", d);
                                        break;
                                    case f.PAGE_DOWN:
                                        this._move("nextPage", d);
                                        break;
                                    case f.UP:
                                        this._keyEvent("previous", d);
                                        break;
                                    case f.DOWN:
                                        this._keyEvent("next", d)
                                }
                            }
                        },
                        input: function(a) {
                            d ? (d = !1, a.preventDefault()) :
                                this._searchTimeout(a)
                        },
                        focus: function() {
                            this.selectedItem = null;
                            this.previous = this._value()
                        },
                        blur: function(a) {
                            this.cancelBlur ? delete this.cancelBlur : (clearTimeout(this.searching), this.close(a), this._change(a))
                        }
                    });
                    this._initSource();
                    this.menu = a("<ul>").addClass("ui-autocomplete ui-front").appendTo(this._appendTo()).menu({
                        role: null
                    }).hide().menu("instance");
                    this._on(this.menu.element, {
                        mousedown: function(b) {
                            b.preventDefault();
                            this.cancelBlur = !0;
                            this._delay(function() {
                                delete this.cancelBlur
                            });
                            var c = this.menu.element[0];
                            a(b.target).closest(".ui-menu-item").length || this._delay(function() {
                                var b = this;
                                this.document.one("mousedown", function(d) {
                                    d.target === b.element[0] || d.target === c || a.contains(c, d.target) || b.close()
                                })
                            })
                        },
                        menufocus: function(b, c) {
                            var d;
                            if (this.isNewMenu && (this.isNewMenu = !1, b.originalEvent && /^mouse/.test(b.originalEvent.type))) {
                                this.menu.blur();
                                this.document.one("mousemove", function() {
                                    a(b.target).trigger(b.originalEvent)
                                });
                                return
                            }
                            d = c.item.data("ui-autocomplete-item");
                            !1 !== this._trigger("focus", b, {
                                    item: d
                                }) &&
                                b.originalEvent && /^key/.test(b.originalEvent.type) && this._value(d.value);
                            (d = c.item.attr("aria-label") || d.value) && a.trim(d).length && (this.liveRegion.children().hide(), a("<div>").text(d).appendTo(this.liveRegion))
                        },
                        menuselect: function(a, b) {
                            var c = b.item.data("ui-autocomplete-item"),
                                d = this.previous;
                            this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = d, this._delay(function() {
                                this.previous = d;
                                this.selectedItem = c
                            }));
                            !1 !== this._trigger("select", a, {
                                item: c
                            }) && this._value(c.value);
                            this.term = this._value();
                            this.close(a);
                            this.selectedItem = c
                        }
                    });
                    this.liveRegion = a("<span>", {
                        role: "status",
                        "aria-live": "assertive",
                        "aria-relevant": "additions"
                    }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body);
                    this._on(this.window, {
                        beforeunload: function() {
                            this.element.removeAttr("autocomplete")
                        }
                    })
                },
                _destroy: function() {
                    clearTimeout(this.searching);
                    this.element.removeClass("ui-autocomplete-input").removeAttr("autocomplete");
                    this.menu.element.remove();
                    this.liveRegion.remove()
                },
                _setOption: function(a,
                    c) {
                    this._super(a, c);
                    "source" === a && this._initSource();
                    "appendTo" === a && this.menu.element.appendTo(this._appendTo());
                    "disabled" === a && c && this.xhr && this.xhr.abort()
                },
                _appendTo: function() {
                    var b = this.options.appendTo;
                    b && (b = b.jquery || b.nodeType ? a(b) : this.document.find(b).eq(0));
                    b && b[0] || (b = this.element.closest(".ui-front"));
                    b.length || (b = this.document[0].body);
                    return b
                },
                _initSource: function() {
                    var b, c, d = this;
                    a.isArray(this.options.source) ? (b = this.options.source, this.source = function(c, d) {
                        d(a.ui.autocomplete.filter(b,
                            c.term))
                    }) : "string" === typeof this.options.source ? (c = this.options.source, this.source = function(b, f) {
                        d.xhr && d.xhr.abort();
                        d.xhr = a.ajax({
                            url: c,
                            data: b,
                            dataType: "json",
                            success: function(a) {
                                f(a)
                            },
                            error: function() {
                                f([])
                            }
                        })
                    }) : this.source = this.options.source
                },
                _searchTimeout: function(a) {
                    clearTimeout(this.searching);
                    this.searching = this._delay(function() {
                        var c = this.term === this._value(),
                            d = this.menu.element.is(":visible"),
                            g = a.altKey || a.ctrlKey || a.metaKey || a.shiftKey;
                        if (!c || c && !d && !g) this.selectedItem = null, this.search(null,
                            a)
                    }, this.options.delay)
                },
                search: function(a, c) {
                    a = null != a ? a : this._value();
                    this.term = this._value();
                    if (a.length < this.options.minLength) return this.close(c);
                    if (!1 !== this._trigger("search", c)) return this._search(a)
                },
                _search: function(a) {
                    this.pending++;
                    this.element.addClass("ui-autocomplete-loading");
                    this.cancelSearch = !1;
                    this.source({
                        term: a
                    }, this._response())
                },
                _response: function() {
                    var b = ++this.requestIndex;
                    return a.proxy(function(a) {
                            b === this.requestIndex && this.__response(a);
                            this.pending--;
                            this.pending || this.element.removeClass("ui-autocomplete-loading")
                        },
                        this)
                },
                __response: function(a) {
                    a && (a = this._normalize(a));
                    this._trigger("response", null, {
                        content: a
                    });
                    !this.options.disabled && a && a.length && !this.cancelSearch ? (this._suggest(a), this._trigger("open")) : this._close()
                },
                close: function(a) {
                    this.cancelSearch = !0;
                    this._close(a)
                },
                _close: function(a) {
                    this.menu.element.is(":visible") && (this.menu.element.hide(), this.menu.blur(), this.isNewMenu = !0, this._trigger("close", a))
                },
                _change: function(a) {
                    this.previous !== this._value() && this._trigger("change", a, {
                        item: this.selectedItem
                    })
                },
                _normalize: function(b) {
                    return b.length && b[0].label && b[0].value ? b : a.map(b, function(b) {
                        return "string" === typeof b ? {
                            label: b,
                            value: b
                        } : a.extend({}, b, {
                            label: b.label || b.value,
                            value: b.value || b.label
                        })
                    })
                },
                _suggest: function(b) {
                    var c = this.menu.element.empty();
                    this._renderMenu(c, b);
                    this.isNewMenu = !0;
                    this.menu.refresh();
                    c.show();
                    this._resizeMenu();
                    c.position(a.extend({
                        of: this.element
                    }, this.options.position));
                    this.options.autoFocus && this.menu.next()
                },
                _resizeMenu: function() {
                    var a = this.menu.element;
                    a.outerWidth(Math.max(a.width("").outerWidth() +
                        1, this.element.outerWidth()))
                },
                _renderMenu: function(b, c) {
                    var d = this;
                    a.each(c, function(a, c) {
                        d._renderItemData(b, c)
                    })
                },
                _renderItemData: function(a, c) {
                    return this._renderItem(a, c).data("ui-autocomplete-item", c)
                },
                _renderItem: function(b, c) {
                    return a("<li>").text(c.label).appendTo(b)
                },
                _move: function(a, c) {
                    if (this.menu.element.is(":visible"))
                        if (this.menu.isFirstItem() && /^previous/.test(a) || this.menu.isLastItem() && /^next/.test(a)) this.isMultiLine || this._value(this.term), this.menu.blur();
                        else this.menu[a](c);
                    else this.search(null, c)
                },
                widget: function() {
                    return this.menu.element
                },
                _value: function() {
                    return this.valueMethod.apply(this.element, arguments)
                },
                _keyEvent: function(a, c) {
                    if (!this.isMultiLine || this.menu.element.is(":visible")) this._move(a, c), c.preventDefault()
                }
            });
            a.extend(a.ui.autocomplete, {
                escapeRegex: function(a) {
                    return a.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, "\\$&")
                },
                filter: function(b, c) {
                    var d = new RegExp(a.ui.autocomplete.escapeRegex(c), "i");
                    return a.grep(b, function(a) {
                        return d.test(a.label || a.value ||
                            a)
                    })
                }
            });
            a.widget("ui.autocomplete", a.ui.autocomplete, {
                options: {
                    messages: {
                        noResults: "No search results.",
                        results: function(a) {
                            return a + (1 < a ? " results are" : " result is") + " available, use up and down arrow keys to navigate."
                        }
                    }
                },
                __response: function(b) {
                    var c;
                    this._superApply(arguments);
                    this.options.disabled || this.cancelSearch || (c = b && b.length ? this.options.messages.results(b.length) : this.options.messages.noResults, this.liveRegion.children().hide(), a("<div>").text(c).appendTo(this.liveRegion))
                }
            });
            var ma, fa =
                function() {
                    var b = a(this);
                    setTimeout(function() {
                        b.find(":ui-button").button("refresh")
                    }, 1)
                },
                aa = function(b) {
                    var c = b.name,
                        d = b.form,
                        g = a([]);
                    c && (c = c.replace(/'/g, "\\'"), g = d ? a(d).find("[name='" + c + "'][type=radio]") : a("[name='" + c + "'][type=radio]", b.ownerDocument).filter(function() {
                        return !this.form
                    }));
                    return g
                };
            a.widget("ui.button", {
                version: "1.11.4",
                defaultElement: "<button>",
                options: {
                    disabled: null,
                    text: !0,
                    label: null,
                    icons: {
                        primary: null,
                        secondary: null
                    }
                },
                _create: function() {
                    this.element.closest("form").unbind("reset" +
                        this.eventNamespace).bind("reset" + this.eventNamespace, fa);
                    "boolean" !== typeof this.options.disabled ? this.options.disabled = !!this.element.prop("disabled") : this.element.prop("disabled", this.options.disabled);
                    this._determineButtonType();
                    this.hasTitle = !!this.buttonElement.attr("title");
                    var b = this,
                        c = this.options,
                        d = "checkbox" === this.type || "radio" === this.type,
                        g = d ? "" : "ui-state-active";
                    null === c.label && (c.label = "input" === this.type ? this.buttonElement.val() : this.buttonElement.html());
                    this._hoverable(this.buttonElement);
                    this.buttonElement.addClass("ui-button ui-widget ui-state-default ui-corner-all").attr("role", "button").bind("mouseenter" + this.eventNamespace, function() {
                        c.disabled || this === ma && a(this).addClass("ui-state-active")
                    }).bind("mouseleave" + this.eventNamespace, function() {
                        c.disabled || a(this).removeClass(g)
                    }).bind("click" + this.eventNamespace, function(a) {
                        c.disabled && (a.preventDefault(), a.stopImmediatePropagation())
                    });
                    this._on({
                        focus: function() {
                            this.buttonElement.addClass("ui-state-focus")
                        },
                        blur: function() {
                            this.buttonElement.removeClass("ui-state-focus")
                        }
                    });
                    d && this.element.bind("change" + this.eventNamespace, function() {
                        b.refresh()
                    });
                    "checkbox" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function() {
                        if (c.disabled) return !1
                    }) : "radio" === this.type ? this.buttonElement.bind("click" + this.eventNamespace, function() {
                        if (c.disabled) return !1;
                        a(this).addClass("ui-state-active");
                        b.buttonElement.attr("aria-pressed", "true");
                        var d = b.element[0];
                        aa(d).not(d).map(function() {
                            return a(this).button("widget")[0]
                        }).removeClass("ui-state-active").attr("aria-pressed",
                            "false")
                    }) : (this.buttonElement.bind("mousedown" + this.eventNamespace, function() {
                        if (c.disabled) return !1;
                        a(this).addClass("ui-state-active");
                        ma = this;
                        b.document.one("mouseup", function() {
                            ma = null
                        })
                    }).bind("mouseup" + this.eventNamespace, function() {
                        if (c.disabled) return !1;
                        a(this).removeClass("ui-state-active")
                    }).bind("keydown" + this.eventNamespace, function(b) {
                        if (c.disabled) return !1;
                        b.keyCode !== a.ui.keyCode.SPACE && b.keyCode !== a.ui.keyCode.ENTER || a(this).addClass("ui-state-active")
                    }).bind("keyup" + this.eventNamespace +
                        " blur" + this.eventNamespace,
                        function() {
                            a(this).removeClass("ui-state-active")
                        }), this.buttonElement.is("a") && this.buttonElement.keyup(function(b) {
                        b.keyCode === a.ui.keyCode.SPACE && a(this).click()
                    }));
                    this._setOption("disabled", c.disabled);
                    this._resetButton()
                },
                _determineButtonType: function() {
                    var a, c;
                    this.element.is("[type=checkbox]") ? this.type = "checkbox" : this.element.is("[type=radio]") ? this.type = "radio" : this.element.is("input") ? this.type = "input" : this.type = "button";
                    "checkbox" === this.type || "radio" === this.type ?
                        (a = this.element.parents().last(), c = "label[for='" + this.element.attr("id") + "']", this.buttonElement = a.find(c), this.buttonElement.length || (a = a.length ? a.siblings() : this.element.siblings(), this.buttonElement = a.filter(c), this.buttonElement.length || (this.buttonElement = a.find(c))), this.element.addClass("ui-helper-hidden-accessible"), (a = this.element.is(":checked")) && this.buttonElement.addClass("ui-state-active"), this.buttonElement.prop("aria-pressed", a)) : this.buttonElement = this.element
                },
                widget: function() {
                    return this.buttonElement
                },
                _destroy: function() {
                    this.element.removeClass("ui-helper-hidden-accessible");
                    this.buttonElement.removeClass("ui-button ui-widget ui-state-default ui-corner-all ui-state-active ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only").removeAttr("role").removeAttr("aria-pressed").html(this.buttonElement.find(".ui-button-text").html());
                    this.hasTitle || this.buttonElement.removeAttr("title")
                },
                _setOption: function(a, c) {
                    this._super(a,
                        c);
                    "disabled" === a ? (this.widget().toggleClass("ui-state-disabled", !!c), this.element.prop("disabled", !!c), c && ("checkbox" === this.type || "radio" === this.type ? this.buttonElement.removeClass("ui-state-focus") : this.buttonElement.removeClass("ui-state-focus ui-state-active"))) : this._resetButton()
                },
                refresh: function() {
                    var b = this.element.is("input, button") ? this.element.is(":disabled") : this.element.hasClass("ui-button-disabled");
                    b !== this.options.disabled && this._setOption("disabled", b);
                    "radio" === this.type ? aa(this.element[0]).each(function() {
                        a(this).is(":checked") ?
                            a(this).button("widget").addClass("ui-state-active").attr("aria-pressed", "true") : a(this).button("widget").removeClass("ui-state-active").attr("aria-pressed", "false")
                    }) : "checkbox" === this.type && (this.element.is(":checked") ? this.buttonElement.addClass("ui-state-active").attr("aria-pressed", "true") : this.buttonElement.removeClass("ui-state-active").attr("aria-pressed", "false"))
                },
                _resetButton: function() {
                    if ("input" === this.type) this.options.label && this.element.val(this.options.label);
                    else {
                        var b = this.buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"),
                            c = a("<span></span>", this.document[0]).addClass("ui-button-text").html(this.options.label).appendTo(b.empty()).text(),
                            d = this.options.icons,
                            g = d.primary && d.secondary,
                            f = [];
                        d.primary || d.secondary ? (this.options.text && f.push("ui-button-text-icon" + (g ? "s" : d.primary ? "-primary" : "-secondary")), d.primary && b.prepend("<span class='ui-button-icon-primary ui-icon " + d.primary + "'></span>"), d.secondary && b.append("<span class='ui-button-icon-secondary ui-icon " + d.secondary + "'></span>"), this.options.text || (f.push(g ? "ui-button-icons-only" :
                            "ui-button-icon-only"), this.hasTitle || b.attr("title", a.trim(c)))) : f.push("ui-button-text-only");
                        b.addClass(f.join(" "))
                    }
                }
            });
            a.widget("ui.buttonset", {
                version: "1.11.4",
                options: {
                    items: "button, input[type=button], input[type=submit], input[type=reset], input[type=checkbox], input[type=radio], a, :data(ui-button)"
                },
                _create: function() {
                    this.element.addClass("ui-buttonset")
                },
                _init: function() {
                    this.refresh()
                },
                _setOption: function(a, c) {
                    "disabled" === a && this.buttons.button("option", a, c);
                    this._super(a, c)
                },
                refresh: function() {
                    var b =
                        "rtl" === this.element.css("direction"),
                        c = this.element.find(this.options.items),
                        d = c.filter(":ui-button");
                    c.not(":ui-button").button();
                    d.button("refresh");
                    this.buttons = c.map(function() {
                        return a(this).button("widget")[0]
                    }).removeClass("ui-corner-all ui-corner-left ui-corner-right").filter(":first").addClass(b ? "ui-corner-right" : "ui-corner-left").end().filter(":last").addClass(b ? "ui-corner-left" : "ui-corner-right").end().end()
                },
                _destroy: function() {
                    this.element.removeClass("ui-buttonset");
                    this.buttons.map(function() {
                        return a(this).button("widget")[0]
                    }).removeClass("ui-corner-left ui-corner-right").end().button("destroy")
                }
            });
            a.extend(a.ui, {
                datepicker: {
                    version: "1.11.4"
                }
            });
            var W;
            a.extend(v.prototype, {
                markerClassName: "hasDatepicker",
                maxRows: 4,
                _widgetDatepicker: function() {
                    return this.dpDiv
                },
                setDefaults: function(a) {
                    I(this._defaults, a || {});
                    return this
                },
                _attachDatepicker: function(b, c) {
                    var d, g, f;
                    d = b.nodeName.toLowerCase();
                    g = "div" === d || "span" === d;
                    b.id || (this.uuid += 1, b.id = "dp" + this.uuid);
                    f = this._newInst(a(b), g);
                    f.settings = a.extend({}, c || {});
                    "input" === d ? this._connectDatepicker(b, f) : g && this._inlineDatepicker(b, f)
                },
                _newInst: function(b,
                    c) {
                    return {
                        id: b[0].id.replace(/([^A-Za-z0-9_\-])/g, "\\\\$1"),
                        input: b,
                        selectedDay: 0,
                        selectedMonth: 0,
                        selectedYear: 0,
                        drawMonth: 0,
                        drawYear: 0,
                        inline: c,
                        dpDiv: c ? F(a("<div class='" + this._inlineClass + " ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all'></div>")) : this.dpDiv
                    }
                },
                _connectDatepicker: function(b, c) {
                    var d = a(b);
                    c.append = a([]);
                    c.trigger = a([]);
                    d.hasClass(this.markerClassName) || (this._attachments(d, c), d.addClass(this.markerClassName).keydown(this._doKeyDown).keypress(this._doKeyPress).keyup(this._doKeyUp),
                        this._autoSize(c), a.data(b, "datepicker", c), c.settings.disabled && this._disableDatepicker(b))
                },
                _attachments: function(b, c) {
                    var d, g;
                    d = this._get(c, "appendText");
                    var f = this._get(c, "isRTL");
                    c.append && c.append.remove();
                    d && (c.append = a("<span class='" + this._appendClass + "'>" + d + "</span>"), b[f ? "before" : "after"](c.append));
                    b.unbind("focus", this._showDatepicker);
                    c.trigger && c.trigger.remove();
                    d = this._get(c, "showOn");
                    "focus" !== d && "both" !== d || b.focus(this._showDatepicker);
                    if ("button" === d || "both" === d) d = this._get(c,
                        "buttonText"), g = this._get(c, "buttonImage"), c.trigger = a(this._get(c, "buttonImageOnly") ? a("<img/>").addClass(this._triggerClass).attr({
                        src: g,
                        alt: d,
                        title: d
                    }) : a("<button type='button'></button>").addClass(this._triggerClass).html(g ? a("<img/>").attr({
                        src: g,
                        alt: d,
                        title: d
                    }) : d)), b[f ? "before" : "after"](c.trigger), c.trigger.click(function() {
                        a.datepicker._datepickerShowing && a.datepicker._lastInput === b[0] ? a.datepicker._hideDatepicker() : (a.datepicker._datepickerShowing && a.datepicker._lastInput !== b[0] && a.datepicker._hideDatepicker(),
                            a.datepicker._showDatepicker(b[0]));
                        return !1
                    })
                },
                _autoSize: function(a) {
                    if (this._get(a, "autoSize") && !a.inline) {
                        var c, d, g, f, m = new Date(2009, 11, 20),
                            h = this._get(a, "dateFormat");
                        h.match(/[DM]/) && (c = function(a) {
                            for (f = g = d = 0; f < a.length; f++) a[f].length > d && (d = a[f].length, g = f);
                            return g
                        }, m.setMonth(c(this._get(a, h.match(/MM/) ? "monthNames" : "monthNamesShort"))), m.setDate(c(this._get(a, h.match(/DD/) ? "dayNames" : "dayNamesShort")) + 20 - m.getDay()));
                        a.input.attr("size", this._formatDate(a, m).length)
                    }
                },
                _inlineDatepicker: function(b,
                    c) {
                    var d = a(b);
                    d.hasClass(this.markerClassName) || (d.addClass(this.markerClassName).append(c.dpDiv), a.data(b, "datepicker", c), this._setDate(c, this._getDefaultDate(c), !0), this._updateDatepicker(c), this._updateAlternate(c), c.settings.disabled && this._disableDatepicker(b), c.dpDiv.css("display", "block"))
                },
                _dialogDatepicker: function(b, c, d, g, f) {
                    var m;
                    b = this._dialogInst;
                    b || (this.uuid += 1, b = "dp" + this.uuid, this._dialogInput = a("<input type='text' id='" + b + "' style='position: absolute; top: -100px; width: 0px;'/>"),
                        this._dialogInput.keydown(this._doKeyDown), a("body").append(this._dialogInput), b = this._dialogInst = this._newInst(this._dialogInput, !1), b.settings = {}, a.data(this._dialogInput[0], "datepicker", b));
                    I(b.settings, g || {});
                    c = c && c.constructor === Date ? this._formatDate(b, c) : c;
                    this._dialogInput.val(c);
                    this._pos = f ? f.length ? f : [f.pageX, f.pageY] : null;
                    this._pos || (c = document.documentElement.clientWidth, g = document.documentElement.clientHeight, f = document.documentElement.scrollLeft || document.body.scrollLeft, m = document.documentElement.scrollTop ||
                        document.body.scrollTop, this._pos = [c / 2 - 100 + f, g / 2 - 150 + m]);
                    this._dialogInput.css("left", this._pos[0] + 20 + "px").css("top", this._pos[1] + "px");
                    b.settings.onSelect = d;
                    this._inDialog = !0;
                    this.dpDiv.addClass(this._dialogClass);
                    this._showDatepicker(this._dialogInput[0]);
                    a.blockUI && a.blockUI(this.dpDiv);
                    a.data(this._dialogInput[0], "datepicker", b);
                    return this
                },
                _destroyDatepicker: function(b) {
                    var c, d = a(b),
                        g = a.data(b, "datepicker");
                    d.hasClass(this.markerClassName) && (c = b.nodeName.toLowerCase(), a.removeData(b, "datepicker"),
                        "input" === c ? (g.append.remove(), g.trigger.remove(), d.removeClass(this.markerClassName).unbind("focus", this._showDatepicker).unbind("keydown", this._doKeyDown).unbind("keypress", this._doKeyPress).unbind("keyup", this._doKeyUp)) : "div" !== c && "span" !== c || d.removeClass(this.markerClassName).empty(), W === g && (W = null))
                },
                _enableDatepicker: function(b) {
                    var c, d = a(b),
                        g = a.data(b, "datepicker");
                    if (d.hasClass(this.markerClassName)) {
                        c = b.nodeName.toLowerCase();
                        if ("input" === c) b.disabled = !1, g.trigger.filter("button").each(function() {
                            this.disabled = !1
                        }).end().filter("img").css({
                            opacity: "1.0",
                            cursor: ""
                        });
                        else if ("div" === c || "span" === c) c = d.children("." + this._inlineClass), c.children().removeClass("ui-state-disabled"), c.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !1);
                        this._disabledInputs = a.map(this._disabledInputs, function(a) {
                            return a === b ? null : a
                        })
                    }
                },
                _disableDatepicker: function(b) {
                    var c, d = a(b),
                        g = a.data(b, "datepicker");
                    if (d.hasClass(this.markerClassName)) {
                        c = b.nodeName.toLowerCase();
                        if ("input" === c) b.disabled = !0, g.trigger.filter("button").each(function() {
                            this.disabled = !0
                        }).end().filter("img").css({
                            opacity: "0.5",
                            cursor: "default"
                        });
                        else if ("div" === c || "span" === c) c = d.children("." + this._inlineClass), c.children().addClass("ui-state-disabled"), c.find("select.ui-datepicker-month, select.ui-datepicker-year").prop("disabled", !0);
                        this._disabledInputs = a.map(this._disabledInputs, function(a) {
                            return a === b ? null : a
                        });
                        this._disabledInputs[this._disabledInputs.length] = b
                    }
                },
                _isDisabledDatepicker: function(a) {
                    if (!a) return !1;
                    for (var c = 0; c < this._disabledInputs.length; c++)
                        if (this._disabledInputs[c] ===
                            a) return !0;
                    return !1
                },
                _getInst: function(b) {
                    try {
                        return a.data(b, "datepicker")
                    } catch (c) {
                        throw "Missing instance data for this datepicker";
                    }
                },
                _optionDatepicker: function(b, c, d) {
                    var g, f, m, h, k = this._getInst(b);
                    if (2 === arguments.length && "string" === typeof c) return "defaults" === c ? a.extend({}, a.datepicker._defaults) : k ? "all" === c ? a.extend({}, k.settings) : this._get(k, c) : null;
                    g = c || {};
                    "string" === typeof c && (g = {}, g[c] = d);
                    k && (this._curInst === k && this._hideDatepicker(), f = this._getDateDatepicker(b, !0), m = this._getMinMaxDate(k,
                        "min"), h = this._getMinMaxDate(k, "max"), I(k.settings, g), null !== m && void 0 !== g.dateFormat && void 0 === g.minDate && (k.settings.minDate = this._formatDate(k, m)), null !== h && void 0 !== g.dateFormat && void 0 === g.maxDate && (k.settings.maxDate = this._formatDate(k, h)), "disabled" in g && (g.disabled ? this._disableDatepicker(b) : this._enableDatepicker(b)), this._attachments(a(b), k), this._autoSize(k), this._setDate(k, f), this._updateAlternate(k), this._updateDatepicker(k))
                },
                _changeDatepicker: function(a, c, d) {
                    this._optionDatepicker(a,
                        c, d)
                },
                _refreshDatepicker: function(a) {
                    (a = this._getInst(a)) && this._updateDatepicker(a)
                },
                _setDateDatepicker: function(a, c) {
                    var d = this._getInst(a);
                    d && (this._setDate(d, c), this._updateDatepicker(d), this._updateAlternate(d))
                },
                _getDateDatepicker: function(a, c) {
                    var d = this._getInst(a);
                    d && !d.inline && this._setDateFromField(d, c);
                    return d ? this._getDate(d) : null
                },
                _doKeyDown: function(b) {
                    var c, d = a.datepicker._getInst(b.target);
                    c = !0;
                    var g = d.dpDiv.is(".ui-datepicker-rtl");
                    d._keyEvent = !0;
                    if (a.datepicker._datepickerShowing) switch (b.keyCode) {
                        case 9:
                            a.datepicker._hideDatepicker();
                            c = !1;
                            break;
                        case 13:
                            return c = a("td." + a.datepicker._dayOverClass + ":not(." + a.datepicker._currentClass + ")", d.dpDiv), c[0] && a.datepicker._selectDay(b.target, d.selectedMonth, d.selectedYear, c[0]), (b = a.datepicker._get(d, "onSelect")) ? (c = a.datepicker._formatDate(d), b.apply(d.input ? d.input[0] : null, [c, d])) : a.datepicker._hideDatepicker(), !1;
                        case 27:
                            a.datepicker._hideDatepicker();
                            break;
                        case 33:
                            a.datepicker._adjustDate(b.target, b.ctrlKey ? -a.datepicker._get(d, "stepBigMonths") : -a.datepicker._get(d, "stepMonths"), "M");
                            break;
                        case 34:
                            a.datepicker._adjustDate(b.target, b.ctrlKey ? +a.datepicker._get(d, "stepBigMonths") : +a.datepicker._get(d, "stepMonths"), "M");
                            break;
                        case 35:
                            (b.ctrlKey || b.metaKey) && a.datepicker._clearDate(b.target);
                            c = b.ctrlKey || b.metaKey;
                            break;
                        case 36:
                            (b.ctrlKey || b.metaKey) && a.datepicker._gotoToday(b.target);
                            c = b.ctrlKey || b.metaKey;
                            break;
                        case 37:
                            (b.ctrlKey || b.metaKey) && a.datepicker._adjustDate(b.target, g ? 1 : -1, "D");
                            c = b.ctrlKey || b.metaKey;
                            b.originalEvent.altKey && a.datepicker._adjustDate(b.target, b.ctrlKey ?
                                -a.datepicker._get(d, "stepBigMonths") : -a.datepicker._get(d, "stepMonths"), "M");
                            break;
                        case 38:
                            (b.ctrlKey || b.metaKey) && a.datepicker._adjustDate(b.target, -7, "D");
                            c = b.ctrlKey || b.metaKey;
                            break;
                        case 39:
                            (b.ctrlKey || b.metaKey) && a.datepicker._adjustDate(b.target, g ? -1 : 1, "D");
                            c = b.ctrlKey || b.metaKey;
                            b.originalEvent.altKey && a.datepicker._adjustDate(b.target, b.ctrlKey ? +a.datepicker._get(d, "stepBigMonths") : +a.datepicker._get(d, "stepMonths"), "M");
                            break;
                        case 40:
                            (b.ctrlKey || b.metaKey) && a.datepicker._adjustDate(b.target,
                                7, "D");
                            c = b.ctrlKey || b.metaKey;
                            break;
                        default:
                            c = !1
                    } else 36 === b.keyCode && b.ctrlKey ? a.datepicker._showDatepicker(this) : c = !1;
                    c && (b.preventDefault(), b.stopPropagation())
                },
                _doKeyPress: function(b) {
                    var c, d;
                    c = a.datepicker._getInst(b.target);
                    if (a.datepicker._get(c, "constrainInput")) return c = a.datepicker._possibleChars(a.datepicker._get(c, "dateFormat")), d = String.fromCharCode(null == b.charCode ? b.keyCode : b.charCode), b.ctrlKey || b.metaKey || " " > d || !c || -1 < c.indexOf(d)
                },
                _doKeyUp: function(b) {
                    var c;
                    b = a.datepicker._getInst(b.target);
                    if (b.input.val() !== b.lastVal) try {
                        if (c = a.datepicker.parseDate(a.datepicker._get(b, "dateFormat"), b.input ? b.input.val() : null, a.datepicker._getFormatConfig(b))) a.datepicker._setDateFromField(b), a.datepicker._updateAlternate(b), a.datepicker._updateDatepicker(b)
                    } catch (d) {}
                    return !0
                },
                _showDatepicker: function(b) {
                    b = b.target || b;
                    "input" !== b.nodeName.toLowerCase() && (b = a("input", b.parentNode)[0]);
                    if (!a.datepicker._isDisabledDatepicker(b) && a.datepicker._lastInput !== b) {
                        var c, d, g, f;
                        c = a.datepicker._getInst(b);
                        a.datepicker._curInst &&
                            a.datepicker._curInst !== c && (a.datepicker._curInst.dpDiv.stop(!0, !0), c && a.datepicker._datepickerShowing && a.datepicker._hideDatepicker(a.datepicker._curInst.input[0]));
                        d = (d = a.datepicker._get(c, "beforeShow")) ? d.apply(b, [b, c]) : {};
                        if (!1 !== d && (I(c.settings, d), c.lastVal = null, a.datepicker._lastInput = b, a.datepicker._setDateFromField(c), a.datepicker._inDialog && (b.value = ""), a.datepicker._pos || (a.datepicker._pos = a.datepicker._findPos(b), a.datepicker._pos[1] += b.offsetHeight), g = !1, a(b).parents().each(function() {
                                g |=
                                    "fixed" === a(this).css("position");
                                return !g
                            }), d = {
                                left: a.datepicker._pos[0],
                                top: a.datepicker._pos[1]
                            }, a.datepicker._pos = null, c.dpDiv.empty(), c.dpDiv.css({
                                position: "absolute",
                                display: "block",
                                top: "-1000px"
                            }), a.datepicker._updateDatepicker(c), d = a.datepicker._checkOffset(c, d, g), c.dpDiv.css({
                                position: a.datepicker._inDialog && a.blockUI ? "static" : g ? "fixed" : "absolute",
                                display: "none",
                                left: d.left + "px",
                                top: d.top + "px"
                            }), !c.inline)) {
                            d = a.datepicker._get(c, "showAnim");
                            f = a.datepicker._get(c, "duration");
                            c.dpDiv.css("z-index",
                                D(a(b)) + 1);
                            a.datepicker._datepickerShowing = !0;
                            if (a.effects && a.effects.effect[d]) c.dpDiv.show(d, a.datepicker._get(c, "showOptions"), f);
                            else c.dpDiv[d || "show"](d ? f : null);
                            a.datepicker._shouldFocusInput(c) && c.input.focus();
                            a.datepicker._curInst = c
                        }
                    }
                },
                _updateDatepicker: function(b) {
                    this.maxRows = 4;
                    W = b;
                    b.dpDiv.empty().append(this._generateHTML(b));
                    this._attachHandlers(b);
                    var c, d = this._getNumberOfMonths(b),
                        g = d[1],
                        f = b.dpDiv.find("." + this._dayOverClass + " a");
                    0 < f.length && M.apply(f.get(0));
                    b.dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width("");
                    1 < g && b.dpDiv.addClass("ui-datepicker-multi-" + g).css("width", 17 * g + "em");
                    b.dpDiv[(1 !== d[0] || 1 !== d[1] ? "add" : "remove") + "Class"]("ui-datepicker-multi");
                    b.dpDiv[(this._get(b, "isRTL") ? "add" : "remove") + "Class"]("ui-datepicker-rtl");
                    b === a.datepicker._curInst && a.datepicker._datepickerShowing && a.datepicker._shouldFocusInput(b) && b.input.focus();
                    b.yearshtml && (c = b.yearshtml, setTimeout(function() {
                        c === b.yearshtml && b.yearshtml && b.dpDiv.find("select.ui-datepicker-year:first").replaceWith(b.yearshtml);
                        c = b.yearshtml =
                            null
                    }, 0))
                },
                _shouldFocusInput: function(a) {
                    return a.input && a.input.is(":visible") && !a.input.is(":disabled") && !a.input.is(":focus")
                },
                _checkOffset: function(b, c, d) {
                    var g = b.dpDiv.outerWidth(),
                        f = b.dpDiv.outerHeight(),
                        m = b.input ? b.input.outerWidth() : 0,
                        h = b.input ? b.input.outerHeight() : 0,
                        k = document.documentElement.clientWidth + (d ? 0 : a(document).scrollLeft()),
                        l = document.documentElement.clientHeight + (d ? 0 : a(document).scrollTop());
                    c.left -= this._get(b, "isRTL") ? g - m : 0;
                    c.left -= d && c.left === b.input.offset().left ? a(document).scrollLeft() :
                        0;
                    c.top -= d && c.top === b.input.offset().top + h ? a(document).scrollTop() : 0;
                    c.left -= Math.min(c.left, c.left + g > k && k > g ? Math.abs(c.left + g - k) : 0);
                    c.top -= Math.min(c.top, c.top + f > l && l > f ? Math.abs(f + h) : 0);
                    return c
                },
                _findPos: function(b) {
                    for (var c = this._getInst(b), c = this._get(c, "isRTL"); b && ("hidden" === b.type || 1 !== b.nodeType || a.expr.filters.hidden(b));) b = b[c ? "previousSibling" : "nextSibling"];
                    b = a(b).offset();
                    return [b.left, b.top]
                },
                _hideDatepicker: function(b) {
                    var c, d, g = this._curInst;
                    if (g && (!b || g === a.data(b, "datepicker")) &&
                        this._datepickerShowing) {
                        b = this._get(g, "showAnim");
                        c = this._get(g, "duration");
                        d = function() {
                            a.datepicker._tidyDialog(g)
                        };
                        if (a.effects && (a.effects.effect[b] || a.effects[b])) g.dpDiv.hide(b, a.datepicker._get(g, "showOptions"), c, d);
                        else g.dpDiv["slideDown" === b ? "slideUp" : "fadeIn" === b ? "fadeOut" : "hide"](b ? c : null, d);
                        b || d();
                        this._datepickerShowing = !1;
                        (b = this._get(g, "onClose")) && b.apply(g.input ? g.input[0] : null, [g.input ? g.input.val() : "", g]);
                        this._lastInput = null;
                        this._inDialog && (this._dialogInput.css({
                            position: "absolute",
                            left: "0",
                            top: "-100px"
                        }), a.blockUI && (a.unblockUI(), a("body").append(this.dpDiv)));
                        this._inDialog = !1
                    }
                },
                _tidyDialog: function(a) {
                    a.dpDiv.removeClass(this._dialogClass).unbind(".ui-datepicker-calendar")
                },
                _checkExternalClick: function(b) {
                    if (a.datepicker._curInst) {
                        b = a(b.target);
                        var c = a.datepicker._getInst(b[0]);
                        (!(b[0].id === a.datepicker._mainDivId || 0 !== b.parents("#" + a.datepicker._mainDivId).length || b.hasClass(a.datepicker.markerClassName) || b.closest("." + a.datepicker._triggerClass).length || !a.datepicker._datepickerShowing ||
                            a.datepicker._inDialog && a.blockUI) || b.hasClass(a.datepicker.markerClassName) && a.datepicker._curInst !== c) && a.datepicker._hideDatepicker()
                    }
                },
                _adjustDate: function(b, c, d) {
                    b = a(b);
                    var g = this._getInst(b[0]);
                    this._isDisabledDatepicker(b[0]) || (this._adjustInstDate(g, c + ("M" === d ? this._get(g, "showCurrentAtPos") : 0), d), this._updateDatepicker(g))
                },
                _gotoToday: function(b) {
                    var c = a(b),
                        d = this._getInst(c[0]);
                    this._get(d, "gotoCurrent") && d.currentDay ? (d.selectedDay = d.currentDay, d.drawMonth = d.selectedMonth = d.currentMonth,
                        d.drawYear = d.selectedYear = d.currentYear) : (b = new Date, d.selectedDay = b.getDate(), d.drawMonth = d.selectedMonth = b.getMonth(), d.drawYear = d.selectedYear = b.getFullYear());
                    this._notifyChange(d);
                    this._adjustDate(c)
                },
                _selectMonthYear: function(b, c, d) {
                    b = a(b);
                    var g = this._getInst(b[0]);
                    g["selected" + ("M" === d ? "Month" : "Year")] = g["draw" + ("M" === d ? "Month" : "Year")] = parseInt(c.options[c.selectedIndex].value, 10);
                    this._notifyChange(g);
                    this._adjustDate(b)
                },
                _selectDay: function(b, c, d, g) {
                    var f;
                    f = a(b);
                    a(g).hasClass(this._unselectableClass) ||
                        this._isDisabledDatepicker(f[0]) || (f = this._getInst(f[0]), f.selectedDay = f.currentDay = a("a", g).html(), f.selectedMonth = f.currentMonth = c, f.selectedYear = f.currentYear = d, this._selectDate(b, this._formatDate(f, f.currentDay, f.currentMonth, f.currentYear)))
                },
                _clearDate: function(b) {
                    b = a(b);
                    this._selectDate(b, "")
                },
                _selectDate: function(b, c) {
                    var d;
                    d = a(b);
                    var g = this._getInst(d[0]);
                    c = null != c ? c : this._formatDate(g);
                    g.input && g.input.val(c);
                    this._updateAlternate(g);
                    (d = this._get(g, "onSelect")) ? d.apply(g.input ? g.input[0] :
                        null, [c, g]): g.input && g.input.trigger("change");
                    g.inline ? this._updateDatepicker(g) : (this._hideDatepicker(), this._lastInput = g.input[0], "object" !== typeof g.input[0] && g.input.focus(), this._lastInput = null)
                },
                _updateAlternate: function(b) {
                    var c, d, g, f = this._get(b, "altField");
                    f && (c = this._get(b, "altFormat") || this._get(b, "dateFormat"), d = this._getDate(b), g = this.formatDate(c, d, this._getFormatConfig(b)), a(f).each(function() {
                        a(this).val(g)
                    }))
                },
                noWeekends: function(a) {
                    a = a.getDay();
                    return [0 < a && 6 > a, ""]
                },
                iso8601Week: function(a) {
                    var c =
                        new Date(a.getTime());
                    c.setDate(c.getDate() + 4 - (c.getDay() || 7));
                    a = c.getTime();
                    c.setMonth(0);
                    c.setDate(1);
                    return Math.floor(Math.round((a - c) / 864E5) / 7) + 1
                },
                parseDate: function(b, c, d) {
                    if (null == b || null == c) throw "Invalid arguments";
                    c = "object" === typeof c ? c.toString() : c + "";
                    if ("" === c) return null;
                    var g, f, m, h = 0;
                    f = (d ? d.shortYearCutoff : null) || this._defaults.shortYearCutoff;
                    f = "string" !== typeof f ? f : (new Date).getFullYear() % 100 + parseInt(f, 10);
                    m = (d ? d.dayNamesShort : null) || this._defaults.dayNamesShort;
                    var k = (d ? d.dayNames :
                            null) || this._defaults.dayNames,
                        l = (d ? d.monthNamesShort : null) || this._defaults.monthNamesShort,
                        e = (d ? d.monthNames : null) || this._defaults.monthNames,
                        n = d = -1,
                        p = -1,
                        r = -1,
                        q = !1,
                        u, z = function(a) {
                            (a = g + 1 < b.length && b.charAt(g + 1) === a) && g++;
                            return a
                        },
                        y = function(a) {
                            var b = z(a),
                                b = "@" === a ? 14 : "!" === a ? 20 : "y" === a && b ? 4 : "o" === a ? 3 : 2;
                            a = new RegExp("^\\d{" + ("y" === a ? b : 1) + "," + b + "}");
                            a = c.substring(h).match(a);
                            if (!a) throw "Missing number at position " + h;
                            h += a[0].length;
                            return parseInt(a[0], 10)
                        },
                        v = function(b, d, e) {
                            var f = -1;
                            b = a.map(z(b) ?
                                e : d,
                                function(a, b) {
                                    return [
                                        [b, a]
                                    ]
                                }).sort(function(a, b) {
                                return -(a[1].length - b[1].length)
                            });
                            a.each(b, function(a, b) {
                                var d = b[1];
                                if (c.substr(h, d.length).toLowerCase() === d.toLowerCase()) return f = b[0], h += d.length, !1
                            });
                            if (-1 !== f) return f + 1;
                            throw "Unknown name at position " + h;
                        },
                        C = function() {
                            if (c.charAt(h) !== b.charAt(g)) throw "Unexpected literal at position " + h;
                            h++
                        };
                    for (g = 0; g < b.length; g++)
                        if (q) "'" !== b.charAt(g) || z("'") ? C() : q = !1;
                        else switch (b.charAt(g)) {
                            case "d":
                                p = y("d");
                                break;
                            case "D":
                                v("D", m, k);
                                break;
                            case "o":
                                r =
                                    y("o");
                                break;
                            case "m":
                                n = y("m");
                                break;
                            case "M":
                                n = v("M", l, e);
                                break;
                            case "y":
                                d = y("y");
                                break;
                            case "@":
                                u = new Date(y("@"));
                                d = u.getFullYear();
                                n = u.getMonth() + 1;
                                p = u.getDate();
                                break;
                            case "!":
                                u = new Date((y("!") - this._ticksTo1970) / 1E4);
                                d = u.getFullYear();
                                n = u.getMonth() + 1;
                                p = u.getDate();
                                break;
                            case "'":
                                z("'") ? C() : q = !0;
                                break;
                            default:
                                C()
                        }
                    if (h < c.length && (m = c.substr(h), !/^\s+/.test(m))) throw "Extra/unparsed characters found in date: " + m; - 1 === d ? d = (new Date).getFullYear() : 100 > d && (d += (new Date).getFullYear() - (new Date).getFullYear() %
                        100 + (d <= f ? 0 : -100));
                    if (-1 < r) {
                        n = 1;
                        p = r;
                        do {
                            f = this._getDaysInMonth(d, n - 1);
                            if (p <= f) break;
                            n++;
                            p -= f
                        } while (1)
                    }
                    u = this._daylightSavingAdjust(new Date(d, n - 1, p));
                    if (u.getFullYear() !== d || u.getMonth() + 1 !== n || u.getDate() !== p) throw "Invalid date";
                    return u
                },
                ATOM: "yy-mm-dd",
                COOKIE: "D, dd M yy",
                ISO_8601: "yy-mm-dd",
                RFC_822: "D, d M y",
                RFC_850: "DD, dd-M-y",
                RFC_1036: "D, d M y",
                RFC_1123: "D, d M yy",
                RFC_2822: "D, d M yy",
                RSS: "D, d M y",
                TICKS: "!",
                TIMESTAMP: "@",
                W3C: "yy-mm-dd",
                _ticksTo1970: 864E9 * (718685 + Math.floor(492.5) - Math.floor(19.7) +
                    Math.floor(4.925)),
                formatDate: function(a, c, d) {
                    if (!c) return "";
                    var g, f = (d ? d.dayNamesShort : null) || this._defaults.dayNamesShort,
                        m = (d ? d.dayNames : null) || this._defaults.dayNames,
                        h = (d ? d.monthNamesShort : null) || this._defaults.monthNamesShort;
                    d = (d ? d.monthNames : null) || this._defaults.monthNames;
                    var k = function(c) {
                            (c = g + 1 < a.length && a.charAt(g + 1) === c) && g++;
                            return c
                        },
                        l = function(a, b, c) {
                            b = "" + b;
                            if (k(a))
                                for (; b.length < c;) b = "0" + b;
                            return b
                        },
                        e = function(a, b, c, d) {
                            return k(a) ? d[b] : c[b]
                        },
                        n = "",
                        p = !1;
                    if (c)
                        for (g = 0; g < a.length; g++)
                            if (p) "'" !==
                                a.charAt(g) || k("'") ? n += a.charAt(g) : p = !1;
                            else switch (a.charAt(g)) {
                                case "d":
                                    n += l("d", c.getDate(), 2);
                                    break;
                                case "D":
                                    n += e("D", c.getDay(), f, m);
                                    break;
                                case "o":
                                    n += l("o", Math.round(((new Date(c.getFullYear(), c.getMonth(), c.getDate())).getTime() - (new Date(c.getFullYear(), 0, 0)).getTime()) / 864E5), 3);
                                    break;
                                case "m":
                                    n += l("m", c.getMonth() + 1, 2);
                                    break;
                                case "M":
                                    n += e("M", c.getMonth(), h, d);
                                    break;
                                case "y":
                                    n += k("y") ? c.getFullYear() : (10 > c.getYear() % 100 ? "0" : "") + c.getYear() % 100;
                                    break;
                                case "@":
                                    n += c.getTime();
                                    break;
                                case "!":
                                    n +=
                                        1E4 * c.getTime() + this._ticksTo1970;
                                    break;
                                case "'":
                                    k("'") ? n += "'" : p = !0;
                                    break;
                                default:
                                    n += a.charAt(g)
                            }
                    return n
                },
                _possibleChars: function(a) {
                    var c, d = "",
                        g = !1,
                        f = function(d) {
                            (d = c + 1 < a.length && a.charAt(c + 1) === d) && c++;
                            return d
                        };
                    for (c = 0; c < a.length; c++)
                        if (g) "'" !== a.charAt(c) || f("'") ? d += a.charAt(c) : g = !1;
                        else switch (a.charAt(c)) {
                            case "d":
                            case "m":
                            case "y":
                            case "@":
                                d += "0123456789";
                                break;
                            case "D":
                            case "M":
                                return null;
                            case "'":
                                f("'") ? d += "'" : g = !0;
                                break;
                            default:
                                d += a.charAt(c)
                        }
                    return d
                },
                _get: function(a, c) {
                    return void 0 !==
                        a.settings[c] ? a.settings[c] : this._defaults[c]
                },
                _setDateFromField: function(a, c) {
                    if (a.input.val() !== a.lastVal) {
                        var d = this._get(a, "dateFormat"),
                            g = a.lastVal = a.input ? a.input.val() : null,
                            f = this._getDefaultDate(a),
                            m = f,
                            h = this._getFormatConfig(a);
                        try {
                            m = this.parseDate(d, g, h) || f
                        } catch (k) {
                            g = c ? "" : g
                        }
                        a.selectedDay = m.getDate();
                        a.drawMonth = a.selectedMonth = m.getMonth();
                        a.drawYear = a.selectedYear = m.getFullYear();
                        a.currentDay = g ? m.getDate() : 0;
                        a.currentMonth = g ? m.getMonth() : 0;
                        a.currentYear = g ? m.getFullYear() : 0;
                        this._adjustInstDate(a)
                    }
                },
                _getDefaultDate: function(a) {
                    return this._restrictMinMax(a, this._determineDate(a, this._get(a, "defaultDate"), new Date))
                },
                _determineDate: function(b, c, d) {
                    var g = function(a) {
                            var b = new Date;
                            b.setDate(b.getDate() + a);
                            return b
                        },
                        f = function(c) {
                            try {
                                return a.datepicker.parseDate(a.datepicker._get(b, "dateFormat"), c, a.datepicker._getFormatConfig(b))
                            } catch (d) {}
                            for (var f = (c.toLowerCase().match(/^c/) ? a.datepicker._getDate(b) : null) || new Date, g = f.getFullYear(), l = f.getMonth(), f = f.getDate(), e = /([+\-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,
                                    k = e.exec(c); k;) {
                                switch (k[2] || "d") {
                                    case "d":
                                    case "D":
                                        f += parseInt(k[1], 10);
                                        break;
                                    case "w":
                                    case "W":
                                        f += 7 * parseInt(k[1], 10);
                                        break;
                                    case "m":
                                    case "M":
                                        l += parseInt(k[1], 10);
                                        f = Math.min(f, a.datepicker._getDaysInMonth(g, l));
                                        break;
                                    case "y":
                                    case "Y":
                                        g += parseInt(k[1], 10), f = Math.min(f, a.datepicker._getDaysInMonth(g, l))
                                }
                                k = e.exec(c)
                            }
                            return new Date(g, l, f)
                        };
                    if (c = (c = null == c || "" === c ? d : "string" === typeof c ? f(c) : "number" === typeof c ? isNaN(c) ? d : g(c) : new Date(c.getTime())) && "Invalid Date" === c.toString() ? d : c) c.setHours(0),
                        c.setMinutes(0), c.setSeconds(0), c.setMilliseconds(0);
                    return this._daylightSavingAdjust(c)
                },
                _daylightSavingAdjust: function(a) {
                    if (!a) return null;
                    a.setHours(12 < a.getHours() ? a.getHours() + 2 : 0);
                    return a
                },
                _setDate: function(a, c, d) {
                    var g = !c,
                        f = a.selectedMonth,
                        m = a.selectedYear;
                    c = this._restrictMinMax(a, this._determineDate(a, c, new Date));
                    a.selectedDay = a.currentDay = c.getDate();
                    a.drawMonth = a.selectedMonth = a.currentMonth = c.getMonth();
                    a.drawYear = a.selectedYear = a.currentYear = c.getFullYear();
                    f === a.selectedMonth && m ===
                        a.selectedYear || d || this._notifyChange(a);
                    this._adjustInstDate(a);
                    a.input && a.input.val(g ? "" : this._formatDate(a))
                },
                _getDate: function(a) {
                    return !a.currentYear || a.input && "" === a.input.val() ? null : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay))
                },
                _attachHandlers: function(b) {
                    var c = this._get(b, "stepMonths"),
                        d = "#" + b.id.replace(/\\\\/g, "\\");
                    b.dpDiv.find("[data-handler]").map(function() {
                        a(this).bind(this.getAttribute("data-event"), {
                            prev: function() {
                                a.datepicker._adjustDate(d, -c,
                                    "M")
                            },
                            next: function() {
                                a.datepicker._adjustDate(d, +c, "M")
                            },
                            hide: function() {
                                a.datepicker._hideDatepicker()
                            },
                            today: function() {
                                a.datepicker._gotoToday(d)
                            },
                            selectDay: function() {
                                a.datepicker._selectDay(d, +this.getAttribute("data-month"), +this.getAttribute("data-year"), this);
                                return !1
                            },
                            selectMonth: function() {
                                a.datepicker._selectMonthYear(d, this, "M");
                                return !1
                            },
                            selectYear: function() {
                                a.datepicker._selectMonthYear(d, this, "Y");
                                return !1
                            }
                        }[this.getAttribute("data-handler")])
                    })
                },
                _generateHTML: function(a) {
                    var c, d,
                        g, f, m, h, k, l, e, n, p, r, q, u, z, y, v, C, D, A, x, H, E, F, I, J, G, M = new Date,
                        M = this._daylightSavingAdjust(new Date(M.getFullYear(), M.getMonth(), M.getDate())),
                        O = this._get(a, "isRTL");
                    h = this._get(a, "showButtonPanel");
                    g = this._get(a, "hideIfNoPrevNext");
                    m = this._get(a, "navigationAsDateFormat");
                    var R = this._getNumberOfMonths(a),
                        P = this._get(a, "showCurrentAtPos");
                    f = this._get(a, "stepMonths");
                    var S = 1 !== R[0] || 1 !== R[1],
                        V = this._daylightSavingAdjust(a.currentDay ? new Date(a.currentYear, a.currentMonth, a.currentDay) : new Date(9999, 9,
                            9)),
                        W = this._getMinMaxDate(a, "min"),
                        aa = this._getMinMaxDate(a, "max"),
                        P = a.drawMonth - P,
                        Y = a.drawYear;
                    0 > P && (P += 12, Y--);
                    if (aa)
                        for (c = this._daylightSavingAdjust(new Date(aa.getFullYear(), aa.getMonth() - R[0] * R[1] + 1, aa.getDate())), c = W && c < W ? W : c; this._daylightSavingAdjust(new Date(Y, P, 1)) > c;) P--, 0 > P && (P = 11, Y--);
                    a.drawMonth = P;
                    a.drawYear = Y;
                    c = this._get(a, "prevText");
                    c = m ? this.formatDate(c, this._daylightSavingAdjust(new Date(Y, P - f, 1)), this._getFormatConfig(a)) : c;
                    c = this._canAdjustMonth(a, -1, Y, P) ? "<a class='ui-datepicker-prev ui-corner-all' data-handler='prev' data-event='click' title='" +
                        c + "'><span class='ui-icon ui-icon-circle-triangle-" + (O ? "e" : "w") + "'>" + c + "</span></a>" : g ? "" : "<a class='ui-datepicker-prev ui-corner-all ui-state-disabled' title='" + c + "'><span class='ui-icon ui-icon-circle-triangle-" + (O ? "e" : "w") + "'>" + c + "</span></a>";
                    d = this._get(a, "nextText");
                    d = m ? this.formatDate(d, this._daylightSavingAdjust(new Date(Y, P + f, 1)), this._getFormatConfig(a)) : d;
                    g = this._canAdjustMonth(a, 1, Y, P) ? "<a class='ui-datepicker-next ui-corner-all' data-handler='next' data-event='click' title='" + d + "'><span class='ui-icon ui-icon-circle-triangle-" +
                        (O ? "w" : "e") + "'>" + d + "</span></a>" : g ? "" : "<a class='ui-datepicker-next ui-corner-all ui-state-disabled' title='" + d + "'><span class='ui-icon ui-icon-circle-triangle-" + (O ? "w" : "e") + "'>" + d + "</span></a>";
                    f = this._get(a, "currentText");
                    d = this._get(a, "gotoCurrent") && a.currentDay ? V : M;
                    f = m ? this.formatDate(f, d, this._getFormatConfig(a)) : f;
                    m = a.inline ? "" : "<button type='button' class='ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all' data-handler='hide' data-event='click'>" + this._get(a, "closeText") +
                        "</button>";
                    h = h ? "<div class='ui-datepicker-buttonpane ui-widget-content'>" + (O ? m : "") + (this._isInRange(a, d) ? "<button type='button' class='ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all' data-handler='today' data-event='click'>" + f + "</button>" : "") + (O ? "" : m) + "</div>" : "";
                    m = parseInt(this._get(a, "firstDay"), 10);
                    m = isNaN(m) ? 0 : m;
                    f = this._get(a, "showWeek");
                    d = this._get(a, "dayNames");
                    k = this._get(a, "dayNamesMin");
                    l = this._get(a, "monthNames");
                    e = this._get(a, "monthNamesShort");
                    n = this._get(a,
                        "beforeShowDay");
                    p = this._get(a, "showOtherMonths");
                    r = this._get(a, "selectOtherMonths");
                    q = this._getDefaultDate(a);
                    u = "";
                    z;
                    for (y = 0; y < R[0]; y++) {
                        v = "";
                        this.maxRows = 4;
                        for (C = 0; C < R[1]; C++) {
                            D = this._daylightSavingAdjust(new Date(Y, P, a.selectedDay));
                            z = " ui-corner-all";
                            A = "";
                            if (S) {
                                A += "<div class='ui-datepicker-group";
                                if (1 < R[1]) switch (C) {
                                    case 0:
                                        A += " ui-datepicker-group-first";
                                        z = " ui-corner-" + (O ? "right" : "left");
                                        break;
                                    case R[1] - 1:
                                        A += " ui-datepicker-group-last";
                                        z = " ui-corner-" + (O ? "left" : "right");
                                        break;
                                    default:
                                        A += " ui-datepicker-group-middle",
                                            z = ""
                                }
                                A += "'>"
                            }
                            A += "<div class='ui-datepicker-header ui-widget-header ui-helper-clearfix" + z + "'>" + (/all|left/.test(z) && 0 === y ? O ? g : c : "") + (/all|right/.test(z) && 0 === y ? O ? c : g : "") + this._generateMonthYearHeader(a, P, Y, W, aa, 0 < y || 0 < C, l, e) + "</div><table class='ui-datepicker-calendar'><thead><tr>";
                            x = f ? "<th class='ui-datepicker-week-col'>" + this._get(a, "weekHeader") + "</th>" : "";
                            for (z = 0; 7 > z; z++) H = (z + m) % 7, x += "<th scope='col'" + (5 <= (z + m + 6) % 7 ? " class='ui-datepicker-week-end'" : "") + "><span title='" + d[H] + "'>" + k[H] + "</span></th>";
                            A += x + "</tr></thead><tbody>";
                            x = this._getDaysInMonth(Y, P);
                            Y === a.selectedYear && P === a.selectedMonth && (a.selectedDay = Math.min(a.selectedDay, x));
                            z = (this._getFirstDayOfMonth(Y, P) - m + 7) % 7;
                            x = Math.ceil((z + x) / 7);
                            this.maxRows = x = S ? this.maxRows > x ? this.maxRows : x : x;
                            H = this._daylightSavingAdjust(new Date(Y, P, 1 - z));
                            for (E = 0; E < x; E++) {
                                A += "<tr>";
                                F = f ? "<td class='ui-datepicker-week-col'>" + this._get(a, "calculateWeek")(H) + "</td>" : "";
                                for (z = 0; 7 > z; z++) I = n ? n.apply(a.input ? a.input[0] : null, [H]) : [!0, ""], G = (J = H.getMonth() !== P) && !r ||
                                    !I[0] || W && H < W || aa && H > aa, F += "<td class='" + (5 <= (z + m + 6) % 7 ? " ui-datepicker-week-end" : "") + (J ? " ui-datepicker-other-month" : "") + (H.getTime() === D.getTime() && P === a.selectedMonth && a._keyEvent || q.getTime() === H.getTime() && q.getTime() === D.getTime() ? " " + this._dayOverClass : "") + (G ? " " + this._unselectableClass + " ui-state-disabled" : "") + (J && !p ? "" : " " + I[1] + (H.getTime() === V.getTime() ? " " + this._currentClass : "") + (H.getTime() === M.getTime() ? " ui-datepicker-today" : "")) + "'" + (J && !p || !I[2] ? "" : " title='" + I[2].replace(/'/g, "&#39;") +
                                        "'") + (G ? "" : " data-handler='selectDay' data-event='click' data-month='" + H.getMonth() + "' data-year='" + H.getFullYear() + "'") + ">" + (J && !p ? "&#xa0;" : G ? "<span class='ui-state-default'>" + H.getDate() + "</span>" : "<a class='ui-state-default" + (H.getTime() === M.getTime() ? " ui-state-highlight" : "") + (H.getTime() === V.getTime() ? " ui-state-active" : "") + (J ? " ui-priority-secondary" : "") + "' href='#'>" + H.getDate() + "</a>") + "</td>", H.setDate(H.getDate() + 1), H = this._daylightSavingAdjust(H);
                                A += F + "</tr>"
                            }
                            P++;
                            11 < P && (P = 0, Y++);
                            A += "</tbody></table>" +
                                (S ? "</div>" + (0 < R[0] && C === R[1] - 1 ? "<div class='ui-datepicker-row-break'></div>" : "") : "");
                            v += A
                        }
                        u += v
                    }
                    a._keyEvent = !1;
                    return u + h
                },
                _generateMonthYearHeader: function(a, c, d, g, f, m, h, k) {
                    var l, e, n, p = this._get(a, "changeMonth"),
                        r = this._get(a, "changeYear"),
                        q = this._get(a, "showMonthAfterYear"),
                        u = "<div class='ui-datepicker-title'>",
                        z = "";
                    if (m || !p) z += "<span class='ui-datepicker-month'>" + h[c] + "</span>";
                    else {
                        h = g && g.getFullYear() === d;
                        l = f && f.getFullYear() === d;
                        z += "<select class='ui-datepicker-month' data-handler='selectMonth' data-event='change'>";
                        for (e = 0; 12 > e; e++)(!h || e >= g.getMonth()) && (!l || e <= f.getMonth()) && (z += "<option value='" + e + "'" + (e === c ? " selected='selected'" : "") + ">" + k[e] + "</option>");
                        z += "</select>"
                    }
                    q || (u += z + (!m && p && r ? "" : "&#xa0;"));
                    if (!a.yearshtml)
                        if (a.yearshtml = "", m || !r) u += "<span class='ui-datepicker-year'>" + d + "</span>";
                        else {
                            k = this._get(a, "yearRange").split(":");
                            n = (new Date).getFullYear();
                            h = function(a) {
                                a = a.match(/c[+\-].*/) ? d + parseInt(a.substring(1), 10) : a.match(/[+\-].*/) ? n + parseInt(a, 10) : parseInt(a, 10);
                                return isNaN(a) ? n : a
                            };
                            c = h(k[0]);
                            k = Math.max(c, h(k[1] || ""));
                            c = g ? Math.max(c, g.getFullYear()) : c;
                            k = f ? Math.min(k, f.getFullYear()) : k;
                            for (a.yearshtml += "<select class='ui-datepicker-year' data-handler='selectYear' data-event='change'>"; c <= k; c++) a.yearshtml += "<option value='" + c + "'" + (c === d ? " selected='selected'" : "") + ">" + c + "</option>";
                            a.yearshtml += "</select>";
                            u += a.yearshtml;
                            a.yearshtml = null
                        }
                    u += this._get(a, "yearSuffix");
                    q && (u += (!m && p && r ? "" : "&#xa0;") + z);
                    return u + "</div>"
                },
                _adjustInstDate: function(a, c, d) {
                    var g = a.drawYear + ("Y" === d ? c : 0),
                        f = a.drawMonth +
                        ("M" === d ? c : 0);
                    c = Math.min(a.selectedDay, this._getDaysInMonth(g, f)) + ("D" === d ? c : 0);
                    g = this._restrictMinMax(a, this._daylightSavingAdjust(new Date(g, f, c)));
                    a.selectedDay = g.getDate();
                    a.drawMonth = a.selectedMonth = g.getMonth();
                    a.drawYear = a.selectedYear = g.getFullYear();
                    "M" !== d && "Y" !== d || this._notifyChange(a)
                },
                _restrictMinMax: function(a, c) {
                    var d = this._getMinMaxDate(a, "min"),
                        g = this._getMinMaxDate(a, "max"),
                        d = d && c < d ? d : c;
                    return g && d > g ? g : d
                },
                _notifyChange: function(a) {
                    var c = this._get(a, "onChangeMonthYear");
                    c && c.apply(a.input ?
                        a.input[0] : null, [a.selectedYear, a.selectedMonth + 1, a])
                },
                _getNumberOfMonths: function(a) {
                    a = this._get(a, "numberOfMonths");
                    return null == a ? [1, 1] : "number" === typeof a ? [1, a] : a
                },
                _getMinMaxDate: function(a, c) {
                    return this._determineDate(a, this._get(a, c + "Date"), null)
                },
                _getDaysInMonth: function(a, c) {
                    return 32 - this._daylightSavingAdjust(new Date(a, c, 32)).getDate()
                },
                _getFirstDayOfMonth: function(a, c) {
                    return (new Date(a, c, 1)).getDay()
                },
                _canAdjustMonth: function(a, c, d, g) {
                    var f = this._getNumberOfMonths(a);
                    d = this._daylightSavingAdjust(new Date(d,
                        g + (0 > c ? c : f[0] * f[1]), 1));
                    0 > c && d.setDate(this._getDaysInMonth(d.getFullYear(), d.getMonth()));
                    return this._isInRange(a, d)
                },
                _isInRange: function(a, c) {
                    var d, g, f = this._getMinMaxDate(a, "min"),
                        m = this._getMinMaxDate(a, "max"),
                        h = null,
                        k = null;
                    if (d = this._get(a, "yearRange")) d = d.split(":"), g = (new Date).getFullYear(), h = parseInt(d[0], 10), k = parseInt(d[1], 10), d[0].match(/[+\-].*/) && (h += g), d[1].match(/[+\-].*/) && (k += g);
                    return (!f || c.getTime() >= f.getTime()) && (!m || c.getTime() <= m.getTime()) && (!h || c.getFullYear() >= h) && (!k ||
                        c.getFullYear() <= k)
                },
                _getFormatConfig: function(a) {
                    var c = this._get(a, "shortYearCutoff"),
                        c = "string" !== typeof c ? c : (new Date).getFullYear() % 100 + parseInt(c, 10);
                    return {
                        shortYearCutoff: c,
                        dayNamesShort: this._get(a, "dayNamesShort"),
                        dayNames: this._get(a, "dayNames"),
                        monthNamesShort: this._get(a, "monthNamesShort"),
                        monthNames: this._get(a, "monthNames")
                    }
                },
                _formatDate: function(a, c, d, g) {
                    c || (a.currentDay = a.selectedDay, a.currentMonth = a.selectedMonth, a.currentYear = a.selectedYear);
                    c = c ? "object" === typeof c ? c : this._daylightSavingAdjust(new Date(g,
                        d, c)) : this._daylightSavingAdjust(new Date(a.currentYear, a.currentMonth, a.currentDay));
                    return this.formatDate(this._get(a, "dateFormat"), c, this._getFormatConfig(a))
                }
            });
            a.fn.datepicker = function(b) {
                if (!this.length) return this;
                a.datepicker.initialized || (a(document).mousedown(a.datepicker._checkExternalClick), a.datepicker.initialized = !0);
                0 === a("#" + a.datepicker._mainDivId).length && a("body").append(a.datepicker.dpDiv);
                var c = Array.prototype.slice.call(arguments, 1);
                return "string" === typeof b && ("isDisabled" ===
                    b || "getDate" === b || "widget" === b) || "option" === b && 2 === arguments.length && "string" === typeof arguments[1] ? a.datepicker["_" + b + "Datepicker"].apply(a.datepicker, [this[0]].concat(c)) : this.each(function() {
                    "string" === typeof b ? a.datepicker["_" + b + "Datepicker"].apply(a.datepicker, [this].concat(c)) : a.datepicker._attachDatepicker(this, b)
                })
            };
            a.datepicker = new v;
            a.datepicker.initialized = !1;
            a.datepicker.uuid = (new Date).getTime();
            a.datepicker.version = "1.11.4";
            a.widget("ui.draggable", a.ui.mouse, {
                version: "1.11.4",
                widgetEventPrefix: "drag",
                options: {
                    addClasses: !0,
                    appendTo: "parent",
                    axis: !1,
                    connectToSortable: !1,
                    containment: !1,
                    cursor: "auto",
                    cursorAt: !1,
                    grid: !1,
                    handle: !1,
                    helper: "original",
                    iframeFix: !1,
                    opacity: !1,
                    refreshPositions: !1,
                    revert: !1,
                    revertDuration: 500,
                    scope: "default",
                    scroll: !0,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    snap: !1,
                    snapMode: "both",
                    snapTolerance: 20,
                    stack: !1,
                    zIndex: !1,
                    drag: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    "original" === this.options.helper && this._setPositionRelative();
                    this.options.addClasses && this.element.addClass("ui-draggable");
                    this.options.disabled && this.element.addClass("ui-draggable-disabled");
                    this._setHandleClassName();
                    this._mouseInit()
                },
                _setOption: function(a, c) {
                    this._super(a, c);
                    "handle" === a && (this._removeHandleClassName(), this._setHandleClassName())
                },
                _destroy: function() {
                    (this.helper || this.element).is(".ui-draggable-dragging") ? this.destroyOnClear = !0 : (this.element.removeClass("ui-draggable ui-draggable-dragging ui-draggable-disabled"), this._removeHandleClassName(), this._mouseDestroy())
                },
                _mouseCapture: function(b) {
                    var c =
                        this.options;
                    this._blurActiveElement(b);
                    if (this.helper || c.disabled || 0 < a(b.target).closest(".ui-resizable-handle").length) return !1;
                    this.handle = this._getHandle(b);
                    if (!this.handle) return !1;
                    this._blockFrames(!0 === c.iframeFix ? "iframe" : c.iframeFix);
                    return !0
                },
                _blockFrames: function(b) {
                    this.iframeBlocks = this.document.find(b).map(function() {
                        var b = a(this);
                        return a("<div>").css("position", "absolute").appendTo(b.parent()).outerWidth(b.outerWidth()).outerHeight(b.outerHeight()).offset(b.offset())[0]
                    })
                },
                _unblockFrames: function() {
                    this.iframeBlocks &&
                        (this.iframeBlocks.remove(), delete this.iframeBlocks)
                },
                _blurActiveElement: function(b) {
                    var c = this.document[0];
                    if (this.handleElement.is(b.target)) try {
                        c.activeElement && "body" !== c.activeElement.nodeName.toLowerCase() && a(c.activeElement).blur()
                    } catch (d) {}
                },
                _mouseStart: function(b) {
                    var c = this.options;
                    this.helper = this._createHelper(b);
                    this.helper.addClass("ui-draggable-dragging");
                    this._cacheHelperProportions();
                    a.ui.ddmanager && (a.ui.ddmanager.current = this);
                    this._cacheMargins();
                    this.cssPosition = this.helper.css("position");
                    this.scrollParent = this.helper.scrollParent(!0);
                    this.offsetParent = this.helper.offsetParent();
                    this.hasFixedAncestor = 0 < this.helper.parents().filter(function() {
                        return "fixed" === a(this).css("position")
                    }).length;
                    this.positionAbs = this.element.offset();
                    this._refreshOffsets(b);
                    this.originalPosition = this.position = this._generatePosition(b, !1);
                    this.originalPageX = b.pageX;
                    this.originalPageY = b.pageY;
                    c.cursorAt && this._adjustOffsetFromHelper(c.cursorAt);
                    this._setContainment();
                    if (!1 === this._trigger("start", b)) return this._clear(), !1;
                    this._cacheHelperProportions();
                    a.ui.ddmanager && !c.dropBehaviour && a.ui.ddmanager.prepareOffsets(this, b);
                    this._normalizeRightBottom();
                    this._mouseDrag(b, !0);
                    a.ui.ddmanager && a.ui.ddmanager.dragStart(this, b);
                    return !0
                },
                _refreshOffsets: function(a) {
                    this.offset = {
                        top: this.positionAbs.top - this.margins.top,
                        left: this.positionAbs.left - this.margins.left,
                        scroll: !1,
                        parent: this._getParentOffset(),
                        relative: this._getRelativeOffset()
                    };
                    this.offset.click = {
                        left: a.pageX - this.offset.left,
                        top: a.pageY - this.offset.top
                    }
                },
                _mouseDrag: function(b,
                    c) {
                    this.hasFixedAncestor && (this.offset.parent = this._getParentOffset());
                    this.position = this._generatePosition(b, !0);
                    this.positionAbs = this._convertPositionTo("absolute");
                    if (!c) {
                        var d = this._uiHash();
                        if (!1 === this._trigger("drag", b, d)) return this._mouseUp({}), !1;
                        this.position = d.position
                    }
                    this.helper[0].style.left = this.position.left + "px";
                    this.helper[0].style.top = this.position.top + "px";
                    a.ui.ddmanager && a.ui.ddmanager.drag(this, b);
                    return !1
                },
                _mouseStop: function(b) {
                    var c = this,
                        d = !1;
                    a.ui.ddmanager && !this.options.dropBehaviour &&
                        (d = a.ui.ddmanager.drop(this, b));
                    this.dropped && (d = this.dropped, this.dropped = !1);
                    "invalid" === this.options.revert && !d || "valid" === this.options.revert && d || !0 === this.options.revert || a.isFunction(this.options.revert) && this.options.revert.call(this.element, d) ? a(this.helper).animate(this.originalPosition, parseInt(this.options.revertDuration, 10), function() {
                        !1 !== c._trigger("stop", b) && c._clear()
                    }) : !1 !== this._trigger("stop", b) && this._clear();
                    return !1
                },
                _mouseUp: function(b) {
                    this._unblockFrames();
                    a.ui.ddmanager &&
                        a.ui.ddmanager.dragStop(this, b);
                    this.handleElement.is(b.target) && this.element.focus();
                    return a.ui.mouse.prototype._mouseUp.call(this, b)
                },
                cancel: function() {
                    this.helper.is(".ui-draggable-dragging") ? this._mouseUp({}) : this._clear();
                    return this
                },
                _getHandle: function(b) {
                    return this.options.handle ? !!a(b.target).closest(this.element.find(this.options.handle)).length : !0
                },
                _setHandleClassName: function() {
                    this.handleElement = this.options.handle ? this.element.find(this.options.handle) : this.element;
                    this.handleElement.addClass("ui-draggable-handle")
                },
                _removeHandleClassName: function() {
                    this.handleElement.removeClass("ui-draggable-handle")
                },
                _createHelper: function(b) {
                    var c = this.options,
                        d = a.isFunction(c.helper);
                    b = d ? a(c.helper.apply(this.element[0], [b])) : "clone" === c.helper ? this.element.clone().removeAttr("id") : this.element;
                    b.parents("body").length || b.appendTo("parent" === c.appendTo ? this.element[0].parentNode : c.appendTo);
                    d && b[0] === this.element[0] && this._setPositionRelative();
                    b[0] === this.element[0] || /(fixed|absolute)/.test(b.css("position")) || b.css("position",
                        "absolute");
                    return b
                },
                _setPositionRelative: function() {
                    /^(?:r|a|f)/.test(this.element.css("position")) || (this.element[0].style.position = "relative")
                },
                _adjustOffsetFromHelper: function(b) {
                    "string" === typeof b && (b = b.split(" "));
                    a.isArray(b) && (b = {
                        left: +b[0],
                        top: +b[1] || 0
                    });
                    "left" in b && (this.offset.click.left = b.left + this.margins.left);
                    "right" in b && (this.offset.click.left = this.helperProportions.width - b.right + this.margins.left);
                    "top" in b && (this.offset.click.top = b.top + this.margins.top);
                    "bottom" in b && (this.offset.click.top =
                        this.helperProportions.height - b.bottom + this.margins.top)
                },
                _isRootNode: function(a) {
                    return /(html|body)/i.test(a.tagName) || a === this.document[0]
                },
                _getParentOffset: function() {
                    var b = this.offsetParent.offset(),
                        c = this.document[0];
                    "absolute" === this.cssPosition && this.scrollParent[0] !== c && a.contains(this.scrollParent[0], this.offsetParent[0]) && (b.left += this.scrollParent.scrollLeft(), b.top += this.scrollParent.scrollTop());
                    this._isRootNode(this.offsetParent[0]) && (b = {
                        top: 0,
                        left: 0
                    });
                    return {
                        top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"),
                            10) || 0),
                        left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                    }
                },
                _getRelativeOffset: function() {
                    if ("relative" !== this.cssPosition) return {
                        top: 0,
                        left: 0
                    };
                    var a = this.element.position(),
                        c = this._isRootNode(this.scrollParent[0]);
                    return {
                        top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + (c ? 0 : this.scrollParent.scrollTop()),
                        left: a.left - (parseInt(this.helper.css("left"), 10) || 0) + (c ? 0 : this.scrollParent.scrollLeft())
                    }
                },
                _cacheMargins: function() {
                    this.margins = {
                        left: parseInt(this.element.css("marginLeft"),
                            10) || 0,
                        top: parseInt(this.element.css("marginTop"), 10) || 0,
                        right: parseInt(this.element.css("marginRight"), 10) || 0,
                        bottom: parseInt(this.element.css("marginBottom"), 10) || 0
                    }
                },
                _cacheHelperProportions: function() {
                    this.helperProportions = {
                        width: this.helper.outerWidth(),
                        height: this.helper.outerHeight()
                    }
                },
                _setContainment: function() {
                    var b, c, d;
                    b = this.options;
                    c = this.document[0];
                    this.relativeContainer = null;
                    if (b.containment)
                        if ("window" === b.containment) this.containment = [a(window).scrollLeft() - this.offset.relative.left -
                            this.offset.parent.left, a(window).scrollTop() - this.offset.relative.top - this.offset.parent.top, a(window).scrollLeft() + a(window).width() - this.helperProportions.width - this.margins.left, a(window).scrollTop() + (a(window).height() || c.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top
                        ];
                        else if ("document" === b.containment) this.containment = [0, 0, a(c).width() - this.helperProportions.width - this.margins.left, (a(c).height() || c.body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                    else if (b.containment.constructor === Array) this.containment = b.containment;
                    else {
                        if ("parent" === b.containment && (b.containment = this.helper[0].parentNode), c = a(b.containment), d = c[0]) b = /(scroll|auto)/.test(c.css("overflow")), this.containment = [(parseInt(c.css("borderLeftWidth"), 10) || 0) + (parseInt(c.css("paddingLeft"), 10) || 0), (parseInt(c.css("borderTopWidth"), 10) || 0) + (parseInt(c.css("paddingTop"), 10) || 0), (b ? Math.max(d.scrollWidth, d.offsetWidth) : d.offsetWidth) - (parseInt(c.css("borderRightWidth"), 10) || 0) - (parseInt(c.css("paddingRight"),
                            10) || 0) - this.helperProportions.width - this.margins.left - this.margins.right, (b ? Math.max(d.scrollHeight, d.offsetHeight) : d.offsetHeight) - (parseInt(c.css("borderBottomWidth"), 10) || 0) - (parseInt(c.css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top - this.margins.bottom], this.relativeContainer = c
                    } else this.containment = null
                },
                _convertPositionTo: function(a, c) {
                    c || (c = this.position);
                    var d = "absolute" === a ? 1 : -1,
                        g = this._isRootNode(this.scrollParent[0]);
                    return {
                        top: c.top + this.offset.relative.top *
                            d + this.offset.parent.top * d - ("fixed" === this.cssPosition ? -this.offset.scroll.top : g ? 0 : this.offset.scroll.top) * d,
                        left: c.left + this.offset.relative.left * d + this.offset.parent.left * d - ("fixed" === this.cssPosition ? -this.offset.scroll.left : g ? 0 : this.offset.scroll.left) * d
                    }
                },
                _generatePosition: function(a, c) {
                    var d, g, f, m = this.options,
                        h = this._isRootNode(this.scrollParent[0]);
                    f = a.pageX;
                    g = a.pageY;
                    h && this.offset.scroll || (this.offset.scroll = {
                        top: this.scrollParent.scrollTop(),
                        left: this.scrollParent.scrollLeft()
                    });
                    c && (this.containment &&
                        (this.relativeContainer ? (d = this.relativeContainer.offset(), d = [this.containment[0] + d.left, this.containment[1] + d.top, this.containment[2] + d.left, this.containment[3] + d.top]) : d = this.containment, a.pageX - this.offset.click.left < d[0] && (f = d[0] + this.offset.click.left), a.pageY - this.offset.click.top < d[1] && (g = d[1] + this.offset.click.top), a.pageX - this.offset.click.left > d[2] && (f = d[2] + this.offset.click.left), a.pageY - this.offset.click.top > d[3] && (g = d[3] + this.offset.click.top)), m.grid && (g = m.grid[1] ? this.originalPageY +
                            Math.round((g - this.originalPageY) / m.grid[1]) * m.grid[1] : this.originalPageY, g = d ? g - this.offset.click.top >= d[1] || g - this.offset.click.top > d[3] ? g : g - this.offset.click.top >= d[1] ? g - m.grid[1] : g + m.grid[1] : g, f = m.grid[0] ? this.originalPageX + Math.round((f - this.originalPageX) / m.grid[0]) * m.grid[0] : this.originalPageX, f = d ? f - this.offset.click.left >= d[0] || f - this.offset.click.left > d[2] ? f : f - this.offset.click.left >= d[0] ? f - m.grid[0] : f + m.grid[0] : f), "y" === m.axis && (f = this.originalPageX), "x" === m.axis && (g = this.originalPageY));
                    return {
                        top: g - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.offset.scroll.top : h ? 0 : this.offset.scroll.top),
                        left: f - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.offset.scroll.left : h ? 0 : this.offset.scroll.left)
                    }
                },
                _clear: function() {
                    this.helper.removeClass("ui-draggable-dragging");
                    this.helper[0] === this.element[0] || this.cancelHelperRemoval || this.helper.remove();
                    this.helper = null;
                    this.cancelHelperRemoval = !1;
                    this.destroyOnClear && this.destroy()
                },
                _normalizeRightBottom: function() {
                    "y" !== this.options.axis && "auto" !== this.helper.css("right") && (this.helper.width(this.helper.width()), this.helper.css("right", "auto"));
                    "x" !== this.options.axis && "auto" !== this.helper.css("bottom") && (this.helper.height(this.helper.height()), this.helper.css("bottom", "auto"))
                },
                _trigger: function(b, c, d) {
                    d = d || this._uiHash();
                    a.ui.plugin.call(this, b, [c, d, this], !0);
                    /^(drag|start|stop)/.test(b) && (this.positionAbs = this._convertPositionTo("absolute"),
                        d.offset = this.positionAbs);
                    return a.Widget.prototype._trigger.call(this, b, c, d)
                },
                plugins: {},
                _uiHash: function() {
                    return {
                        helper: this.helper,
                        position: this.position,
                        originalPosition: this.originalPosition,
                        offset: this.positionAbs
                    }
                }
            });
            a.ui.plugin.add("draggable", "connectToSortable", {
                start: function(b, c, d) {
                    var g = a.extend({}, c, {
                        item: d.element
                    });
                    d.sortables = [];
                    a(d.options.connectToSortable).each(function() {
                        var c = a(this).sortable("instance");
                        c && !c.options.disabled && (d.sortables.push(c), c.refreshPositions(), c._trigger("activate",
                            b, g))
                    })
                },
                stop: function(b, c, d) {
                    var g = a.extend({}, c, {
                        item: d.element
                    });
                    d.cancelHelperRemoval = !1;
                    a.each(d.sortables, function() {
                        this.isOver ? (this.isOver = 0, d.cancelHelperRemoval = !0, this.cancelHelperRemoval = !1, this._storedCSS = {
                            position: this.placeholder.css("position"),
                            top: this.placeholder.css("top"),
                            left: this.placeholder.css("left")
                        }, this._mouseStop(b), this.options.helper = this.options._helper) : (this.cancelHelperRemoval = !0, this._trigger("deactivate", b, g))
                    })
                },
                drag: function(b, c, d) {
                    a.each(d.sortables, function() {
                        var g = !1,
                            f = this;
                        f.positionAbs = d.positionAbs;
                        f.helperProportions = d.helperProportions;
                        f.offset.click = d.offset.click;
                        f._intersectsWith(f.containerCache) && (g = !0, a.each(d.sortables, function() {
                            this.positionAbs = d.positionAbs;
                            this.helperProportions = d.helperProportions;
                            this.offset.click = d.offset.click;
                            this !== f && this._intersectsWith(this.containerCache) && a.contains(f.element[0], this.element[0]) && (g = !1);
                            return g
                        }));
                        g ? (f.isOver || (f.isOver = 1, d._parent = c.helper.parent(), f.currentItem = c.helper.appendTo(f.element).data("ui-sortable-item", !0), f.options._helper = f.options.helper, f.options.helper = function() {
                                return c.helper[0]
                            }, b.target = f.currentItem[0], f._mouseCapture(b, !0), f._mouseStart(b, !0, !0), f.offset.click.top = d.offset.click.top, f.offset.click.left = d.offset.click.left, f.offset.parent.left -= d.offset.parent.left - f.offset.parent.left, f.offset.parent.top -= d.offset.parent.top - f.offset.parent.top, d._trigger("toSortable", b), d.dropped = f.element, a.each(d.sortables, function() {
                                this.refreshPositions()
                            }), d.currentItem = d.element, f.fromOutside =
                            d), f.currentItem && (f._mouseDrag(b), c.position = f.position)) : f.isOver && (f.isOver = 0, f.cancelHelperRemoval = !0, f.options._revert = f.options.revert, f.options.revert = !1, f._trigger("out", b, f._uiHash(f)), f._mouseStop(b, !0), f.options.revert = f.options._revert, f.options.helper = f.options._helper, f.placeholder && f.placeholder.remove(), c.helper.appendTo(d._parent), d._refreshOffsets(b), c.position = d._generatePosition(b, !0), d._trigger("fromSortable", b), d.dropped = !1, a.each(d.sortables, function() {
                            this.refreshPositions()
                        }))
                    })
                }
            });
            a.ui.plugin.add("draggable", "cursor", {
                start: function(b, c, d) {
                    b = a("body");
                    d = d.options;
                    b.css("cursor") && (d._cursor = b.css("cursor"));
                    b.css("cursor", d.cursor)
                },
                stop: function(b, c, d) {
                    b = d.options;
                    b._cursor && a("body").css("cursor", b._cursor)
                }
            });
            a.ui.plugin.add("draggable", "opacity", {
                start: function(b, c, d) {
                    b = a(c.helper);
                    d = d.options;
                    b.css("opacity") && (d._opacity = b.css("opacity"));
                    b.css("opacity", d.opacity)
                },
                stop: function(b, c, d) {
                    b = d.options;
                    b._opacity && a(c.helper).css("opacity", b._opacity)
                }
            });
            a.ui.plugin.add("draggable",
                "scroll", {
                    start: function(a, c, d) {
                        d.scrollParentNotHidden || (d.scrollParentNotHidden = d.helper.scrollParent(!1));
                        d.scrollParentNotHidden[0] !== d.document[0] && "HTML" !== d.scrollParentNotHidden[0].tagName && (d.overflowOffset = d.scrollParentNotHidden.offset())
                    },
                    drag: function(b, c, d) {
                        c = d.options;
                        var g = !1,
                            f = d.scrollParentNotHidden[0],
                            m = d.document[0];
                        f !== m && "HTML" !== f.tagName ? (c.axis && "x" === c.axis || (d.overflowOffset.top + f.offsetHeight - b.pageY < c.scrollSensitivity ? f.scrollTop = g = f.scrollTop + c.scrollSpeed : b.pageY - d.overflowOffset.top <
                            c.scrollSensitivity && (f.scrollTop = g = f.scrollTop - c.scrollSpeed)), c.axis && "y" === c.axis || (d.overflowOffset.left + f.offsetWidth - b.pageX < c.scrollSensitivity ? f.scrollLeft = g = f.scrollLeft + c.scrollSpeed : b.pageX - d.overflowOffset.left < c.scrollSensitivity && (f.scrollLeft = g = f.scrollLeft - c.scrollSpeed))) : (c.axis && "x" === c.axis || (b.pageY - a(m).scrollTop() < c.scrollSensitivity ? g = a(m).scrollTop(a(m).scrollTop() - c.scrollSpeed) : a(window).height() - (b.pageY - a(m).scrollTop()) < c.scrollSensitivity && (g = a(m).scrollTop(a(m).scrollTop() +
                            c.scrollSpeed))), c.axis && "y" === c.axis || (b.pageX - a(m).scrollLeft() < c.scrollSensitivity ? g = a(m).scrollLeft(a(m).scrollLeft() - c.scrollSpeed) : a(window).width() - (b.pageX - a(m).scrollLeft()) < c.scrollSensitivity && (g = a(m).scrollLeft(a(m).scrollLeft() + c.scrollSpeed))));
                        !1 !== g && a.ui.ddmanager && !c.dropBehaviour && a.ui.ddmanager.prepareOffsets(d, b)
                    }
                });
            a.ui.plugin.add("draggable", "snap", {
                start: function(b, c, d) {
                    b = d.options;
                    d.snapElements = [];
                    a(b.snap.constructor !== String ? b.snap.items || ":data(ui-draggable)" : b.snap).each(function() {
                        var b =
                            a(this),
                            c = b.offset();
                        this !== d.element[0] && d.snapElements.push({
                            item: this,
                            width: b.outerWidth(),
                            height: b.outerHeight(),
                            top: c.top,
                            left: c.left
                        })
                    })
                },
                drag: function(b, c, d) {
                    var g, f, m, h, k, l, e, n, p, r, q = d.options,
                        u = q.snapTolerance,
                        z = c.offset.left,
                        y = z + d.helperProportions.width,
                        v = c.offset.top,
                        C = v + d.helperProportions.height;
                    for (p = d.snapElements.length - 1; 0 <= p; p--) k = d.snapElements[p].left - d.margins.left, l = k + d.snapElements[p].width, e = d.snapElements[p].top - d.margins.top, n = e + d.snapElements[p].height, y < k - u || z > l + u || C <
                        e - u || v > n + u || !a.contains(d.snapElements[p].item.ownerDocument, d.snapElements[p].item) ? (d.snapElements[p].snapping && d.options.snap.release && d.options.snap.release.call(d.element, b, a.extend(d._uiHash(), {
                            snapItem: d.snapElements[p].item
                        })), d.snapElements[p].snapping = !1) : ("inner" !== q.snapMode && (g = Math.abs(e - C) <= u, f = Math.abs(n - v) <= u, m = Math.abs(k - y) <= u, h = Math.abs(l - z) <= u, g && (c.position.top = d._convertPositionTo("relative", {
                            top: e - d.helperProportions.height,
                            left: 0
                        }).top), f && (c.position.top = d._convertPositionTo("relative", {
                            top: n,
                            left: 0
                        }).top), m && (c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: k - d.helperProportions.width
                        }).left), h && (c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: l
                        }).left)), r = g || f || m || h, "outer" !== q.snapMode && (g = Math.abs(e - v) <= u, f = Math.abs(n - C) <= u, m = Math.abs(k - z) <= u, h = Math.abs(l - y) <= u, g && (c.position.top = d._convertPositionTo("relative", {
                            top: e,
                            left: 0
                        }).top), f && (c.position.top = d._convertPositionTo("relative", {
                            top: n - d.helperProportions.height,
                            left: 0
                        }).top), m && (c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: k
                        }).left), h && (c.position.left = d._convertPositionTo("relative", {
                            top: 0,
                            left: l - d.helperProportions.width
                        }).left)), !d.snapElements[p].snapping && (g || f || m || h || r) && d.options.snap.snap && d.options.snap.snap.call(d.element, b, a.extend(d._uiHash(), {
                            snapItem: d.snapElements[p].item
                        })), d.snapElements[p].snapping = g || f || m || h || r)
                }
            });
            a.ui.plugin.add("draggable", "stack", {
                start: function(b, c, d) {
                    var g;
                    b = a.makeArray(a(d.options.stack)).sort(function(b, c) {
                        return (parseInt(a(b).css("zIndex"), 10) || 0) - (parseInt(a(c).css("zIndex"),
                            10) || 0)
                    });
                    b.length && (g = parseInt(a(b[0]).css("zIndex"), 10) || 0, a(b).each(function(b) {
                        a(this).css("zIndex", g + b)
                    }), this.css("zIndex", g + b.length))
                }
            });
            a.ui.plugin.add("draggable", "zIndex", {
                start: function(b, c, d) {
                    b = a(c.helper);
                    d = d.options;
                    b.css("zIndex") && (d._zIndex = b.css("zIndex"));
                    b.css("zIndex", d.zIndex)
                },
                stop: function(b, c, d) {
                    b = d.options;
                    b._zIndex && a(c.helper).css("zIndex", b._zIndex)
                }
            });
            a.widget("ui.resizable", a.ui.mouse, {
                version: "1.11.4",
                widgetEventPrefix: "resize",
                options: {
                    alsoResize: !1,
                    animate: !1,
                    animateDuration: "slow",
                    animateEasing: "swing",
                    aspectRatio: !1,
                    autoHide: !1,
                    containment: !1,
                    ghost: !1,
                    grid: !1,
                    handles: "e,s,se",
                    helper: !1,
                    maxHeight: null,
                    maxWidth: null,
                    minHeight: 10,
                    minWidth: 10,
                    zIndex: 90,
                    resize: null,
                    start: null,
                    stop: null
                },
                _num: function(a) {
                    return parseInt(a, 10) || 0
                },
                _isNumber: function(a) {
                    return !isNaN(parseInt(a, 10))
                },
                _hasScroll: function(b, c) {
                    if ("hidden" === a(b).css("overflow")) return !1;
                    var d = c && "left" === c ? "scrollLeft" : "scrollTop",
                        g = !1;
                    if (0 < b[d]) return !0;
                    b[d] = 1;
                    g = 0 < b[d];
                    b[d] = 0;
                    return g
                },
                _create: function() {
                    var b, c, d,
                        g, f, m = this,
                        h = this.options;
                    this.element.addClass("ui-resizable");
                    a.extend(this, {
                        _aspectRatio: !!h.aspectRatio,
                        aspectRatio: h.aspectRatio,
                        originalElement: this.element,
                        _proportionallyResizeElements: [],
                        _helper: h.helper || h.ghost || h.animate ? h.helper || "ui-resizable-helper" : null
                    });
                    this.element[0].nodeName.match(/^(canvas|textarea|input|select|button|img)$/i) && (this.element.wrap(a("<div class='ui-wrapper' style='overflow: hidden;'></div>").css({
                            position: this.element.css("position"),
                            width: this.element.outerWidth(),
                            height: this.element.outerHeight(),
                            top: this.element.css("top"),
                            left: this.element.css("left")
                        })), this.element = this.element.parent().data("ui-resizable", this.element.resizable("instance")), this.elementIsWrapper = !0, this.element.css({
                            marginLeft: this.originalElement.css("marginLeft"),
                            marginTop: this.originalElement.css("marginTop"),
                            marginRight: this.originalElement.css("marginRight"),
                            marginBottom: this.originalElement.css("marginBottom")
                        }), this.originalElement.css({
                            marginLeft: 0,
                            marginTop: 0,
                            marginRight: 0,
                            marginBottom: 0
                        }),
                        this.originalResizeStyle = this.originalElement.css("resize"), this.originalElement.css("resize", "none"), this._proportionallyResizeElements.push(this.originalElement.css({
                            position: "static",
                            zoom: 1,
                            display: "block"
                        })), this.originalElement.css({
                            margin: this.originalElement.css("margin")
                        }), this._proportionallyResize());
                    this.handles = h.handles || (a(".ui-resizable-handle", this.element).length ? {
                        n: ".ui-resizable-n",
                        e: ".ui-resizable-e",
                        s: ".ui-resizable-s",
                        w: ".ui-resizable-w",
                        se: ".ui-resizable-se",
                        sw: ".ui-resizable-sw",
                        ne: ".ui-resizable-ne",
                        nw: ".ui-resizable-nw"
                    } : "e,s,se");
                    this._handles = a();
                    if (this.handles.constructor === String)
                        for ("all" === this.handles && (this.handles = "n,e,s,w,se,sw,ne,nw"), b = this.handles.split(","), this.handles = {}, c = 0; c < b.length; c++) d = a.trim(b[c]), f = "ui-resizable-" + d, g = a("<div class='ui-resizable-handle " + f + "'></div>"), g.css({
                            zIndex: h.zIndex
                        }), "se" === d && g.addClass("ui-icon ui-icon-gripsmall-diagonal-se"), this.handles[d] = ".ui-resizable-" + d, this.element.append(g);
                    this._renderAxis = function(b) {
                        var c,
                            d, f;
                        b = b || this.element;
                        for (c in this.handles) {
                            if (this.handles[c].constructor === String) this.handles[c] = this.element.children(this.handles[c]).first().show();
                            else if (this.handles[c].jquery || this.handles[c].nodeType) this.handles[c] = a(this.handles[c]), this._on(this.handles[c], {
                                mousedown: m._mouseDown
                            });
                            this.elementIsWrapper && this.originalElement[0].nodeName.match(/^(textarea|input|select|button)$/i) && (d = a(this.handles[c], this.element), f = /sw|ne|nw|se|n|s/.test(c) ? d.outerHeight() : d.outerWidth(), d = ["padding",
                                /ne|nw|n/.test(c) ? "Top" : /se|sw|s/.test(c) ? "Bottom" : /^e$/.test(c) ? "Right" : "Left"
                            ].join(""), b.css(d, f), this._proportionallyResize());
                            this._handles = this._handles.add(this.handles[c])
                        }
                    };
                    this._renderAxis(this.element);
                    this._handles = this._handles.add(this.element.find(".ui-resizable-handle"));
                    this._handles.disableSelection();
                    this._handles.mouseover(function() {
                        m.resizing || (this.className && (g = this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i)), m.axis = g && g[1] ? g[1] : "se")
                    });
                    h.autoHide && (this._handles.hide(),
                        a(this.element).addClass("ui-resizable-autohide").mouseenter(function() {
                            h.disabled || (a(this).removeClass("ui-resizable-autohide"), m._handles.show())
                        }).mouseleave(function() {
                            h.disabled || m.resizing || (a(this).addClass("ui-resizable-autohide"), m._handles.hide())
                        }));
                    this._mouseInit()
                },
                _destroy: function() {
                    this._mouseDestroy();
                    var b, c = function(b) {
                        a(b).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable").removeData("ui-resizable").unbind(".resizable").find(".ui-resizable-handle").remove()
                    };
                    this.elementIsWrapper && (c(this.element), b = this.element, this.originalElement.css({
                        position: b.css("position"),
                        width: b.outerWidth(),
                        height: b.outerHeight(),
                        top: b.css("top"),
                        left: b.css("left")
                    }).insertAfter(b), b.remove());
                    this.originalElement.css("resize", this.originalResizeStyle);
                    c(this.originalElement);
                    return this
                },
                _mouseCapture: function(b) {
                    var c, d, g = !1;
                    for (c in this.handles)
                        if (d = a(this.handles[c])[0], d === b.target || a.contains(d, b.target)) g = !0;
                    return !this.options.disabled && g
                },
                _mouseStart: function(b) {
                    var c,
                        d, g = this.options,
                        f = this.element;
                    this.resizing = !0;
                    this._renderProxy();
                    c = this._num(this.helper.css("left"));
                    d = this._num(this.helper.css("top"));
                    g.containment && (c += a(g.containment).scrollLeft() || 0, d += a(g.containment).scrollTop() || 0);
                    this.offset = this.helper.offset();
                    this.position = {
                        left: c,
                        top: d
                    };
                    this.size = this._helper ? {
                        width: this.helper.width(),
                        height: this.helper.height()
                    } : {
                        width: f.width(),
                        height: f.height()
                    };
                    this.originalSize = this._helper ? {
                        width: f.outerWidth(),
                        height: f.outerHeight()
                    } : {
                        width: f.width(),
                        height: f.height()
                    };
                    this.sizeDiff = {
                        width: f.outerWidth() - f.width(),
                        height: f.outerHeight() - f.height()
                    };
                    this.originalPosition = {
                        left: c,
                        top: d
                    };
                    this.originalMousePosition = {
                        left: b.pageX,
                        top: b.pageY
                    };
                    this.aspectRatio = "number" === typeof g.aspectRatio ? g.aspectRatio : this.originalSize.width / this.originalSize.height || 1;
                    c = a(".ui-resizable-" + this.axis).css("cursor");
                    a("body").css("cursor", "auto" === c ? this.axis + "-resize" : c);
                    f.addClass("ui-resizable-resizing");
                    this._propagate("start", b);
                    return !0
                },
                _mouseDrag: function(b) {
                    var c,
                        d = this.originalMousePosition;
                    c = b.pageX - d.left || 0;
                    var d = b.pageY - d.top || 0,
                        g = this._change[this.axis];
                    this._updatePrevProperties();
                    if (!g) return !1;
                    c = g.apply(this, [b, c, d]);
                    this._updateVirtualBoundaries(b.shiftKey);
                    if (this._aspectRatio || b.shiftKey) c = this._updateRatio(c, b);
                    c = this._respectSize(c, b);
                    this._updateCache(c);
                    this._propagate("resize", b);
                    c = this._applyChanges();
                    !this._helper && this._proportionallyResizeElements.length && this._proportionallyResize();
                    a.isEmptyObject(c) || (this._updatePrevProperties(), this._trigger("resize",
                        b, this.ui()), this._applyChanges());
                    return !1
                },
                _mouseStop: function(b) {
                    this.resizing = !1;
                    var c, d, g, f = this.options;
                    this._helper && (c = this._proportionallyResizeElements, c = (d = c.length && /textarea/i.test(c[0].nodeName)) && this._hasScroll(c[0], "left") ? 0 : this.sizeDiff.height, d = d ? 0 : this.sizeDiff.width, d = {
                        width: this.helper.width() - d,
                        height: this.helper.height() - c
                    }, c = parseInt(this.element.css("left"), 10) + (this.position.left - this.originalPosition.left) || null, g = parseInt(this.element.css("top"), 10) + (this.position.top -
                        this.originalPosition.top) || null, f.animate || this.element.css(a.extend(d, {
                        top: g,
                        left: c
                    })), this.helper.height(this.size.height), this.helper.width(this.size.width), this._helper && !f.animate && this._proportionallyResize());
                    a("body").css("cursor", "auto");
                    this.element.removeClass("ui-resizable-resizing");
                    this._propagate("stop", b);
                    this._helper && this.helper.remove();
                    return !1
                },
                _updatePrevProperties: function() {
                    this.prevPosition = {
                        top: this.position.top,
                        left: this.position.left
                    };
                    this.prevSize = {
                        width: this.size.width,
                        height: this.size.height
                    }
                },
                _applyChanges: function() {
                    var a = {};
                    this.position.top !== this.prevPosition.top && (a.top = this.position.top + "px");
                    this.position.left !== this.prevPosition.left && (a.left = this.position.left + "px");
                    this.size.width !== this.prevSize.width && (a.width = this.size.width + "px");
                    this.size.height !== this.prevSize.height && (a.height = this.size.height + "px");
                    this.helper.css(a);
                    return a
                },
                _updateVirtualBoundaries: function(a) {
                    var c, d, g, f;
                    f = this.options;
                    f = {
                        minWidth: this._isNumber(f.minWidth) ? f.minWidth : 0,
                        maxWidth: this._isNumber(f.maxWidth) ? f.maxWidth : Infinity,
                        minHeight: this._isNumber(f.minHeight) ? f.minHeight : 0,
                        maxHeight: this._isNumber(f.maxHeight) ? f.maxHeight : Infinity
                    };
                    if (this._aspectRatio || a) a = f.minHeight * this.aspectRatio, d = f.minWidth / this.aspectRatio, c = f.maxHeight * this.aspectRatio, g = f.maxWidth / this.aspectRatio, a > f.minWidth && (f.minWidth = a), d > f.minHeight && (f.minHeight = d), c < f.maxWidth && (f.maxWidth = c), g < f.maxHeight && (f.maxHeight = g);
                    this._vBoundaries = f
                },
                _updateCache: function(a) {
                    this.offset = this.helper.offset();
                    this._isNumber(a.left) && (this.position.left = a.left);
                    this._isNumber(a.top) && (this.position.top = a.top);
                    this._isNumber(a.height) && (this.size.height = a.height);
                    this._isNumber(a.width) && (this.size.width = a.width)
                },
                _updateRatio: function(a) {
                    var c = this.position,
                        d = this.size,
                        g = this.axis;
                    this._isNumber(a.height) ? a.width = a.height * this.aspectRatio : this._isNumber(a.width) && (a.height = a.width / this.aspectRatio);
                    "sw" === g && (a.left = c.left + (d.width - a.width), a.top = null);
                    "nw" === g && (a.top = c.top + (d.height - a.height), a.left =
                        c.left + (d.width - a.width));
                    return a
                },
                _respectSize: function(a) {
                    var c = this._vBoundaries,
                        d = this.axis,
                        g = this._isNumber(a.width) && c.maxWidth && c.maxWidth < a.width,
                        f = this._isNumber(a.height) && c.maxHeight && c.maxHeight < a.height,
                        m = this._isNumber(a.width) && c.minWidth && c.minWidth > a.width,
                        h = this._isNumber(a.height) && c.minHeight && c.minHeight > a.height,
                        k = this.originalPosition.left + this.originalSize.width,
                        l = this.position.top + this.size.height,
                        e = /sw|nw|w/.test(d),
                        d = /nw|ne|n/.test(d);
                    m && (a.width = c.minWidth);
                    h && (a.height =
                        c.minHeight);
                    g && (a.width = c.maxWidth);
                    f && (a.height = c.maxHeight);
                    m && e && (a.left = k - c.minWidth);
                    g && e && (a.left = k - c.maxWidth);
                    h && d && (a.top = l - c.minHeight);
                    f && d && (a.top = l - c.maxHeight);
                    a.width || a.height || a.left || !a.top ? a.width || a.height || a.top || !a.left || (a.left = null) : a.top = null;
                    return a
                },
                _getPaddingPlusBorderDimensions: function(a) {
                    var c = 0,
                        d = [],
                        g = [a.css("borderTopWidth"), a.css("borderRightWidth"), a.css("borderBottomWidth"), a.css("borderLeftWidth")];
                    for (a = [a.css("paddingTop"), a.css("paddingRight"), a.css("paddingBottom"),
                            a.css("paddingLeft")
                        ]; 4 > c; c++) d[c] = parseInt(g[c], 10) || 0, d[c] += parseInt(a[c], 10) || 0;
                    return {
                        height: d[0] + d[2],
                        width: d[1] + d[3]
                    }
                },
                _proportionallyResize: function() {
                    if (this._proportionallyResizeElements.length)
                        for (var a, c = 0, d = this.helper || this.element; c < this._proportionallyResizeElements.length; c++) a = this._proportionallyResizeElements[c], this.outerDimensions || (this.outerDimensions = this._getPaddingPlusBorderDimensions(a)), a.css({
                            height: d.height() - this.outerDimensions.height || 0,
                            width: d.width() - this.outerDimensions.width ||
                                0
                        })
                },
                _renderProxy: function() {
                    var b = this.options;
                    this.elementOffset = this.element.offset();
                    this._helper ? (this.helper = this.helper || a("<div style='overflow:hidden;'></div>"), this.helper.addClass(this._helper).css({
                        width: this.element.outerWidth() - 1,
                        height: this.element.outerHeight() - 1,
                        position: "absolute",
                        left: this.elementOffset.left + "px",
                        top: this.elementOffset.top + "px",
                        zIndex: ++b.zIndex
                    }), this.helper.appendTo("body").disableSelection()) : this.helper = this.element
                },
                _change: {
                    e: function(a, c) {
                        return {
                            width: this.originalSize.width +
                                c
                        }
                    },
                    w: function(a, c) {
                        return {
                            left: this.originalPosition.left + c,
                            width: this.originalSize.width - c
                        }
                    },
                    n: function(a, c, d) {
                        return {
                            top: this.originalPosition.top + d,
                            height: this.originalSize.height - d
                        }
                    },
                    s: function(a, c, d) {
                        return {
                            height: this.originalSize.height + d
                        }
                    },
                    se: function(b, c, d) {
                        return a.extend(this._change.s.apply(this, arguments), this._change.e.apply(this, [b, c, d]))
                    },
                    sw: function(b, c, d) {
                        return a.extend(this._change.s.apply(this, arguments), this._change.w.apply(this, [b, c, d]))
                    },
                    ne: function(b, c, d) {
                        return a.extend(this._change.n.apply(this,
                            arguments), this._change.e.apply(this, [b, c, d]))
                    },
                    nw: function(b, c, d) {
                        return a.extend(this._change.n.apply(this, arguments), this._change.w.apply(this, [b, c, d]))
                    }
                },
                _propagate: function(b, c) {
                    a.ui.plugin.call(this, b, [c, this.ui()]);
                    "resize" !== b && this._trigger(b, c, this.ui())
                },
                plugins: {},
                ui: function() {
                    return {
                        originalElement: this.originalElement,
                        element: this.element,
                        helper: this.helper,
                        position: this.position,
                        size: this.size,
                        originalSize: this.originalSize,
                        originalPosition: this.originalPosition
                    }
                }
            });
            a.ui.plugin.add("resizable",
                "animate", {
                    stop: function(b) {
                        var c = a(this).resizable("instance"),
                            d = c.options,
                            g = c._proportionallyResizeElements,
                            f = g.length && /textarea/i.test(g[0].nodeName),
                            m = f && c._hasScroll(g[0], "left") ? 0 : c.sizeDiff.height,
                            f = {
                                width: c.size.width - (f ? 0 : c.sizeDiff.width),
                                height: c.size.height - m
                            },
                            m = parseInt(c.element.css("left"), 10) + (c.position.left - c.originalPosition.left) || null,
                            h = parseInt(c.element.css("top"), 10) + (c.position.top - c.originalPosition.top) || null;
                        c.element.animate(a.extend(f, h && m ? {
                            top: h,
                            left: m
                        } : {}), {
                            duration: d.animateDuration,
                            easing: d.animateEasing,
                            step: function() {
                                var d = {
                                    width: parseInt(c.element.css("width"), 10),
                                    height: parseInt(c.element.css("height"), 10),
                                    top: parseInt(c.element.css("top"), 10),
                                    left: parseInt(c.element.css("left"), 10)
                                };
                                g && g.length && a(g[0]).css({
                                    width: d.width,
                                    height: d.height
                                });
                                c._updateCache(d);
                                c._propagate("resize", b)
                            }
                        })
                    }
                });
            a.ui.plugin.add("resizable", "containment", {
                start: function() {
                    var b, c, d, g, f, m = a(this).resizable("instance"),
                        h = m.element;
                    d = m.options.containment;
                    if (h = d instanceof a ? d.get(0) : /parent/.test(d) ?
                        h.parent().get(0) : d) m.containerElement = a(h), /document/.test(d) || d === document ? (m.containerOffset = {
                        left: 0,
                        top: 0
                    }, m.containerPosition = {
                        left: 0,
                        top: 0
                    }, m.parentData = {
                        element: a(document),
                        left: 0,
                        top: 0,
                        width: a(document).width(),
                        height: a(document).height() || document.body.parentNode.scrollHeight
                    }) : (b = a(h), c = [], a(["Top", "Right", "Left", "Bottom"]).each(function(a, d) {
                        c[a] = m._num(b.css("padding" + d))
                    }), m.containerOffset = b.offset(), m.containerPosition = b.position(), m.containerSize = {
                        height: b.innerHeight() - c[3],
                        width: b.innerWidth() -
                            c[1]
                    }, d = m.containerOffset, g = m.containerSize.height, f = m.containerSize.width, f = m._hasScroll(h, "left") ? h.scrollWidth : f, g = m._hasScroll(h) ? h.scrollHeight : g, m.parentData = {
                        element: h,
                        left: d.left,
                        top: d.top,
                        width: f,
                        height: g
                    })
                },
                resize: function(b) {
                    var c, d, g, f = a(this).resizable("instance");
                    c = f.options;
                    d = f.containerOffset;
                    g = f.position;
                    b = f._aspectRatio || b.shiftKey;
                    var m = {
                            top: 0,
                            left: 0
                        },
                        h = f.containerElement,
                        k = !0;
                    h[0] !== document && /static/.test(h.css("position")) && (m = d);
                    g.left < (f._helper ? d.left : 0) && (f.size.width += f._helper ?
                        f.position.left - d.left : f.position.left - m.left, b && (f.size.height = f.size.width / f.aspectRatio, k = !1), f.position.left = c.helper ? d.left : 0);
                    g.top < (f._helper ? d.top : 0) && (f.size.height += f._helper ? f.position.top - d.top : f.position.top, b && (f.size.width = f.size.height * f.aspectRatio, k = !1), f.position.top = f._helper ? d.top : 0);
                    c = f.containerElement.get(0) === f.element.parent().get(0);
                    g = /relative|absolute/.test(f.containerElement.css("position"));
                    c && g ? (f.offset.left = f.parentData.left + f.position.left, f.offset.top = f.parentData.top +
                        f.position.top) : (f.offset.left = f.element.offset().left, f.offset.top = f.element.offset().top);
                    c = Math.abs(f.sizeDiff.width + (f._helper ? f.offset.left - m.left : f.offset.left - d.left));
                    d = Math.abs(f.sizeDiff.height + (f._helper ? f.offset.top - m.top : f.offset.top - d.top));
                    c + f.size.width >= f.parentData.width && (f.size.width = f.parentData.width - c, b && (f.size.height = f.size.width / f.aspectRatio, k = !1));
                    d + f.size.height >= f.parentData.height && (f.size.height = f.parentData.height - d, b && (f.size.width = f.size.height * f.aspectRatio, k = !1));
                    k || (f.position.left = f.prevPosition.left, f.position.top = f.prevPosition.top, f.size.width = f.prevSize.width, f.size.height = f.prevSize.height)
                },
                stop: function() {
                    var b = a(this).resizable("instance"),
                        c = b.options,
                        d = b.containerOffset,
                        g = b.containerPosition,
                        f = b.containerElement,
                        m = a(b.helper),
                        h = m.offset(),
                        k = m.outerWidth() - b.sizeDiff.width,
                        m = m.outerHeight() - b.sizeDiff.height;
                    b._helper && !c.animate && /relative/.test(f.css("position")) && a(this).css({
                        left: h.left - g.left - d.left,
                        width: k,
                        height: m
                    });
                    b._helper && !c.animate &&
                        /static/.test(f.css("position")) && a(this).css({
                            left: h.left - g.left - d.left,
                            width: k,
                            height: m
                        })
                }
            });
            a.ui.plugin.add("resizable", "alsoResize", {
                start: function() {
                    var b = a(this).resizable("instance").options;
                    a(b.alsoResize).each(function() {
                        var b = a(this);
                        b.data("ui-resizable-alsoresize", {
                            width: parseInt(b.width(), 10),
                            height: parseInt(b.height(), 10),
                            left: parseInt(b.css("left"), 10),
                            top: parseInt(b.css("top"), 10)
                        })
                    })
                },
                resize: function(b, c) {
                    var d = a(this).resizable("instance"),
                        g = d.originalSize,
                        f = d.originalPosition,
                        m = {
                            height: d.size.height - g.height || 0,
                            width: d.size.width - g.width || 0,
                            top: d.position.top - f.top || 0,
                            left: d.position.left - f.left || 0
                        };
                    a(d.options.alsoResize).each(function() {
                        var b = a(this),
                            d = a(this).data("ui-resizable-alsoresize"),
                            f = {},
                            e = b.parents(c.originalElement[0]).length ? ["width", "height"] : ["width", "height", "top", "left"];
                        a.each(e, function(a, b) {
                            var c = (d[b] || 0) + (m[b] || 0);
                            c && 0 <= c && (f[b] = c || null)
                        });
                        b.css(f)
                    })
                },
                stop: function() {
                    a(this).removeData("resizable-alsoresize")
                }
            });
            a.ui.plugin.add("resizable", "ghost", {
                start: function() {
                    var b = a(this).resizable("instance"),
                        c = b.options,
                        d = b.size;
                    b.ghost = b.originalElement.clone();
                    b.ghost.css({
                        opacity: .25,
                        display: "block",
                        position: "relative",
                        height: d.height,
                        width: d.width,
                        margin: 0,
                        left: 0,
                        top: 0
                    }).addClass("ui-resizable-ghost").addClass("string" === typeof c.ghost ? c.ghost : "");
                    b.ghost.appendTo(b.helper)
                },
                resize: function() {
                    var b = a(this).resizable("instance");
                    b.ghost && b.ghost.css({
                        position: "relative",
                        height: b.size.height,
                        width: b.size.width
                    })
                },
                stop: function() {
                    var b = a(this).resizable("instance");
                    b.ghost && b.helper && b.helper.get(0).removeChild(b.ghost.get(0))
                }
            });
            a.ui.plugin.add("resizable", "grid", {
                resize: function() {
                    var b, c = a(this).resizable("instance"),
                        d = c.options,
                        g = c.size,
                        f = c.originalSize,
                        m = c.originalPosition,
                        h = c.axis,
                        k = "number" === typeof d.grid ? [d.grid, d.grid] : d.grid,
                        l = k[0] || 1,
                        e = k[1] || 1,
                        n = Math.round((g.width - f.width) / l) * l,
                        g = Math.round((g.height - f.height) / e) * e,
                        p = f.width + n,
                        r = f.height + g,
                        q = d.maxWidth && d.maxWidth < p,
                        u = d.maxHeight && d.maxHeight < r,
                        v = d.minWidth && d.minWidth > p,
                        y = d.minHeight && d.minHeight >
                        r;
                    d.grid = k;
                    v && (p += l);
                    y && (r += e);
                    q && (p -= l);
                    u && (r -= e);
                    if (/^(se|s|e)$/.test(h)) c.size.width = p, c.size.height = r;
                    else if (/^(ne)$/.test(h)) c.size.width = p, c.size.height = r, c.position.top = m.top - g;
                    else if (/^(sw)$/.test(h)) c.size.width = p, c.size.height = r, c.position.left = m.left - n;
                    else {
                        if (0 >= r - e || 0 >= p - l) b = c._getPaddingPlusBorderDimensions(this);
                        0 < r - e ? (c.size.height = r, c.position.top = m.top - g) : (r = e - b.height, c.size.height = r, c.position.top = m.top + f.height - r);
                        0 < p - l ? (c.size.width = p, c.position.left = m.left - n) : (p = l - b.width,
                            c.size.width = p, c.position.left = m.left + f.width - p)
                    }
                }
            });
            a.widget("ui.dialog", {
                version: "1.11.4",
                options: {
                    appendTo: "body",
                    autoOpen: !0,
                    buttons: [],
                    closeOnEscape: !0,
                    closeText: "Close",
                    dialogClass: "",
                    draggable: !0,
                    hide: null,
                    height: "auto",
                    maxHeight: null,
                    maxWidth: null,
                    minHeight: 150,
                    minWidth: 150,
                    modal: !1,
                    position: {
                        my: "center",
                        at: "center",
                        of: window,
                        collision: "fit",
                        using: function(b) {
                            var c = a(this).css(b).offset().top;
                            0 > c && a(this).css("top", b.top - c)
                        }
                    },
                    resizable: !0,
                    show: null,
                    title: null,
                    width: 300,
                    beforeClose: null,
                    close: null,
                    drag: null,
                    dragStart: null,
                    dragStop: null,
                    focus: null,
                    open: null,
                    resize: null,
                    resizeStart: null,
                    resizeStop: null
                },
                sizeRelatedOptions: {
                    buttons: !0,
                    height: !0,
                    maxHeight: !0,
                    maxWidth: !0,
                    minHeight: !0,
                    minWidth: !0,
                    width: !0
                },
                resizableRelatedOptions: {
                    maxHeight: !0,
                    maxWidth: !0,
                    minHeight: !0,
                    minWidth: !0
                },
                _create: function() {
                    this.originalCss = {
                        display: this.element[0].style.display,
                        width: this.element[0].style.width,
                        minHeight: this.element[0].style.minHeight,
                        maxHeight: this.element[0].style.maxHeight,
                        height: this.element[0].style.height
                    };
                    this.originalPosition = {
                        parent: this.element.parent(),
                        index: this.element.parent().children().index(this.element)
                    };
                    this.originalTitle = this.element.attr("title");
                    this.options.title = this.options.title || this.originalTitle;
                    this._createWrapper();
                    this.element.show().removeAttr("title").addClass("ui-dialog-content ui-widget-content").appendTo(this.uiDialog);
                    this._createTitlebar();
                    this._createButtonPane();
                    this.options.draggable && a.fn.draggable && this._makeDraggable();
                    this.options.resizable && a.fn.resizable && this._makeResizable();
                    this._isOpen = !1;
                    this._trackFocus()
                },
                _init: function() {
                    this.options.autoOpen && this.open()
                },
                _appendTo: function() {
                    var b = this.options.appendTo;
                    return b && (b.jquery || b.nodeType) ? a(b) : this.document.find(b || "body").eq(0)
                },
                _destroy: function() {
                    var a, c = this.originalPosition;
                    this._untrackInstance();
                    this._destroyOverlay();
                    this.element.removeUniqueId().removeClass("ui-dialog-content ui-widget-content").css(this.originalCss).detach();
                    this.uiDialog.stop(!0, !0).remove();
                    this.originalTitle && this.element.attr("title",
                        this.originalTitle);
                    a = c.parent.children().eq(c.index);
                    a.length && a[0] !== this.element[0] ? a.before(this.element) : c.parent.append(this.element)
                },
                widget: function() {
                    return this.uiDialog
                },
                disable: a.noop,
                enable: a.noop,
                close: function(b) {
                    var c, d = this;
                    if (this._isOpen && !1 !== this._trigger("beforeClose", b)) {
                        this._isOpen = !1;
                        this._focusedElement = null;
                        this._destroyOverlay();
                        this._untrackInstance();
                        if (!this.opener.filter(":focusable").focus().length) try {
                            (c = this.document[0].activeElement) && "body" !== c.nodeName.toLowerCase() &&
                                a(c).blur()
                        } catch (g) {}
                        this._hide(this.uiDialog, this.options.hide, function() {
                            d._trigger("close", b)
                        })
                    }
                },
                isOpen: function() {
                    return this._isOpen
                },
                moveToTop: function() {
                    this._moveToTop()
                },
                _moveToTop: function(b, c) {
                    var d = !1,
                        g = this.uiDialog.siblings(".ui-front:visible").map(function() {
                            return +a(this).css("z-index")
                        }).get(),
                        g = Math.max.apply(null, g);
                    g >= +this.uiDialog.css("z-index") && (this.uiDialog.css("z-index", g + 1), d = !0);
                    d && !c && this._trigger("focus", b);
                    return d
                },
                open: function() {
                    var b = this;
                    this._isOpen ? this._moveToTop() &&
                        this._focusTabbable() : (this._isOpen = !0, this.opener = a(this.document[0].activeElement), this._size(), this._position(), this._createOverlay(), this._moveToTop(null, !0), this.overlay && this.overlay.css("z-index", this.uiDialog.css("z-index") - 1), this._show(this.uiDialog, this.options.show, function() {
                            b._focusTabbable();
                            b._trigger("focus")
                        }), this._makeFocusTarget(), this._trigger("open"))
                },
                _focusTabbable: function() {
                    var a = this._focusedElement;
                    a || (a = this.element.find("[autofocus]"));
                    a.length || (a = this.element.find(":tabbable"));
                    a.length || (a = this.uiDialogButtonPane.find(":tabbable"));
                    a.length || (a = this.uiDialogTitlebarClose.filter(":tabbable"));
                    a.length || (a = this.uiDialog);
                    a.eq(0).focus()
                },
                _keepFocus: function(b) {
                    function c() {
                        var b = this.document[0].activeElement;
                        this.uiDialog[0] === b || a.contains(this.uiDialog[0], b) || this._focusTabbable()
                    }
                    b.preventDefault();
                    c.call(this);
                    this._delay(c)
                },
                _createWrapper: function() {
                    this.uiDialog = a("<div>").addClass("ui-dialog ui-widget ui-widget-content ui-corner-all ui-front " + this.options.dialogClass).hide().attr({
                        tabIndex: -1,
                        role: "dialog"
                    }).appendTo(this._appendTo());
                    this._on(this.uiDialog, {
                        keydown: function(b) {
                            if (this.options.closeOnEscape && !b.isDefaultPrevented() && b.keyCode && b.keyCode === a.ui.keyCode.ESCAPE) b.preventDefault(), this.close(b);
                            else if (b.keyCode === a.ui.keyCode.TAB && !b.isDefaultPrevented()) {
                                var c = this.uiDialog.find(":tabbable"),
                                    d = c.filter(":first"),
                                    g = c.filter(":last");
                                b.target !== g[0] && b.target !== this.uiDialog[0] || b.shiftKey ? b.target !== d[0] && b.target !== this.uiDialog[0] || !b.shiftKey || (this._delay(function() {
                                        g.focus()
                                    }),
                                    b.preventDefault()) : (this._delay(function() {
                                    d.focus()
                                }), b.preventDefault())
                            }
                        },
                        mousedown: function(a) {
                            this._moveToTop(a) && this._focusTabbable()
                        }
                    });
                    this.element.find("[aria-describedby]").length || this.uiDialog.attr({
                        "aria-describedby": this.element.uniqueId().attr("id")
                    })
                },
                _createTitlebar: function() {
                    var b;
                    this.uiDialogTitlebar = a("<div>").addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(this.uiDialog);
                    this._on(this.uiDialogTitlebar, {
                        mousedown: function(b) {
                            a(b.target).closest(".ui-dialog-titlebar-close") ||
                                this.uiDialog.focus()
                        }
                    });
                    this.uiDialogTitlebarClose = a("<button type='button'></button>").button({
                        label: this.options.closeText,
                        icons: {
                            primary: "ui-icon-closethick"
                        },
                        text: !1
                    }).addClass("ui-dialog-titlebar-close").appendTo(this.uiDialogTitlebar);
                    this._on(this.uiDialogTitlebarClose, {
                        click: function(a) {
                            a.preventDefault();
                            this.close(a)
                        }
                    });
                    b = a("<span>").uniqueId().addClass("ui-dialog-title").prependTo(this.uiDialogTitlebar);
                    this._title(b);
                    this.uiDialog.attr({
                        "aria-labelledby": b.attr("id")
                    })
                },
                _title: function(a) {
                    this.options.title ||
                        a.html("&#160;");
                    a.text(this.options.title)
                },
                _createButtonPane: function() {
                    this.uiDialogButtonPane = a("<div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix");
                    this.uiButtonSet = a("<div>").addClass("ui-dialog-buttonset").appendTo(this.uiDialogButtonPane);
                    this._createButtons()
                },
                _createButtons: function() {
                    var b = this,
                        c = this.options.buttons;
                    this.uiDialogButtonPane.remove();
                    this.uiButtonSet.empty();
                    a.isEmptyObject(c) || a.isArray(c) && !c.length ? this.uiDialog.removeClass("ui-dialog-buttons") :
                        (a.each(c, function(c, g) {
                            var f, m;
                            g = a.isFunction(g) ? {
                                click: g,
                                text: c
                            } : g;
                            g = a.extend({
                                type: "button"
                            }, g);
                            f = g.click;
                            g.click = function() {
                                f.apply(b.element[0], arguments)
                            };
                            m = {
                                icons: g.icons,
                                text: g.showText
                            };
                            delete g.icons;
                            delete g.showText;
                            a("<button></button>", g).button(m).appendTo(b.uiButtonSet)
                        }), this.uiDialog.addClass("ui-dialog-buttons"), this.uiDialogButtonPane.appendTo(this.uiDialog))
                },
                _makeDraggable: function() {
                    function b(a) {
                        return {
                            position: a.position,
                            offset: a.offset
                        }
                    }
                    var c = this,
                        d = this.options;
                    this.uiDialog.draggable({
                        cancel: ".ui-dialog-content, .ui-dialog-titlebar-close",
                        handle: ".ui-dialog-titlebar",
                        containment: "document",
                        start: function(d, f) {
                            a(this).addClass("ui-dialog-dragging");
                            c._blockFrames();
                            c._trigger("dragStart", d, b(f))
                        },
                        drag: function(a, d) {
                            c._trigger("drag", a, b(d))
                        },
                        stop: function(g, f) {
                            var m = f.offset.left - c.document.scrollLeft(),
                                h = f.offset.top - c.document.scrollTop();
                            d.position = {
                                my: "left top",
                                at: "left" + (0 <= m ? "+" : "") + m + " top" + (0 <= h ? "+" : "") + h,
                                of: c.window
                            };
                            a(this).removeClass("ui-dialog-dragging");
                            c._unblockFrames();
                            c._trigger("dragStop", g, b(f))
                        }
                    })
                },
                _makeResizable: function() {
                    function b(a) {
                        return {
                            originalPosition: a.originalPosition,
                            originalSize: a.originalSize,
                            position: a.position,
                            size: a.size
                        }
                    }
                    var c = this,
                        d = this.options,
                        g = d.resizable,
                        f = this.uiDialog.css("position"),
                        g = "string" === typeof g ? g : "n,e,s,w,se,sw,ne,nw";
                    this.uiDialog.resizable({
                        cancel: ".ui-dialog-content",
                        containment: "document",
                        alsoResize: this.element,
                        maxWidth: d.maxWidth,
                        maxHeight: d.maxHeight,
                        minWidth: d.minWidth,
                        minHeight: this._minHeight(),
                        handles: g,
                        start: function(d, f) {
                            a(this).addClass("ui-dialog-resizing");
                            c._blockFrames();
                            c._trigger("resizeStart", d, b(f))
                        },
                        resize: function(a,
                            d) {
                            c._trigger("resize", a, b(d))
                        },
                        stop: function(f, g) {
                            var k = c.uiDialog.offset(),
                                l = k.left - c.document.scrollLeft(),
                                k = k.top - c.document.scrollTop();
                            d.height = c.uiDialog.height();
                            d.width = c.uiDialog.width();
                            d.position = {
                                my: "left top",
                                at: "left" + (0 <= l ? "+" : "") + l + " top" + (0 <= k ? "+" : "") + k,
                                of: c.window
                            };
                            a(this).removeClass("ui-dialog-resizing");
                            c._unblockFrames();
                            c._trigger("resizeStop", f, b(g))
                        }
                    }).css("position", f)
                },
                _trackFocus: function() {
                    this._on(this.widget(), {
                        focusin: function(b) {
                            this._makeFocusTarget();
                            this._focusedElement =
                                a(b.target)
                        }
                    })
                },
                _makeFocusTarget: function() {
                    this._untrackInstance();
                    this._trackingInstances().unshift(this)
                },
                _untrackInstance: function() {
                    var b = this._trackingInstances(),
                        c = a.inArray(this, b); - 1 !== c && b.splice(c, 1)
                },
                _trackingInstances: function() {
                    var a = this.document.data("ui-dialog-instances");
                    a || (a = [], this.document.data("ui-dialog-instances", a));
                    return a
                },
                _minHeight: function() {
                    var a = this.options;
                    return "auto" === a.height ? a.minHeight : Math.min(a.minHeight, a.height)
                },
                _position: function() {
                    var a = this.uiDialog.is(":visible");
                    a || this.uiDialog.show();
                    this.uiDialog.position(this.options.position);
                    a || this.uiDialog.hide()
                },
                _setOptions: function(b) {
                    var c = this,
                        d = !1,
                        g = {};
                    a.each(b, function(a, b) {
                        c._setOption(a, b);
                        a in c.sizeRelatedOptions && (d = !0);
                        a in c.resizableRelatedOptions && (g[a] = b)
                    });
                    d && (this._size(), this._position());
                    this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", g)
                },
                _setOption: function(a, c) {
                    var d, g = this.uiDialog;
                    "dialogClass" === a && g.removeClass(this.options.dialogClass).addClass(c);
                    "disabled" !==
                    a && (this._super(a, c), "appendTo" === a && this.uiDialog.appendTo(this._appendTo()), "buttons" === a && this._createButtons(), "closeText" === a && this.uiDialogTitlebarClose.button({
                            label: "" + c
                        }), "draggable" === a && ((d = g.is(":data(ui-draggable)")) && !c && g.draggable("destroy"), !d && c && this._makeDraggable()), "position" === a && this._position(), "resizable" === a && ((d = g.is(":data(ui-resizable)")) && !c && g.resizable("destroy"), d && "string" === typeof c && g.resizable("option", "handles", c), d || !1 === c || this._makeResizable()), "title" ===
                        a && this._title(this.uiDialogTitlebar.find(".ui-dialog-title")))
                },
                _size: function() {
                    var a, c, d, g = this.options;
                    this.element.show().css({
                        width: "auto",
                        minHeight: 0,
                        maxHeight: "none",
                        height: 0
                    });
                    g.minWidth > g.width && (g.width = g.minWidth);
                    a = this.uiDialog.css({
                        height: "auto",
                        width: g.width
                    }).outerHeight();
                    c = Math.max(0, g.minHeight - a);
                    d = "number" === typeof g.maxHeight ? Math.max(0, g.maxHeight - a) : "none";
                    "auto" === g.height ? this.element.css({
                        minHeight: c,
                        maxHeight: d,
                        height: "auto"
                    }) : this.element.height(Math.max(0, g.height - a));
                    this.uiDialog.is(":data(ui-resizable)") && this.uiDialog.resizable("option", "minHeight", this._minHeight())
                },
                _blockFrames: function() {
                    this.iframeBlocks = this.document.find("iframe").map(function() {
                        var b = a(this);
                        return a("<div>").css({
                            position: "absolute",
                            width: b.outerWidth(),
                            height: b.outerHeight()
                        }).appendTo(b.parent()).offset(b.offset())[0]
                    })
                },
                _unblockFrames: function() {
                    this.iframeBlocks && (this.iframeBlocks.remove(), delete this.iframeBlocks)
                },
                _allowInteraction: function(b) {
                    return a(b.target).closest(".ui-dialog").length ?
                        !0 : !!a(b.target).closest(".ui-datepicker").length
                },
                _createOverlay: function() {
                    if (this.options.modal) {
                        var b = !0;
                        this._delay(function() {
                            b = !1
                        });
                        this.document.data("ui-dialog-overlays") || this._on(this.document, {
                            focusin: function(a) {
                                b || this._allowInteraction(a) || (a.preventDefault(), this._trackingInstances()[0]._focusTabbable())
                            }
                        });
                        this.overlay = a("<div>").addClass("ui-widget-overlay ui-front").appendTo(this._appendTo());
                        this._on(this.overlay, {
                            mousedown: "_keepFocus"
                        });
                        this.document.data("ui-dialog-overlays",
                            (this.document.data("ui-dialog-overlays") || 0) + 1)
                    }
                },
                _destroyOverlay: function() {
                    if (this.options.modal && this.overlay) {
                        var a = this.document.data("ui-dialog-overlays") - 1;
                        a ? this.document.data("ui-dialog-overlays", a) : this.document.unbind("focusin").removeData("ui-dialog-overlays");
                        this.overlay.remove();
                        this.overlay = null
                    }
                }
            });
            a.widget("ui.droppable", {
                version: "1.11.4",
                widgetEventPrefix: "drop",
                options: {
                    accept: "*",
                    activeClass: !1,
                    addClasses: !0,
                    greedy: !1,
                    hoverClass: !1,
                    scope: "default",
                    tolerance: "intersect",
                    activate: null,
                    deactivate: null,
                    drop: null,
                    out: null,
                    over: null
                },
                _create: function() {
                    var b, c = this.options,
                        d = c.accept;
                    this.isover = !1;
                    this.isout = !0;
                    this.accept = a.isFunction(d) ? d : function(a) {
                        return a.is(d)
                    };
                    this.proportions = function() {
                        if (arguments.length) b = arguments[0];
                        else return b ? b : b = {
                            width: this.element[0].offsetWidth,
                            height: this.element[0].offsetHeight
                        }
                    };
                    this._addToManager(c.scope);
                    c.addClasses && this.element.addClass("ui-droppable")
                },
                _addToManager: function(b) {
                    a.ui.ddmanager.droppables[b] = a.ui.ddmanager.droppables[b] || [];
                    a.ui.ddmanager.droppables[b].push(this)
                },
                _splice: function(a) {
                    for (var c = 0; c < a.length; c++) a[c] === this && a.splice(c, 1)
                },
                _destroy: function() {
                    this._splice(a.ui.ddmanager.droppables[this.options.scope]);
                    this.element.removeClass("ui-droppable ui-droppable-disabled")
                },
                _setOption: function(b, c) {
                    "accept" === b ? this.accept = a.isFunction(c) ? c : function(a) {
                        return a.is(c)
                    } : "scope" === b && (this._splice(a.ui.ddmanager.droppables[this.options.scope]), this._addToManager(c));
                    this._super(b, c)
                },
                _activate: function(b) {
                    var c =
                        a.ui.ddmanager.current;
                    this.options.activeClass && this.element.addClass(this.options.activeClass);
                    c && this._trigger("activate", b, this.ui(c))
                },
                _deactivate: function(b) {
                    var c = a.ui.ddmanager.current;
                    this.options.activeClass && this.element.removeClass(this.options.activeClass);
                    c && this._trigger("deactivate", b, this.ui(c))
                },
                _over: function(b) {
                    var c = a.ui.ddmanager.current;
                    c && (c.currentItem || c.element)[0] !== this.element[0] && this.accept.call(this.element[0], c.currentItem || c.element) && (this.options.hoverClass && this.element.addClass(this.options.hoverClass),
                        this._trigger("over", b, this.ui(c)))
                },
                _out: function(b) {
                    var c = a.ui.ddmanager.current;
                    c && (c.currentItem || c.element)[0] !== this.element[0] && this.accept.call(this.element[0], c.currentItem || c.element) && (this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("out", b, this.ui(c)))
                },
                _drop: function(b, c) {
                    var d = c || a.ui.ddmanager.current,
                        g = !1;
                    if (!d || (d.currentItem || d.element)[0] === this.element[0]) return !1;
                    this.element.find(":data(ui-droppable)").not(".ui-draggable-dragging").each(function() {
                        var c =
                            a(this).droppable("instance");
                        if (c.options.greedy && !c.options.disabled && c.options.scope === d.options.scope && c.accept.call(c.element[0], d.currentItem || d.element) && a.ui.intersect(d, a.extend(c, {
                                offset: c.element.offset()
                            }), c.options.tolerance, b)) return g = !0, !1
                    });
                    return g ? !1 : this.accept.call(this.element[0], d.currentItem || d.element) ? (this.options.activeClass && this.element.removeClass(this.options.activeClass), this.options.hoverClass && this.element.removeClass(this.options.hoverClass), this._trigger("drop",
                        b, this.ui(d)), this.element) : !1
                },
                ui: function(a) {
                    return {
                        draggable: a.currentItem || a.element,
                        helper: a.helper,
                        position: a.position,
                        offset: a.positionAbs
                    }
                }
            });
            a.ui.intersect = function() {
                return function(a, c, d, g) {
                    if (!c.offset) return !1;
                    var f = (a.positionAbs || a.position.absolute).left + a.margins.left,
                        m = (a.positionAbs || a.position.absolute).top + a.margins.top,
                        h = f + a.helperProportions.width,
                        k = m + a.helperProportions.height,
                        l = c.offset.left,
                        e = c.offset.top,
                        n = l + c.proportions().width,
                        p = e + c.proportions().height;
                    switch (d) {
                        case "fit":
                            return l <=
                                f && h <= n && e <= m && k <= p;
                        case "intersect":
                            return l < f + a.helperProportions.width / 2 && h - a.helperProportions.width / 2 < n && e < m + a.helperProportions.height / 2 && k - a.helperProportions.height / 2 < p;
                        case "pointer":
                            a = g.pageY;
                            d = c.proportions().height;
                            if (e = a >= e && a < e + d) g = g.pageX, c = c.proportions().width, e = g >= l && g < l + c;
                            return e;
                        case "touch":
                            return (m >= e && m <= p || k >= e && k <= p || m < e && k > p) && (f >= l && f <= n || h >= l && h <= n || f < l && h > n);
                        default:
                            return !1
                    }
                }
            }();
            a.ui.ddmanager = {
                current: null,
                droppables: {
                    "default": []
                },
                prepareOffsets: function(b, c) {
                    var d,
                        g, f = a.ui.ddmanager.droppables[b.options.scope] || [],
                        m = c ? c.type : null,
                        h = (b.currentItem || b.element).find(":data(ui-droppable)").addBack();
                    d = 0;
                    a: for (; d < f.length; d++)
                        if (!(f[d].options.disabled || b && !f[d].accept.call(f[d].element[0], b.currentItem || b.element))) {
                            for (g = 0; g < h.length; g++)
                                if (h[g] === f[d].element[0]) {
                                    f[d].proportions().height = 0;
                                    continue a
                                }
                            f[d].visible = "none" !== f[d].element.css("display");
                            f[d].visible && ("mousedown" === m && f[d]._activate.call(f[d], c), f[d].offset = f[d].element.offset(), f[d].proportions({
                                width: f[d].element[0].offsetWidth,
                                height: f[d].element[0].offsetHeight
                            }))
                        }
                },
                drop: function(b, c) {
                    var d = !1;
                    a.each((a.ui.ddmanager.droppables[b.options.scope] || []).slice(), function() {
                        this.options && (!this.options.disabled && this.visible && a.ui.intersect(b, this, this.options.tolerance, c) && (d = this._drop.call(this, c) || d), !this.options.disabled && this.visible && this.accept.call(this.element[0], b.currentItem || b.element) && (this.isout = !0, this.isover = !1, this._deactivate.call(this, c)))
                    });
                    return d
                },
                dragStart: function(b, c) {
                    b.element.parentsUntil("body").bind("scroll.droppable",
                        function() {
                            b.options.refreshPositions || a.ui.ddmanager.prepareOffsets(b, c)
                        })
                },
                drag: function(b, c) {
                    b.options.refreshPositions && a.ui.ddmanager.prepareOffsets(b, c);
                    a.each(a.ui.ddmanager.droppables[b.options.scope] || [], function() {
                        if (!this.options.disabled && !this.greedyChild && this.visible) {
                            var d, g, f;
                            f = a.ui.intersect(b, this, this.options.tolerance, c);
                            var m = !f && this.isover ? "isout" : f && !this.isover ? "isover" : null;
                            m && (this.options.greedy && (g = this.options.scope, f = this.element.parents(":data(ui-droppable)").filter(function() {
                                return a(this).droppable("instance").options.scope ===
                                    g
                            }), f.length && (d = a(f[0]).droppable("instance"), d.greedyChild = "isover" === m)), d && "isover" === m && (d.isover = !1, d.isout = !0, d._out.call(d, c)), this[m] = !0, this["isout" === m ? "isover" : "isout"] = !1, this["isover" === m ? "_over" : "_out"].call(this, c), d && "isout" === m && (d.isout = !1, d.isover = !0, d._over.call(d, c)))
                        }
                    })
                },
                dragStop: function(b, c) {
                    b.element.parentsUntil("body").unbind("scroll.droppable");
                    b.options.refreshPositions || a.ui.ddmanager.prepareOffsets(b, c)
                }
            };
            a.effects = {
                effect: {}
            };
            (function(a, c) {
                function d(a, b, c) {
                    var d =
                        e[b.type] || {};
                    if (null == a) return c || !b.def ? null : b.def;
                    a = d.floor ? ~~a : parseFloat(a);
                    return isNaN(a) ? b.def : d.mod ? (a + d.mod) % d.mod : 0 > a ? 0 : d.max < a ? d.max : a
                }

                function g(c) {
                    var d = k(),
                        e = d._rgba = [];
                    c = c.toLowerCase();
                    q(h, function(a, b) {
                        var f, g = b.re.exec(c);
                        f = g && b.parse(g);
                        g = b.space || "rgba";
                        if (f) return f = d[g](f), d[l[g].cache] = f[l[g].cache], e = d._rgba = f._rgba, !1
                    });
                    return e.length ? ("0,0,0,0" === e.join() && a.extend(e, r.transparent), d) : r[c]
                }

                function f(a, b, c) {
                    c = (c + 1) % 1;
                    return 1 > 6 * c ? a + (b - a) * c * 6 : 1 > 2 * c ? b : 2 > 3 * c ? a + (b - a) * (2 / 3 -
                        c) * 6 : a
                }
                var m = /^([\-+])=\s*(\d+\.?\d*)/,
                    h = [{
                        re: /rgba?\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                        parse: function(a) {
                            return [a[1], a[2], a[3], a[4]]
                        }
                    }, {
                        re: /rgba?\(\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                        parse: function(a) {
                            return [2.55 * a[1], 2.55 * a[2], 2.55 * a[3], a[4]]
                        }
                    }, {
                        re: /#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})/,
                        parse: function(a) {
                            return [parseInt(a[1], 16), parseInt(a[2], 16), parseInt(a[3], 16)]
                        }
                    }, {
                        re: /#([a-f0-9])([a-f0-9])([a-f0-9])/,
                        parse: function(a) {
                            return [parseInt(a[1] + a[1], 16), parseInt(a[2] + a[2], 16), parseInt(a[3] + a[3], 16)]
                        }
                    }, {
                        re: /hsla?\(\s*(\d+(?:\.\d+)?)\s*,\s*(\d+(?:\.\d+)?)\%\s*,\s*(\d+(?:\.\d+)?)\%\s*(?:,\s*(\d?(?:\.\d+)?)\s*)?\)/,
                        space: "hsla",
                        parse: function(a) {
                            return [a[1], a[2] / 100, a[3] / 100, a[4]]
                        }
                    }],
                    k = a.Color = function(c, d, e, f) {
                        return new a.Color.fn.parse(c, d, e, f)
                    },
                    l = {
                        rgba: {
                            props: {
                                red: {
                                    idx: 0,
                                    type: "byte"
                                },
                                green: {
                                    idx: 1,
                                    type: "byte"
                                },
                                blue: {
                                    idx: 2,
                                    type: "byte"
                                }
                            }
                        },
                        hsla: {
                            props: {
                                hue: {
                                    idx: 0,
                                    type: "degrees"
                                },
                                saturation: {
                                    idx: 1,
                                    type: "percent"
                                },
                                lightness: {
                                    idx: 2,
                                    type: "percent"
                                }
                            }
                        }
                    },
                    e = {
                        "byte": {
                            floor: !0,
                            max: 255
                        },
                        percent: {
                            max: 1
                        },
                        degrees: {
                            mod: 360,
                            floor: !0
                        }
                    },
                    n = k.support = {},
                    p = a("<p>")[0],
                    r, q = a.each;
                p.style.cssText = "background-color:rgba(1,1,1,.5)";
                n.rgba = -1 < p.style.backgroundColor.indexOf("rgba");
                q(l, function(a, b) {
                    b.cache = "_" + a;
                    b.props.alpha = {
                        idx: 3,
                        type: "percent",
                        def: 1
                    }
                });
                k.fn = a.extend(k.prototype, {
                    parse: function(e, f, h, m) {
                        if (e === c) return this._rgba = [null, null, null, null], this;
                        if (e.jquery || e.nodeType) e = a(e).css(f), f = c;
                        var n = this,
                            p = a.type(e),
                            v = this._rgba = [];
                        f !== c && (e = [e, f, h, m], p = "array");
                        if ("string" === p) return this.parse(g(e) || r._default);
                        if ("array" === p) return q(l.rgba.props, function(a, b) {
                            v[b.idx] = d(e[b.idx], b)
                        }), this;
                        if ("object" === p) return e instanceof k ? q(l, function(a, b) {
                                e[b.cache] && (n[b.cache] = e[b.cache].slice())
                            }) : q(l, function(c, f) {
                                var g = f.cache;
                                q(f.props, function(a, b) {
                                    if (!n[g] && f.to) {
                                        if ("alpha" === a || null == e[a]) return;
                                        n[g] = f.to(n._rgba)
                                    }
                                    n[g][b.idx] = d(e[a], b, !0)
                                });
                                n[g] && 0 > a.inArray(null, n[g].slice(0, 3)) && (n[g][3] = 1, f.from && (n._rgba = f.from(n[g])))
                            }),
                            this
                    },
                    is: function(a) {
                        var b = k(a),
                            c = !0,
                            d = this;
                        q(l, function(a, e) {
                            var f, g = b[e.cache];
                            g && (f = d[e.cache] || e.to && e.to(d._rgba) || [], q(e.props, function(a, b) {
                                if (null != g[b.idx]) return c = g[b.idx] === f[b.idx]
                            }));
                            return c
                        });
                        return c
                    },
                    _space: function() {
                        var a = [],
                            b = this;
                        q(l, function(c, d) {
                            b[d.cache] && a.push(c)
                        });
                        return a.pop()
                    },
                    transition: function(a, b) {
                        var c = k(a),
                            f = c._space(),
                            g = l[f],
                            h = 0 === this.alpha() ? k("transparent") : this,
                            m = h[g.cache] || g.to(h._rgba),
                            n = m.slice(),
                            c = c[g.cache];
                        q(g.props, function(a, f) {
                            var g = f.idx,
                                h = m[g],
                                l = c[g],
                                k = e[f.type] || {};
                            null !== l && (null === h ? n[g] = l : (k.mod && (l - h > k.mod / 2 ? h += k.mod : h - l > k.mod / 2 && (h -= k.mod)), n[g] = d((l - h) * b + h, f)))
                        });
                        return this[f](n)
                    },
                    blend: function(c) {
                        if (1 === this._rgba[3]) return this;
                        var d = this._rgba.slice(),
                            e = d.pop(),
                            f = k(c)._rgba;
                        return k(a.map(d, function(a, b) {
                            return (1 - e) * f[b] + e * a
                        }))
                    },
                    toRgbaString: function() {
                        var c = "rgba(",
                            d = a.map(this._rgba, function(a, b) {
                                return null == a ? 2 < b ? 1 : 0 : a
                            });
                        1 === d[3] && (d.pop(), c = "rgb(");
                        return c + d.join() + ")"
                    },
                    toHslaString: function() {
                        var c = "hsla(",
                            d = a.map(this.hsla(),
                                function(a, b) {
                                    null == a && (a = 2 < b ? 1 : 0);
                                    b && 3 > b && (a = Math.round(100 * a) + "%");
                                    return a
                                });
                        1 === d[3] && (d.pop(), c = "hsl(");
                        return c + d.join() + ")"
                    },
                    toHexString: function(c) {
                        var d = this._rgba.slice(),
                            e = d.pop();
                        c && d.push(~~(255 * e));
                        return "#" + a.map(d, function(a) {
                            a = (a || 0).toString(16);
                            return 1 === a.length ? "0" + a : a
                        }).join("")
                    },
                    toString: function() {
                        return 0 === this._rgba[3] ? "transparent" : this.toRgbaString()
                    }
                });
                k.fn.parse.prototype = k.fn;
                l.hsla.to = function(a) {
                    if (null == a[0] || null == a[1] || null == a[2]) return [null, null, null, a[3]];
                    var b =
                        a[0] / 255,
                        c = a[1] / 255,
                        d = a[2] / 255;
                    a = a[3];
                    var e = Math.max(b, c, d),
                        f = Math.min(b, c, d),
                        g = e - f,
                        h = e + f,
                        l = .5 * h;
                    return [Math.round(f === e ? 0 : b === e ? 60 * (c - d) / g + 360 : c === e ? 60 * (d - b) / g + 120 : 60 * (b - c) / g + 240) % 360, 0 === g ? 0 : .5 >= l ? g / h : g / (2 - h), l, null == a ? 1 : a]
                };
                l.hsla.from = function(a) {
                    if (null == a[0] || null == a[1] || null == a[2]) return [null, null, null, a[3]];
                    var b = a[0] / 360,
                        c = a[1],
                        d = a[2];
                    a = a[3];
                    c = .5 >= d ? d * (1 + c) : d + c - d * c;
                    d = 2 * d - c;
                    return [Math.round(255 * f(d, c, b + 1 / 3)), Math.round(255 * f(d, c, b)), Math.round(255 * f(d, c, b - 1 / 3)), a]
                };
                q(l, function(e, f) {
                    var g =
                        f.props,
                        h = f.cache,
                        l = f.to,
                        n = f.from;
                    k.fn[e] = function(e) {
                        l && !this[h] && (this[h] = l(this._rgba));
                        if (e === c) return this[h].slice();
                        var f, m = a.type(e),
                            r = "array" === m || "object" === m ? e : arguments,
                            p = this[h].slice();
                        q(g, function(a, b) {
                            var c = r["object" === m ? a : b.idx];
                            null == c && (c = p[b.idx]);
                            p[b.idx] = d(c, b)
                        });
                        return n ? (f = k(n(p)), f[h] = p, f) : k(p)
                    };
                    q(g, function(c, d) {
                        k.fn[c] || (k.fn[c] = function(f) {
                            var g = a.type(f),
                                h = "alpha" === c ? this._hsla ? "hsla" : "rgba" : e,
                                l = this[h](),
                                k = l[d.idx];
                            if ("undefined" === g) return k;
                            "function" === g && (f = f.call(this,
                                k), g = a.type(f));
                            if (null == f && d.empty) return this;
                            "string" === g && (g = m.exec(f)) && (f = k + parseFloat(g[2]) * ("+" === g[1] ? 1 : -1));
                            l[d.idx] = f;
                            return this[h](l)
                        })
                    })
                });
                k.hook = function(c) {
                    c = c.split(" ");
                    q(c, function(c, d) {
                        a.cssHooks[d] = {
                            set: function(c, e) {
                                var f, h = "";
                                if ("transparent" !== e && ("string" !== a.type(e) || (f = g(e)))) {
                                    e = k(f || e);
                                    if (!n.rgba && 1 !== e._rgba[3]) {
                                        for (f = "backgroundColor" === d ? c.parentNode : c;
                                            ("" === h || "transparent" === h) && f && f.style;) try {
                                            h = a.css(f, "backgroundColor"), f = f.parentNode
                                        } catch (l) {}
                                        e = e.blend(h && "transparent" !==
                                            h ? h : "_default")
                                    }
                                    e = e.toRgbaString()
                                }
                                try {
                                    c.style[d] = e
                                } catch (l) {}
                            }
                        };
                        a.fx.step[d] = function(c) {
                            c.colorInit || (c.start = k(c.elem, d), c.end = k(c.end), c.colorInit = !0);
                            a.cssHooks[d].set(c.elem, c.start.transition(c.end, c.pos))
                        }
                    })
                };
                k.hook("backgroundColor borderBottomColor borderLeftColor borderRightColor borderTopColor color columnRuleColor outlineColor textDecorationColor textEmphasisColor");
                a.cssHooks.borderColor = {
                    expand: function(a) {
                        var b = {};
                        q(["Top", "Right", "Bottom", "Left"], function(c, d) {
                            b["border" + d + "Color"] =
                                a
                        });
                        return b
                    }
                };
                r = a.Color.names = {
                    aqua: "#00ffff",
                    black: "#000000",
                    blue: "#0000ff",
                    fuchsia: "#ff00ff",
                    gray: "#808080",
                    green: "#008000",
                    lime: "#00ff00",
                    maroon: "#800000",
                    navy: "#000080",
                    olive: "#808000",
                    purple: "#800080",
                    red: "#ff0000",
                    silver: "#c0c0c0",
                    teal: "#008080",
                    white: "#ffffff",
                    yellow: "#ffff00",
                    transparent: [null, null, null, 0],
                    _default: "#ffffff"
                }
            })(a);
            (function() {
                function b(b) {
                    var c, d = b.ownerDocument.defaultView ? b.ownerDocument.defaultView.getComputedStyle(b, null) : b.currentStyle,
                        h = {};
                    if (d && d.length && d[0] && d[d[0]])
                        for (b =
                            d.length; b--;) c = d[b], "string" === typeof d[c] && (h[a.camelCase(c)] = d[c]);
                    else
                        for (c in d) "string" === typeof d[c] && (h[c] = d[c]);
                    return h
                }
                var c = ["add", "remove", "toggle"],
                    d = {
                        border: 1,
                        borderBottom: 1,
                        borderColor: 1,
                        borderLeft: 1,
                        borderRight: 1,
                        borderTop: 1,
                        borderWidth: 1,
                        margin: 1,
                        padding: 1
                    };
                a.each(["borderLeftStyle", "borderRightStyle", "borderBottomStyle", "borderTopStyle"], function(b, c) {
                    a.fx.step[c] = function(b) {
                        if ("none" !== b.end && !b.setAttr || 1 === b.pos && !b.setAttr) a.style(b.elem, c, b.end), b.setAttr = !0
                    }
                });
                a.fn.addBack ||
                    (a.fn.addBack = function(a) {
                        return this.add(null == a ? this.prevObject : this.prevObject.filter(a))
                    });
                a.effects.animateClass = function(g, f, m, h) {
                    var k = a.speed(f, m, h);
                    return this.queue(function() {
                        var f = a(this),
                            e = f.attr("class") || "",
                            h, m = k.children ? f.find("*").addBack() : f,
                            m = m.map(function() {
                                return {
                                    el: a(this),
                                    start: b(this)
                                }
                            });
                        h = function() {
                            a.each(c, function(a, b) {
                                if (g[b]) f[b + "Class"](g[b])
                            })
                        };
                        h();
                        m = m.map(function() {
                            this.end = b(this.el[0]);
                            var c = this.start,
                                e = this.end,
                                f = {},
                                g, h;
                            for (g in e) h = e[g], c[g] === h || d[g] || !a.fx.step[g] &&
                                isNaN(parseFloat(h)) || (f[g] = h);
                            this.diff = f;
                            return this
                        });
                        f.attr("class", e);
                        m = m.map(function() {
                            var b = this,
                                c = a.Deferred(),
                                d = a.extend({}, k, {
                                    queue: !1,
                                    complete: function() {
                                        c.resolve(b)
                                    }
                                });
                            this.el.animate(this.diff, d);
                            return c.promise()
                        });
                        a.when.apply(a, m.get()).done(function() {
                            h();
                            a.each(arguments, function() {
                                var b = this.el;
                                a.each(this.diff, function(a) {
                                    b.css(a, "")
                                })
                            });
                            k.complete.call(f[0])
                        })
                    })
                };
                a.fn.extend({
                    addClass: function(b) {
                        return function(c, d, h, k) {
                            return d ? a.effects.animateClass.call(this, {
                                    add: c
                                }, d,
                                h, k) : b.apply(this, arguments)
                        }
                    }(a.fn.addClass),
                    removeClass: function(b) {
                        return function(c, d, h, k) {
                            return 1 < arguments.length ? a.effects.animateClass.call(this, {
                                remove: c
                            }, d, h, k) : b.apply(this, arguments)
                        }
                    }(a.fn.removeClass),
                    toggleClass: function(b) {
                        return function(c, d, h, k, l) {
                            return "boolean" === typeof d || void 0 === d ? h ? a.effects.animateClass.call(this, d ? {
                                add: c
                            } : {
                                remove: c
                            }, h, k, l) : b.apply(this, arguments) : a.effects.animateClass.call(this, {
                                toggle: c
                            }, d, h, k)
                        }
                    }(a.fn.toggleClass),
                    switchClass: function(b, c, d, h, k) {
                        return a.effects.animateClass.call(this, {
                            add: c,
                            remove: b
                        }, d, h, k)
                    }
                })
            })();
            (function() {
                function b(b, c, f, k) {
                    a.isPlainObject(b) && (c = b, b = b.effect);
                    b = {
                        effect: b
                    };
                    null == c && (c = {});
                    a.isFunction(c) && (k = c, f = null, c = {});
                    if ("number" === typeof c || a.fx.speeds[c]) k = f, f = c, c = {};
                    a.isFunction(f) && (k = f, f = null);
                    c && a.extend(b, c);
                    f = f || c.duration;
                    b.duration = a.fx.off ? 0 : "number" === typeof f ? f : f in a.fx.speeds ? a.fx.speeds[f] : a.fx.speeds._default;
                    b.complete = k || c.complete;
                    return b
                }

                function c(b) {
                    return !b || "number" === typeof b || a.fx.speeds[b] || "string" === typeof b && !a.effects.effect[b] ||
                        a.isFunction(b) || "object" === typeof b && !b.effect ? !0 : !1
                }
                a.extend(a.effects, {
                    version: "1.11.4",
                    save: function(a, b) {
                        for (var c = 0; c < b.length; c++) null !== b[c] && a.data("ui-effects-" + b[c], a[0].style[b[c]])
                    },
                    restore: function(a, b) {
                        var c, k;
                        for (k = 0; k < b.length; k++) null !== b[k] && (c = a.data("ui-effects-" + b[k]), void 0 === c && (c = ""), a.css(b[k], c))
                    },
                    setMode: function(a, b) {
                        "toggle" === b && (b = a.is(":hidden") ? "show" : "hide");
                        return b
                    },
                    getBaseline: function(a, b) {
                        var c, k;
                        switch (a[0]) {
                            case "top":
                                c = 0;
                                break;
                            case "middle":
                                c = .5;
                                break;
                            case "bottom":
                                c =
                                    1;
                                break;
                            default:
                                c = a[0] / b.height
                        }
                        switch (a[1]) {
                            case "left":
                                k = 0;
                                break;
                            case "center":
                                k = .5;
                                break;
                            case "right":
                                k = 1;
                                break;
                            default:
                                k = a[1] / b.width
                        }
                        return {
                            x: k,
                            y: c
                        }
                    },
                    createWrapper: function(b) {
                        if (b.parent().is(".ui-effects-wrapper")) return b.parent();
                        var c = {
                                width: b.outerWidth(!0),
                                height: b.outerHeight(!0),
                                "float": b.css("float")
                            },
                            f = a("<div></div>").addClass("ui-effects-wrapper").css({
                                fontSize: "100%",
                                background: "transparent",
                                border: "none",
                                margin: 0,
                                padding: 0
                            }),
                            k = {
                                width: b.width(),
                                height: b.height()
                            },
                            h = document.activeElement;
                        try {
                            h.id
                        } catch (p) {
                            h = document.body
                        }
                        b.wrap(f);
                        (b[0] === h || a.contains(b[0], h)) && a(h).focus();
                        f = b.parent();
                        "static" === b.css("position") ? (f.css({
                            position: "relative"
                        }), b.css({
                            position: "relative"
                        })) : (a.extend(c, {
                            position: b.css("position"),
                            zIndex: b.css("z-index")
                        }), a.each(["top", "left", "bottom", "right"], function(a, f) {
                            c[f] = b.css(f);
                            isNaN(parseInt(c[f], 10)) && (c[f] = "auto")
                        }), b.css({
                            position: "relative",
                            top: 0,
                            left: 0,
                            right: "auto",
                            bottom: "auto"
                        }));
                        b.css(k);
                        return f.css(c).show()
                    },
                    removeWrapper: function(b) {
                        var c =
                            document.activeElement;
                        b.parent().is(".ui-effects-wrapper") && (b.parent().replaceWith(b), (b[0] === c || a.contains(b[0], c)) && a(c).focus());
                        return b
                    },
                    setTransition: function(b, c, f, k) {
                        k = k || {};
                        a.each(c, function(a, c) {
                            var g = b.cssUnit(c);
                            0 < g[0] && (k[c] = g[0] * f + g[1])
                        });
                        return k
                    }
                });
                a.fn.extend({
                    effect: function() {
                        function c(b) {
                            function d() {
                                a.isFunction(f) && f.call(e[0]);
                                a.isFunction(b) && b()
                            }
                            var e = a(this),
                                f = g.complete,
                                k = g.mode;
                            (e.is(":hidden") ? "hide" === k : "show" === k) ? (e[k](), d()) : h.call(e[0], g, d)
                        }
                        var g = b.apply(this,
                                arguments),
                            f = g.mode,
                            k = g.queue,
                            h = a.effects.effect[g.effect];
                        return a.fx.off || !h ? f ? this[f](g.duration, g.complete) : this.each(function() {
                            g.complete && g.complete.call(this)
                        }) : !1 === k ? this.each(c) : this.queue(k || "fx", c)
                    },
                    show: function(a) {
                        return function(g) {
                            if (c(g)) return a.apply(this, arguments);
                            var f = b.apply(this, arguments);
                            f.mode = "show";
                            return this.effect.call(this, f)
                        }
                    }(a.fn.show),
                    hide: function(a) {
                        return function(g) {
                            if (c(g)) return a.apply(this, arguments);
                            var f = b.apply(this, arguments);
                            f.mode = "hide";
                            return this.effect.call(this,
                                f)
                        }
                    }(a.fn.hide),
                    toggle: function(a) {
                        return function(g) {
                            if (c(g) || "boolean" === typeof g) return a.apply(this, arguments);
                            var f = b.apply(this, arguments);
                            f.mode = "toggle";
                            return this.effect.call(this, f)
                        }
                    }(a.fn.toggle),
                    cssUnit: function(b) {
                        var c = this.css(b),
                            f = [];
                        a.each(["em", "px", "%", "pt"], function(a, b) {
                            0 < c.indexOf(b) && (f = [parseFloat(c), b])
                        });
                        return f
                    }
                })
            })();
            (function() {
                var b = {};
                a.each(["Quad", "Cubic", "Quart", "Quint", "Expo"], function(a, d) {
                    b[d] = function(b) {
                        return Math.pow(b, a + 2)
                    }
                });
                a.extend(b, {
                    Sine: function(a) {
                        return 1 -
                            Math.cos(a * Math.PI / 2)
                    },
                    Circ: function(a) {
                        return 1 - Math.sqrt(1 - a * a)
                    },
                    Elastic: function(a) {
                        return 0 === a || 1 === a ? a : -Math.pow(2, 8 * (a - 1)) * Math.sin((80 * (a - 1) - 7.5) * Math.PI / 15)
                    },
                    Back: function(a) {
                        return a * a * (3 * a - 2)
                    },
                    Bounce: function(a) {
                        for (var b, g = 4; a < ((b = Math.pow(2, --g)) - 1) / 11;);
                        return 1 / Math.pow(4, 3 - g) - 7.5625 * Math.pow((3 * b - 2) / 22 - a, 2)
                    }
                });
                a.each(b, function(b, d) {
                    a.easing["easeIn" + b] = d;
                    a.easing["easeOut" + b] = function(a) {
                        return 1 - d(1 - a)
                    };
                    a.easing["easeInOut" + b] = function(a) {
                        return .5 > a ? d(2 * a) / 2 : 1 - d(-2 * a + 2) / 2
                    }
                })
            })();
            a.effects.effect.blind = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right height width".split(" "),
                    f = a.effects.setMode(d, b.mode || "hide"),
                    k = b.direction || "up",
                    h = /up|down|vertical/.test(k),
                    p = h ? "height" : "width",
                    l = h ? "top" : "left",
                    k = /up|left|vertical|horizontal/.test(k),
                    e = {},
                    n = "show" === f,
                    v, r, q;
                d.parent().is(".ui-effects-wrapper") ? a.effects.save(d.parent(), g) : a.effects.save(d, g);
                d.show();
                v = a.effects.createWrapper(d).css({
                    overflow: "hidden"
                });
                r = v[p]();
                q = parseFloat(v.css(l)) || 0;
                e[p] = n ? r : 0;
                k || (d.css(h ?
                    "bottom" : "right", 0).css(h ? "top" : "left", "auto").css({
                    position: "absolute"
                }), e[l] = n ? q : r + q);
                n && (v.css(p, 0), k || v.css(l, q + r));
                v.animate(e, {
                    duration: b.duration,
                    easing: b.easing,
                    queue: !1,
                    complete: function() {
                        "hide" === f && d.hide();
                        a.effects.restore(d, g);
                        a.effects.removeWrapper(d);
                        c()
                    }
                })
            };
            a.effects.effect.bounce = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right height width".split(" "),
                    f = a.effects.setMode(d, b.mode || "effect"),
                    k = "hide" === f,
                    h = "show" === f,
                    p = b.direction || "up",
                    f = b.distance,
                    l = b.times || 5,
                    e =
                    2 * l + (h || k ? 1 : 0),
                    n = b.duration / e,
                    v = b.easing,
                    r = "up" === p || "down" === p ? "top" : "left",
                    p = "up" === p || "left" === p,
                    q, u, z = d.queue(),
                    y = z.length;
                (h || k) && g.push("opacity");
                a.effects.save(d, g);
                d.show();
                a.effects.createWrapper(d);
                f || (f = d["top" === r ? "outerHeight" : "outerWidth"]() / 3);
                h && (u = {
                    opacity: 1
                }, u[r] = 0, d.css("opacity", 0).css(r, p ? 2 * -f : 2 * f).animate(u, n, v));
                k && (f /= Math.pow(2, l - 1));
                u = {};
                for (h = u[r] = 0; h < l; h++) q = {}, q[r] = (p ? "-=" : "+=") + f, d.animate(q, n, v).animate(u, n, v), f = k ? 2 * f : f / 2;
                k && (q = {
                    opacity: 0
                }, q[r] = (p ? "-=" : "+=") + f, d.animate(q,
                    n, v));
                d.queue(function() {
                    k && d.hide();
                    a.effects.restore(d, g);
                    a.effects.removeWrapper(d);
                    c()
                });
                1 < y && z.splice.apply(z, [1, 0].concat(z.splice(y, e + 1)));
                d.dequeue()
            };
            a.effects.effect.clip = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right height width".split(" "),
                    f = "show" === a.effects.setMode(d, b.mode || "hide"),
                    k = "vertical" === (b.direction || "vertical"),
                    h = k ? "height" : "width",
                    k = k ? "top" : "left",
                    p = {},
                    l, e;
                a.effects.save(d, g);
                d.show();
                l = a.effects.createWrapper(d).css({
                    overflow: "hidden"
                });
                l = "IMG" === d[0].tagName ?
                    l : d;
                e = l[h]();
                f && (l.css(h, 0), l.css(k, e / 2));
                p[h] = f ? e : 0;
                p[k] = f ? 0 : e / 2;
                l.animate(p, {
                    queue: !1,
                    duration: b.duration,
                    easing: b.easing,
                    complete: function() {
                        f || d.hide();
                        a.effects.restore(d, g);
                        a.effects.removeWrapper(d);
                        c()
                    }
                })
            };
            a.effects.effect.drop = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right opacity height width".split(" "),
                    f = a.effects.setMode(d, b.mode || "hide"),
                    k = "show" === f,
                    h = b.direction || "left",
                    p = "up" === h || "down" === h ? "top" : "left",
                    h = "up" === h || "left" === h ? "pos" : "neg",
                    l = {
                        opacity: k ? 1 : 0
                    },
                    e;
                a.effects.save(d,
                    g);
                d.show();
                a.effects.createWrapper(d);
                e = b.distance || d["top" === p ? "outerHeight" : "outerWidth"](!0) / 2;
                k && d.css("opacity", 0).css(p, "pos" === h ? -e : e);
                l[p] = (k ? "pos" === h ? "+=" : "-=" : "pos" === h ? "-=" : "+=") + e;
                d.animate(l, {
                    queue: !1,
                    duration: b.duration,
                    easing: b.easing,
                    complete: function() {
                        "hide" === f && d.hide();
                        a.effects.restore(d, g);
                        a.effects.removeWrapper(d);
                        c()
                    }
                })
            };
            a.effects.effect.explode = function(b, c) {
                function d() {
                    n.push(this);
                    n.length === g * f && (k.css({
                        visibility: "visible"
                    }), a(n).remove(), h || k.hide(), c())
                }
                var g = b.pieces ?
                    Math.round(Math.sqrt(b.pieces)) : 3,
                    f = g,
                    k = a(this),
                    h = "show" === a.effects.setMode(k, b.mode || "hide"),
                    p = k.show().css("visibility", "hidden").offset(),
                    l = Math.ceil(k.outerWidth() / f),
                    e = Math.ceil(k.outerHeight() / g),
                    n = [],
                    v, r, q, u, z, y;
                for (v = 0; v < g; v++)
                    for (u = p.top + v * e, y = v - (g - 1) / 2, r = 0; r < f; r++) q = p.left + r * l, z = r - (f - 1) / 2, k.clone().appendTo("body").wrap("<div></div>").css({
                        position: "absolute",
                        visibility: "visible",
                        left: -r * l,
                        top: -v * e
                    }).parent().addClass("ui-effects-explode").css({
                        position: "absolute",
                        overflow: "hidden",
                        width: l,
                        height: e,
                        left: q + (h ? z * l : 0),
                        top: u + (h ? y * e : 0),
                        opacity: h ? 0 : 1
                    }).animate({
                        left: q + (h ? 0 : z * l),
                        top: u + (h ? 0 : y * e),
                        opacity: h ? 1 : 0
                    }, b.duration || 500, b.easing, d)
            };
            a.effects.effect.fade = function(b, c) {
                var d = a(this),
                    g = a.effects.setMode(d, b.mode || "toggle");
                d.animate({
                    opacity: g
                }, {
                    queue: !1,
                    duration: b.duration,
                    easing: b.easing,
                    complete: c
                })
            };
            a.effects.effect.fold = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right height width".split(" "),
                    f = a.effects.setMode(d, b.mode || "hide"),
                    k = "show" === f,
                    h = "hide" === f,
                    f = b.size || 15,
                    p = /([0-9]+)%/.exec(f),
                    l = !!b.horizFirst,
                    e = k !== l,
                    n = e ? ["width", "height"] : ["height", "width"],
                    v = b.duration / 2,
                    r, q = {},
                    u = {};
                a.effects.save(d, g);
                d.show();
                r = a.effects.createWrapper(d).css({
                    overflow: "hidden"
                });
                e = e ? [r.width(), r.height()] : [r.height(), r.width()];
                p && (f = parseInt(p[1], 10) / 100 * e[h ? 0 : 1]);
                k && r.css(l ? {
                    height: 0,
                    width: f
                } : {
                    height: f,
                    width: 0
                });
                q[n[0]] = k ? e[0] : f;
                u[n[1]] = k ? e[1] : 0;
                r.animate(q, v, b.easing).animate(u, v, b.easing, function() {
                    h && d.hide();
                    a.effects.restore(d, g);
                    a.effects.removeWrapper(d);
                    c()
                })
            };
            a.effects.effect.highlight =
                function(b, c) {
                    var d = a(this),
                        g = ["backgroundImage", "backgroundColor", "opacity"],
                        f = a.effects.setMode(d, b.mode || "show"),
                        k = {
                            backgroundColor: d.css("backgroundColor")
                        };
                    "hide" === f && (k.opacity = 0);
                    a.effects.save(d, g);
                    d.show().css({
                        backgroundImage: "none",
                        backgroundColor: b.color || "#ffff99"
                    }).animate(k, {
                        queue: !1,
                        duration: b.duration,
                        easing: b.easing,
                        complete: function() {
                            "hide" === f && d.hide();
                            a.effects.restore(d, g);
                            c()
                        }
                    })
                };
            a.effects.effect.size = function(b, c) {
                var d, g, f, k, h, p, l = a(this),
                    e = "position top bottom left right width height overflow opacity".split(" ");
                h = "position top bottom left right overflow opacity".split(" ");
                var n = ["width", "height", "overflow"],
                    v = ["fontSize"],
                    r = ["borderTopWidth", "borderBottomWidth", "paddingTop", "paddingBottom"],
                    q = ["borderLeftWidth", "borderRightWidth", "paddingLeft", "paddingRight"],
                    u = a.effects.setMode(l, b.mode || "effect"),
                    z = b.restore || "effect" !== u,
                    y = b.scale || "both";
                p = b.origin || ["middle", "center"];
                var D = l.css("position"),
                    C = z ? e : h,
                    F = {
                        height: 0,
                        width: 0,
                        outerHeight: 0,
                        outerWidth: 0
                    };
                "show" === u && l.show();
                h = {
                    height: l.height(),
                    width: l.width(),
                    outerHeight: l.outerHeight(),
                    outerWidth: l.outerWidth()
                };
                "toggle" === b.mode && "show" === u ? (l.from = b.to || F, l.to = b.from || h) : (l.from = b.from || ("show" === u ? F : h), l.to = b.to || ("hide" === u ? F : h));
                f = l.from.height / h.height;
                k = l.from.width / h.width;
                d = l.to.height / h.height;
                g = l.to.width / h.width;
                if ("box" === y || "both" === y) f !== d && (C = C.concat(r), l.from = a.effects.setTransition(l, r, f, l.from), l.to = a.effects.setTransition(l, r, d, l.to)), k !== g && (C = C.concat(q), l.from = a.effects.setTransition(l, q, k, l.from), l.to = a.effects.setTransition(l,
                    q, g, l.to));
                "content" !== y && "both" !== y || f === d || (C = C.concat(v).concat(n), l.from = a.effects.setTransition(l, v, f, l.from), l.to = a.effects.setTransition(l, v, d, l.to));
                a.effects.save(l, C);
                l.show();
                a.effects.createWrapper(l);
                l.css("overflow", "hidden").css(l.from);
                p && (p = a.effects.getBaseline(p, h), l.from.top = (h.outerHeight - l.outerHeight()) * p.y, l.from.left = (h.outerWidth - l.outerWidth()) * p.x, l.to.top = (h.outerHeight - l.to.outerHeight) * p.y, l.to.left = (h.outerWidth - l.to.outerWidth) * p.x);
                l.css(l.from);
                if ("content" === y ||
                    "both" === y) r = r.concat(["marginTop", "marginBottom"]).concat(v), q = q.concat(["marginLeft", "marginRight"]), n = e.concat(r).concat(q), l.find("*[width]").each(function() {
                    var c = a(this),
                        e = c.height(),
                        h = c.width(),
                        l = c.outerHeight(),
                        p = c.outerWidth();
                    z && a.effects.save(c, n);
                    c.from = {
                        height: e * f,
                        width: h * k,
                        outerHeight: l * f,
                        outerWidth: p * k
                    };
                    c.to = {
                        height: e * d,
                        width: h * g,
                        outerHeight: e * d,
                        outerWidth: h * g
                    };
                    f !== d && (c.from = a.effects.setTransition(c, r, f, c.from), c.to = a.effects.setTransition(c, r, d, c.to));
                    k !== g && (c.from = a.effects.setTransition(c,
                        q, k, c.from), c.to = a.effects.setTransition(c, q, g, c.to));
                    c.css(c.from);
                    c.animate(c.to, b.duration, b.easing, function() {
                        z && a.effects.restore(c, n)
                    })
                });
                l.animate(l.to, {
                    queue: !1,
                    duration: b.duration,
                    easing: b.easing,
                    complete: function() {
                        0 === l.to.opacity && l.css("opacity", l.from.opacity);
                        "hide" === u && l.hide();
                        a.effects.restore(l, C);
                        z || ("static" === D ? l.css({
                            position: "relative",
                            top: l.to.top,
                            left: l.to.left
                        }) : a.each(["top", "left"], function(a, b) {
                            l.css(b, function(b, c) {
                                var d = parseInt(c, 10),
                                    e = a ? l.to.left : l.to.top;
                                return "auto" ===
                                    c ? e + "px" : d + e + "px"
                            })
                        }));
                        a.effects.removeWrapper(l);
                        c()
                    }
                })
            };
            a.effects.effect.scale = function(b, c) {
                var d = a(this),
                    g = a.extend(!0, {}, b),
                    f = a.effects.setMode(d, b.mode || "effect"),
                    k = parseInt(b.percent, 10) || (0 === parseInt(b.percent, 10) ? 0 : "hide" === f ? 0 : 100),
                    h = b.direction || "both",
                    p = b.origin,
                    l = {
                        height: d.height(),
                        width: d.width(),
                        outerHeight: d.outerHeight(),
                        outerWidth: d.outerWidth()
                    },
                    e = "horizontal" !== h ? k / 100 : 1,
                    k = "vertical" !== h ? k / 100 : 1;
                g.effect = "size";
                g.queue = !1;
                g.complete = c;
                "effect" !== f && (g.origin = p || ["middle", "center"],
                    g.restore = !0);
                g.from = b.from || ("show" === f ? {
                    height: 0,
                    width: 0,
                    outerHeight: 0,
                    outerWidth: 0
                } : l);
                g.to = {
                    height: l.height * e,
                    width: l.width * k,
                    outerHeight: l.outerHeight * e,
                    outerWidth: l.outerWidth * k
                };
                g.fade && ("show" === f && (g.from.opacity = 0, g.to.opacity = 1), "hide" === f && (g.from.opacity = 1, g.to.opacity = 0));
                d.effect(g)
            };
            a.effects.effect.puff = function(b, c) {
                var d = a(this),
                    g = a.effects.setMode(d, b.mode || "hide"),
                    f = "hide" === g,
                    k = parseInt(b.percent, 10) || 150,
                    h = k / 100,
                    p = {
                        height: d.height(),
                        width: d.width(),
                        outerHeight: d.outerHeight(),
                        outerWidth: d.outerWidth()
                    };
                a.extend(b, {
                    effect: "scale",
                    queue: !1,
                    fade: !0,
                    mode: g,
                    complete: c,
                    percent: f ? k : 100,
                    from: f ? p : {
                        height: p.height * h,
                        width: p.width * h,
                        outerHeight: p.outerHeight * h,
                        outerWidth: p.outerWidth * h
                    }
                });
                d.effect(b)
            };
            a.effects.effect.pulsate = function(b, c) {
                var d = a(this),
                    g = a.effects.setMode(d, b.mode || "show"),
                    f = "show" === g,
                    k = "hide" === g,
                    g = 2 * (b.times || 5) + (f || "hide" === g ? 1 : 0),
                    h = b.duration / g,
                    p = 0,
                    l = d.queue(),
                    e = l.length;
                if (f || !d.is(":visible")) d.css("opacity", 0).show(), p = 1;
                for (f = 1; f < g; f++) d.animate({
                        opacity: p
                    },
                    h, b.easing), p = 1 - p;
                d.animate({
                    opacity: p
                }, h, b.easing);
                d.queue(function() {
                    k && d.hide();
                    c()
                });
                1 < e && l.splice.apply(l, [1, 0].concat(l.splice(e, g + 1)));
                d.dequeue()
            };
            a.effects.effect.shake = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right height width".split(" "),
                    f = a.effects.setMode(d, b.mode || "effect"),
                    k = b.direction || "left",
                    h = b.distance || 20,
                    p = b.times || 3,
                    l = 2 * p + 1,
                    e = Math.round(b.duration / l),
                    n = "up" === k || "down" === k ? "top" : "left",
                    v = "up" === k || "left" === k,
                    k = {},
                    r = {},
                    q = {},
                    u = d.queue(),
                    z = u.length;
                a.effects.save(d,
                    g);
                d.show();
                a.effects.createWrapper(d);
                k[n] = (v ? "-=" : "+=") + h;
                r[n] = (v ? "+=" : "-=") + 2 * h;
                q[n] = (v ? "-=" : "+=") + 2 * h;
                d.animate(k, e, b.easing);
                for (h = 1; h < p; h++) d.animate(r, e, b.easing).animate(q, e, b.easing);
                d.animate(r, e, b.easing).animate(k, e / 2, b.easing).queue(function() {
                    "hide" === f && d.hide();
                    a.effects.restore(d, g);
                    a.effects.removeWrapper(d);
                    c()
                });
                1 < z && u.splice.apply(u, [1, 0].concat(u.splice(z, l + 1)));
                d.dequeue()
            };
            a.effects.effect.slide = function(b, c) {
                var d = a(this),
                    g = "position top bottom left right width height".split(" "),
                    f = a.effects.setMode(d, b.mode || "show"),
                    k = "show" === f,
                    h = b.direction || "left",
                    p = "up" === h || "down" === h ? "top" : "left",
                    h = "up" === h || "left" === h,
                    l, e = {};
                a.effects.save(d, g);
                d.show();
                l = b.distance || d["top" === p ? "outerHeight" : "outerWidth"](!0);
                a.effects.createWrapper(d).css({
                    overflow: "hidden"
                });
                k && d.css(p, h ? isNaN(l) ? "-" + l : -l : l);
                e[p] = (k ? h ? "+=" : "-=" : h ? "-=" : "+=") + l;
                d.animate(e, {
                    queue: !1,
                    duration: b.duration,
                    easing: b.easing,
                    complete: function() {
                        "hide" === f && d.hide();
                        a.effects.restore(d, g);
                        a.effects.removeWrapper(d);
                        c()
                    }
                })
            };
            a.effects.effect.transfer = function(b, c) {
                var d = a(this),
                    g = a(b.to),
                    f = "fixed" === g.css("position"),
                    k = a("body"),
                    h = f ? k.scrollTop() : 0,
                    k = f ? k.scrollLeft() : 0,
                    p = g.offset(),
                    g = {
                        top: p.top - h,
                        left: p.left - k,
                        height: g.innerHeight(),
                        width: g.innerWidth()
                    },
                    p = d.offset(),
                    l = a("<div class='ui-effects-transfer'></div>").appendTo(document.body).addClass(b.className).css({
                        top: p.top - h,
                        left: p.left - k,
                        height: d.innerHeight(),
                        width: d.innerWidth(),
                        position: f ? "fixed" : "absolute"
                    }).animate(g, b.duration, b.easing, function() {
                        l.remove();
                        c()
                    })
            };
            a.widget("ui.progressbar", {
                version: "1.11.4",
                options: {
                    max: 100,
                    value: 0,
                    change: null,
                    complete: null
                },
                min: 0,
                _create: function() {
                    this.oldValue = this.options.value = this._constrainedValue();
                    this.element.addClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").attr({
                        role: "progressbar",
                        "aria-valuemin": this.min
                    });
                    this.valueDiv = a("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element);
                    this._refreshValue()
                },
                _destroy: function() {
                    this.element.removeClass("ui-progressbar ui-widget ui-widget-content ui-corner-all").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                    this.valueDiv.remove()
                },
                value: function(a) {
                    if (void 0 === a) return this.options.value;
                    this.options.value = this._constrainedValue(a);
                    this._refreshValue()
                },
                _constrainedValue: function(a) {
                    void 0 === a && (a = this.options.value);
                    this.indeterminate = !1 === a;
                    "number" !== typeof a && (a = 0);
                    return this.indeterminate ? !1 : Math.min(this.options.max, Math.max(this.min, a))
                },
                _setOptions: function(a) {
                    var c = a.value;
                    delete a.value;
                    this._super(a);
                    this.options.value = this._constrainedValue(c);
                    this._refreshValue()
                },
                _setOption: function(a,
                    c) {
                    "max" === a && (c = Math.max(this.min, c));
                    "disabled" === a && this.element.toggleClass("ui-state-disabled", !!c).attr("aria-disabled", c);
                    this._super(a, c)
                },
                _percentage: function() {
                    return this.indeterminate ? 100 : 100 * (this.options.value - this.min) / (this.options.max - this.min)
                },
                _refreshValue: function() {
                    var b = this.options.value,
                        c = this._percentage();
                    this.valueDiv.toggle(this.indeterminate || b > this.min).toggleClass("ui-corner-right", b === this.options.max).width(c.toFixed(0) + "%");
                    this.element.toggleClass("ui-progressbar-indeterminate",
                        this.indeterminate);
                    this.indeterminate ? (this.element.removeAttr("aria-valuenow"), this.overlayDiv || (this.overlayDiv = a("<div class='ui-progressbar-overlay'></div>").appendTo(this.valueDiv))) : (this.element.attr({
                        "aria-valuemax": this.options.max,
                        "aria-valuenow": b
                    }), this.overlayDiv && (this.overlayDiv.remove(), this.overlayDiv = null));
                    this.oldValue !== b && (this.oldValue = b, this._trigger("change"));
                    b === this.options.max && this._trigger("complete")
                }
            });
            a.widget("ui.selectable", a.ui.mouse, {
                version: "1.11.4",
                options: {
                    appendTo: "body",
                    autoRefresh: !0,
                    distance: 0,
                    filter: "*",
                    tolerance: "touch",
                    selected: null,
                    selecting: null,
                    start: null,
                    stop: null,
                    unselected: null,
                    unselecting: null
                },
                _create: function() {
                    var b, c = this;
                    this.element.addClass("ui-selectable");
                    this.dragged = !1;
                    this.refresh = function() {
                        b = a(c.options.filter, c.element[0]);
                        b.addClass("ui-selectee");
                        b.each(function() {
                            var b = a(this),
                                c = b.offset();
                            a.data(this, "selectable-item", {
                                element: this,
                                $element: b,
                                left: c.left,
                                top: c.top,
                                right: c.left + b.outerWidth(),
                                bottom: c.top + b.outerHeight(),
                                startselected: !1,
                                selected: b.hasClass("ui-selected"),
                                selecting: b.hasClass("ui-selecting"),
                                unselecting: b.hasClass("ui-unselecting")
                            })
                        })
                    };
                    this.refresh();
                    this.selectees = b.addClass("ui-selectee");
                    this._mouseInit();
                    this.helper = a("<div class='ui-selectable-helper'></div>")
                },
                _destroy: function() {
                    this.selectees.removeClass("ui-selectee").removeData("selectable-item");
                    this.element.removeClass("ui-selectable ui-selectable-disabled");
                    this._mouseDestroy()
                },
                _mouseStart: function(b) {
                    var c = this,
                        d = this.options;
                    this.opos = [b.pageX, b.pageY];
                    this.options.disabled || (this.selectees = a(d.filter, this.element[0]), this._trigger("start", b), a(d.appendTo).append(this.helper), this.helper.css({
                            left: b.pageX,
                            top: b.pageY,
                            width: 0,
                            height: 0
                        }), d.autoRefresh && this.refresh(), this.selectees.filter(".ui-selected").each(function() {
                            var d = a.data(this, "selectable-item");
                            d.startselected = !0;
                            b.metaKey || b.ctrlKey || (d.$element.removeClass("ui-selected"), d.selected = !1, d.$element.addClass("ui-unselecting"), d.unselecting = !0, c._trigger("unselecting", b, {
                                unselecting: d.element
                            }))
                        }),
                        a(b.target).parents().addBack().each(function() {
                            var d, f = a.data(this, "selectable-item");
                            if (f) return d = !b.metaKey && !b.ctrlKey || !f.$element.hasClass("ui-selected"), f.$element.removeClass(d ? "ui-unselecting" : "ui-selected").addClass(d ? "ui-selecting" : "ui-unselecting"), f.unselecting = !d, f.selecting = d, (f.selected = d) ? c._trigger("selecting", b, {
                                selecting: f.element
                            }) : c._trigger("unselecting", b, {
                                unselecting: f.element
                            }), !1
                        }))
                },
                _mouseDrag: function(b) {
                    this.dragged = !0;
                    if (!this.options.disabled) {
                        var c, d = this,
                            g = this.options,
                            f = this.opos[0],
                            k = this.opos[1],
                            h = b.pageX,
                            p = b.pageY;
                        f > h && (c = h, h = f, f = c);
                        k > p && (c = p, p = k, k = c);
                        this.helper.css({
                            left: f,
                            top: k,
                            width: h - f,
                            height: p - k
                        });
                        this.selectees.each(function() {
                            var c = a.data(this, "selectable-item"),
                                e = !1;
                            c && c.element !== d.element[0] && ("touch" === g.tolerance ? e = !(c.left > h || c.right < f || c.top > p || c.bottom < k) : "fit" === g.tolerance && (e = c.left > f && c.right < h && c.top > k && c.bottom < p), e ? (c.selected && (c.$element.removeClass("ui-selected"), c.selected = !1), c.unselecting && (c.$element.removeClass("ui-unselecting"),
                                c.unselecting = !1), c.selecting || (c.$element.addClass("ui-selecting"), c.selecting = !0, d._trigger("selecting", b, {
                                selecting: c.element
                            }))) : (c.selecting && ((b.metaKey || b.ctrlKey) && c.startselected ? (c.$element.removeClass("ui-selecting"), c.selecting = !1, c.$element.addClass("ui-selected"), c.selected = !0) : (c.$element.removeClass("ui-selecting"), c.selecting = !1, c.startselected && (c.$element.addClass("ui-unselecting"), c.unselecting = !0), d._trigger("unselecting", b, {
                                    unselecting: c.element
                                }))), !c.selected || b.metaKey || b.ctrlKey ||
                                c.startselected || (c.$element.removeClass("ui-selected"), c.selected = !1, c.$element.addClass("ui-unselecting"), c.unselecting = !0, d._trigger("unselecting", b, {
                                    unselecting: c.element
                                }))))
                        });
                        return !1
                    }
                },
                _mouseStop: function(b) {
                    var c = this;
                    this.dragged = !1;
                    a(".ui-unselecting", this.element[0]).each(function() {
                        var d = a.data(this, "selectable-item");
                        d.$element.removeClass("ui-unselecting");
                        d.unselecting = !1;
                        d.startselected = !1;
                        c._trigger("unselected", b, {
                            unselected: d.element
                        })
                    });
                    a(".ui-selecting", this.element[0]).each(function() {
                        var d =
                            a.data(this, "selectable-item");
                        d.$element.removeClass("ui-selecting").addClass("ui-selected");
                        d.selecting = !1;
                        d.selected = !0;
                        d.startselected = !0;
                        c._trigger("selected", b, {
                            selected: d.element
                        })
                    });
                    this._trigger("stop", b);
                    this.helper.remove();
                    return !1
                }
            });
            a.widget("ui.selectmenu", {
                version: "1.11.4",
                defaultElement: "<select>",
                options: {
                    appendTo: null,
                    disabled: null,
                    icons: {
                        button: "ui-icon-triangle-1-s"
                    },
                    position: {
                        my: "left top",
                        at: "left bottom",
                        collision: "none"
                    },
                    width: null,
                    change: null,
                    close: null,
                    focus: null,
                    open: null,
                    select: null
                },
                _create: function() {
                    var a = this.element.uniqueId().attr("id");
                    this.ids = {
                        element: a,
                        button: a + "-button",
                        menu: a + "-menu"
                    };
                    this._drawButton();
                    this._drawMenu();
                    this.options.disabled && this.disable()
                },
                _drawButton: function() {
                    var b = this;
                    this.label = a("label[for='" + this.ids.element + "']").attr("for", this.ids.button);
                    this._on(this.label, {
                        click: function(a) {
                            this.button.focus();
                            a.preventDefault()
                        }
                    });
                    this.element.hide();
                    this.button = a("<span>", {
                        "class": "ui-selectmenu-button ui-widget ui-state-default ui-corner-all",
                        tabindex: this.options.disabled ? -1 : 0,
                        id: this.ids.button,
                        role: "combobox",
                        "aria-expanded": "false",
                        "aria-autocomplete": "list",
                        "aria-owns": this.ids.menu,
                        "aria-haspopup": "true"
                    }).insertAfter(this.element);
                    a("<span>", {
                        "class": "ui-icon " + this.options.icons.button
                    }).prependTo(this.button);
                    this.buttonText = a("<span>", {
                        "class": "ui-selectmenu-text"
                    }).appendTo(this.button);
                    this._setText(this.buttonText, this.element.find("option:selected").text());
                    this._resizeButton();
                    this._on(this.button, this._buttonEvents);
                    this.button.one("focusin",
                        function() {
                            b.menuItems || b._refreshMenu()
                        });
                    this._hoverable(this.button);
                    this._focusable(this.button)
                },
                _drawMenu: function() {
                    var b = this;
                    this.menu = a("<ul>", {
                        "aria-hidden": "true",
                        "aria-labelledby": this.ids.button,
                        id: this.ids.menu
                    });
                    this.menuWrap = a("<div>", {
                        "class": "ui-selectmenu-menu ui-front"
                    }).append(this.menu).appendTo(this._appendTo());
                    this.menuInstance = this.menu.menu({
                        role: "listbox",
                        select: function(a, d) {
                            a.preventDefault();
                            b._setSelection();
                            b._select(d.item.data("ui-selectmenu-item"), a)
                        },
                        focus: function(a,
                            d) {
                            var g = d.item.data("ui-selectmenu-item");
                            null != b.focusIndex && g.index !== b.focusIndex && (b._trigger("focus", a, {
                                item: g
                            }), b.isOpen || b._select(g, a));
                            b.focusIndex = g.index;
                            b.button.attr("aria-activedescendant", b.menuItems.eq(g.index).attr("id"))
                        }
                    }).menu("instance");
                    this.menu.addClass("ui-corner-bottom").removeClass("ui-corner-all");
                    this.menuInstance._off(this.menu, "mouseleave");
                    this.menuInstance._closeOnDocumentClick = function() {
                        return !1
                    };
                    this.menuInstance._isDivider = function() {
                        return !1
                    }
                },
                refresh: function() {
                    this._refreshMenu();
                    this._setText(this.buttonText, this._getSelectedItem().text());
                    this.options.width || this._resizeButton()
                },
                _refreshMenu: function() {
                    this.menu.empty();
                    var a;
                    a = this.element.find("option");
                    a.length && (this._parseOptions(a), this._renderMenu(this.menu, this.items), this.menuInstance.refresh(), this.menuItems = this.menu.find("li").not(".ui-selectmenu-optgroup"), a = this._getSelectedItem(), this.menuInstance.focus(null, a), this._setAria(a.data("ui-selectmenu-item")), this._setOption("disabled", this.element.prop("disabled")))
                },
                open: function(a) {
                    this.options.disabled || (this.menuItems ? (this.menu.find(".ui-state-focus").removeClass("ui-state-focus"), this.menuInstance.focus(null, this._getSelectedItem())) : this._refreshMenu(), this.isOpen = !0, this._toggleAttr(), this._resizeMenu(), this._position(), this._on(this.document, this._documentClick), this._trigger("open", a))
                },
                _position: function() {
                    this.menuWrap.position(a.extend({
                        of: this.button
                    }, this.options.position))
                },
                close: function(a) {
                    this.isOpen && (this.isOpen = !1, this._toggleAttr(), this.range =
                        null, this._off(this.document), this._trigger("close", a))
                },
                widget: function() {
                    return this.button
                },
                menuWidget: function() {
                    return this.menu
                },
                _renderMenu: function(b, c) {
                    var d = this,
                        g = "";
                    a.each(c, function(c, k) {
                        k.optgroup !== g && (a("<li>", {
                            "class": "ui-selectmenu-optgroup ui-menu-divider" + (k.element.parent("optgroup").prop("disabled") ? " ui-state-disabled" : ""),
                            text: k.optgroup
                        }).appendTo(b), g = k.optgroup);
                        d._renderItemData(b, k)
                    })
                },
                _renderItemData: function(a, c) {
                    return this._renderItem(a, c).data("ui-selectmenu-item",
                        c)
                },
                _renderItem: function(b, c) {
                    var d = a("<li>");
                    c.disabled && d.addClass("ui-state-disabled");
                    this._setText(d, c.label);
                    return d.appendTo(b)
                },
                _setText: function(a, c) {
                    c ? a.text(c) : a.html("&#160;")
                },
                _move: function(a, c) {
                    var d, g = ".ui-menu-item";
                    this.isOpen ? d = this.menuItems.eq(this.focusIndex) : (d = this.menuItems.eq(this.element[0].selectedIndex), g += ":not(.ui-state-disabled)");
                    d = "first" === a || "last" === a ? d["first" === a ? "prevAll" : "nextAll"](g).eq(-1) : d[a + "All"](g).eq(0);
                    d.length && this.menuInstance.focus(c, d)
                },
                _getSelectedItem: function() {
                    return this.menuItems.eq(this.element[0].selectedIndex)
                },
                _toggle: function(a) {
                    this[this.isOpen ? "close" : "open"](a)
                },
                _setSelection: function() {
                    var a;
                    this.range && (window.getSelection ? (a = window.getSelection(), a.removeAllRanges(), a.addRange(this.range)) : this.range.select(), this.button.focus())
                },
                _documentClick: {
                    mousedown: function(b) {
                        this.isOpen && (a(b.target).closest(".ui-selectmenu-menu, #" + this.ids.button).length || this.close(b))
                    }
                },
                _buttonEvents: {
                    mousedown: function() {
                        var a;
                        window.getSelection ? (a = window.getSelection(), a.rangeCount && (this.range = a.getRangeAt(0))) :
                            this.range = document.selection.createRange()
                    },
                    click: function(a) {
                        this._setSelection();
                        this._toggle(a)
                    },
                    keydown: function(b) {
                        var c = !0;
                        switch (b.keyCode) {
                            case a.ui.keyCode.TAB:
                            case a.ui.keyCode.ESCAPE:
                                this.close(b);
                                c = !1;
                                break;
                            case a.ui.keyCode.ENTER:
                                this.isOpen && this._selectFocusedItem(b);
                                break;
                            case a.ui.keyCode.UP:
                                b.altKey ? this._toggle(b) : this._move("prev", b);
                                break;
                            case a.ui.keyCode.DOWN:
                                b.altKey ? this._toggle(b) : this._move("next", b);
                                break;
                            case a.ui.keyCode.SPACE:
                                this.isOpen ? this._selectFocusedItem(b) :
                                    this._toggle(b);
                                break;
                            case a.ui.keyCode.LEFT:
                                this._move("prev", b);
                                break;
                            case a.ui.keyCode.RIGHT:
                                this._move("next", b);
                                break;
                            case a.ui.keyCode.HOME:
                            case a.ui.keyCode.PAGE_UP:
                                this._move("first", b);
                                break;
                            case a.ui.keyCode.END:
                            case a.ui.keyCode.PAGE_DOWN:
                                this._move("last", b);
                                break;
                            default:
                                this.menu.trigger(b), c = !1
                        }
                        c && b.preventDefault()
                    }
                },
                _selectFocusedItem: function(a) {
                    var c = this.menuItems.eq(this.focusIndex);
                    c.hasClass("ui-state-disabled") || this._select(c.data("ui-selectmenu-item"), a)
                },
                _select: function(a,
                    c) {
                    var d = this.element[0].selectedIndex;
                    this.element[0].selectedIndex = a.index;
                    this._setText(this.buttonText, a.label);
                    this._setAria(a);
                    this._trigger("select", c, {
                        item: a
                    });
                    a.index !== d && this._trigger("change", c, {
                        item: a
                    });
                    this.close(c)
                },
                _setAria: function(a) {
                    a = this.menuItems.eq(a.index).attr("id");
                    this.button.attr({
                        "aria-labelledby": a,
                        "aria-activedescendant": a
                    });
                    this.menu.attr("aria-activedescendant", a)
                },
                _setOption: function(a, c) {
                    "icons" === a && this.button.find("span.ui-icon").removeClass(this.options.icons.button).addClass(c.button);
                    this._super(a, c);
                    "appendTo" === a && this.menuWrap.appendTo(this._appendTo());
                    "disabled" === a && (this.menuInstance.option("disabled", c), this.button.toggleClass("ui-state-disabled", c).attr("aria-disabled", c), this.element.prop("disabled", c), c ? (this.button.attr("tabindex", -1), this.close()) : this.button.attr("tabindex", 0));
                    "width" === a && this._resizeButton()
                },
                _appendTo: function() {
                    var b = this.options.appendTo;
                    b && (b = b.jquery || b.nodeType ? a(b) : this.document.find(b).eq(0));
                    b && b[0] || (b = this.element.closest(".ui-front"));
                    b.length || (b = this.document[0].body);
                    return b
                },
                _toggleAttr: function() {
                    this.button.toggleClass("ui-corner-top", this.isOpen).toggleClass("ui-corner-all", !this.isOpen).attr("aria-expanded", this.isOpen);
                    this.menuWrap.toggleClass("ui-selectmenu-open", this.isOpen);
                    this.menu.attr("aria-hidden", !this.isOpen)
                },
                _resizeButton: function() {
                    var a = this.options.width;
                    a || (a = this.element.show().outerWidth(), this.element.hide());
                    this.button.outerWidth(a)
                },
                _resizeMenu: function() {
                    this.menu.outerWidth(Math.max(this.button.outerWidth(),
                        this.menu.width("").outerWidth() + 1))
                },
                _getCreateOptions: function() {
                    return {
                        disabled: this.element.prop("disabled")
                    }
                },
                _parseOptions: function(b) {
                    var c = [];
                    b.each(function(b, g) {
                        var f = a(g),
                            k = f.parent("optgroup");
                        c.push({
                            element: f,
                            index: b,
                            value: f.val(),
                            label: f.text(),
                            optgroup: k.attr("label") || "",
                            disabled: k.prop("disabled") || f.prop("disabled")
                        })
                    });
                    this.items = c
                },
                _destroy: function() {
                    this.menuWrap.remove();
                    this.button.remove();
                    this.element.show();
                    this.element.removeUniqueId();
                    this.label.attr("for", this.ids.element)
                }
            });
            a.widget("ui.slider", a.ui.mouse, {
                version: "1.11.4",
                widgetEventPrefix: "slide",
                options: {
                    animate: !1,
                    distance: 0,
                    max: 100,
                    min: 0,
                    orientation: "horizontal",
                    range: !1,
                    step: 1,
                    value: 0,
                    values: null,
                    change: null,
                    slide: null,
                    start: null,
                    stop: null
                },
                numPages: 5,
                _create: function() {
                    this._mouseSliding = this._keySliding = !1;
                    this._animateOff = !0;
                    this._handleIndex = null;
                    this._detectOrientation();
                    this._mouseInit();
                    this._calculateNewMax();
                    this.element.addClass("ui-slider ui-slider-" + this.orientation + " ui-widget ui-widget-content ui-corner-all");
                    this._refresh();
                    this._setOption("disabled", this.options.disabled);
                    this._animateOff = !1
                },
                _refresh: function() {
                    this._createRange();
                    this._createHandles();
                    this._setupEvents();
                    this._refreshValue()
                },
                _createHandles: function() {
                    var b, c;
                    b = this.options;
                    var d = this.element.find(".ui-slider-handle").addClass("ui-state-default ui-corner-all"),
                        g = [];
                    c = b.values && b.values.length || 1;
                    d.length > c && (d.slice(c).remove(), d = d.slice(0, c));
                    for (b = d.length; b < c; b++) g.push("<span class='ui-slider-handle ui-state-default ui-corner-all' tabindex='0'></span>");
                    this.handles = d.add(a(g.join("")).appendTo(this.element));
                    this.handle = this.handles.eq(0);
                    this.handles.each(function(b) {
                        a(this).data("ui-slider-handle-index", b)
                    })
                },
                _createRange: function() {
                    var b = this.options,
                        c = "";
                    b.range ? (!0 === b.range && (b.values ? b.values.length && 2 !== b.values.length ? b.values = [b.values[0], b.values[0]] : a.isArray(b.values) && (b.values = b.values.slice(0)) : b.values = [this._valueMin(), this._valueMin()]), this.range && this.range.length ? this.range.removeClass("ui-slider-range-min ui-slider-range-max").css({
                        left: "",
                        bottom: ""
                    }) : (this.range = a("<div></div>").appendTo(this.element), c = "ui-slider-range ui-widget-header ui-corner-all"), this.range.addClass(c + ("min" === b.range || "max" === b.range ? " ui-slider-range-" + b.range : ""))) : (this.range && this.range.remove(), this.range = null)
                },
                _setupEvents: function() {
                    this._off(this.handles);
                    this._on(this.handles, this._handleEvents);
                    this._hoverable(this.handles);
                    this._focusable(this.handles)
                },
                _destroy: function() {
                    this.handles.remove();
                    this.range && this.range.remove();
                    this.element.removeClass("ui-slider ui-slider-horizontal ui-slider-vertical ui-widget ui-widget-content ui-corner-all");
                    this._mouseDestroy()
                },
                _mouseCapture: function(b) {
                    var c, d, g, f, k, h = this,
                        p = this.options;
                    if (p.disabled) return !1;
                    this.elementSize = {
                        width: this.element.outerWidth(),
                        height: this.element.outerHeight()
                    };
                    this.elementOffset = this.element.offset();
                    c = this._normValueFromMouse({
                        x: b.pageX,
                        y: b.pageY
                    });
                    d = this._valueMax() - this._valueMin() + 1;
                    this.handles.each(function(b) {
                        var e = Math.abs(c - h.values(b));
                        if (d > e || d === e && (b === h._lastChangedValue || h.values(b) === p.min)) d = e, g = a(this), f = b
                    });
                    if (!1 === this._start(b, f)) return !1;
                    this._mouseSliding = !0;
                    this._handleIndex = f;
                    g.addClass("ui-state-active").focus();
                    k = g.offset();
                    this._clickOffset = a(b.target).parents().addBack().is(".ui-slider-handle") ? {
                        left: b.pageX - k.left - g.width() / 2,
                        top: b.pageY - k.top - g.height() / 2 - (parseInt(g.css("borderTopWidth"), 10) || 0) - (parseInt(g.css("borderBottomWidth"), 10) || 0) + (parseInt(g.css("marginTop"), 10) || 0)
                    } : {
                        left: 0,
                        top: 0
                    };
                    this.handles.hasClass("ui-state-hover") || this._slide(b, f, c);
                    return this._animateOff = !0
                },
                _mouseStart: function() {
                    return !0
                },
                _mouseDrag: function(a) {
                    var c =
                        this._normValueFromMouse({
                            x: a.pageX,
                            y: a.pageY
                        });
                    this._slide(a, this._handleIndex, c);
                    return !1
                },
                _mouseStop: function(a) {
                    this.handles.removeClass("ui-state-active");
                    this._mouseSliding = !1;
                    this._stop(a, this._handleIndex);
                    this._change(a, this._handleIndex);
                    this._clickOffset = this._handleIndex = null;
                    return this._animateOff = !1
                },
                _detectOrientation: function() {
                    this.orientation = "vertical" === this.options.orientation ? "vertical" : "horizontal"
                },
                _normValueFromMouse: function(a) {
                    var c;
                    "horizontal" === this.orientation ? (c = this.elementSize.width,
                        a = a.x - this.elementOffset.left - (this._clickOffset ? this._clickOffset.left : 0)) : (c = this.elementSize.height, a = a.y - this.elementOffset.top - (this._clickOffset ? this._clickOffset.top : 0));
                    c = a / c;
                    1 < c && (c = 1);
                    0 > c && (c = 0);
                    "vertical" === this.orientation && (c = 1 - c);
                    a = this._valueMax() - this._valueMin();
                    c = this._valueMin() + c * a;
                    return this._trimAlignValue(c)
                },
                _start: function(a, c) {
                    var d = {
                        handle: this.handles[c],
                        value: this.value()
                    };
                    this.options.values && this.options.values.length && (d.value = this.values(c), d.values = this.values());
                    return this._trigger("start", a, d)
                },
                _slide: function(a, c, d) {
                    var g;
                    this.options.values && this.options.values.length ? (g = this.values(c ? 0 : 1), 2 === this.options.values.length && !0 === this.options.range && (0 === c && d > g || 1 === c && d < g) && (d = g), d !== this.values(c) && (g = this.values(), g[c] = d, a = this._trigger("slide", a, {
                        handle: this.handles[c],
                        value: d,
                        values: g
                    }), this.values(c ? 0 : 1), !1 !== a && this.values(c, d))) : d !== this.value() && (a = this._trigger("slide", a, {
                        handle: this.handles[c],
                        value: d
                    }), !1 !== a && this.value(d))
                },
                _stop: function(a,
                    c) {
                    var d = {
                        handle: this.handles[c],
                        value: this.value()
                    };
                    this.options.values && this.options.values.length && (d.value = this.values(c), d.values = this.values());
                    this._trigger("stop", a, d)
                },
                _change: function(a, c) {
                    if (!this._keySliding && !this._mouseSliding) {
                        var d = {
                            handle: this.handles[c],
                            value: this.value()
                        };
                        this.options.values && this.options.values.length && (d.value = this.values(c), d.values = this.values());
                        this._lastChangedValue = c;
                        this._trigger("change", a, d)
                    }
                },
                value: function(a) {
                    if (arguments.length) this.options.value =
                        this._trimAlignValue(a), this._refreshValue(), this._change(null, 0);
                    else return this._value()
                },
                values: function(b, c) {
                    var d, g, f;
                    if (1 < arguments.length) this.options.values[b] = this._trimAlignValue(c), this._refreshValue(), this._change(null, b);
                    else if (arguments.length)
                        if (a.isArray(arguments[0])) {
                            d = this.options.values;
                            g = arguments[0];
                            for (f = 0; f < d.length; f += 1) d[f] = this._trimAlignValue(g[f]), this._change(null, f);
                            this._refreshValue()
                        } else return this.options.values && this.options.values.length ? this._values(b) : this.value();
                    else return this._values()
                },
                _setOption: function(b, c) {
                    var d, g = 0;
                    "range" === b && !0 === this.options.range && ("min" === c ? (this.options.value = this._values(0), this.options.values = null) : "max" === c && (this.options.value = this._values(this.options.values.length - 1), this.options.values = null));
                    a.isArray(this.options.values) && (g = this.options.values.length);
                    "disabled" === b && this.element.toggleClass("ui-state-disabled", !!c);
                    this._super(b, c);
                    switch (b) {
                        case "orientation":
                            this._detectOrientation();
                            this.element.removeClass("ui-slider-horizontal ui-slider-vertical").addClass("ui-slider-" +
                                this.orientation);
                            this._refreshValue();
                            this.handles.css("horizontal" === c ? "bottom" : "left", "");
                            break;
                        case "value":
                            this._animateOff = !0;
                            this._refreshValue();
                            this._change(null, 0);
                            this._animateOff = !1;
                            break;
                        case "values":
                            this._animateOff = !0;
                            this._refreshValue();
                            for (d = 0; d < g; d += 1) this._change(null, d);
                            this._animateOff = !1;
                            break;
                        case "step":
                        case "min":
                        case "max":
                            this._animateOff = !0;
                            this._calculateNewMax();
                            this._refreshValue();
                            this._animateOff = !1;
                            break;
                        case "range":
                            this._animateOff = !0, this._refresh(), this._animateOff = !1
                    }
                },
                _value: function() {
                    var a = this.options.value;
                    return a = this._trimAlignValue(a)
                },
                _values: function(a) {
                    var c, d;
                    if (arguments.length) return c = this.options.values[a], c = this._trimAlignValue(c);
                    if (this.options.values && this.options.values.length) {
                        c = this.options.values.slice();
                        for (d = 0; d < c.length; d += 1) c[d] = this._trimAlignValue(c[d]);
                        return c
                    }
                    return []
                },
                _trimAlignValue: function(a) {
                    if (a <= this._valueMin()) return this._valueMin();
                    if (a >= this._valueMax()) return this._valueMax();
                    var c = 0 < this.options.step ? this.options.step :
                        1,
                        d = (a - this._valueMin()) % c;
                    a -= d;
                    2 * Math.abs(d) >= c && (a += 0 < d ? c : -c);
                    return parseFloat(a.toFixed(5))
                },
                _calculateNewMax: function() {
                    var a = this.options.max,
                        c = this._valueMin(),
                        d = this.options.step,
                        a = Math.floor(+(a - c).toFixed(this._precision()) / d) * d + c;
                    this.max = parseFloat(a.toFixed(this._precision()))
                },
                _precision: function() {
                    var a = this._precisionOf(this.options.step);
                    null !== this.options.min && (a = Math.max(a, this._precisionOf(this.options.min)));
                    return a
                },
                _precisionOf: function(a) {
                    a = a.toString();
                    var c = a.indexOf(".");
                    return -1 === c ? 0 : a.length - c - 1
                },
                _valueMin: function() {
                    return this.options.min
                },
                _valueMax: function() {
                    return this.max
                },
                _refreshValue: function() {
                    var b, c, d, g, f, k = this.options.range,
                        h = this.options,
                        p = this,
                        l = this._animateOff ? !1 : h.animate,
                        e = {};
                    if (this.options.values && this.options.values.length) this.handles.each(function(d) {
                        c = (p.values(d) - p._valueMin()) / (p._valueMax() - p._valueMin()) * 100;
                        e["horizontal" === p.orientation ? "left" : "bottom"] = c + "%";
                        a(this).stop(1, 1)[l ? "animate" : "css"](e, h.animate);
                        if (!0 === p.options.range)
                            if ("horizontal" ===
                                p.orientation) {
                                if (0 === d) p.range.stop(1, 1)[l ? "animate" : "css"]({
                                    left: c + "%"
                                }, h.animate);
                                if (1 === d) p.range[l ? "animate" : "css"]({
                                    width: c - b + "%"
                                }, {
                                    queue: !1,
                                    duration: h.animate
                                })
                            } else {
                                if (0 === d) p.range.stop(1, 1)[l ? "animate" : "css"]({
                                    bottom: c + "%"
                                }, h.animate);
                                if (1 === d) p.range[l ? "animate" : "css"]({
                                    height: c - b + "%"
                                }, {
                                    queue: !1,
                                    duration: h.animate
                                })
                            }
                        b = c
                    });
                    else {
                        d = this.value();
                        g = this._valueMin();
                        f = this._valueMax();
                        c = f !== g ? (d - g) / (f - g) * 100 : 0;
                        e["horizontal" === this.orientation ? "left" : "bottom"] = c + "%";
                        this.handle.stop(1, 1)[l ? "animate" :
                            "css"](e, h.animate);
                        if ("min" === k && "horizontal" === this.orientation) this.range.stop(1, 1)[l ? "animate" : "css"]({
                            width: c + "%"
                        }, h.animate);
                        if ("max" === k && "horizontal" === this.orientation) this.range[l ? "animate" : "css"]({
                            width: 100 - c + "%"
                        }, {
                            queue: !1,
                            duration: h.animate
                        });
                        if ("min" === k && "vertical" === this.orientation) this.range.stop(1, 1)[l ? "animate" : "css"]({
                            height: c + "%"
                        }, h.animate);
                        if ("max" === k && "vertical" === this.orientation) this.range[l ? "animate" : "css"]({
                            height: 100 - c + "%"
                        }, {
                            queue: !1,
                            duration: h.animate
                        })
                    }
                },
                _handleEvents: {
                    keydown: function(b) {
                        var c,
                            d, g, f = a(b.target).data("ui-slider-handle-index");
                        switch (b.keyCode) {
                            case a.ui.keyCode.HOME:
                            case a.ui.keyCode.END:
                            case a.ui.keyCode.PAGE_UP:
                            case a.ui.keyCode.PAGE_DOWN:
                            case a.ui.keyCode.UP:
                            case a.ui.keyCode.RIGHT:
                            case a.ui.keyCode.DOWN:
                            case a.ui.keyCode.LEFT:
                                if (b.preventDefault(), !this._keySliding && (this._keySliding = !0, a(b.target).addClass("ui-state-active"), c = this._start(b, f), !1 === c)) return
                        }
                        g = this.options.step;
                        c = this.options.values && this.options.values.length ? d = this.values(f) : d = this.value();
                        switch (b.keyCode) {
                            case a.ui.keyCode.HOME:
                                d =
                                    this._valueMin();
                                break;
                            case a.ui.keyCode.END:
                                d = this._valueMax();
                                break;
                            case a.ui.keyCode.PAGE_UP:
                                d = this._trimAlignValue(c + (this._valueMax() - this._valueMin()) / this.numPages);
                                break;
                            case a.ui.keyCode.PAGE_DOWN:
                                d = this._trimAlignValue(c - (this._valueMax() - this._valueMin()) / this.numPages);
                                break;
                            case a.ui.keyCode.UP:
                            case a.ui.keyCode.RIGHT:
                                if (c === this._valueMax()) return;
                                d = this._trimAlignValue(c + g);
                                break;
                            case a.ui.keyCode.DOWN:
                            case a.ui.keyCode.LEFT:
                                if (c === this._valueMin()) return;
                                d = this._trimAlignValue(c - g)
                        }
                        this._slide(b,
                            f, d)
                    },
                    keyup: function(b) {
                        var c = a(b.target).data("ui-slider-handle-index");
                        this._keySliding && (this._keySliding = !1, this._stop(b, c), this._change(b, c), a(b.target).removeClass("ui-state-active"))
                    }
                }
            });
            a.widget("ui.sortable", a.ui.mouse, {
                version: "1.11.4",
                widgetEventPrefix: "sort",
                ready: !1,
                options: {
                    appendTo: "parent",
                    axis: !1,
                    connectWith: !1,
                    containment: !1,
                    cursor: "auto",
                    cursorAt: !1,
                    dropOnEmpty: !0,
                    forcePlaceholderSize: !1,
                    forceHelperSize: !1,
                    grid: !1,
                    handle: !1,
                    helper: "original",
                    items: "> *",
                    opacity: !1,
                    placeholder: !1,
                    revert: !1,
                    scroll: !0,
                    scrollSensitivity: 20,
                    scrollSpeed: 20,
                    scope: "default",
                    tolerance: "intersect",
                    zIndex: 1E3,
                    activate: null,
                    beforeStop: null,
                    change: null,
                    deactivate: null,
                    out: null,
                    over: null,
                    receive: null,
                    remove: null,
                    sort: null,
                    start: null,
                    stop: null,
                    update: null
                },
                _isOverAxis: function(a, c, d) {
                    return a >= c && a < c + d
                },
                _isFloating: function(a) {
                    return /left|right/.test(a.css("float")) || /inline|table-cell/.test(a.css("display"))
                },
                _create: function() {
                    this.containerCache = {};
                    this.element.addClass("ui-sortable");
                    this.refresh();
                    this.offset = this.element.offset();
                    this._mouseInit();
                    this._setHandleClassName();
                    this.ready = !0
                },
                _setOption: function(a, c) {
                    this._super(a, c);
                    "handle" === a && this._setHandleClassName()
                },
                _setHandleClassName: function() {
                    this.element.find(".ui-sortable-handle").removeClass("ui-sortable-handle");
                    a.each(this.items, function() {
                        (this.instance.options.handle ? this.item.find(this.instance.options.handle) : this.item).addClass("ui-sortable-handle")
                    })
                },
                _destroy: function() {
                    this.element.removeClass("ui-sortable ui-sortable-disabled").find(".ui-sortable-handle").removeClass("ui-sortable-handle");
                    this._mouseDestroy();
                    for (var a = this.items.length - 1; 0 <= a; a--) this.items[a].item.removeData(this.widgetName + "-item");
                    return this
                },
                _mouseCapture: function(b, c) {
                    var d = null,
                        g = !1,
                        f = this;
                    if (this.reverting || this.options.disabled || "static" === this.options.type) return !1;
                    this._refreshItems(b);
                    a(b.target).parents().each(function() {
                        if (a.data(this, f.widgetName + "-item") === f) return d = a(this), !1
                    });
                    a.data(b.target, f.widgetName + "-item") === f && (d = a(b.target));
                    if (!d || this.options.handle && !c && (a(this.options.handle, d).find("*").addBack().each(function() {
                            this ===
                                b.target && (g = !0)
                        }), !g)) return !1;
                    this.currentItem = d;
                    this._removeCurrentsFromItems();
                    return !0
                },
                _mouseStart: function(b, c, d) {
                    var g;
                    c = this.options;
                    this.currentContainer = this;
                    this.refreshPositions();
                    this.helper = this._createHelper(b);
                    this._cacheHelperProportions();
                    this._cacheMargins();
                    this.scrollParent = this.helper.scrollParent();
                    this.offset = this.currentItem.offset();
                    this.offset = {
                        top: this.offset.top - this.margins.top,
                        left: this.offset.left - this.margins.left
                    };
                    a.extend(this.offset, {
                        click: {
                            left: b.pageX - this.offset.left,
                            top: b.pageY - this.offset.top
                        },
                        parent: this._getParentOffset(),
                        relative: this._getRelativeOffset()
                    });
                    this.helper.css("position", "absolute");
                    this.cssPosition = this.helper.css("position");
                    this.originalPosition = this._generatePosition(b);
                    this.originalPageX = b.pageX;
                    this.originalPageY = b.pageY;
                    c.cursorAt && this._adjustOffsetFromHelper(c.cursorAt);
                    this.domPosition = {
                        prev: this.currentItem.prev()[0],
                        parent: this.currentItem.parent()[0]
                    };
                    this.helper[0] !== this.currentItem[0] && this.currentItem.hide();
                    this._createPlaceholder();
                    c.containment && this._setContainment();
                    c.cursor && "auto" !== c.cursor && (g = this.document.find("body"), this.storedCursor = g.css("cursor"), g.css("cursor", c.cursor), this.storedStylesheet = a("<style>*{ cursor: " + c.cursor + " !important; }</style>").appendTo(g));
                    c.opacity && (this.helper.css("opacity") && (this._storedOpacity = this.helper.css("opacity")), this.helper.css("opacity", c.opacity));
                    c.zIndex && (this.helper.css("zIndex") && (this._storedZIndex = this.helper.css("zIndex")), this.helper.css("zIndex", c.zIndex));
                    this.scrollParent[0] !==
                        this.document[0] && "HTML" !== this.scrollParent[0].tagName && (this.overflowOffset = this.scrollParent.offset());
                    this._trigger("start", b, this._uiHash());
                    this._preserveHelperProportions || this._cacheHelperProportions();
                    if (!d)
                        for (d = this.containers.length - 1; 0 <= d; d--) this.containers[d]._trigger("activate", b, this._uiHash(this));
                    a.ui.ddmanager && (a.ui.ddmanager.current = this);
                    a.ui.ddmanager && !c.dropBehaviour && a.ui.ddmanager.prepareOffsets(this, b);
                    this.dragging = !0;
                    this.helper.addClass("ui-sortable-helper");
                    this._mouseDrag(b);
                    return !0
                },
                _mouseDrag: function(b) {
                    var c, d, g, f;
                    c = this.options;
                    d = !1;
                    this.position = this._generatePosition(b);
                    this.positionAbs = this._convertPositionTo("absolute");
                    this.lastPositionAbs || (this.lastPositionAbs = this.positionAbs);
                    this.options.scroll && (this.scrollParent[0] !== this.document[0] && "HTML" !== this.scrollParent[0].tagName ? (this.overflowOffset.top + this.scrollParent[0].offsetHeight - b.pageY < c.scrollSensitivity ? this.scrollParent[0].scrollTop = d = this.scrollParent[0].scrollTop + c.scrollSpeed : b.pageY - this.overflowOffset.top <
                        c.scrollSensitivity && (this.scrollParent[0].scrollTop = d = this.scrollParent[0].scrollTop - c.scrollSpeed), this.overflowOffset.left + this.scrollParent[0].offsetWidth - b.pageX < c.scrollSensitivity ? this.scrollParent[0].scrollLeft = d = this.scrollParent[0].scrollLeft + c.scrollSpeed : b.pageX - this.overflowOffset.left < c.scrollSensitivity && (this.scrollParent[0].scrollLeft = d = this.scrollParent[0].scrollLeft - c.scrollSpeed)) : (b.pageY - this.document.scrollTop() < c.scrollSensitivity ? d = this.document.scrollTop(this.document.scrollTop() -
                        c.scrollSpeed) : this.window.height() - (b.pageY - this.document.scrollTop()) < c.scrollSensitivity && (d = this.document.scrollTop(this.document.scrollTop() + c.scrollSpeed)), b.pageX - this.document.scrollLeft() < c.scrollSensitivity ? d = this.document.scrollLeft(this.document.scrollLeft() - c.scrollSpeed) : this.window.width() - (b.pageX - this.document.scrollLeft()) < c.scrollSensitivity && (d = this.document.scrollLeft(this.document.scrollLeft() + c.scrollSpeed))), !1 !== d && a.ui.ddmanager && !c.dropBehaviour && a.ui.ddmanager.prepareOffsets(this,
                        b));
                    this.positionAbs = this._convertPositionTo("absolute");
                    this.options.axis && "y" === this.options.axis || (this.helper[0].style.left = this.position.left + "px");
                    this.options.axis && "x" === this.options.axis || (this.helper[0].style.top = this.position.top + "px");
                    for (c = this.items.length - 1; 0 <= c; c--)
                        if (d = this.items[c], g = d.item[0], (f = this._intersectsWithPointer(d)) && d.instance === this.currentContainer && g !== this.currentItem[0] && this.placeholder[1 === f ? "next" : "prev"]()[0] !== g && !a.contains(this.placeholder[0], g) && ("semi-dynamic" ===
                                this.options.type ? !a.contains(this.element[0], g) : 1)) {
                            this.direction = 1 === f ? "down" : "up";
                            if ("pointer" === this.options.tolerance || this._intersectsWithSides(d)) this._rearrange(b, d);
                            else break;
                            this._trigger("change", b, this._uiHash());
                            break
                        }
                    this._contactContainers(b);
                    a.ui.ddmanager && a.ui.ddmanager.drag(this, b);
                    this._trigger("sort", b, this._uiHash());
                    this.lastPositionAbs = this.positionAbs;
                    return !1
                },
                _mouseStop: function(b, c) {
                    if (b) {
                        a.ui.ddmanager && !this.options.dropBehaviour && a.ui.ddmanager.drop(this, b);
                        if (this.options.revert) {
                            var d =
                                this,
                                g = this.placeholder.offset(),
                                f = this.options.axis,
                                k = {};
                            f && "x" !== f || (k.left = g.left - this.offset.parent.left - this.margins.left + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollLeft));
                            f && "y" !== f || (k.top = g.top - this.offset.parent.top - this.margins.top + (this.offsetParent[0] === this.document[0].body ? 0 : this.offsetParent[0].scrollTop));
                            this.reverting = !0;
                            a(this.helper).animate(k, parseInt(this.options.revert, 10) || 500, function() {
                                d._clear(b)
                            })
                        } else this._clear(b, c);
                        return !1
                    }
                },
                cancel: function() {
                    if (this.dragging) {
                        this._mouseUp({
                            target: null
                        });
                        "original" === this.options.helper ? this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper") : this.currentItem.show();
                        for (var b = this.containers.length - 1; 0 <= b; b--) this.containers[b]._trigger("deactivate", null, this._uiHash(this)), this.containers[b].containerCache.over && (this.containers[b]._trigger("out", null, this._uiHash(this)), this.containers[b].containerCache.over = 0)
                    }
                    this.placeholder && (this.placeholder[0].parentNode && this.placeholder[0].parentNode.removeChild(this.placeholder[0]), "original" !==
                        this.options.helper && this.helper && this.helper[0].parentNode && this.helper.remove(), a.extend(this, {
                            helper: null,
                            dragging: !1,
                            reverting: !1,
                            _noFinalSort: null
                        }), this.domPosition.prev ? a(this.domPosition.prev).after(this.currentItem) : a(this.domPosition.parent).prepend(this.currentItem));
                    return this
                },
                serialize: function(b) {
                    var c = this._getItemsAsjQuery(b && b.connected),
                        d = [];
                    b = b || {};
                    a(c).each(function() {
                        var c = (a(b.item || this).attr(b.attribute || "id") || "").match(b.expression || /(.+)[\-=_](.+)/);
                        c && d.push((b.key ||
                            c[1] + "[]") + "=" + (b.key && b.expression ? c[1] : c[2]))
                    });
                    !d.length && b.key && d.push(b.key + "=");
                    return d.join("&")
                },
                toArray: function(b) {
                    var c = this._getItemsAsjQuery(b && b.connected),
                        d = [];
                    b = b || {};
                    c.each(function() {
                        d.push(a(b.item || this).attr(b.attribute || "id") || "")
                    });
                    return d
                },
                _intersectsWith: function(a) {
                    var c = this.positionAbs.left,
                        d = c + this.helperProportions.width,
                        g = this.positionAbs.top,
                        f = g + this.helperProportions.height,
                        k = a.left,
                        h = k + a.width,
                        p = a.top,
                        l = p + a.height,
                        e = this.offset.click.top,
                        n = this.offset.click.left,
                        n = "y" === this.options.axis || c + n > k && c + n < h,
                        e = ("x" === this.options.axis || g + e > p && g + e < l) && n;
                    return "pointer" === this.options.tolerance || this.options.forcePointerForContainers || "pointer" !== this.options.tolerance && this.helperProportions[this.floating ? "width" : "height"] > a[this.floating ? "width" : "height"] ? e : k < c + this.helperProportions.width / 2 && d - this.helperProportions.width / 2 < h && p < g + this.helperProportions.height / 2 && f - this.helperProportions.height / 2 < l
                },
                _intersectsWithPointer: function(a) {
                    var c = "x" === this.options.axis ||
                        this._isOverAxis(this.positionAbs.top + this.offset.click.top, a.top, a.height);
                    a = "y" === this.options.axis || this._isOverAxis(this.positionAbs.left + this.offset.click.left, a.left, a.width);
                    c = c && a;
                    a = this._getDragVerticalDirection();
                    var d = this._getDragHorizontalDirection();
                    return c ? this.floating ? d && "right" === d || "down" === a ? 2 : 1 : a && ("down" === a ? 2 : 1) : !1
                },
                _intersectsWithSides: function(a) {
                    var c = this._isOverAxis(this.positionAbs.top + this.offset.click.top, a.top + a.height / 2, a.height);
                    a = this._isOverAxis(this.positionAbs.left +
                        this.offset.click.left, a.left + a.width / 2, a.width);
                    var d = this._getDragVerticalDirection(),
                        g = this._getDragHorizontalDirection();
                    return this.floating && g ? "right" === g && a || "left" === g && !a : d && ("down" === d && c || "up" === d && !c)
                },
                _getDragVerticalDirection: function() {
                    var a = this.positionAbs.top - this.lastPositionAbs.top;
                    return 0 !== a && (0 < a ? "down" : "up")
                },
                _getDragHorizontalDirection: function() {
                    var a = this.positionAbs.left - this.lastPositionAbs.left;
                    return 0 !== a && (0 < a ? "right" : "left")
                },
                refresh: function(a) {
                    this._refreshItems(a);
                    this._setHandleClassName();
                    this.refreshPositions();
                    return this
                },
                _connectWith: function() {
                    var a = this.options;
                    return a.connectWith.constructor === String ? [a.connectWith] : a.connectWith
                },
                _getItemsAsjQuery: function(b) {
                    function c() {
                        k.push(this)
                    }
                    var d, g, f, k = [],
                        h = [],
                        p = this._connectWith();
                    if (p && b)
                        for (b = p.length - 1; 0 <= b; b--)
                            for (g = a(p[b], this.document[0]), d = g.length - 1; 0 <= d; d--)(f = a.data(g[d], this.widgetFullName)) && f !== this && !f.options.disabled && h.push([a.isFunction(f.options.items) ? f.options.items.call(f.element) :
                                a(f.options.items, f.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), f
                            ]);
                    h.push([a.isFunction(this.options.items) ? this.options.items.call(this.element, null, {
                        options: this.options,
                        item: this.currentItem
                    }) : a(this.options.items, this.element).not(".ui-sortable-helper").not(".ui-sortable-placeholder"), this]);
                    for (b = h.length - 1; 0 <= b; b--) h[b][0].each(c);
                    return a(k)
                },
                _removeCurrentsFromItems: function() {
                    var b = this.currentItem.find(":data(" + this.widgetName + "-item)");
                    this.items = a.grep(this.items,
                        function(a) {
                            for (var d = 0; d < b.length; d++)
                                if (b[d] === a.item[0]) return !1;
                            return !0
                        })
                },
                _refreshItems: function(b) {
                    this.items = [];
                    this.containers = [this];
                    var c, d, g, f, k, h = this.items,
                        p = [
                            [a.isFunction(this.options.items) ? this.options.items.call(this.element[0], b, {
                                item: this.currentItem
                            }) : a(this.options.items, this.element), this]
                        ];
                    if ((k = this._connectWith()) && this.ready)
                        for (c = k.length - 1; 0 <= c; c--)
                            for (g = a(k[c], this.document[0]), d = g.length - 1; 0 <= d; d--)(f = a.data(g[d], this.widgetFullName)) && f !== this && !f.options.disabled &&
                                (p.push([a.isFunction(f.options.items) ? f.options.items.call(f.element[0], b, {
                                    item: this.currentItem
                                }) : a(f.options.items, f.element), f]), this.containers.push(f));
                    for (c = p.length - 1; 0 <= c; c--)
                        for (b = p[c][1], g = p[c][0], d = 0, k = g.length; d < k; d++) f = a(g[d]), f.data(this.widgetName + "-item", b), h.push({
                            item: f,
                            instance: b,
                            width: 0,
                            height: 0,
                            left: 0,
                            top: 0
                        })
                },
                refreshPositions: function(b) {
                    this.floating = this.items.length ? "x" === this.options.axis || this._isFloating(this.items[0].item) : !1;
                    this.offsetParent && this.helper && (this.offset.parent =
                        this._getParentOffset());
                    var c, d, g;
                    for (c = this.items.length - 1; 0 <= c; c--) d = this.items[c], d.instance !== this.currentContainer && this.currentContainer && d.item[0] !== this.currentItem[0] || (g = this.options.toleranceElement ? a(this.options.toleranceElement, d.item) : d.item, b || (d.width = g.outerWidth(), d.height = g.outerHeight()), g = g.offset(), d.left = g.left, d.top = g.top);
                    if (this.options.custom && this.options.custom.refreshContainers) this.options.custom.refreshContainers.call(this);
                    else
                        for (c = this.containers.length - 1; 0 <=
                            c; c--) g = this.containers[c].element.offset(), this.containers[c].containerCache.left = g.left, this.containers[c].containerCache.top = g.top, this.containers[c].containerCache.width = this.containers[c].element.outerWidth(), this.containers[c].containerCache.height = this.containers[c].element.outerHeight();
                    return this
                },
                _createPlaceholder: function(b) {
                    b = b || this;
                    var c, d = b.options;
                    d.placeholder && d.placeholder.constructor !== String || (c = d.placeholder, d.placeholder = {
                        element: function() {
                            var d = b.currentItem[0].nodeName.toLowerCase(),
                                f = a("<" + d + ">", b.document[0]).addClass(c || b.currentItem[0].className + " ui-sortable-placeholder").removeClass("ui-sortable-helper");
                            "tbody" === d ? b._createTrPlaceholder(b.currentItem.find("tr").eq(0), a("<tr>", b.document[0]).appendTo(f)) : "tr" === d ? b._createTrPlaceholder(b.currentItem, f) : "img" === d && f.attr("src", b.currentItem.attr("src"));
                            c || f.css("visibility", "hidden");
                            return f
                        },
                        update: function(a, f) {
                            if (!c || d.forcePlaceholderSize) f.height() || f.height(b.currentItem.innerHeight() - parseInt(b.currentItem.css("paddingTop") ||
                                0, 10) - parseInt(b.currentItem.css("paddingBottom") || 0, 10)), f.width() || f.width(b.currentItem.innerWidth() - parseInt(b.currentItem.css("paddingLeft") || 0, 10) - parseInt(b.currentItem.css("paddingRight") || 0, 10))
                        }
                    });
                    b.placeholder = a(d.placeholder.element.call(b.element, b.currentItem));
                    b.currentItem.after(b.placeholder);
                    d.placeholder.update(b, b.placeholder)
                },
                _createTrPlaceholder: function(b, c) {
                    var d = this;
                    b.children().each(function() {
                        a("<td>&#160;</td>", d.document[0]).attr("colspan", a(this).attr("colspan") || 1).appendTo(c)
                    })
                },
                _contactContainers: function(b) {
                    var c, d, g, f, k, h, p, l, e = f = null;
                    for (c = this.containers.length - 1; 0 <= c; c--) a.contains(this.currentItem[0], this.containers[c].element[0]) || (this._intersectsWith(this.containers[c].containerCache) ? f && a.contains(this.containers[c].element[0], f.element[0]) || (f = this.containers[c], e = c) : this.containers[c].containerCache.over && (this.containers[c]._trigger("out", b, this._uiHash(this)), this.containers[c].containerCache.over = 0));
                    if (f)
                        if (1 === this.containers.length) this.containers[e].containerCache.over ||
                            (this.containers[e]._trigger("over", b, this._uiHash(this)), this.containers[e].containerCache.over = 1);
                        else {
                            c = 1E4;
                            g = null;
                            f = (d = f.floating || this._isFloating(this.currentItem)) ? "left" : "top";
                            k = d ? "width" : "height";
                            l = d ? "clientX" : "clientY";
                            for (d = this.items.length - 1; 0 <= d; d--) a.contains(this.containers[e].element[0], this.items[d].item[0]) && this.items[d].item[0] !== this.currentItem[0] && (h = this.items[d].item.offset()[f], p = !1, b[l] - h > this.items[d][k] / 2 && (p = !0), Math.abs(b[l] - h) < c && (c = Math.abs(b[l] - h), g = this.items[d],
                                this.direction = p ? "up" : "down"));
                            if (g || this.options.dropOnEmpty) this.currentContainer === this.containers[e] ? this.currentContainer.containerCache.over || (this.containers[e]._trigger("over", b, this._uiHash()), this.currentContainer.containerCache.over = 1) : (g ? this._rearrange(b, g, null, !0) : this._rearrange(b, null, this.containers[e].element, !0), this._trigger("change", b, this._uiHash()), this.containers[e]._trigger("change", b, this._uiHash(this)), this.currentContainer = this.containers[e], this.options.placeholder.update(this.currentContainer,
                                this.placeholder), this.containers[e]._trigger("over", b, this._uiHash(this)), this.containers[e].containerCache.over = 1)
                        }
                },
                _createHelper: function(b) {
                    var c = this.options;
                    b = a.isFunction(c.helper) ? a(c.helper.apply(this.element[0], [b, this.currentItem])) : "clone" === c.helper ? this.currentItem.clone() : this.currentItem;
                    b.parents("body").length || a("parent" !== c.appendTo ? c.appendTo : this.currentItem[0].parentNode)[0].appendChild(b[0]);
                    b[0] === this.currentItem[0] && (this._storedCSS = {
                        width: this.currentItem[0].style.width,
                        height: this.currentItem[0].style.height,
                        position: this.currentItem.css("position"),
                        top: this.currentItem.css("top"),
                        left: this.currentItem.css("left")
                    });
                    b[0].style.width && !c.forceHelperSize || b.width(this.currentItem.width());
                    b[0].style.height && !c.forceHelperSize || b.height(this.currentItem.height());
                    return b
                },
                _adjustOffsetFromHelper: function(b) {
                    "string" === typeof b && (b = b.split(" "));
                    a.isArray(b) && (b = {
                        left: +b[0],
                        top: +b[1] || 0
                    });
                    "left" in b && (this.offset.click.left = b.left + this.margins.left);
                    "right" in b && (this.offset.click.left =
                        this.helperProportions.width - b.right + this.margins.left);
                    "top" in b && (this.offset.click.top = b.top + this.margins.top);
                    "bottom" in b && (this.offset.click.top = this.helperProportions.height - b.bottom + this.margins.top)
                },
                _getParentOffset: function() {
                    this.offsetParent = this.helper.offsetParent();
                    var b = this.offsetParent.offset();
                    "absolute" === this.cssPosition && this.scrollParent[0] !== this.document[0] && a.contains(this.scrollParent[0], this.offsetParent[0]) && (b.left += this.scrollParent.scrollLeft(), b.top += this.scrollParent.scrollTop());
                    if (this.offsetParent[0] === this.document[0].body || this.offsetParent[0].tagName && "html" === this.offsetParent[0].tagName.toLowerCase() && a.ui.ie) b = {
                        top: 0,
                        left: 0
                    };
                    return {
                        top: b.top + (parseInt(this.offsetParent.css("borderTopWidth"), 10) || 0),
                        left: b.left + (parseInt(this.offsetParent.css("borderLeftWidth"), 10) || 0)
                    }
                },
                _getRelativeOffset: function() {
                    if ("relative" === this.cssPosition) {
                        var a = this.currentItem.position();
                        return {
                            top: a.top - (parseInt(this.helper.css("top"), 10) || 0) + this.scrollParent.scrollTop(),
                            left: a.left -
                                (parseInt(this.helper.css("left"), 10) || 0) + this.scrollParent.scrollLeft()
                        }
                    }
                    return {
                        top: 0,
                        left: 0
                    }
                },
                _cacheMargins: function() {
                    this.margins = {
                        left: parseInt(this.currentItem.css("marginLeft"), 10) || 0,
                        top: parseInt(this.currentItem.css("marginTop"), 10) || 0
                    }
                },
                _cacheHelperProportions: function() {
                    this.helperProportions = {
                        width: this.helper.outerWidth(),
                        height: this.helper.outerHeight()
                    }
                },
                _setContainment: function() {
                    var b, c, d;
                    c = this.options;
                    "parent" === c.containment && (c.containment = this.helper[0].parentNode);
                    if ("document" ===
                        c.containment || "window" === c.containment) this.containment = [0 - this.offset.relative.left - this.offset.parent.left, 0 - this.offset.relative.top - this.offset.parent.top, "document" === c.containment ? this.document.width() : this.window.width() - this.helperProportions.width - this.margins.left, ("document" === c.containment ? this.document.width() : this.window.height() || this.document[0].body.parentNode.scrollHeight) - this.helperProportions.height - this.margins.top];
                    /^(document|window|parent)$/.test(c.containment) || (b = a(c.containment)[0],
                        c = a(c.containment).offset(), d = "hidden" !== a(b).css("overflow"), this.containment = [c.left + (parseInt(a(b).css("borderLeftWidth"), 10) || 0) + (parseInt(a(b).css("paddingLeft"), 10) || 0) - this.margins.left, c.top + (parseInt(a(b).css("borderTopWidth"), 10) || 0) + (parseInt(a(b).css("paddingTop"), 10) || 0) - this.margins.top, c.left + (d ? Math.max(b.scrollWidth, b.offsetWidth) : b.offsetWidth) - (parseInt(a(b).css("borderLeftWidth"), 10) || 0) - (parseInt(a(b).css("paddingRight"), 10) || 0) - this.helperProportions.width - this.margins.left,
                            c.top + (d ? Math.max(b.scrollHeight, b.offsetHeight) : b.offsetHeight) - (parseInt(a(b).css("borderTopWidth"), 10) || 0) - (parseInt(a(b).css("paddingBottom"), 10) || 0) - this.helperProportions.height - this.margins.top
                        ])
                },
                _convertPositionTo: function(b, c) {
                    c || (c = this.position);
                    var d = "absolute" === b ? 1 : -1,
                        g = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && a.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent : this.offsetParent,
                        f = /(html|body)/i.test(g[0].tagName);
                    return {
                        top: c.top +
                            this.offset.relative.top * d + this.offset.parent.top * d - ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : f ? 0 : g.scrollTop()) * d,
                        left: c.left + this.offset.relative.left * d + this.offset.parent.left * d - ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : f ? 0 : g.scrollLeft()) * d
                    }
                },
                _generatePosition: function(b) {
                    var c, d, g = this.options;
                    d = b.pageX;
                    c = b.pageY;
                    var f = "absolute" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && a.contains(this.scrollParent[0], this.offsetParent[0]) ? this.scrollParent :
                        this.offsetParent,
                        k = /(html|body)/i.test(f[0].tagName);
                    "relative" !== this.cssPosition || this.scrollParent[0] !== this.document[0] && this.scrollParent[0] !== this.offsetParent[0] || (this.offset.relative = this._getRelativeOffset());
                    this.originalPosition && (this.containment && (b.pageX - this.offset.click.left < this.containment[0] && (d = this.containment[0] + this.offset.click.left), b.pageY - this.offset.click.top < this.containment[1] && (c = this.containment[1] + this.offset.click.top), b.pageX - this.offset.click.left > this.containment[2] &&
                        (d = this.containment[2] + this.offset.click.left), b.pageY - this.offset.click.top > this.containment[3] && (c = this.containment[3] + this.offset.click.top)), g.grid && (c = this.originalPageY + Math.round((c - this.originalPageY) / g.grid[1]) * g.grid[1], c = this.containment ? c - this.offset.click.top >= this.containment[1] && c - this.offset.click.top <= this.containment[3] ? c : c - this.offset.click.top >= this.containment[1] ? c - g.grid[1] : c + g.grid[1] : c, d = this.originalPageX + Math.round((d - this.originalPageX) / g.grid[0]) * g.grid[0], d = this.containment ?
                        d - this.offset.click.left >= this.containment[0] && d - this.offset.click.left <= this.containment[2] ? d : d - this.offset.click.left >= this.containment[0] ? d - g.grid[0] : d + g.grid[0] : d));
                    return {
                        top: c - this.offset.click.top - this.offset.relative.top - this.offset.parent.top + ("fixed" === this.cssPosition ? -this.scrollParent.scrollTop() : k ? 0 : f.scrollTop()),
                        left: d - this.offset.click.left - this.offset.relative.left - this.offset.parent.left + ("fixed" === this.cssPosition ? -this.scrollParent.scrollLeft() : k ? 0 : f.scrollLeft())
                    }
                },
                _rearrange: function(a,
                    c, d, g) {
                    d ? d[0].appendChild(this.placeholder[0]) : c.item[0].parentNode.insertBefore(this.placeholder[0], "down" === this.direction ? c.item[0] : c.item[0].nextSibling);
                    var f = this.counter = this.counter ? ++this.counter : 1;
                    this._delay(function() {
                        f === this.counter && this.refreshPositions(!g)
                    })
                },
                _clear: function(a, c) {
                    function d(a, b, c) {
                        return function(d) {
                            c._trigger(a, d, b._uiHash(b))
                        }
                    }
                    this.reverting = !1;
                    var g, f = [];
                    !this._noFinalSort && this.currentItem.parent().length && this.placeholder.before(this.currentItem);
                    this._noFinalSort =
                        null;
                    if (this.helper[0] === this.currentItem[0]) {
                        for (g in this._storedCSS)
                            if ("auto" === this._storedCSS[g] || "static" === this._storedCSS[g]) this._storedCSS[g] = "";
                        this.currentItem.css(this._storedCSS).removeClass("ui-sortable-helper")
                    } else this.currentItem.show();
                    this.fromOutside && !c && f.push(function(a) {
                        this._trigger("receive", a, this._uiHash(this.fromOutside))
                    });
                    !this.fromOutside && this.domPosition.prev === this.currentItem.prev().not(".ui-sortable-helper")[0] && this.domPosition.parent === this.currentItem.parent()[0] ||
                        c || f.push(function(a) {
                            this._trigger("update", a, this._uiHash())
                        });
                    this === this.currentContainer || c || (f.push(function(a) {
                        this._trigger("remove", a, this._uiHash())
                    }), f.push(function(a) {
                        return function(b) {
                            a._trigger("receive", b, this._uiHash(this))
                        }
                    }.call(this, this.currentContainer)), f.push(function(a) {
                        return function(b) {
                            a._trigger("update", b, this._uiHash(this))
                        }
                    }.call(this, this.currentContainer)));
                    for (g = this.containers.length - 1; 0 <= g; g--) c || f.push(d("deactivate", this, this.containers[g])), this.containers[g].containerCache.over &&
                        (f.push(d("out", this, this.containers[g])), this.containers[g].containerCache.over = 0);
                    this.storedCursor && (this.document.find("body").css("cursor", this.storedCursor), this.storedStylesheet.remove());
                    this._storedOpacity && this.helper.css("opacity", this._storedOpacity);
                    this._storedZIndex && this.helper.css("zIndex", "auto" === this._storedZIndex ? "" : this._storedZIndex);
                    this.dragging = !1;
                    c || this._trigger("beforeStop", a, this._uiHash());
                    this.placeholder[0].parentNode.removeChild(this.placeholder[0]);
                    this.cancelHelperRemoval ||
                        (this.helper[0] !== this.currentItem[0] && this.helper.remove(), this.helper = null);
                    if (!c) {
                        for (g = 0; g < f.length; g++) f[g].call(this, a);
                        this._trigger("stop", a, this._uiHash())
                    }
                    this.fromOutside = !1;
                    return !this.cancelHelperRemoval
                },
                _trigger: function() {
                    !1 === a.Widget.prototype._trigger.apply(this, arguments) && this.cancel()
                },
                _uiHash: function(b) {
                    var c = b || this;
                    return {
                        helper: c.helper,
                        placeholder: c.placeholder || a([]),
                        position: c.position,
                        originalPosition: c.originalPosition,
                        offset: c.positionAbs,
                        item: c.currentItem,
                        sender: b ?
                            b.element : null
                    }
                }
            });
            a.widget("ui.spinner", {
                version: "1.11.4",
                defaultElement: "<input>",
                widgetEventPrefix: "spin",
                options: {
                    culture: null,
                    icons: {
                        down: "ui-icon-triangle-1-s",
                        up: "ui-icon-triangle-1-n"
                    },
                    incremental: !0,
                    max: null,
                    min: null,
                    numberFormat: null,
                    page: 10,
                    step: 1,
                    change: null,
                    spin: null,
                    start: null,
                    stop: null
                },
                _create: function() {
                    this._setOption("max", this.options.max);
                    this._setOption("min", this.options.min);
                    this._setOption("step", this.options.step);
                    "" !== this.value() && this._value(this.element.val(), !0);
                    this._draw();
                    this._on(this._events);
                    this._refresh();
                    this._on(this.window, {
                        beforeunload: function() {
                            this.element.removeAttr("autocomplete")
                        }
                    })
                },
                _getCreateOptions: function() {
                    var b = {},
                        c = this.element;
                    a.each(["min", "max", "step"], function(a, g) {
                        var f = c.attr(g);
                        void 0 !== f && f.length && (b[g] = f)
                    });
                    return b
                },
                _events: {
                    keydown: function(a) {
                        this._start(a) && this._keydown(a) && a.preventDefault()
                    },
                    keyup: "_stop",
                    focus: function() {
                        this.previous = this.element.val()
                    },
                    blur: function(a) {
                        this.cancelBlur ? delete this.cancelBlur : (this._stop(),
                            this._refresh(), this.previous !== this.element.val() && this._trigger("change", a))
                    },
                    mousewheel: function(a, c) {
                        if (c) {
                            if (!this.spinning && !this._start(a)) return !1;
                            this._spin((0 < c ? 1 : -1) * this.options.step, a);
                            clearTimeout(this.mousewheelTimer);
                            this.mousewheelTimer = this._delay(function() {
                                this.spinning && this._stop(a)
                            }, 100);
                            a.preventDefault()
                        }
                    },
                    "mousedown .ui-spinner-button": function(b) {
                        function c() {
                            this.element[0] !== this.document[0].activeElement && (this.element.focus(), this.previous = d, this._delay(function() {
                                this.previous =
                                    d
                            }))
                        }
                        var d;
                        d = this.element[0] === this.document[0].activeElement ? this.previous : this.element.val();
                        b.preventDefault();
                        c.call(this);
                        this.cancelBlur = !0;
                        this._delay(function() {
                            delete this.cancelBlur;
                            c.call(this)
                        });
                        !1 !== this._start(b) && this._repeat(null, a(b.currentTarget).hasClass("ui-spinner-up") ? 1 : -1, b)
                    },
                    "mouseup .ui-spinner-button": "_stop",
                    "mouseenter .ui-spinner-button": function(b) {
                        if (a(b.currentTarget).hasClass("ui-state-active")) {
                            if (!1 === this._start(b)) return !1;
                            this._repeat(null, a(b.currentTarget).hasClass("ui-spinner-up") ?
                                1 : -1, b)
                        }
                    },
                    "mouseleave .ui-spinner-button": "_stop"
                },
                _draw: function() {
                    var a = this.uiSpinner = this.element.addClass("ui-spinner-input").attr("autocomplete", "off").wrap(this._uiSpinnerHtml()).parent().append(this._buttonHtml());
                    this.element.attr("role", "spinbutton");
                    this.buttons = a.find(".ui-spinner-button").attr("tabIndex", -1).button().removeClass("ui-corner-all");
                    this.buttons.height() > Math.ceil(.5 * a.height()) && 0 < a.height() && a.height(a.height());
                    this.options.disabled && this.disable()
                },
                _keydown: function(b) {
                    var c =
                        this.options,
                        d = a.ui.keyCode;
                    switch (b.keyCode) {
                        case d.UP:
                            return this._repeat(null, 1, b), !0;
                        case d.DOWN:
                            return this._repeat(null, -1, b), !0;
                        case d.PAGE_UP:
                            return this._repeat(null, c.page, b), !0;
                        case d.PAGE_DOWN:
                            return this._repeat(null, -c.page, b), !0
                    }
                    return !1
                },
                _uiSpinnerHtml: function() {
                    return "<span class='ui-spinner ui-widget ui-widget-content ui-corner-all'></span>"
                },
                _buttonHtml: function() {
                    return "<a class='ui-spinner-button ui-spinner-up ui-corner-tr'><span class='ui-icon " + this.options.icons.up + "'>&#9650;</span></a><a class='ui-spinner-button ui-spinner-down ui-corner-br'><span class='ui-icon " +
                        this.options.icons.down + "'>&#9660;</span></a>"
                },
                _start: function(a) {
                    if (!this.spinning && !1 === this._trigger("start", a)) return !1;
                    this.counter || (this.counter = 1);
                    return this.spinning = !0
                },
                _repeat: function(a, c, d) {
                    a = a || 500;
                    clearTimeout(this.timer);
                    this.timer = this._delay(function() {
                        this._repeat(40, c, d)
                    }, a);
                    this._spin(c * this.options.step, d)
                },
                _spin: function(a, c) {
                    var d = this.value() || 0;
                    this.counter || (this.counter = 1);
                    d = this._adjustValue(d + a * this._increment(this.counter));
                    this.spinning && !1 === this._trigger("spin",
                        c, {
                            value: d
                        }) || (this._value(d), this.counter++)
                },
                _increment: function(b) {
                    var c = this.options.incremental;
                    return c ? a.isFunction(c) ? c(b) : Math.floor(b * b * b / 5E4 - b * b / 500 + 17 * b / 200 + 1) : 1
                },
                _precision: function() {
                    var a = this._precisionOf(this.options.step);
                    null !== this.options.min && (a = Math.max(a, this._precisionOf(this.options.min)));
                    return a
                },
                _precisionOf: function(a) {
                    a = a.toString();
                    var c = a.indexOf(".");
                    return -1 === c ? 0 : a.length - c - 1
                },
                _adjustValue: function(a) {
                    var c, d = this.options;
                    c = null !== d.min ? d.min : 0;
                    a = Math.round((a -
                        c) / d.step) * d.step;
                    a = c + a;
                    a = parseFloat(a.toFixed(this._precision()));
                    return null !== d.max && a > d.max ? d.max : null !== d.min && a < d.min ? d.min : a
                },
                _stop: function(a) {
                    this.spinning && (clearTimeout(this.timer), clearTimeout(this.mousewheelTimer), this.counter = 0, this.spinning = !1, this._trigger("stop", a))
                },
                _setOption: function(a, c) {
                    if ("culture" === a || "numberFormat" === a) {
                        var d = this._parse(this.element.val());
                        this.options[a] = c;
                        this.element.val(this._format(d))
                    } else "max" !== a && "min" !== a && "step" !== a || "string" !== typeof c || (c = this._parse(c)),
                        "icons" === a && (this.buttons.first().find(".ui-icon").removeClass(this.options.icons.up).addClass(c.up), this.buttons.last().find(".ui-icon").removeClass(this.options.icons.down).addClass(c.down)), this._super(a, c), "disabled" === a && (this.widget().toggleClass("ui-state-disabled", !!c), this.element.prop("disabled", !!c), this.buttons.button(c ? "disable" : "enable"))
                },
                _setOptions: S(function(a) {
                    this._super(a)
                }),
                _parse: function(a) {
                    "string" === typeof a && "" !== a && (a = window.Globalize && this.options.numberFormat ? Globalize.parseFloat(a,
                        10, this.options.culture) : +a);
                    return "" === a || isNaN(a) ? null : a
                },
                _format: function(a) {
                    return "" === a ? "" : window.Globalize && this.options.numberFormat ? Globalize.format(a, this.options.numberFormat, this.options.culture) : a
                },
                _refresh: function() {
                    this.element.attr({
                        "aria-valuemin": this.options.min,
                        "aria-valuemax": this.options.max,
                        "aria-valuenow": this._parse(this.element.val())
                    })
                },
                isValid: function() {
                    var a = this.value();
                    return null === a ? !1 : a === this._adjustValue(a)
                },
                _value: function(a, c) {
                    var d;
                    "" !== a && (d = this._parse(a),
                        null !== d && (c || (d = this._adjustValue(d)), a = this._format(d)));
                    this.element.val(a);
                    this._refresh()
                },
                _destroy: function() {
                    this.element.removeClass("ui-spinner-input").prop("disabled", !1).removeAttr("autocomplete").removeAttr("role").removeAttr("aria-valuemin").removeAttr("aria-valuemax").removeAttr("aria-valuenow");
                    this.uiSpinner.replaceWith(this.element)
                },
                stepUp: S(function(a) {
                    this._stepUp(a)
                }),
                _stepUp: function(a) {
                    this._start() && (this._spin((a || 1) * this.options.step), this._stop())
                },
                stepDown: S(function(a) {
                    this._stepDown(a)
                }),
                _stepDown: function(a) {
                    this._start() && (this._spin((a || 1) * -this.options.step), this._stop())
                },
                pageUp: S(function(a) {
                    this._stepUp((a || 1) * this.options.page)
                }),
                pageDown: S(function(a) {
                    this._stepDown((a || 1) * this.options.page)
                }),
                value: function(a) {
                    if (!arguments.length) return this._parse(this.element.val());
                    S(this._value).call(this, a)
                },
                widget: function() {
                    return this.uiSpinner
                }
            });
            a.widget("ui.tabs", {
                version: "1.11.4",
                delay: 300,
                options: {
                    active: null,
                    collapsible: !1,
                    event: "click",
                    heightStyle: "content",
                    hide: null,
                    show: null,
                    activate: null,
                    beforeActivate: null,
                    beforeLoad: null,
                    load: null
                },
                _isLocal: function() {
                    var a = /#.*$/;
                    return function(c) {
                        var d, g;
                        c = c.cloneNode(!1);
                        d = c.href.replace(a, "");
                        g = location.href.replace(a, "");
                        try {
                            d = decodeURIComponent(d)
                        } catch (f) {}
                        try {
                            g = decodeURIComponent(g)
                        } catch (f) {}
                        return 1 < c.hash.length && d === g
                    }
                }(),
                _create: function() {
                    var b = this,
                        c = this.options;
                    this.running = !1;
                    this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all").toggleClass("ui-tabs-collapsible", c.collapsible);
                    this._processTabs();
                    c.active = this._initialActive();
                    a.isArray(c.disabled) && (c.disabled = a.unique(c.disabled.concat(a.map(this.tabs.filter(".ui-state-disabled"), function(a) {
                        return b.tabs.index(a)
                    }))).sort());
                    this.active = !1 !== this.options.active && this.anchors.length ? this._findActive(c.active) : a();
                    this._refresh();
                    this.active.length && this.load(c.active)
                },
                _initialActive: function() {
                    var b = this.options.active,
                        c = this.options.collapsible,
                        d = location.hash.substring(1);
                    null === b && (d && this.tabs.each(function(c, f) {
                        if (a(f).attr("aria-controls") ===
                            d) return b = c, !1
                    }), null === b && (b = this.tabs.index(this.tabs.filter(".ui-tabs-active"))), null === b || -1 === b) && (b = this.tabs.length ? 0 : !1);
                    !1 !== b && (b = this.tabs.index(this.tabs.eq(b)), -1 === b && (b = c ? !1 : 0));
                    !c && !1 === b && this.anchors.length && (b = 0);
                    return b
                },
                _getCreateEventData: function() {
                    return {
                        tab: this.active,
                        panel: this.active.length ? this._getPanelForTab(this.active) : a()
                    }
                },
                _tabKeydown: function(b) {
                    var c = a(this.document[0].activeElement).closest("li"),
                        d = this.tabs.index(c),
                        g = !0;
                    if (!this._handlePageNav(b)) {
                        switch (b.keyCode) {
                            case a.ui.keyCode.RIGHT:
                            case a.ui.keyCode.DOWN:
                                d++;
                                break;
                            case a.ui.keyCode.UP:
                            case a.ui.keyCode.LEFT:
                                g = !1;
                                d--;
                                break;
                            case a.ui.keyCode.END:
                                d = this.anchors.length - 1;
                                break;
                            case a.ui.keyCode.HOME:
                                d = 0;
                                break;
                            case a.ui.keyCode.SPACE:
                                b.preventDefault();
                                clearTimeout(this.activating);
                                this._activate(d);
                                return;
                            case a.ui.keyCode.ENTER:
                                b.preventDefault();
                                clearTimeout(this.activating);
                                this._activate(d === this.options.active ? !1 : d);
                                return;
                            default:
                                return
                        }
                        b.preventDefault();
                        clearTimeout(this.activating);
                        d = this._focusNextTab(d, g);
                        b.ctrlKey || b.metaKey || (c.attr("aria-selected",
                            "false"), this.tabs.eq(d).attr("aria-selected", "true"), this.activating = this._delay(function() {
                            this.option("active", d)
                        }, this.delay))
                    }
                },
                _panelKeydown: function(b) {
                    !this._handlePageNav(b) && b.ctrlKey && b.keyCode === a.ui.keyCode.UP && (b.preventDefault(), this.active.focus())
                },
                _handlePageNav: function(b) {
                    if (b.altKey && b.keyCode === a.ui.keyCode.PAGE_UP) return this._activate(this._focusNextTab(this.options.active - 1, !1)), !0;
                    if (b.altKey && b.keyCode === a.ui.keyCode.PAGE_DOWN) return this._activate(this._focusNextTab(this.options.active +
                        1, !0)), !0
                },
                _findNextTab: function(b, c) {
                    function d() {
                        b > g && (b = 0);
                        0 > b && (b = g);
                        return b
                    }
                    for (var g = this.tabs.length - 1; - 1 !== a.inArray(d(), this.options.disabled);) b = c ? b + 1 : b - 1;
                    return b
                },
                _focusNextTab: function(a, c) {
                    a = this._findNextTab(a, c);
                    this.tabs.eq(a).focus();
                    return a
                },
                _setOption: function(a, c) {
                    "active" === a ? this._activate(c) : "disabled" === a ? this._setupDisabled(c) : (this._super(a, c), "collapsible" === a && (this.element.toggleClass("ui-tabs-collapsible", c), c || !1 !== this.options.active || this._activate(0)), "event" ===
                        a && this._setupEvents(c), "heightStyle" === a && this._setupHeightStyle(c))
                },
                _sanitizeSelector: function(a) {
                    return a ? a.replace(/[!"$%&'()*+,.\/:;<=>?@\[\]\^`{|}~]/g, "\\$&") : ""
                },
                refresh: function() {
                    var b = this.options,
                        c = this.tablist.children(":has(a[href])");
                    b.disabled = a.map(c.filter(".ui-state-disabled"), function(a) {
                        return c.index(a)
                    });
                    this._processTabs();
                    !1 !== b.active && this.anchors.length ? this.active.length && !a.contains(this.tablist[0], this.active[0]) ? this.tabs.length === b.disabled.length ? (b.active = !1, this.active =
                        a()) : this._activate(this._findNextTab(Math.max(0, b.active - 1), !1)) : b.active = this.tabs.index(this.active) : (b.active = !1, this.active = a());
                    this._refresh()
                },
                _refresh: function() {
                    this._setupDisabled(this.options.disabled);
                    this._setupEvents(this.options.event);
                    this._setupHeightStyle(this.options.heightStyle);
                    this.tabs.not(this.active).attr({
                        "aria-selected": "false",
                        "aria-expanded": "false",
                        tabIndex: -1
                    });
                    this.panels.not(this._getPanelForTab(this.active)).hide().attr({
                        "aria-hidden": "true"
                    });
                    this.active.length ?
                        (this.active.addClass("ui-tabs-active ui-state-active").attr({
                            "aria-selected": "true",
                            "aria-expanded": "true",
                            tabIndex: 0
                        }), this._getPanelForTab(this.active).show().attr({
                            "aria-hidden": "false"
                        })) : this.tabs.eq(0).attr("tabIndex", 0)
                },
                _processTabs: function() {
                    var b = this,
                        c = this.tabs,
                        d = this.anchors,
                        g = this.panels;
                    this.tablist = this._getList().addClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").attr("role", "tablist").delegate("> li", "mousedown" + this.eventNamespace, function(b) {
                        a(this).is(".ui-state-disabled") &&
                            b.preventDefault()
                    }).delegate(".ui-tabs-anchor", "focus" + this.eventNamespace, function() {
                        a(this).closest("li").is(".ui-state-disabled") && this.blur()
                    });
                    this.tabs = this.tablist.find("> li:has(a[href])").addClass("ui-state-default ui-corner-top").attr({
                        role: "tab",
                        tabIndex: -1
                    });
                    this.anchors = this.tabs.map(function() {
                        return a("a", this)[0]
                    }).addClass("ui-tabs-anchor").attr({
                        role: "presentation",
                        tabIndex: -1
                    });
                    this.panels = a();
                    this.anchors.each(function(c, d) {
                        var g, k, l = a(d).uniqueId().attr("id"),
                            e = a(d).closest("li"),
                            n = e.attr("aria-controls");
                        b._isLocal(d) ? (g = d.hash, k = g.substring(1), g = b.element.find(b._sanitizeSelector(g))) : (k = e.attr("aria-controls") || a({}).uniqueId()[0].id, g = b.element.find("#" + k), g.length || (g = b._createPanel(k), g.insertAfter(b.panels[c - 1] || b.tablist)), g.attr("aria-live", "polite"));
                        g.length && (b.panels = b.panels.add(g));
                        n && e.data("ui-tabs-aria-controls", n);
                        e.attr({
                            "aria-controls": k,
                            "aria-labelledby": l
                        });
                        g.attr("aria-labelledby", l)
                    });
                    this.panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").attr("role",
                        "tabpanel");
                    c && (this._off(c.not(this.tabs)), this._off(d.not(this.anchors)), this._off(g.not(this.panels)))
                },
                _getList: function() {
                    return this.tablist || this.element.find("ol,ul").eq(0)
                },
                _createPanel: function(b) {
                    return a("<div>").attr("id", b).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").data("ui-tabs-destroy", !0)
                },
                _setupDisabled: function(b) {
                    a.isArray(b) && (b.length ? b.length === this.anchors.length && (b = !0) : b = !1);
                    for (var c = 0, d; d = this.tabs[c]; c++) !0 === b || -1 !== a.inArray(c, b) ? a(d).addClass("ui-state-disabled").attr("aria-disabled",
                        "true") : a(d).removeClass("ui-state-disabled").removeAttr("aria-disabled");
                    this.options.disabled = b
                },
                _setupEvents: function(b) {
                    var c = {};
                    b && a.each(b.split(" "), function(a, b) {
                        c[b] = "_eventHandler"
                    });
                    this._off(this.anchors.add(this.tabs).add(this.panels));
                    this._on(!0, this.anchors, {
                        click: function(a) {
                            a.preventDefault()
                        }
                    });
                    this._on(this.anchors, c);
                    this._on(this.tabs, {
                        keydown: "_tabKeydown"
                    });
                    this._on(this.panels, {
                        keydown: "_panelKeydown"
                    });
                    this._focusable(this.tabs);
                    this._hoverable(this.tabs)
                },
                _setupHeightStyle: function(b) {
                    var c,
                        d = this.element.parent();
                    "fill" === b ? (c = d.height(), c -= this.element.outerHeight() - this.element.height(), this.element.siblings(":visible").each(function() {
                        var b = a(this),
                            d = b.css("position");
                        "absolute" !== d && "fixed" !== d && (c -= b.outerHeight(!0))
                    }), this.element.children().not(this.panels).each(function() {
                        c -= a(this).outerHeight(!0)
                    }), this.panels.each(function() {
                        a(this).height(Math.max(0, c - a(this).innerHeight() + a(this).height()))
                    }).css("overflow", "auto")) : "auto" === b && (c = 0, this.panels.each(function() {
                        c = Math.max(c,
                            a(this).height("").height())
                    }).height(c))
                },
                _eventHandler: function(b) {
                    var c = this.options,
                        d = this.active,
                        g = a(b.currentTarget).closest("li"),
                        f = g[0] === d[0],
                        k = f && c.collapsible,
                        h = k ? a() : this._getPanelForTab(g),
                        p = d.length ? this._getPanelForTab(d) : a(),
                        d = {
                            oldTab: d,
                            oldPanel: p,
                            newTab: k ? a() : g,
                            newPanel: h
                        };
                    b.preventDefault();
                    g.hasClass("ui-state-disabled") || g.hasClass("ui-tabs-loading") || this.running || f && !c.collapsible || !1 === this._trigger("beforeActivate", b, d) || (c.active = k ? !1 : this.tabs.index(g), this.active = f ? a() :
                        g, this.xhr && this.xhr.abort(), p.length || h.length || a.error("jQuery UI Tabs: Mismatching fragment identifier."), h.length && this.load(this.tabs.index(g), b), this._toggle(b, d))
                },
                _toggle: function(b, c) {
                    function d() {
                        f.running = !1;
                        f._trigger("activate", b, c)
                    }

                    function g() {
                        c.newTab.closest("li").addClass("ui-tabs-active ui-state-active");
                        k.length && f.options.show ? f._show(k, f.options.show, d) : (k.show(), d())
                    }
                    var f = this,
                        k = c.newPanel,
                        h = c.oldPanel;
                    this.running = !0;
                    h.length && this.options.hide ? this._hide(h, this.options.hide,
                        function() {
                            c.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active");
                            g()
                        }) : (c.oldTab.closest("li").removeClass("ui-tabs-active ui-state-active"), h.hide(), g());
                    h.attr("aria-hidden", "true");
                    c.oldTab.attr({
                        "aria-selected": "false",
                        "aria-expanded": "false"
                    });
                    k.length && h.length ? c.oldTab.attr("tabIndex", -1) : k.length && this.tabs.filter(function() {
                        return 0 === a(this).attr("tabIndex")
                    }).attr("tabIndex", -1);
                    k.attr("aria-hidden", "false");
                    c.newTab.attr({
                        "aria-selected": "true",
                        "aria-expanded": "true",
                        tabIndex: 0
                    })
                },
                _activate: function(b) {
                    b = this._findActive(b);
                    b[0] !== this.active[0] && (b.length || (b = this.active), b = b.find(".ui-tabs-anchor")[0], this._eventHandler({
                        target: b,
                        currentTarget: b,
                        preventDefault: a.noop
                    }))
                },
                _findActive: function(b) {
                    return !1 === b ? a() : this.tabs.eq(b)
                },
                _getIndex: function(a) {
                    "string" === typeof a && (a = this.anchors.index(this.anchors.filter("[href$='" + a + "']")));
                    return a
                },
                _destroy: function() {
                    this.xhr && this.xhr.abort();
                    this.element.removeClass("ui-tabs ui-widget ui-widget-content ui-corner-all ui-tabs-collapsible");
                    this.tablist.removeClass("ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all").removeAttr("role");
                    this.anchors.removeClass("ui-tabs-anchor").removeAttr("role").removeAttr("tabIndex").removeUniqueId();
                    this.tablist.unbind(this.eventNamespace);
                    this.tabs.add(this.panels).each(function() {
                        a.data(this, "ui-tabs-destroy") ? a(this).remove() : a(this).removeClass("ui-state-default ui-state-active ui-state-disabled ui-corner-top ui-corner-bottom ui-widget-content ui-tabs-active ui-tabs-panel").removeAttr("tabIndex").removeAttr("aria-live").removeAttr("aria-busy").removeAttr("aria-selected").removeAttr("aria-labelledby").removeAttr("aria-hidden").removeAttr("aria-expanded").removeAttr("role")
                    });
                    this.tabs.each(function() {
                        var b = a(this),
                            c = b.data("ui-tabs-aria-controls");
                        c ? b.attr("aria-controls", c).removeData("ui-tabs-aria-controls") : b.removeAttr("aria-controls")
                    });
                    this.panels.show();
                    "content" !== this.options.heightStyle && this.panels.css("height", "")
                },
                enable: function(b) {
                    var c = this.options.disabled;
                    !1 !== c && (void 0 === b ? c = !1 : (b = this._getIndex(b), c = a.isArray(c) ? a.map(c, function(a) {
                        return a !== b ? a : null
                    }) : a.map(this.tabs, function(a, c) {
                        return c !== b ? c : null
                    })), this._setupDisabled(c))
                },
                disable: function(b) {
                    var c =
                        this.options.disabled;
                    if (!0 !== c) {
                        if (void 0 === b) c = !0;
                        else {
                            b = this._getIndex(b);
                            if (-1 !== a.inArray(b, c)) return;
                            c = a.isArray(c) ? a.merge([b], c).sort() : [b]
                        }
                        this._setupDisabled(c)
                    }
                },
                load: function(b, c) {
                    b = this._getIndex(b);
                    var d = this,
                        g = this.tabs.eq(b),
                        f = g.find(".ui-tabs-anchor"),
                        k = this._getPanelForTab(g),
                        h = {
                            tab: g,
                            panel: k
                        },
                        p = function(a, b) {
                            "abort" === b && d.panels.stop(!1, !0);
                            g.removeClass("ui-tabs-loading");
                            k.removeAttr("aria-busy");
                            a === d.xhr && delete d.xhr
                        };
                    this._isLocal(f[0]) || (this.xhr = a.ajax(this._ajaxSettings(f,
                        c, h))) && "canceled" !== this.xhr.statusText && (g.addClass("ui-tabs-loading"), k.attr("aria-busy", "true"), this.xhr.done(function(a, b, f) {
                        setTimeout(function() {
                            k.html(a);
                            d._trigger("load", c, h);
                            p(f, b)
                        }, 1)
                    }).fail(function(a, b) {
                        setTimeout(function() {
                            p(a, b)
                        }, 1)
                    }))
                },
                _ajaxSettings: function(b, c, d) {
                    var g = this;
                    return {
                        url: b.attr("href"),
                        beforeSend: function(b, k) {
                            return g._trigger("beforeLoad", c, a.extend({
                                jqXHR: b,
                                ajaxSettings: k
                            }, d))
                        }
                    }
                },
                _getPanelForTab: function(b) {
                    b = a(b).attr("aria-controls");
                    return this.element.find(this._sanitizeSelector("#" +
                        b))
                }
            });
            a.widget("ui.tooltip", {
                version: "1.11.4",
                options: {
                    content: function() {
                        var b = a(this).attr("title") || "";
                        return a("<a>").text(b).html()
                    },
                    hide: !0,
                    items: "[title]:not([disabled])",
                    position: {
                        my: "left top+15",
                        at: "left bottom",
                        collision: "flipfit flip"
                    },
                    show: !0,
                    tooltipClass: null,
                    track: !1,
                    close: null,
                    open: null
                },
                _addDescribedBy: function(b, c) {
                    var d = (b.attr("aria-describedby") || "").split(/\s+/);
                    d.push(c);
                    b.data("ui-tooltip-id", c).attr("aria-describedby", a.trim(d.join(" ")))
                },
                _removeDescribedBy: function(b) {
                    var c =
                        b.data("ui-tooltip-id"),
                        d = (b.attr("aria-describedby") || "").split(/\s+/),
                        c = a.inArray(c, d); - 1 !== c && d.splice(c, 1);
                    b.removeData("ui-tooltip-id");
                    (d = a.trim(d.join(" "))) ? b.attr("aria-describedby", d): b.removeAttr("aria-describedby")
                },
                _create: function() {
                    this._on({
                        mouseover: "open",
                        focusin: "open"
                    });
                    this.tooltips = {};
                    this.parents = {};
                    this.options.disabled && this._disable();
                    this.liveRegion = a("<div>").attr({
                        role: "log",
                        "aria-live": "assertive",
                        "aria-relevant": "additions"
                    }).addClass("ui-helper-hidden-accessible").appendTo(this.document[0].body)
                },
                _setOption: function(b, c) {
                    var d = this;
                    "disabled" === b ? (this[c ? "_disable" : "_enable"](), this.options[b] = c) : (this._super(b, c), "content" === b && a.each(this.tooltips, function(a, b) {
                        d._updateContent(b.element)
                    }))
                },
                _disable: function() {
                    var b = this;
                    a.each(this.tooltips, function(c, d) {
                        var g = a.Event("blur");
                        g.target = g.currentTarget = d.element[0];
                        b.close(g, !0)
                    });
                    this.element.find(this.options.items).addBack().each(function() {
                        var b = a(this);
                        b.is("[title]") && b.data("ui-tooltip-title", b.attr("title")).removeAttr("title")
                    })
                },
                _enable: function() {
                    this.element.find(this.options.items).addBack().each(function() {
                        var b = a(this);
                        b.data("ui-tooltip-title") && b.attr("title", b.data("ui-tooltip-title"))
                    })
                },
                open: function(b) {
                    var c = this,
                        d = a(b ? b.target : this.element).closest(this.options.items);
                    d.length && !d.data("ui-tooltip-id") && (d.attr("title") && d.data("ui-tooltip-title", d.attr("title")), d.data("ui-tooltip-open", !0), b && "mouseover" === b.type && d.parents().each(function() {
                        var b = a(this),
                            d;
                        b.data("ui-tooltip-open") && (d = a.Event("blur"), d.target =
                            d.currentTarget = this, c.close(d, !0));
                        b.attr("title") && (b.uniqueId(), c.parents[this.id] = {
                            element: this,
                            title: b.attr("title")
                        }, b.attr("title", ""))
                    }), this._registerCloseHandlers(b, d), this._updateContent(d, b))
                },
                _updateContent: function(a, c) {
                    var d;
                    d = this.options.content;
                    var g = this,
                        f = c ? c.type : null;
                    if ("string" === typeof d) return this._open(c, a, d);
                    (d = d.call(a[0], function(d) {
                        g._delay(function() {
                            a.data("ui-tooltip-open") && (c && (c.type = f), this._open(c, a, d))
                        })
                    })) && this._open(c, a, d)
                },
                _open: function(b, c, d) {
                    function g(a) {
                        p.of =
                            a;
                        k.is(":hidden") || k.position(p)
                    }
                    var f, k, h, p = a.extend({}, this.options.position);
                    d && ((f = this._find(c)) ? f.tooltip.find(".ui-tooltip-content").html(d) : (c.is("[title]") && (b && "mouseover" === b.type ? c.attr("title", "") : c.removeAttr("title")), f = this._tooltip(c), k = f.tooltip, this._addDescribedBy(c, k.attr("id")), k.find(".ui-tooltip-content").html(d), this.liveRegion.children().hide(), d.clone && (d = d.clone(), d.removeAttr("id").find("[id]").removeAttr("id")), a("<div>").html(d).appendTo(this.liveRegion), this.options.track &&
                        b && /^mouse/.test(b.type) ? (this._on(this.document, {
                            mousemove: g
                        }), g(b)) : k.position(a.extend({
                            of: c
                        }, this.options.position)), k.hide(), this._show(k, this.options.show), this.options.show && this.options.show.delay && (h = this.delayedShow = setInterval(function() {
                            k.is(":visible") && (g(p.of), clearInterval(h))
                        }, a.fx.interval)), this._trigger("open", b, {
                            tooltip: k
                        })))
                },
                _registerCloseHandlers: function(b, c) {
                    var d = {
                        keyup: function(b) {
                            b.keyCode === a.ui.keyCode.ESCAPE && (b = a.Event(b), b.currentTarget = c[0], this.close(b, !0))
                        }
                    };
                    c[0] !==
                        this.element[0] && (d.remove = function() {
                            this._removeTooltip(this._find(c).tooltip)
                        });
                    b && "mouseover" !== b.type || (d.mouseleave = "close");
                    b && "focusin" !== b.type || (d.focusout = "close");
                    this._on(!0, c, d)
                },
                close: function(b) {
                    var c, d = this,
                        g = a(b ? b.currentTarget : this.element),
                        f = this._find(g);
                    f ? (c = f.tooltip, f.closing || (clearInterval(this.delayedShow), g.data("ui-tooltip-title") && !g.attr("title") && g.attr("title", g.data("ui-tooltip-title")), this._removeDescribedBy(g), f.hiding = !0, c.stop(!0), this._hide(c, this.options.hide,
                        function() {
                            d._removeTooltip(a(this))
                        }), g.removeData("ui-tooltip-open"), this._off(g, "mouseleave focusout keyup"), g[0] !== this.element[0] && this._off(g, "remove"), this._off(this.document, "mousemove"), b && "mouseleave" === b.type && a.each(this.parents, function(b, c) {
                        a(c.element).attr("title", c.title);
                        delete d.parents[b]
                    }), f.closing = !0, this._trigger("close", b, {
                        tooltip: c
                    }), f.hiding || (f.closing = !1))) : g.removeData("ui-tooltip-open")
                },
                _tooltip: function(b) {
                    var c = a("<div>").attr("role", "tooltip").addClass("ui-tooltip ui-widget ui-corner-all ui-widget-content " +
                            (this.options.tooltipClass || "")),
                        d = c.uniqueId().attr("id");
                    a("<div>").addClass("ui-tooltip-content").appendTo(c);
                    c.appendTo(this.document[0].body);
                    return this.tooltips[d] = {
                        element: b,
                        tooltip: c
                    }
                },
                _find: function(a) {
                    return (a = a.data("ui-tooltip-id")) ? this.tooltips[a] : null
                },
                _removeTooltip: function(a) {
                    a.remove();
                    delete this.tooltips[a.attr("id")]
                },
                _destroy: function() {
                    var b = this;
                    a.each(this.tooltips, function(c, d) {
                        var g = a.Event("blur"),
                            f = d.element;
                        g.target = g.currentTarget = f[0];
                        b.close(g, !0);
                        a("#" + c).remove();
                        f.data("ui-tooltip-title") && (f.attr("title") || f.attr("title", f.data("ui-tooltip-title")), f.removeData("ui-tooltip-title"))
                    });
                    this.liveRegion.remove()
                }
            })
        });
    </script>
	<style type="text/css">
		body {
		padding-top: 50px;
		padding-bottom: 20px;
		}

		.table .progress {
		margin-bottom: 0px;
		}
		/*! jQuery UI - v1.11.4 - 2015-03-11
		* http://jqueryui.com
		* Includes: core.css, accordion.css, autocomplete.css, button.css, datepicker.css, dialog.css, draggable.css, menu.css, progressbar.css, resizable.css, selectable.css, selectmenu.css, slider.css, sortable.css, spinner.css, tabs.css, tooltip.css, theme.css
		* To view and modify this theme, visit http://jqueryui.com/themeroller/?ffDefault=Verdana%2CArial%2Csans-serif&fwDefault=normal&fsDefault=1.1em&cornerRadius=4px&bgColorHeader=cccccc&bgTextureHeader=highlight_soft&bgImgOpacityHeader=75&borderColorHeader=aaaaaa&fcHeader=222222&iconColorHeader=222222&bgColorContent=ffffff&bgTextureContent=flat&bgImgOpacityContent=75&borderColorContent=aaaaaa&fcContent=222222&iconColorContent=222222&bgColorDefault=e6e6e6&bgTextureDefault=glass&bgImgOpacityDefault=75&borderColorDefault=d3d3d3&fcDefault=555555&iconColorDefault=888888&bgColorHover=dadada&bgTextureHover=glass&bgImgOpacityHover=75&borderColorHover=999999&fcHover=212121&iconColorHover=454545&bgColorActive=ffffff&bgTextureActive=glass&bgImgOpacityActive=65&borderColorActive=aaaaaa&fcActive=212121&iconColorActive=454545&bgColorHighlight=fbf9ee&bgTextureHighlight=glass&bgImgOpacityHighlight=55&borderColorHighlight=fcefa1&fcHighlight=363636&iconColorHighlight=2e83ff&bgColorError=fef1ec&bgTextureError=glass&bgImgOpacityError=95&borderColorError=cd0a0a&fcError=cd0a0a&iconColorError=cd0a0a&bgColorOverlay=aaaaaa&bgTextureOverlay=flat&bgImgOpacityOverlay=0&opacityOverlay=30&bgColorShadow=aaaaaa&bgTextureShadow=flat&bgImgOpacityShadow=0&opacityShadow=30&thicknessShadow=8px&offsetTopShadow=-8px&offsetLeftShadow=-8px&cornerRadiusShadow=8px
		* Copyright 2015 jQuery Foundation and other contributors; Licensed MIT */
		/* Layout helpers
		----------------------------------*/

		.ui-helper-hidden {
		display: none;
		}

		.ui-helper-hidden-accessible {
		border: 0;
		clip: rect(0 0 0 0);
		height: 1px;
		margin: -1px;
		overflow: hidden;
		padding: 0;
		position: absolute;
		width: 1px;
		}

		.ui-helper-reset {
		margin: 0;
		padding: 0;
		border: 0;
		outline: 0;
		line-height: 1.3;
		text-decoration: none;
		font-size: 100%;
		list-style: none;
		}

		.ui-helper-clearfix:before,
		.ui-helper-clearfix:after {
		content: "";
		display: table;
		border-collapse: collapse;
		}

		.ui-helper-clearfix:after {
		clear: both;
		}

		.ui-helper-clearfix {
		min-height: 0;
		/* support: IE7 */
		}

		.ui-helper-zfix {
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		position: absolute;
		opacity: 0;
		filter: Alpha(Opacity=0);
		/* support: IE8 */
		}

		.ui-front {
		z-index: 100;
		}
		/* Interaction Cues
		----------------------------------*/

		.ui-state-disabled {
		cursor: default !important;
		}
		/* Icons
		----------------------------------*/
		/* states and images */

		.ui-icon {
		display: block;
		text-indent: -99999px;
		overflow: hidden;
		background-repeat: no-repeat;
		}
		/* Misc visuals
		----------------------------------*/
		/* Overlays */

		.ui-widget-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		}

		.ui-accordion .ui-accordion-header {
		display: block;
		cursor: pointer;
		position: relative;
		margin: 2px 0 0 0;
		padding: .5em .5em .5em .7em;
		min-height: 0;
		/* support: IE7 */
		font-size: 100%;
		}

		.ui-accordion .ui-accordion-icons {
		padding-left: 2.2em;
		}

		.ui-accordion .ui-accordion-icons .ui-accordion-icons {
		padding-left: 2.2em;
		}

		.ui-accordion .ui-accordion-header .ui-accordion-header-icon {
		position: absolute;
		left: .5em;
		top: 50%;
		margin-top: -8px;
		}

		.ui-accordion .ui-accordion-content {
		padding: 1em 2.2em;
		border-top: 0;
		overflow: auto;
		}

		.ui-autocomplete {
		position: absolute;
		top: 0;
		left: 0;
		cursor: default;
		}

		.ui-button {
		display: inline-block;
		position: relative;
		padding: 0;
		line-height: normal;
		margin-right: .1em;
		cursor: pointer;
		vertical-align: middle;
		text-align: center;
		overflow: visible;
		/* removes extra width in IE */
		}

		.ui-button,
		.ui-button:link,
		.ui-button:visited,
		.ui-button:hover,
		.ui-button:active {
		text-decoration: none;
		}
		/* to make room for the icon, a width needs to be set here */

		.ui-button-icon-only {
		width: 2.2em;
		}
		/* button elements seem to need a little more width */

		button.ui-button-icon-only {
		width: 2.4em;
		}

		.ui-button-icons-only {
		width: 3.4em;
		}

		button.ui-button-icons-only {
		width: 3.7em;
		}
		/* button text element */

		.ui-button .ui-button-text {
		display: block;
		line-height: normal;
		}

		.ui-button-text-only .ui-button-text {
		padding: .4em 1em;
		}

		.ui-button-icon-only .ui-button-text,
		.ui-button-icons-only .ui-button-text {
		padding: .4em;
		text-indent: -9999999px;
		}

		.ui-button-text-icon-primary .ui-button-text,
		.ui-button-text-icons .ui-button-text {
		padding: .4em 1em .4em 2.1em;
		}

		.ui-button-text-icon-secondary .ui-button-text,
		.ui-button-text-icons .ui-button-text {
		padding: .4em 2.1em .4em 1em;
		}

		.ui-button-text-icons .ui-button-text {
		padding-left: 2.1em;
		padding-right: 2.1em;
		}
		/* no icon support for input elements, provide padding by default */

		input.ui-button {
		padding: .4em 1em;
		}
		/* button icon element(s) */

		.ui-button-icon-only .ui-icon,
		.ui-button-text-icon-primary .ui-icon,
		.ui-button-text-icon-secondary .ui-icon,
		.ui-button-text-icons .ui-icon,
		.ui-button-icons-only .ui-icon {
		position: absolute;
		top: 50%;
		margin-top: -8px;
		}

		.ui-button-icon-only .ui-icon {
		left: 50%;
		margin-left: -8px;
		}

		.ui-button-text-icon-primary .ui-button-icon-primary,
		.ui-button-text-icons .ui-button-icon-primary,
		.ui-button-icons-only .ui-button-icon-primary {
		left: .5em;
		}

		.ui-button-text-icon-secondary .ui-button-icon-secondary,
		.ui-button-text-icons .ui-button-icon-secondary,
		.ui-button-icons-only .ui-button-icon-secondary {
		right: .5em;
		}
		/* button sets */

		.ui-buttonset {
		margin-right: 7px;
		}

		.ui-buttonset .ui-button {
		margin-left: 0;
		margin-right: -.3em;
		}
		/* workarounds */
		/* reset extra padding in Firefox, see h5bp.com/l */

		input.ui-button::-moz-focus-inner,
		button.ui-button::-moz-focus-inner {
		border: 0;
		padding: 0;
		}

		.ui-datepicker {
		width: 17em;
		padding: .2em .2em 0;
		display: none;
		}

		.ui-datepicker .ui-datepicker-header {
		position: relative;
		padding: .2em 0;
		}

		.ui-datepicker .ui-datepicker-prev,
		.ui-datepicker .ui-datepicker-next {
		position: absolute;
		top: 2px;
		width: 1.8em;
		height: 1.8em;
		}

		.ui-datepicker .ui-datepicker-prev-hover,
		.ui-datepicker .ui-datepicker-next-hover {
		top: 1px;
		}

		.ui-datepicker .ui-datepicker-prev {
		left: 2px;
		}

		.ui-datepicker .ui-datepicker-next {
		right: 2px;
		}

		.ui-datepicker .ui-datepicker-prev-hover {
		left: 1px;
		}

		.ui-datepicker .ui-datepicker-next-hover {
		right: 1px;
		}

		.ui-datepicker .ui-datepicker-prev span,
		.ui-datepicker .ui-datepicker-next span {
		display: block;
		position: absolute;
		left: 50%;
		margin-left: -8px;
		top: 50%;
		margin-top: -8px;
		}

		.ui-datepicker .ui-datepicker-title {
		margin: 0 2.3em;
		line-height: 1.8em;
		text-align: center;
		}

		.ui-datepicker .ui-datepicker-title select {
		font-size: 1em;
		margin: 1px 0;
		}

		.ui-datepicker select.ui-datepicker-month,
		.ui-datepicker select.ui-datepicker-year {
		width: 45%;
		}

		.ui-datepicker table {
		width: 100%;
		font-size: .9em;
		border-collapse: collapse;
		margin: 0 0 .4em;
		}

		.ui-datepicker th {
		padding: .7em .3em;
		text-align: center;
		font-weight: bold;
		border: 0;
		}

		.ui-datepicker td {
		border: 0;
		padding: 1px;
		}

		.ui-datepicker td span,
		.ui-datepicker td a {
		display: block;
		padding: .2em;
		text-align: right;
		text-decoration: none;
		}

		.ui-datepicker .ui-datepicker-buttonpane {
		background-image: none;
		margin: .7em 0 0 0;
		padding: 0 .2em;
		border-left: 0;
		border-right: 0;
		border-bottom: 0;
		}

		.ui-datepicker .ui-datepicker-buttonpane button {
		float: right;
		margin: .5em .2em .4em;
		cursor: pointer;
		padding: .2em .6em .3em .6em;
		width: auto;
		overflow: visible;
		}

		.ui-datepicker .ui-datepicker-buttonpane button.ui-datepicker-current {
		float: left;
		}
		/* with multiple calendars */

		.ui-datepicker.ui-datepicker-multi {
		width: auto;
		}

		.ui-datepicker-multi .ui-datepicker-group {
		float: left;
		}

		.ui-datepicker-multi .ui-datepicker-group table {
		width: 95%;
		margin: 0 auto .4em;
		}

		.ui-datepicker-multi-2 .ui-datepicker-group {
		width: 50%;
		}

		.ui-datepicker-multi-3 .ui-datepicker-group {
		width: 33.3%;
		}

		.ui-datepicker-multi-4 .ui-datepicker-group {
		width: 25%;
		}

		.ui-datepicker-multi .ui-datepicker-group-last .ui-datepicker-header,
		.ui-datepicker-multi .ui-datepicker-group-middle .ui-datepicker-header {
		border-left-width: 0;
		}

		.ui-datepicker-multi .ui-datepicker-buttonpane {
		clear: left;
		}

		.ui-datepicker-row-break {
		clear: both;
		width: 100%;
		font-size: 0;
		}
		/* RTL support */

		.ui-datepicker-rtl {
		direction: rtl;
		}

		.ui-datepicker-rtl .ui-datepicker-prev {
		right: 2px;
		left: auto;
		}

		.ui-datepicker-rtl .ui-datepicker-next {
		left: 2px;
		right: auto;
		}

		.ui-datepicker-rtl .ui-datepicker-prev:hover {
		right: 1px;
		left: auto;
		}

		.ui-datepicker-rtl .ui-datepicker-next:hover {
		left: 1px;
		right: auto;
		}

		.ui-datepicker-rtl .ui-datepicker-buttonpane {
		clear: right;
		}

		.ui-datepicker-rtl .ui-datepicker-buttonpane button {
		float: left;
		}

		.ui-datepicker-rtl .ui-datepicker-buttonpane button.ui-datepicker-current,
		.ui-datepicker-rtl .ui-datepicker-group {
		float: right;
		}

		.ui-datepicker-rtl .ui-datepicker-group-last .ui-datepicker-header,
		.ui-datepicker-rtl .ui-datepicker-group-middle .ui-datepicker-header {
		border-right-width: 0;
		border-left-width: 1px;
		}

		.ui-dialog {
		overflow: hidden;
		position: absolute;
		top: 0;
		left: 0;
		padding: .2em;
		outline: 0;
		}

		.ui-dialog .ui-dialog-titlebar {
		padding: .4em 1em;
		position: relative;
		}

		.ui-dialog .ui-dialog-title {
		float: left;
		margin: .1em 0;
		white-space: nowrap;
		width: 90%;
		overflow: hidden;
		text-overflow: ellipsis;
		}

		.ui-dialog .ui-dialog-titlebar-close {
		position: absolute;
		right: .3em;
		top: 50%;
		width: 20px;
		margin: -10px 0 0 0;
		padding: 1px;
		height: 20px;
		}

		.ui-dialog .ui-dialog-content {
		position: relative;
		border: 0;
		padding: .5em 1em;
		background: none;
		overflow: auto;
		}

		.ui-dialog .ui-dialog-buttonpane {
		text-align: left;
		border-width: 1px 0 0 0;
		background-image: none;
		margin-top: .5em;
		padding: .3em 1em .5em .4em;
		}

		.ui-dialog .ui-dialog-buttonpane .ui-dialog-buttonset {
		float: right;
		}

		.ui-dialog .ui-dialog-buttonpane button {
		margin: .5em .4em .5em 0;
		cursor: pointer;
		}

		.ui-dialog .ui-resizable-se {
		width: 12px;
		height: 12px;
		right: -5px;
		bottom: -5px;
		background-position: 16px 16px;
		}

		.ui-draggable .ui-dialog-titlebar {
		cursor: move;
		}

		.ui-draggable-handle {
		-ms-touch-action: none;
		touch-action: none;
		}

		.ui-menu {
		list-style: none;
		padding: 0;
		margin: 0;
		display: block;
		outline: none;
		}

		.ui-menu .ui-menu {
		position: absolute;
		}

		.ui-menu .ui-menu-item {
		position: relative;
		margin: 0;
		padding: 3px 1em 3px .4em;
		cursor: pointer;
		min-height: 0;
		/* support: IE7 */
		/* support: IE10, see #8844 */
		list-style-image: url("data:image/gif;base64,R0lGODlhAQABAIAAAAAAAP///yH5BAEAAAAALAAAAAABAAEAAAIBRAA7");
		}

		.ui-menu .ui-menu-divider {
		margin: 5px 0;
		height: 0;
		font-size: 0;
		line-height: 0;
		border-width: 1px 0 0 0;
		}

		.ui-menu .ui-state-focus,
		.ui-menu .ui-state-active {
		margin: -1px;
		}
		/* icon support */

		.ui-menu-icons {
		position: relative;
		}

		.ui-menu-icons .ui-menu-item {
		padding-left: 2em;
		}
		/* left-aligned */

		.ui-menu .ui-icon {
		position: absolute;
		top: 0;
		bottom: 0;
		left: .2em;
		margin: auto 0;
		}
		/* right-aligned */

		.ui-menu .ui-menu-icon {
		left: auto;
		right: 0;
		}

		.ui-progressbar {
		height: 2em;
		text-align: left;
		overflow: hidden;
		}

		.ui-progressbar .ui-progressbar-value {
		margin: -1px;
		height: 100%;
		}

		.ui-progressbar .ui-progressbar-overlay {
		background: url("data:image/gif;base64,R0lGODlhKAAoAIABAAAAAP///yH/C05FVFNDQVBFMi4wAwEAAAAh+QQJAQABACwAAAAAKAAoAAACkYwNqXrdC52DS06a7MFZI+4FHBCKoDeWKXqymPqGqxvJrXZbMx7Ttc+w9XgU2FB3lOyQRWET2IFGiU9m1frDVpxZZc6bfHwv4c1YXP6k1Vdy292Fb6UkuvFtXpvWSzA+HycXJHUXiGYIiMg2R6W459gnWGfHNdjIqDWVqemH2ekpObkpOlppWUqZiqr6edqqWQAAIfkECQEAAQAsAAAAACgAKAAAApSMgZnGfaqcg1E2uuzDmmHUBR8Qil95hiPKqWn3aqtLsS18y7G1SzNeowWBENtQd+T1JktP05nzPTdJZlR6vUxNWWjV+vUWhWNkWFwxl9VpZRedYcflIOLafaa28XdsH/ynlcc1uPVDZxQIR0K25+cICCmoqCe5mGhZOfeYSUh5yJcJyrkZWWpaR8doJ2o4NYq62lAAACH5BAkBAAEALAAAAAAoACgAAAKVDI4Yy22ZnINRNqosw0Bv7i1gyHUkFj7oSaWlu3ovC8GxNso5fluz3qLVhBVeT/Lz7ZTHyxL5dDalQWPVOsQWtRnuwXaFTj9jVVh8pma9JjZ4zYSj5ZOyma7uuolffh+IR5aW97cHuBUXKGKXlKjn+DiHWMcYJah4N0lYCMlJOXipGRr5qdgoSTrqWSq6WFl2ypoaUAAAIfkECQEAAQAsAAAAACgAKAAAApaEb6HLgd/iO7FNWtcFWe+ufODGjRfoiJ2akShbueb0wtI50zm02pbvwfWEMWBQ1zKGlLIhskiEPm9R6vRXxV4ZzWT2yHOGpWMyorblKlNp8HmHEb/lCXjcW7bmtXP8Xt229OVWR1fod2eWqNfHuMjXCPkIGNileOiImVmCOEmoSfn3yXlJWmoHGhqp6ilYuWYpmTqKUgAAIfkECQEAAQAsAAAAACgAKAAAApiEH6kb58biQ3FNWtMFWW3eNVcojuFGfqnZqSebuS06w5V80/X02pKe8zFwP6EFWOT1lDFk8rGERh1TTNOocQ61Hm4Xm2VexUHpzjymViHrFbiELsefVrn6XKfnt2Q9G/+Xdie499XHd2g4h7ioOGhXGJboGAnXSBnoBwKYyfioubZJ2Hn0RuRZaflZOil56Zp6iioKSXpUAAAh+QQJAQABACwAAAAAKAAoAAACkoQRqRvnxuI7kU1a1UU5bd5tnSeOZXhmn5lWK3qNTWvRdQxP8qvaC+/yaYQzXO7BMvaUEmJRd3TsiMAgswmNYrSgZdYrTX6tSHGZO73ezuAw2uxuQ+BbeZfMxsexY35+/Qe4J1inV0g4x3WHuMhIl2jXOKT2Q+VU5fgoSUI52VfZyfkJGkha6jmY+aaYdirq+lQAACH5BAkBAAEALAAAAAAoACgAAAKWBIKpYe0L3YNKToqswUlvznigd4wiR4KhZrKt9Upqip61i9E3vMvxRdHlbEFiEXfk9YARYxOZZD6VQ2pUunBmtRXo1Lf8hMVVcNl8JafV38aM2/Fu5V16Bn63r6xt97j09+MXSFi4BniGFae3hzbH9+hYBzkpuUh5aZmHuanZOZgIuvbGiNeomCnaxxap2upaCZsq+1kAACH5BAkBAAEALAAAAAAoACgAAAKXjI8By5zf4kOxTVrXNVlv1X0d8IGZGKLnNpYtm8Lr9cqVeuOSvfOW79D9aDHizNhDJidFZhNydEahOaDH6nomtJjp1tutKoNWkvA6JqfRVLHU/QUfau9l2x7G54d1fl995xcIGAdXqMfBNadoYrhH+Mg2KBlpVpbluCiXmMnZ2Sh4GBqJ+ckIOqqJ6LmKSllZmsoq6wpQAAAh+QQJAQABACwAAAAAKAAoAAAClYx/oLvoxuJDkU1a1YUZbJ59nSd2ZXhWqbRa2/gF8Gu2DY3iqs7yrq+xBYEkYvFSM8aSSObE+ZgRl1BHFZNr7pRCavZ5BW2142hY3AN/zWtsmf12p9XxxFl2lpLn1rseztfXZjdIWIf2s5dItwjYKBgo9yg5pHgzJXTEeGlZuenpyPmpGQoKOWkYmSpaSnqKileI2FAAACH5BAkBAAEALAAAAAAoACgAAAKVjB+gu+jG4kORTVrVhRlsnn2dJ3ZleFaptFrb+CXmO9OozeL5VfP99HvAWhpiUdcwkpBH3825AwYdU8xTqlLGhtCosArKMpvfa1mMRae9VvWZfeB2XfPkeLmm18lUcBj+p5dnN8jXZ3YIGEhYuOUn45aoCDkp16hl5IjYJvjWKcnoGQpqyPlpOhr3aElaqrq56Bq7VAAAOw==");
		height: 100%;
		filter: alpha(opacity=25);
		/* support: IE8 */
		opacity: 0.25;
		}

		.ui-progressbar-indeterminate .ui-progressbar-value {
		background-image: none;
		}

		.ui-resizable {
		position: relative;
		}

		.ui-resizable-handle {
		position: absolute;
		font-size: 0.1px;
		display: block;
		-ms-touch-action: none;
		touch-action: none;
		}

		.ui-resizable-disabled .ui-resizable-handle,
		.ui-resizable-autohide .ui-resizable-handle {
		display: none;
		}

		.ui-resizable-n {
		cursor: n-resize;
		height: 7px;
		width: 100%;
		top: -5px;
		left: 0;
		}

		.ui-resizable-s {
		cursor: s-resize;
		height: 7px;
		width: 100%;
		bottom: -5px;
		left: 0;
		}

		.ui-resizable-e {
		cursor: e-resize;
		width: 7px;
		right: -5px;
		top: 0;
		height: 100%;
		}

		.ui-resizable-w {
		cursor: w-resize;
		width: 7px;
		left: -5px;
		top: 0;
		height: 100%;
		}

		.ui-resizable-se {
		cursor: se-resize;
		width: 12px;
		height: 12px;
		right: 1px;
		bottom: 1px;
		}

		.ui-resizable-sw {
		cursor: sw-resize;
		width: 9px;
		height: 9px;
		left: -5px;
		bottom: -5px;
		}

		.ui-resizable-nw {
		cursor: nw-resize;
		width: 9px;
		height: 9px;
		left: -5px;
		top: -5px;
		}

		.ui-resizable-ne {
		cursor: ne-resize;
		width: 9px;
		height: 9px;
		right: -5px;
		top: -5px;
		}

		.ui-selectable {
		-ms-touch-action: none;
		touch-action: none;
		}

		.ui-selectable-helper {
		position: absolute;
		z-index: 100;
		border: 1px dotted black;
		}

		.ui-selectmenu-menu {
		padding: 0;
		margin: 0;
		position: absolute;
		top: 0;
		left: 0;
		display: none;
		}

		.ui-selectmenu-menu .ui-menu {
		overflow: auto;
		/* Support: IE7 */
		overflow-x: hidden;
		padding-bottom: 1px;
		}

		.ui-selectmenu-menu .ui-menu .ui-selectmenu-optgroup {
		font-size: 1em;
		font-weight: bold;
		line-height: 1.5;
		padding: 2px 0.4em;
		margin: 0.5em 0 0 0;
		height: auto;
		border: 0;
		}

		.ui-selectmenu-open {
		display: block;
		}

		.ui-selectmenu-button {
		display: inline-block;
		overflow: hidden;
		position: relative;
		text-decoration: none;
		cursor: pointer;
		}

		.ui-selectmenu-button span.ui-icon {
		right: 0.5em;
		left: auto;
		margin-top: -8px;
		position: absolute;
		top: 50%;
		}

		.ui-selectmenu-button span.ui-selectmenu-text {
		text-align: left;
		padding: 0.4em 2.1em 0.4em 1em;
		display: block;
		line-height: 1.4;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: nowrap;
		}

		.ui-slider {
		position: relative;
		text-align: left;
		}

		.ui-slider .ui-slider-handle {
		position: absolute;
		z-index: 2;
		width: 1.2em;
		height: 1.2em;
		cursor: default;
		-ms-touch-action: none;
		touch-action: none;
		}

		.ui-slider .ui-slider-range {
		position: absolute;
		z-index: 1;
		font-size: .7em;
		display: block;
		border: 0;
		background-position: 0 0;
		}
		/* support: IE8 - See #6727 */

		.ui-slider.ui-state-disabled .ui-slider-handle,
		.ui-slider.ui-state-disabled .ui-slider-range {
		filter: inherit;
		}

		.ui-slider-horizontal {
		height: .8em;
		}

		.ui-slider-horizontal .ui-slider-handle {
		top: -.3em;
		margin-left: -.6em;
		}

		.ui-slider-horizontal .ui-slider-range {
		top: 0;
		height: 100%;
		}

		.ui-slider-horizontal .ui-slider-range-min {
		left: 0;
		}

		.ui-slider-horizontal .ui-slider-range-max {
		right: 0;
		}

		.ui-slider-vertical {
		width: .8em;
		height: 100px;
		}

		.ui-slider-vertical .ui-slider-handle {
		left: -.3em;
		margin-left: 0;
		margin-bottom: -.6em;
		}

		.ui-slider-vertical .ui-slider-range {
		left: 0;
		width: 100%;
		}

		.ui-slider-vertical .ui-slider-range-min {
		bottom: 0;
		}

		.ui-slider-vertical .ui-slider-range-max {
		top: 0;
		}

		.ui-sortable-handle {
		-ms-touch-action: none;
		touch-action: none;
		}

		.ui-spinner {
		position: relative;
		display: inline-block;
		overflow: hidden;
		padding: 0;
		vertical-align: middle;
		}

		.ui-spinner-input {
		border: none;
		background: none;
		color: inherit;
		padding: 0;
		margin: .2em 0;
		vertical-align: middle;
		margin-left: .4em;
		margin-right: 22px;
		}

		.ui-spinner-button {
		width: 16px;
		height: 50%;
		font-size: .5em;
		padding: 0;
		margin: 0;
		text-align: center;
		position: absolute;
		cursor: default;
		display: block;
		overflow: hidden;
		right: 0;
		}
		/* more specificity required here to override default borders */

		.ui-spinner a.ui-spinner-button {
		border-top: none;
		border-bottom: none;
		border-right: none;
		}
		/* vertically center icon */

		.ui-spinner .ui-icon {
		position: absolute;
		margin-top: -8px;
		top: 50%;
		left: 0;
		}

		.ui-spinner-up {
		top: 0;
		}

		.ui-spinner-down {
		bottom: 0;
		}
		/* TR overrides */

		.ui-spinner .ui-icon-triangle-1-s {
		/* need to fix icons sprite */
		background-position: -65px -16px;
		}

		.ui-tabs {
		position: relative;
		/* position: relative prevents IE scroll bug (element with position: relative inside container with overflow: auto appear as "fixed") */
		padding: .2em;
		}

		.ui-tabs .ui-tabs-nav {
		margin: 0;
		padding: .2em .2em 0;
		}

		.ui-tabs .ui-tabs-nav li {
		list-style: none;
		float: left;
		position: relative;
		top: 0;
		margin: 1px .2em 0 0;
		border-bottom-width: 0;
		padding: 0;
		white-space: nowrap;
		}

		.ui-tabs .ui-tabs-nav .ui-tabs-anchor {
		float: left;
		padding: .5em 1em;
		text-decoration: none;
		}

		.ui-tabs .ui-tabs-nav li.ui-tabs-active {
		margin-bottom: -1px;
		padding-bottom: 1px;
		}

		.ui-tabs .ui-tabs-nav li.ui-tabs-active .ui-tabs-anchor,
		.ui-tabs .ui-tabs-nav li.ui-state-disabled .ui-tabs-anchor,
		.ui-tabs .ui-tabs-nav li.ui-tabs-loading .ui-tabs-anchor {
		cursor: text;
		}

		.ui-tabs-collapsible .ui-tabs-nav li.ui-tabs-active .ui-tabs-anchor {
		cursor: pointer;
		}

		.ui-tabs .ui-tabs-panel {
		display: block;
		border-width: 0;
		padding: 1em 1.4em;
		background: none;
		}

		.ui-tooltip {
		padding: 8px;
		position: absolute;
		z-index: 9999;
		max-width: 300px;
		-webkit-box-shadow: 0 0 5px #aaa;
		box-shadow: 0 0 5px #aaa;
		}

		body .ui-tooltip {
		border-width: 2px;
		}
		/* Component containers
		----------------------------------*/

		.ui-widget {
		font-family: Verdana, Arial, sans-serif;
		font-size: 1.1em;
		}

		.ui-widget .ui-widget {
		font-size: 1em;
		}

		.ui-widget input,
		.ui-widget select,
		.ui-widget textarea,
		.ui-widget button {
		font-family: Verdana, Arial, sans-serif;
		font-size: 1em;
		}

		.ui-widget-content {
		border: 1px solid #aaaaaa;
		background: #ffffff url("images/ui-bg_flat_75_ffffff_40x100.png") 50% 50% repeat-x;
		color: #222222;
		}

		.ui-widget-content a {
		color: #222222;
		}

		.ui-widget-header {
		border: 1px solid #aaaaaa;
		background: #cccccc url("images/ui-bg_highlight-soft_75_cccccc_1x100.png") 50% 50% repeat-x;
		color: #222222;
		font-weight: bold;
		}

		.ui-widget-header a {
		color: #222222;
		}
		/* Interaction states
		----------------------------------*/

		.ui-state-default,
		.ui-widget-content .ui-state-default,
		.ui-widget-header .ui-state-default {
		border: 1px solid #d3d3d3;
		background: #e6e6e6 url("images/ui-bg_glass_75_e6e6e6_1x400.png") 50% 50% repeat-x;
		font-weight: normal;
		color: #555555;
		}

		.ui-state-default a,
		.ui-state-default a:link,
		.ui-state-default a:visited {
		color: #555555;
		text-decoration: none;
		}

		.ui-state-hover,
		.ui-widget-content .ui-state-hover,
		.ui-widget-header .ui-state-hover,
		.ui-state-focus,
		.ui-widget-content .ui-state-focus,
		.ui-widget-header .ui-state-focus {
		border: 1px solid #999999;
		background: #dadada url("images/ui-bg_glass_75_dadada_1x400.png") 50% 50% repeat-x;
		font-weight: normal;
		color: #212121;
		}

		.ui-state-hover a,
		.ui-state-hover a:hover,
		.ui-state-hover a:link,
		.ui-state-hover a:visited,
		.ui-state-focus a,
		.ui-state-focus a:hover,
		.ui-state-focus a:link,
		.ui-state-focus a:visited {
		color: #212121;
		text-decoration: none;
		}

		.ui-state-active,
		.ui-widget-content .ui-state-active,
		.ui-widget-header .ui-state-active {
		border: 1px solid #aaaaaa;
		background: #ffffff url("images/ui-bg_glass_65_ffffff_1x400.png") 50% 50% repeat-x;
		font-weight: normal;
		color: #212121;
		}

		.ui-state-active a,
		.ui-state-active a:link,
		.ui-state-active a:visited {
		color: #212121;
		text-decoration: none;
		}
		/* Interaction Cues
		----------------------------------*/

		.ui-state-highlight,
		.ui-widget-content .ui-state-highlight,
		.ui-widget-header .ui-state-highlight {
		border: 1px solid #fcefa1;
		background: #fbf9ee url("images/ui-bg_glass_55_fbf9ee_1x400.png") 50% 50% repeat-x;
		color: #363636;
		}

		.ui-state-highlight a,
		.ui-widget-content .ui-state-highlight a,
		.ui-widget-header .ui-state-highlight a {
		color: #363636;
		}

		.ui-state-error,
		.ui-widget-content .ui-state-error,
		.ui-widget-header .ui-state-error {
		border: 1px solid #cd0a0a;
		background: #fef1ec url("images/ui-bg_glass_95_fef1ec_1x400.png") 50% 50% repeat-x;
		color: #cd0a0a;
		}

		.ui-state-error a,
		.ui-widget-content .ui-state-error a,
		.ui-widget-header .ui-state-error a {
		color: #cd0a0a;
		}

		.ui-state-error-text,
		.ui-widget-content .ui-state-error-text,
		.ui-widget-header .ui-state-error-text {
		color: #cd0a0a;
		}

		.ui-priority-primary,
		.ui-widget-content .ui-priority-primary,
		.ui-widget-header .ui-priority-primary {
		font-weight: bold;
		}

		.ui-priority-secondary,
		.ui-widget-content .ui-priority-secondary,
		.ui-widget-header .ui-priority-secondary {
		opacity: .7;
		filter: Alpha(Opacity=70);
		/* support: IE8 */
		font-weight: normal;
		}

		.ui-state-disabled,
		.ui-widget-content .ui-state-disabled,
		.ui-widget-header .ui-state-disabled {
		opacity: .35;
		filter: Alpha(Opacity=35);
		/* support: IE8 */
		background-image: none;
		}

		.ui-state-disabled .ui-icon {
		filter: Alpha(Opacity=35);
		/* support: IE8 - See #6059 */
		}
		/* Icons
		----------------------------------*/
		/* states and images */

		.ui-icon {
		width: 16px;
		height: 16px;
		}

		.ui-icon,
		.ui-widget-content .ui-icon {
		background-image: url("images/ui-icons_222222_256x240.png");
		}

		.ui-widget-header .ui-icon {
		background-image: url("images/ui-icons_222222_256x240.png");
		}

		.ui-state-default .ui-icon {
		background-image: url("images/ui-icons_888888_256x240.png");
		}

		.ui-state-hover .ui-icon,
		.ui-state-focus .ui-icon {
		background-image: url("images/ui-icons_454545_256x240.png");
		}

		.ui-state-active .ui-icon {
		background-image: url("images/ui-icons_454545_256x240.png");
		}

		.ui-state-highlight .ui-icon {
		background-image: url("images/ui-icons_2e83ff_256x240.png");
		}

		.ui-state-error .ui-icon,
		.ui-state-error-text .ui-icon {
		background-image: url("images/ui-icons_cd0a0a_256x240.png");
		}
		/* positioning */

		.ui-icon-blank {
		background-position: 16px 16px;
		}

		.ui-icon-carat-1-n {
		background-position: 0 0;
		}

		.ui-icon-carat-1-ne {
		background-position: -16px 0;
		}

		.ui-icon-carat-1-e {
		background-position: -32px 0;
		}

		.ui-icon-carat-1-se {
		background-position: -48px 0;
		}

		.ui-icon-carat-1-s {
		background-position: -64px 0;
		}

		.ui-icon-carat-1-sw {
		background-position: -80px 0;
		}

		.ui-icon-carat-1-w {
		background-position: -96px 0;
		}

		.ui-icon-carat-1-nw {
		background-position: -112px 0;
		}

		.ui-icon-carat-2-n-s {
		background-position: -128px 0;
		}

		.ui-icon-carat-2-e-w {
		background-position: -144px 0;
		}

		.ui-icon-triangle-1-n {
		background-position: 0 -16px;
		}

		.ui-icon-triangle-1-ne {
		background-position: -16px -16px;
		}

		.ui-icon-triangle-1-e {
		background-position: -32px -16px;
		}

		.ui-icon-triangle-1-se {
		background-position: -48px -16px;
		}

		.ui-icon-triangle-1-s {
		background-position: -64px -16px;
		}

		.ui-icon-triangle-1-sw {
		background-position: -80px -16px;
		}

		.ui-icon-triangle-1-w {
		background-position: -96px -16px;
		}

		.ui-icon-triangle-1-nw {
		background-position: -112px -16px;
		}

		.ui-icon-triangle-2-n-s {
		background-position: -128px -16px;
		}

		.ui-icon-triangle-2-e-w {
		background-position: -144px -16px;
		}

		.ui-icon-arrow-1-n {
		background-position: 0 -32px;
		}

		.ui-icon-arrow-1-ne {
		background-position: -16px -32px;
		}

		.ui-icon-arrow-1-e {
		background-position: -32px -32px;
		}

		.ui-icon-arrow-1-se {
		background-position: -48px -32px;
		}

		.ui-icon-arrow-1-s {
		background-position: -64px -32px;
		}

		.ui-icon-arrow-1-sw {
		background-position: -80px -32px;
		}

		.ui-icon-arrow-1-w {
		background-position: -96px -32px;
		}

		.ui-icon-arrow-1-nw {
		background-position: -112px -32px;
		}

		.ui-icon-arrow-2-n-s {
		background-position: -128px -32px;
		}

		.ui-icon-arrow-2-ne-sw {
		background-position: -144px -32px;
		}

		.ui-icon-arrow-2-e-w {
		background-position: -160px -32px;
		}

		.ui-icon-arrow-2-se-nw {
		background-position: -176px -32px;
		}

		.ui-icon-arrowstop-1-n {
		background-position: -192px -32px;
		}

		.ui-icon-arrowstop-1-e {
		background-position: -208px -32px;
		}

		.ui-icon-arrowstop-1-s {
		background-position: -224px -32px;
		}

		.ui-icon-arrowstop-1-w {
		background-position: -240px -32px;
		}

		.ui-icon-arrowthick-1-n {
		background-position: 0 -48px;
		}

		.ui-icon-arrowthick-1-ne {
		background-position: -16px -48px;
		}

		.ui-icon-arrowthick-1-e {
		background-position: -32px -48px;
		}

		.ui-icon-arrowthick-1-se {
		background-position: -48px -48px;
		}

		.ui-icon-arrowthick-1-s {
		background-position: -64px -48px;
		}

		.ui-icon-arrowthick-1-sw {
		background-position: -80px -48px;
		}

		.ui-icon-arrowthick-1-w {
		background-position: -96px -48px;
		}

		.ui-icon-arrowthick-1-nw {
		background-position: -112px -48px;
		}

		.ui-icon-arrowthick-2-n-s {
		background-position: -128px -48px;
		}

		.ui-icon-arrowthick-2-ne-sw {
		background-position: -144px -48px;
		}

		.ui-icon-arrowthick-2-e-w {
		background-position: -160px -48px;
		}

		.ui-icon-arrowthick-2-se-nw {
		background-position: -176px -48px;
		}

		.ui-icon-arrowthickstop-1-n {
		background-position: -192px -48px;
		}

		.ui-icon-arrowthickstop-1-e {
		background-position: -208px -48px;
		}

		.ui-icon-arrowthickstop-1-s {
		background-position: -224px -48px;
		}

		.ui-icon-arrowthickstop-1-w {
		background-position: -240px -48px;
		}

		.ui-icon-arrowreturnthick-1-w {
		background-position: 0 -64px;
		}

		.ui-icon-arrowreturnthick-1-n {
		background-position: -16px -64px;
		}

		.ui-icon-arrowreturnthick-1-e {
		background-position: -32px -64px;
		}

		.ui-icon-arrowreturnthick-1-s {
		background-position: -48px -64px;
		}

		.ui-icon-arrowreturn-1-w {
		background-position: -64px -64px;
		}

		.ui-icon-arrowreturn-1-n {
		background-position: -80px -64px;
		}

		.ui-icon-arrowreturn-1-e {
		background-position: -96px -64px;
		}

		.ui-icon-arrowreturn-1-s {
		background-position: -112px -64px;
		}

		.ui-icon-arrowrefresh-1-w {
		background-position: -128px -64px;
		}

		.ui-icon-arrowrefresh-1-n {
		background-position: -144px -64px;
		}

		.ui-icon-arrowrefresh-1-e {
		background-position: -160px -64px;
		}

		.ui-icon-arrowrefresh-1-s {
		background-position: -176px -64px;
		}

		.ui-icon-arrow-4 {
		background-position: 0 -80px;
		}

		.ui-icon-arrow-4-diag {
		background-position: -16px -80px;
		}

		.ui-icon-extlink {
		background-position: -32px -80px;
		}

		.ui-icon-newwin {
		background-position: -48px -80px;
		}

		.ui-icon-refresh {
		background-position: -64px -80px;
		}

		.ui-icon-shuffle {
		background-position: -80px -80px;
		}

		.ui-icon-transfer-e-w {
		background-position: -96px -80px;
		}

		.ui-icon-transferthick-e-w {
		background-position: -112px -80px;
		}

		.ui-icon-folder-collapsed {
		background-position: 0 -96px;
		}

		.ui-icon-folder-open {
		background-position: -16px -96px;
		}

		.ui-icon-document {
		background-position: -32px -96px;
		}

		.ui-icon-document-b {
		background-position: -48px -96px;
		}

		.ui-icon-note {
		background-position: -64px -96px;
		}

		.ui-icon-mail-closed {
		background-position: -80px -96px;
		}

		.ui-icon-mail-open {
		background-position: -96px -96px;
		}

		.ui-icon-suitcase {
		background-position: -112px -96px;
		}

		.ui-icon-comment {
		background-position: -128px -96px;
		}

		.ui-icon-person {
		background-position: -144px -96px;
		}

		.ui-icon-print {
		background-position: -160px -96px;
		}

		.ui-icon-trash {
		background-position: -176px -96px;
		}

		.ui-icon-locked {
		background-position: -192px -96px;
		}

		.ui-icon-unlocked {
		background-position: -208px -96px;
		}

		.ui-icon-bookmark {
		background-position: -224px -96px;
		}

		.ui-icon-tag {
		background-position: -240px -96px;
		}

		.ui-icon-home {
		background-position: 0 -112px;
		}

		.ui-icon-flag {
		background-position: -16px -112px;
		}

		.ui-icon-calendar {
		background-position: -32px -112px;
		}

		.ui-icon-cart {
		background-position: -48px -112px;
		}

		.ui-icon-pencil {
		background-position: -64px -112px;
		}

		.ui-icon-clock {
		background-position: -80px -112px;
		}

		.ui-icon-disk {
		background-position: -96px -112px;
		}

		.ui-icon-calculator {
		background-position: -112px -112px;
		}

		.ui-icon-zoomin {
		background-position: -128px -112px;
		}

		.ui-icon-zoomout {
		background-position: -144px -112px;
		}

		.ui-icon-search {
		background-position: -160px -112px;
		}

		.ui-icon-wrench {
		background-position: -176px -112px;
		}

		.ui-icon-gear {
		background-position: -192px -112px;
		}

		.ui-icon-heart {
		background-position: -208px -112px;
		}

		.ui-icon-star {
		background-position: -224px -112px;
		}

		.ui-icon-link {
		background-position: -240px -112px;
		}

		.ui-icon-cancel {
		background-position: 0 -128px;
		}

		.ui-icon-plus {
		background-position: -16px -128px;
		}

		.ui-icon-plusthick {
		background-position: -32px -128px;
		}

		.ui-icon-minus {
		background-position: -48px -128px;
		}

		.ui-icon-minusthick {
		background-position: -64px -128px;
		}

		.ui-icon-close {
		background-position: -80px -128px;
		}

		.ui-icon-closethick {
		background-position: -96px -128px;
		}

		.ui-icon-key {
		background-position: -112px -128px;
		}

		.ui-icon-lightbulb {
		background-position: -128px -128px;
		}

		.ui-icon-scissors {
		background-position: -144px -128px;
		}

		.ui-icon-clipboard {
		background-position: -160px -128px;
		}

		.ui-icon-copy {
		background-position: -176px -128px;
		}

		.ui-icon-contact {
		background-position: -192px -128px;
		}

		.ui-icon-image {
		background-position: -208px -128px;
		}

		.ui-icon-video {
		background-position: -224px -128px;
		}

		.ui-icon-script {
		background-position: -240px -128px;
		}

		.ui-icon-alert {
		background-position: 0 -144px;
		}

		.ui-icon-info {
		background-position: -16px -144px;
		}

		.ui-icon-notice {
		background-position: -32px -144px;
		}

		.ui-icon-help {
		background-position: -48px -144px;
		}

		.ui-icon-check {
		background-position: -64px -144px;
		}

		.ui-icon-bullet {
		background-position: -80px -144px;
		}

		.ui-icon-radio-on {
		background-position: -96px -144px;
		}

		.ui-icon-radio-off {
		background-position: -112px -144px;
		}

		.ui-icon-pin-w {
		background-position: -128px -144px;
		}

		.ui-icon-pin-s {
		background-position: -144px -144px;
		}

		.ui-icon-play {
		background-position: 0 -160px;
		}

		.ui-icon-pause {
		background-position: -16px -160px;
		}

		.ui-icon-seek-next {
		background-position: -32px -160px;
		}

		.ui-icon-seek-prev {
		background-position: -48px -160px;
		}

		.ui-icon-seek-end {
		background-position: -64px -160px;
		}

		.ui-icon-seek-start {
		background-position: -80px -160px;
		}
		/* ui-icon-seek-first is deprecated, use ui-icon-seek-start instead */

		.ui-icon-seek-first {
		background-position: -80px -160px;
		}

		.ui-icon-stop {
		background-position: -96px -160px;
		}

		.ui-icon-eject {
		background-position: -112px -160px;
		}

		.ui-icon-volume-off {
		background-position: -128px -160px;
		}

		.ui-icon-volume-on {
		background-position: -144px -160px;
		}

		.ui-icon-power {
		background-position: 0 -176px;
		}

		.ui-icon-signal-diag {
		background-position: -16px -176px;
		}

		.ui-icon-signal {
		background-position: -32px -176px;
		}

		.ui-icon-battery-0 {
		background-position: -48px -176px;
		}

		.ui-icon-battery-1 {
		background-position: -64px -176px;
		}

		.ui-icon-battery-2 {
		background-position: -80px -176px;
		}

		.ui-icon-battery-3 {
		background-position: -96px -176px;
		}

		.ui-icon-circle-plus {
		background-position: 0 -192px;
		}

		.ui-icon-circle-minus {
		background-position: -16px -192px;
		}

		.ui-icon-circle-close {
		background-position: -32px -192px;
		}

		.ui-icon-circle-triangle-e {
		background-position: -48px -192px;
		}

		.ui-icon-circle-triangle-s {
		background-position: -64px -192px;
		}

		.ui-icon-circle-triangle-w {
		background-position: -80px -192px;
		}

		.ui-icon-circle-triangle-n {
		background-position: -96px -192px;
		}

		.ui-icon-circle-arrow-e {
		background-position: -112px -192px;
		}

		.ui-icon-circle-arrow-s {
		background-position: -128px -192px;
		}

		.ui-icon-circle-arrow-w {
		background-position: -144px -192px;
		}

		.ui-icon-circle-arrow-n {
		background-position: -160px -192px;
		}

		.ui-icon-circle-zoomin {
		background-position: -176px -192px;
		}

		.ui-icon-circle-zoomout {
		background-position: -192px -192px;
		}

		.ui-icon-circle-check {
		background-position: -208px -192px;
		}

		.ui-icon-circlesmall-plus {
		background-position: 0 -208px;
		}

		.ui-icon-circlesmall-minus {
		background-position: -16px -208px;
		}

		.ui-icon-circlesmall-close {
		background-position: -32px -208px;
		}

		.ui-icon-squaresmall-plus {
		background-position: -48px -208px;
		}

		.ui-icon-squaresmall-minus {
		background-position: -64px -208px;
		}

		.ui-icon-squaresmall-close {
		background-position: -80px -208px;
		}

		.ui-icon-grip-dotted-vertical {
		background-position: 0 -224px;
		}

		.ui-icon-grip-dotted-horizontal {
		background-position: -16px -224px;
		}

		.ui-icon-grip-solid-vertical {
		background-position: -32px -224px;
		}

		.ui-icon-grip-solid-horizontal {
		background-position: -48px -224px;
		}

		.ui-icon-gripsmall-diagonal-se {
		background-position: -64px -224px;
		}

		.ui-icon-grip-diagonal-se {
		background-position: -80px -224px;
		}
		/* Misc visuals
		----------------------------------*/
		/* Corner radius */

		.ui-corner-all,
		.ui-corner-top,
		.ui-corner-left,
		.ui-corner-tl {
		border-top-left-radius: 4px;
		}

		.ui-corner-all,
		.ui-corner-top,
		.ui-corner-right,
		.ui-corner-tr {
		border-top-right-radius: 4px;
		}

		.ui-corner-all,
		.ui-corner-bottom,
		.ui-corner-left,
		.ui-corner-bl {
		border-bottom-left-radius: 4px;
		}

		.ui-corner-all,
		.ui-corner-bottom,
		.ui-corner-right,
		.ui-corner-br {
		border-bottom-right-radius: 4px;
		}
		/* Overlays */

		.ui-widget-overlay {
		background: #aaaaaa url("images/ui-bg_flat_0_aaaaaa_40x100.png") 50% 50% repeat-x;
		opacity: .3;
		filter: Alpha(Opacity=30);
		/* support: IE8 */
		}

		.ui-widget-shadow {
		margin: -8px 0 0 -8px;
		padding: 8px;
		background: #aaaaaa url("images/ui-bg_flat_0_aaaaaa_40x100.png") 50% 50% repeat-x;
		opacity: .3;
		filter: Alpha(Opacity=30);
		/* support: IE8 */
		border-radius: 8px;
		}
		/*Grid*/

		.ui-jqgrid {
		position: relative;
		border: 1px solid #ddd;
		/*default*/
		-webkit-border-radius: 3px;
		-moz-border-radius: 3px;
		border-radius: 3px;
		}

		.ui-jqgrid .ui-jqgrid-view {
		position: relative;
		left: 0;
		top: 0;
		padding: 0;
		}

		.ui-jqgrid .ui-common-table {}
		/* Caption*/

		.ui-jqgrid .ui-jqgrid-titlebar {
		font-weight: normal;
		min-height: 37px;
		padding: 4px 8px;
		position: relative;
		margin-right: 2px;
		border-bottom: 1px solid #ddd;
		/*default*/
		}

		.ui-jqgrid .ui-jqgrid-caption {
		text-align: left;
		}

		.ui-jqgrid .ui-jqgrid-title {
		padding-top: 5px;
		vertical-align: middle;
		}

		.ui-jqgrid .ui-jqgrid-titlebar-close {
		color: inherit;
		position: absolute;
		top: 50%;
		margin: -10px 7px 0 0;
		padding: 1px;
		cursor: pointer;
		}

		.ui-jqgrid .ui-jqgrid-titlebar-close span {
		display: block;
		margin: 1px;
		}

		.ui-jqgrid .ui-jqgrid-titlebar-close:hover {}
		/* Header*/

		.ui-jqgrid .ui-jqgrid-hdiv {
		position: relative;
		margin: 0;
		padding: 0;
		overflow: hidden;
		}

		.ui-jqgrid .ui-jqgrid-hbox {
		float: left;
		padding-right: 20px;
		}

		.ui-jqgrid .ui-jqgrid-htable {
		margin-bottom: 0;
		table-layout: fixed;
		border-top: none;
		}

		.ui-jqgrid .ui-jqgrid-htable thead th {
		overflow: hidden;
		border-bottom: none;
		padding-right: 2px;
		}

		.ui-jqgrid .ui-jqgrid-htable thead th div {
		overflow: hidden;
		position: relative;
		}

		.ui-th-column,
		.ui-jqgrid .ui-jqgrid-htable th.ui-th-column {
		overflow: hidden;
		white-space: nowrap;
		}

		.ui-th-column-header,
		.ui-jqgrid .ui-jqgrid-htable th.ui-th-column-header {
		overflow: hidden;
		white-space: nowrap;
		}

		.ui-th-ltr,
		.ui-jqgrid .ui-jqgrid-htable th.ui-th-ltr {}

		.ui-th-rtl,
		.ui-jqgrid .ui-jqgrid-htable th.ui-th-rtl {
		text-align: center;
		}

		.ui-first-th-ltr {}

		.ui-first-th-rtl {}

		.ui-jqgrid tr.jqg-first-row-header th {
		height: auto;
		border-top: none;
		padding-bottom: 0;
		padding-top: 0;
		border-bottom: none;
		padding-right: 2px;
		text-align: center;
		}

		.ui-jqgrid tr.jqg-second-row-header th,
		.ui-jqgrid tr.jqg-third--row-header th {
		border-top: none;
		text-align: center;
		}

		.ui-jqgrid .ui-th-div-ie {
		white-space: nowrap;
		zoom: 1;
		height: 17px;
		}

		.ui-jqgrid .ui-jqgrid-resize {
		height: 20px !important;
		position: relative;
		cursor: e-resize;
		display: inline;
		overflow: hidden;
		}

		.ui-jqgrid .ui-grid-ico-sort {
		margin-left: 5px;
		overflow: hidden;
		position: absolute;
		right: 3px;
		font-size: 12px;
		}

		.ui-jqgrid .ui-icon-asc {
		margin-top: -3px;
		}

		.ui-jqgrid .ui-icon-desc {
		margin-top: 4px;
		}

		.ui-jqgrid .ui-i-asc {
		margin-top: 0;
		}

		.ui-jqgrid .ui-i-desc {
		margin-top: 0;
		margin-right: 13px;
		}

		.ui-jqgrid .ui-single-sort-asc {
		margin-top: 0;
		}

		.ui-jqgrid .ui-single-sort-desc {}

		.ui-jqgrid .ui-jqgrid-sortable {
		cursor: pointer;
		}

		.ui-jqgrid tr.ui-search-toolbar th {}

		.ui-jqgrid .ui-search-table td.ui-search-clear {}

		.ui-jqgrid tr.ui-search-toolbar td > input {}

		.ui-jqgrid tr.ui-search-toolbar select {}
		/* Body */

		.ui-jqgrid .table-bordered,
		.ui-jqgrid .table-bordered td,
		.ui-jqgrid .table-bordered th.ui-th-ltr {
		border-left: 0px none !important;
		}

		.ui-jqgrid .table-bordered th.ui-th-rtl {
		border-right: 0px none !important;
		}

		.ui-jqgrid .table-bordered tr.ui-row-rtl td {
		border-right: 0px none !important;
		border-left: 1px solid #ddd !important;
		}

		div.tablediv > .table-bordered {
		border-left: 1px solid #ddd !important;
		}

		.ui-jqgrid .ui-jqgrid-bdiv table.table-bordered td {
		border-top: 0px none;
		}

		.ui-jqgrid .ui-jqgrid-bdiv {
		position: relative;
		margin: 0;
		padding: 0;
		overflow: auto;
		text-align: left;
		}

		.ui-jqgrid .ui-jqgrid-btable {
		table-layout: fixed;
		border-left: none;
		border-top: none;
		margin-bottom: 0px
		}

		.ui-jqgrid tr.jqgrow {
		outline-style: none;
		}

		.ui-jqgrid tr.jqgroup {
		outline-style: none;
		}

		.ui-jqgrid .ui-jqgrid-btable tbody tr.jqgrow td {
		overflow: hidden;
		white-space: pre;
		padding-right: 2px;
		}

		.ui-jqgrid tr.jqgfirstrow td {
		height: auto;
		border-top: none;
		padding-bottom: 0;
		padding-top: 0;
		border-bottom: none;
		padding-right: 2px;
		}

		.ui-jqgrid tr.jqgroup td {}

		.ui-jqgrid tr.jqfoot td {}

		.ui-jqgrid tr.ui-row-ltr td {}

		.ui-jqgrid tr.ui-row-rtl td {}

		.ui-jqgrid td.jqgrid-rownum {}

		.ui-jqgrid .ui-jqgrid-resize-mark {
		width: 2px;
		left: 0;
		background-color: #777;
		cursor: e-resize;
		cursor: col-resize;
		position: absolute;
		top: 0;
		height: 100px;
		overflow: hidden;
		display: none;
		border: 0 none;
		z-index: 99999;
		}
		/* Footer */

		.ui-jqgrid .ui-jqgrid-sdiv {
		position: relative;
		margin: 0;
		padding: 0;
		overflow: hidden;
		border-left: 0 none !important;
		border-top: 0 none !important;
		border-right: 0 none !important;
		}

		.ui-jqgrid .ui-jqgrid-ftable {
		table-layout: fixed;
		margin-bottom: 0;
		}

		.ui-jqgrid tr.footrow td {
		font-weight: bold;
		overflow: hidden;
		white-space: nowrap;
		padding-right: 2px;
		border-bottom: 0px none;
		}

		.ui-jqgrid tr.footrow-ltr td {
		text-align: left;
		}

		.ui-jqgrid tr.footrow-rtl td {
		text-align: right;
		}
		/* Pager*/

		.ui-jqgrid .ui-jqgrid-pager,
		.ui-jqgrid .ui-jqgrid-toppager {
		border-left-width: 0px;
		border-top: 1px solid #ddd;
		/*padding : 4px 0px;*/
		position: relative;
		/*height: auto; */
		white-space: nowrap;
		overflow: hidden;
		}

		.ui-jqgrid .ui-jqgrid-toppager {
		border-top-width: 0;
		border-bottom: 1px solid #ddd;
		}

		.ui-jqgrid .ui-jqgrid-toppager .ui-pager-control,
		.ui-jqgrid .ui-jqgrid-pager .ui-pager-control {
		position: relative;
		border-left: 0;
		border-bottom: 0;
		border-top: 0;
		/*height: 30px;*/
		}

		.ui-jqgrid .ui-pg-table {
		position: relative;
		padding: 1px 0;
		width: auto;
		margin: 0;
		}

		.ui-jqgrid .ui-pg-table td {
		font-weight: normal;
		vertical-align: middle;
		/*padding:0px 6px;*/
		}

		.ui-jqgrid .ui-pager-control .ui-pager-table td {
		border-top: 0px none !important;
		min-height: 20px !important;
		}

		.ui-jqgrid .ui-pg-button {
		height: auto;
		}

		.ui-jqgrid .ui-paging-pager td {
		padding: 0 5px;
		}

		.ui-jqgrid .ui-pg-button span {
		display: block;
		margin: 0px 2px;
		float: left;
		}

		.ui-jqgrid .ui-pg-button:hover {}

		.ui-jqgrid .ui-disabled:hover {}

		.ui-jqgrid .ui-pg-input,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pg-input {
		display: inline-block;
		height: auto;
		width: auto;
		font-size: .9em;
		margin: 0;
		line-height: inherit;
		border: none;
		padding: 0px 3px
		}

		.ui-jqgrid .ui-pg-selbox,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pg-selbox {
		font-size: .9em;
		line-height: inherit;
		display: block;
		height: 22px;
		margin: 0;
		padding: 3px 0px 3px 3px;
		border: none;
		}

		.ui-jqgrid .ui-separator {
		height: 18px;
		border: none;
		border-left: 2px solid #ccc;
		/*default*/
		}

		.ui-separator-li {
		height: 2px;
		border: none;
		border-top: 2px solid #ccc;
		/*default*/
		margin: 0;
		padding: 0;
		width: 100%
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-pg-div,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pg-div {
		float: left;
		position: relative;
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-pg-button,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pg-button {
		cursor: pointer;
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-pg-div span,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pg-div span {
		float: left;
		}

		.ui-jqgrid td input,
		.ui-jqgrid td select,
		.ui-jqgrid td textarea {
		margin: 0;
		}

		.ui-jqgrid td textarea {
		width: auto;
		height: auto;
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-pager-table,
		.ui-jqgrid .ui-jqgrid-toppager .ui-pager-table {
		width: 100%;
		table-layout: fixed;
		height: 100%;
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-paging-info,
		.ui-jqgrid .ui-jqgrid-toppager .ui-paging-info {
		font-weight: normal;
		height: auto;
		margin-top: 3px;
		margin-right: 4px;
		display: inline;
		}

		.ui-jqgrid .ui-jqgrid-pager .ui-paging-pager,
		.ui-jqgrid .ui-jqgrid-toppager .ui-paging-pager {
		table-layout: auto;
		height: 100%;
		}

		.ui-jqgrid .ui-jqgrid-pager .navtable,
		.ui-jqgrid .ui-jqgrid-toppager .navtable {
		float: left;
		table-layout: auto;
		height: 100%;
		}

		.ui-jqgrid .ui-jqgrid-pager .navtable td,
		.ui-jqgrid .ui-jqgrid-toppager .navtable td {
		padding: 0 5px;
		}
		/*Subgrid*/

		.ui-jqgrid .ui-jqgrid-btable .ui-sgcollapsed span {
		display: block;
		}

		.ui-jqgrid .ui-subgrid {
		margin: 0;
		padding: 0;
		width: 100%;
		}

		.ui-jqgrid .ui-subgrid table {
		table-layout: fixed;
		}

		.ui-jqgrid .ui-subgrid tr.ui-subtblcell td {}

		.ui-jqgrid .ui-subgrid td.subgrid-data {
		border-top: 0 none !important;
		}

		.ui-jqgrid .ui-subgrid td.subgrid-cell {
		vertical-align: middle
		}

		.ui-jqgrid a.ui-sghref {
		text-decoration: none;
		color: #010101;
		/*default*/
		}

		.ui-jqgrid .ui-th-subgrid {
		height: 20px;
		}

		.tablediv > .row {
		margin: 0 0
		}
		/* loading */

		.ui-jqgrid .loading {
		position: absolute;
		top: 45%;
		left: 45%;
		width: auto;
		z-index: 101;
		padding: 6px;
		margin: 5px;
		text-align: center;
		display: none;
		border: 1px solid #ddd;
		/*default*/
		font-size: 14px;
		background-color: #d9edf7;
		}

		.ui-jqgrid .jqgrid-overlay {
		display: none;
		z-index: 100;
		}
		/* IE * html .jqgrid-overlay {width: expression(this.parentNode.offsetWidth+'px');height: expression(this.parentNode.offsetHeight+'px');} */

		* .jqgrid-overlay iframe {
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		}
		/* IE width: expression(this.parentNode.offsetWidth+'px');height: expression(this.parentNode.offsetHeight+'px');}*/
		/* end loading div */
		/* Toolbar */

		.ui-jqgrid .ui-userdata {
		padding: 4px 0px;
		overflow: hidden;
		min-height: 32px;
		}

		.ui-jqgrid .ui-userdata-top {
		border-left-width: 0px;
		/*default*/
		border-bottom: 1px solid #ddd;
		}

		.ui-jqgrid .ui-userdata-bottom {
		border-left-width: 0px;
		/*default*/
		border-top: 1px solid #ddd;
		}
		/*Modal Window */

		.ui-jqdialog {}

		.ui-jqdialog {
		display: none;
		width: 500px;
		position: absolute;
		/*padding: 5px; */
		overflow: visible;
		}

		.ui-jqdialog .ui-jqdialog-titlebar {
		padding: .1em .1em;
		min-height: 35px;
		}

		.ui-jqdialog .ui-jqdialog-title {
		margin: .3em 0 .2em;
		font-weight: bold;
		padding-left: 6px;
		padding-right: 6px;
		}

		.ui-jqdialog .ui-jqdialog-titlebar-close {
		position: absolute;
		top: 0%;
		margin: 3px 5px 0 0;
		padding: 8px;
		cursor: pointer;
		}

		.ui-jqdialog .ui-jqdialog-titlebar-close span {}

		.ui-jqdialog .ui-jqdialog-titlebar-close:hover,
		.ui-jqdialog .ui-jqdialog-titlebar-close:focus {
		padding: 8px;
		}

		.ui-jqdialog-content,
		.ui-jqdialog .ui-jqdialog-content {
		border: 0;
		padding: .3em .2em;
		background: none;
		height: auto;
		}

		.ui-jqdialog .ui-jqconfirm {
		padding: .4em 1em;
		border-width: 3px;
		position: absolute;
		bottom: 10px;
		right: 10px;
		overflow: visible;
		display: none;
		height: 120px;
		width: 220px;
		text-align: center;
		background-color: #fff;
		border-radius: 4px;
		-webkit-border-radius: 4px;
		-moz-border-radius: 4px;
		}

		.ui-jqdialog>.ui-resizable-se {}

		.ui-jqgrid>.ui-resizable-se {}
		/* end Modal window*/
		/* Form edit */

		.ui-jqdialog-content .FormGrid {
		margin: 0 8px 0 8px;
		overflow: auto;
		position: relative;
		}

		.ui-jqdialog-content .EditTable {
		width: 100%;
		margin-bottom: 0;
		}

		.ui-jqdialog-content .DelTable {
		width: 100%;
		margin-bottom: 0;
		}

		.EditTable td input,
		.EditTable td select,
		.EditTable td textarea {
		width: 98%;
		display: inline-block;
		}

		.EditTable td textarea {
		width: auto;
		height: auto;
		}

		.EditTable .FormData td {
		height: 37px !important;
		}

		.ui-jqdialog-content td.EditButton {
		text-align: right;
		padding: 5px 5px 5px 0;
		}

		.ui-jqdialog-content td.navButton {
		text-align: center;
		border-left: 0 none;
		border-top: 0 none;
		border-right: 0 none;
		padding-bottom: 5px;
		padding-top: 5px;
		}

		.ui-jqdialog-content input.FormElement {
		padding: .5em .3em;
		margin-bottom: 5px
		}

		.ui-jqdialog-content select.FormElement {
		padding: .3em;
		margin-bottom: 3px;
		}

		.ui-jqdialog-content .data-line {
		padding-top: .1em;
		border: 0 none;
		}

		.ui-jqdialog-content .CaptionTD {
		vertical-align: middle;
		border: 0 none;
		padding: 2px;
		white-space: nowrap;
		}

		.ui-jqdialog-content .DataTD {
		padding: 2px;
		border: 0 none;
		vertical-align: top;
		}

		.ui-jqdialog-content .form-view-data {
		white-space: pre
		}

		.fm-button {}

		.fm-button-icon-left {
		margin-left: 4px;
		margin-right: 4px;
		}

		.fm-button-icon-right {
		margin-left: 4px;
		margin-right: 4px;
		}

		.fm-button-icon-left {}

		.fm-button-icon-right {}

		#nData,
		#pData {
		margin-left: 4px;
		margin-right: 4px;
		}

		#sData span,
		#cData span {
		margin-left: 5px;
		}
		/* End Eorm edit */
		/*.ui-jqgrid .edit-cell {}*/

		.ui-jqgrid .selected-row,
		div.ui-jqgrid .selected-row td {
		font-style: normal;
		}
		/* inline edit actions button*/

		.ui-inline-del,
		.ui-inline-cancel {
		margin-left: 14px;
		}

		.ui-jqgrid .inline-edit-cell {}
		/* Tree Grid */

		.ui-jqgrid .tree-wrap {
		float: left;
		position: relative;
		height: 18px;
		white-space: nowrap;
		overflow: hidden;
		}

		.ui-jqgrid .tree-minus {
		position: absolute;
		height: 18px;
		width: 18px;
		overflow: hidden;
		}

		.ui-jqgrid .tree-plus {
		position: absolute;
		height: 18px;
		width: 18px;
		overflow: hidden;
		}

		.ui-jqgrid .tree-leaf {
		position: absolute;
		height: 18px;
		width: 18px;
		overflow: hidden;
		}

		.ui-jqgrid .treeclick {
		cursor: pointer;
		}
		/* moda dialog */

		* iframe.jqm {
		position: absolute;
		top: 0;
		left: 0;
		z-index: -1;
		}
		/*	 width: expression(this.parentNode.offsetWidth+'px');height: expression(this.parentNode.offsetHeight+'px');}*/

		.ui-jqgrid-dnd tr td {
		border-right-width: 1px;
		border-right-color: inherit;
		border-right-style: solid;
		height: 20px
		}
		/* RTL Support */

		.ui-jqgrid .ui-jqgrid-caption-rtl {
		text-align: right;
		}

		.ui-jqgrid .ui-jqgrid-hbox-rtl {
		float: right;
		padding-left: 20px;
		}

		.ui-jqgrid .ui-jqgrid-resize-ltr {
		float: right;
		margin: -2px -2px -2px 0;
		height: 100%;
		}

		.ui-jqgrid .ui-jqgrid-resize-rtl {
		float: left;
		margin: -2px -2px -2px -0px;
		}

		.ui-jqgrid .ui-sort-rtl {}

		.ui-jqgrid .tree-wrap-ltr {
		float: left;
		}

		.ui-jqgrid .tree-wrap-rtl {
		float: right;
		}

		.ui-jqgrid .ui-ellipsis {
		-moz-text-overflow: ellipsis;
		text-overflow: ellipsis;
		}
		/* Toolbar Search Menu. Nav menu */

		.ui-search-menu,
		.ui-nav-menu {
		position: absolute;
		padding: 2px 5px;
		z-index: 99999;
		}

		.ui-search-menu.ui-menu .ui-menu-item,
		.ui-nav-menu.ui-menu .ui-menu-item {
		list-style-image: none;
		padding-right: 0;
		padding-left: 0;
		}

		.ui-search-menu.ui-menu .ui-menu-item a,
		.ui-nav-menu.ui-menu .ui-menu-item a {
		display: block;
		}

		.ui-search-menu.ui-menu .ui-menu-item a.g-menu-item:hover,
		.ui-nav-menu.ui-menu .ui-menu-item a.g-menu-item:hover {
		margin: -1px;
		font-weight: normal;
		}

		.ui-jqgrid .ui-search-table {
		padding: 0;
		border: 0 none;
		height: 20px;
		width: 100%;
		}

		.ui-jqgrid .ui-search-table .ui-search-oper {
		width: 20px;
		}

		a.g-menu-item,
		a.soptclass,
		a.clearsearchclass {
		cursor: pointer;
		}

		.ui-jqgrid .ui-jqgrid-view input,
		.ui-jqgrid .ui-jqgrid-view select,
		.ui-jqgrid .ui-jqgrid-view textarea,
		.ui-jqgrid .ui-jqgrid-view button {
		/*font-size: 11px*/
		}

		.ui-jqgrid .ui-scroll-popup {
		width: 100px;
		}

		.ui-search-table select,
		.ui-search-table input {
		padding: 4px 3px;
		}

		.ui-disabled {
		opacity: .35;
		filter: Alpha(Opacity=35);
		/* support: IE8 */
		background-image: none;
		}

		.ui-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.5);
		opacity: .3;
		filter: Alpha(Opacity=30);
		/* support: IE8 */
		}

		.ui-jqgrid-pager .ui-pg-table .ui-pg-button:hover,
		.ui-jqgrid-toppager .ui-pg-table .ui-pg-button:hover {
		background-color: #ddd;
		}

		.ui-jqgrid-corner {
		border-radius: 5px
		}

		.ui-resizable-handle {
		/*position: absolute;*/
		display: block;
		left: 97%;
		}

		.ui-jqdialog .ui-resizable-se {
		width: 12px;
		height: 12px;
		right: -5px;
		bottom: -5px;
		background-position: 16px 16px;
		}

		.ui-resizable-se {
		cursor: se-resize;
		width: 12px;
		height: 12px;
		right: 1px;
		bottom: 1px;
		}

		.ui-top-corner {
		border-top-left-radius: 5px;
		border-top-right-radius: 5px;
		}

		.ui-bottom-corner {
		border-bottom-left-radius: 5px;
		border-bottom-right-radius: 5px;
		}

		.ui-search-table {
		margin-bottom: 0;
		}

		.ui-search-table .columns,
		.ui-search-table .operators {
		padding-right: 5px;
		}

		.opsel {
		float: left;
		width: 100px;
		margin-right: 5px;
		}

		.add-group,
		.add-rule,
		.delete-group {
		width: 14%;
		margin-right: 5px;
		}

		.delete-rule {
		width: 15px;
		}

		ul.ui-search-menu,
		ul.ui-nav-menu {
		list-style-type: none;
		}

		ul.ui-search-menu li a,
		ul.ui-nav-menu li a,
		.soptclass,
		.clearsearchclass {
		text-decoration: none;
		color: #010101;
		}

		ul.ui-search-menu li a:hover,
		ul.ui-nav-menu li a:hover,
		a.soptclass:hover,
		a.clearsearchclass:hover {
		background-color: #ddd;
		padding: 1px 1px;
		text-decoration: none;
		}

		ul.ui-search-menu li,
		ul.ui-nav-menu li {
		padding: 5px 5px;
		}

		.ui-menu-item hr {
		margin-bottom: 0px;
		margin-top: 0px;
		}

		.searchFilter .ui-search-table td,
		.searchFilter .ui-search-table th {
		border-top: 0px none !important;
		}

		.searchFilter .queryresult {
		margin-bottom: 5px;
		}

		.searchFilter .queryresult tr td {
		border-top: 0px none;
		}

		.ui-search-label {
		padding-left: 5px;
		}

		.frozen-div,
		.frozen-bdiv {
		background-color: #fff;
		}
		/*
		.ui-jqgrid .ui-jqgrid-caption,
		.ui-jqgrid .ui-jqgrid-pager,
		.ui-jqgrid .ui-jqgrid-toppager,
		.ui-jqgrid .ui-jqgrid-htable thead th,
		.ui-jqgrid .ui-userdata-top,
		.ui-jqgrid .ui-userdata-bottom,
		.ui-jqgrid .ui-jqgrid-hdiv,
		.ui-jqdialog .ui-jqdialog-titlebar
		{
		background-image: none, linear-gradient(to bottom, #fff 0px, #e0e0e0 100%);
		background-repeat: repeat-x;
		border-color: #ccc;
		text-shadow: 0 1px 0 #fff;
		}
		*/

		@import url("//fonts.googleapis.com/css?family=News+Cycle:400,700");
		/*!
		* Bootstrap v3.0.0
		*
		* Copyright 2013 Twitter, Inc
		* Licensed under the Apache License v2.0
		* http://www.apache.org/licenses/LICENSE-2.0
		*
		* Designed and built with all the love in the world by @mdo and @fat.
		*/
		/*! normalize.css v2.1.0 | MIT License | git.io/normalize */

		article,
		aside,
		details,
		figcaption,
		figure,
		footer,
		header,
		hgroup,
		main,
		nav,
		section,
		summary {
		display: block
		}

		audio,
		canvas,
		video {
		display: inline-block
		}

		audio:not([controls]) {
		display: none;
		height: 0
		}

		[hidden] {
		display: none
		}

		html {
		font-family: sans-serif;
		-webkit-text-size-adjust: 100%;
		-ms-text-size-adjust: 100%
		}

		body {
		margin: 0
		}

		a:focus {
		outline: thin dotted
		}

		a:active,
		a:hover {
		outline: 0
		}

		h1 {
		margin: .67em 0;
		font-size: 2em
		}

		abbr[title] {
		border-bottom: 1px dotted
		}

		b,
		strong {
		font-weight: bold
		}

		dfn {
		font-style: italic
		}

		hr {
		height: 0;
		-moz-box-sizing: content-box;
		box-sizing: content-box
		}

		mark {
		color: #000;
		background: #ff0
		}

		code,
		kbd,
		pre,
		samp {
		font-family: monospace, serif;
		font-size: 1em
		}

		pre {
		white-space: pre-wrap
		}

		q {
		quotes: "\201C" "\201D" "\2018" "\2019"
		}

		small {
		font-size: 80%
		}

		sub,
		sup {
		position: relative;
		font-size: 75%;
		line-height: 0;
		vertical-align: baseline
		}

		sup {
		top: -0.5em
		}

		sub {
		bottom: -0.25em
		}

		img {
		border: 0
		}

		svg:not(:root) {
		overflow: hidden
		}

		figure {
		margin: 0
		}

		fieldset {
		padding: .35em .625em .75em;
		margin: 0 2px;
		border: 1px solid #c0c0c0
		}

		legend {
		padding: 0;
		border: 0
		}

		button,
		input,
		select,
		textarea {
		margin: 0;
		font-family: inherit;
		font-size: 100%
		}

		button,
		input {
		line-height: normal
		}

		button,
		select {
		text-transform: none
		}

		button,
		html input[type="button"],
		input[type="reset"],
		input[type="submit"] {
		cursor: pointer;
		-webkit-appearance: button
		}

		button[disabled],
		html input[disabled] {
		cursor: default
		}

		input[type="checkbox"],
		input[type="radio"] {
		padding: 0;
		box-sizing: border-box
		}

		input[type="search"] {
		-webkit-box-sizing: content-box;
		-moz-box-sizing: content-box;
		box-sizing: content-box;
		-webkit-appearance: textfield
		}

		input[type="search"]::-webkit-search-cancel-button,
		input[type="search"]::-webkit-search-decoration {
		-webkit-appearance: none
		}

		button::-moz-focus-inner,
		input::-moz-focus-inner {
		padding: 0;
		border: 0
		}

		textarea {
		overflow: auto;
		vertical-align: top
		}

		table {
		border-collapse: collapse;
		border-spacing: 0
		}

		@media print {
		* {
		color: #000!important;
		text-shadow: none!important;
		background: transparent!important;
		box-shadow: none!important
		}
		a,
		a:visited {
		text-decoration: underline
		}
		a[href]:after {
		content: " (" attr(href) ")"
		}
		abbr[title]:after {
		content: " (" attr(title) ")"
		}
		.ir a:after,
		a[href^="javascript:"]:after,
		a[href^="#"]:after {
		content: ""
		}
		pre,
		blockquote {
		border: 1px solid #999;
		page-break-inside: avoid
		}
		thead {
		display: table-header-group
		}
		tr,
		img {
		page-break-inside: avoid
		}
		img {
		max-width: 100%!important
		}
		@page {
		margin: 2cm .5cm
		}
		p,
		h2,
		h3 {
		orphans: 3;
		widows: 3
		}
		h2,
		h3 {
		page-break-after: avoid
		}
		.navbar {
		display: none
		}
		.table td,
		.table th {
		background-color: #fff!important
		}
		.btn>.caret,
		.dropup>.btn>.caret {
		border-top-color: #000!important
		}
		.label {
		border: 1px solid #000
		}
		.table {
		border-collapse: collapse!important
		}
		.table-bordered th,
		.table-bordered td {
		border: 1px solid #ddd!important
		}
		}

		*,
		*:before,
		*:after {
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box
		}

		html {
		font-size: 62.5%;
		-webkit-tap-highlight-color: rgba(0, 0, 0, 0)
		}

		body {
		font-family: Georgia, "Times New Roman", Times, serif;
		font-size: 15px;
		line-height: 1.428571429;
		color: #777;
		background-color: #fff
		}

		input,
		button,
		select,
		textarea {
		font-family: inherit;
		font-size: inherit;
		line-height: inherit
		}

		button,
		input,
		select[multiple],
		textarea {
		background-image: none
		}

		a {
		color: #eb6864;
		text-decoration: none
		}

		a:hover,
		a:focus {
		color: #e22620;
		text-decoration: underline
		}

		a:focus {
		outline: thin dotted #333;
		outline: 5px auto -webkit-focus-ring-color;
		outline-offset: -2px
		}

		img {
		vertical-align: middle
		}

		.img-responsive {
		display: block;
		height: auto;
		max-width: 100%
		}

		.img-rounded {
		border-radius: 6px
		}

		.img-thumbnail {
		display: inline-block;
		height: auto;
		max-width: 100%;
		padding: 4px;
		line-height: 1.428571429;
		background-color: #fff;
		border: 1px solid #ddd;
		border-radius: 4px;
		-webkit-transition: all .2s ease-in-out;
		transition: all .2s ease-in-out
		}

		.img-circle {
		border-radius: 50%
		}

		hr {
		margin-top: 21px;
		margin-bottom: 21px;
		border: 0;
		border-top: 1px solid #eee
		}

		.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0 0 0 0);
		border: 0
		}

		p {
		margin: 0 0 10.5px
		}

		.lead {
		margin-bottom: 21px;
		font-size: 17.25px;
		font-weight: 200;
		line-height: 1.4
		}

		@media(min-width:768px) {
		.lead {
		font-size: 22.5px
		}
		}

		small {
		font-size: 85%
		}

		cite {
		font-style: normal
		}

		.text-muted {
		color: #999
		}

		.text-primary {
		color: #eb6864
		}

		.text-warning {
		color: #c09853
		}

		.text-danger {
		color: #b94a48
		}

		.text-success {
		color: #468847
		}

		.text-info {
		color: #3a87ad
		}

		.text-left {
		text-align: left
		}

		.text-right {
		text-align: right
		}

		.text-center {
		text-align: center
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6,
		.h1,
		.h2,
		.h3,
		.h4,
		.h5,
		.h6 {
		font-family: Georgia, "Times New Roman", Times, serif;
		font-weight: 500;
		line-height: 1.1
		}

		h1 small,
		h2 small,
		h3 small,
		h4 small,
		h5 small,
		h6 small,
		.h1 small,
		.h2 small,
		.h3 small,
		.h4 small,
		.h5 small,
		.h6 small {
		font-weight: normal;
		line-height: 1;
		color: #999
		}

		h1,
		h2,
		h3 {
		margin-top: 21px;
		margin-bottom: 10.5px
		}

		h4,
		h5,
		h6 {
		margin-top: 10.5px;
		margin-bottom: 10.5px
		}

		h1,
		.h1 {
		font-size: 39px
		}

		h2,
		.h2 {
		font-size: 32px
		}

		h3,
		.h3 {
		font-size: 26px
		}

		h4,
		.h4 {
		font-size: 19px
		}

		h5,
		.h5 {
		font-size: 15px
		}

		h6,
		.h6 {
		font-size: 13px
		}

		h1 small,
		.h1 small {
		font-size: 26px
		}

		h2 small,
		.h2 small {
		font-size: 19px
		}

		h3 small,
		.h3 small,
		h4 small,
		.h4 small {
		font-size: 15px
		}

		.page-header {
		padding-bottom: 9.5px;
		margin: 42px 0 21px;
		border-bottom: 1px solid #eee
		}

		ul,
		ol {
		margin-top: 0;
		margin-bottom: 10.5px
		}

		ul ul,
		ol ul,
		ul ol,
		ol ol {
		margin-bottom: 0
		}

		.list-unstyled {
		padding-left: 0;
		list-style: none
		}

		.list-inline {
		padding-left: 0;
		list-style: none
		}

		.list-inline>li {
		display: inline-block;
		padding-right: 5px;
		padding-left: 5px
		}

		dl {
		margin-bottom: 21px
		}

		dt,
		dd {
		line-height: 1.428571429
		}

		dt {
		font-weight: bold
		}

		dd {
		margin-left: 0
		}

		@media(min-width:768px) {
		.dl-horizontal dt {
		float: left;
		width: 160px;
		overflow: hidden;
		clear: left;
		text-align: right;
		text-overflow: ellipsis;
		white-space: nowrap
		}
		.dl-horizontal dd {
		margin-left: 180px
		}
		.dl-horizontal dd:before,
		.dl-horizontal dd:after {
		display: table;
		content: " "
		}
		.dl-horizontal dd:after {
		clear: both
		}
		.dl-horizontal dd:before,
		.dl-horizontal dd:after {
		display: table;
		content: " "
		}
		.dl-horizontal dd:after {
		clear: both
		}
		.dl-horizontal dd:before,
		.dl-horizontal dd:after {
		display: table;
		content: " "
		}
		.dl-horizontal dd:after {
		clear: both
		}
		.dl-horizontal dd:before,
		.dl-horizontal dd:after {
		display: table;
		content: " "
		}
		.dl-horizontal dd:after {
		clear: both
		}
		.dl-horizontal dd:before,
		.dl-horizontal dd:after {
		display: table;
		content: " "
		}
		.dl-horizontal dd:after {
		clear: both
		}
		}

		abbr[title],
		abbr[data-original-title] {
		cursor: help;
		border-bottom: 1px dotted #999
		}

		abbr.initialism {
		font-size: 90%;
		text-transform: uppercase
		}

		blockquote {
		padding: 10.5px 21px;
		margin: 0 0 21px;
		border-left: 5px solid #eee
		}

		blockquote p {
		font-size: 18.75px;
		font-weight: 300;
		line-height: 1.25
		}

		blockquote p:last-child {
		margin-bottom: 0
		}

		blockquote small {
		display: block;
		line-height: 1.428571429;
		color: #999
		}

		blockquote small:before {
		content: '\2014 \00A0'
		}

		blockquote.pull-right {
		padding-right: 15px;
		padding-left: 0;
		border-right: 5px solid #eee;
		border-left: 0
		}

		blockquote.pull-right p,
		blockquote.pull-right small {
		text-align: right
		}

		blockquote.pull-right small:before {
		content: ''
		}

		blockquote.pull-right small:after {
		content: '\00A0 \2014'
		}

		q:before,
		q:after,
		blockquote:before,
		blockquote:after {
		content: ""
		}

		address {
		display: block;
		margin-bottom: 21px;
		font-style: normal;
		line-height: 1.428571429
		}

		code,
		pre {
		font-family: Monaco, Menlo, Consolas, "Courier New", monospace
		}

		code {
		padding: 2px 4px;
		font-size: 90%;
		color: #c7254e;
		white-space: nowrap;
		background-color: #f9f2f4;
		border-radius: 4px
		}

		pre {
		display: block;
		padding: 10px;
		margin: 0 0 10.5px;
		font-size: 14px;
		line-height: 1.428571429;
		color: #333;
		word-break: break-all;
		word-wrap: break-word;
		background-color: #f5f5f5;
		border: 1px solid #ccc;
		border-radius: 4px
		}

		pre.prettyprint {
		margin-bottom: 21px
		}

		pre code {
		padding: 0;
		font-size: inherit;
		color: inherit;
		white-space: pre-wrap;
		background-color: transparent;
		border: 0
		}

		.pre-scrollable {
		max-height: 340px;
		overflow-y: scroll
		}

		.container {
		padding-right: 15px;
		padding-left: 15px;
		margin-right: auto;
		margin-left: auto
		}

		.container:before,
		.container:after {
		display: table;
		content: " "
		}

		.container:after {
		clear: both
		}

		.container:before,
		.container:after {
		display: table;
		content: " "
		}

		.container:after {
		clear: both
		}

		.container:before,
		.container:after {
		display: table;
		content: " "
		}

		.container:after {
		clear: both
		}

		.container:before,
		.container:after {
		display: table;
		content: " "
		}

		.container:after {
		clear: both
		}

		.container:before,
		.container:after {
		display: table;
		content: " "
		}

		.container:after {
		clear: both
		}

		.row {
		margin-right: -15px;
		margin-left: -15px
		}

		.row:before,
		.row:after {
		display: table;
		content: " "
		}

		.row:after {
		clear: both
		}

		.row:before,
		.row:after {
		display: table;
		content: " "
		}

		.row:after {
		clear: both
		}

		.row:before,
		.row:after {
		display: table;
		content: " "
		}

		.row:after {
		clear: both
		}

		.row:before,
		.row:after {
		display: table;
		content: " "
		}

		.row:after {
		clear: both
		}

		.row:before,
		.row:after {
		display: table;
		content: " "
		}

		.row:after {
		clear: both
		}

		.col-xs-1,
		.col-xs-2,
		.col-xs-3,
		.col-xs-4,
		.col-xs-5,
		.col-xs-6,
		.col-xs-7,
		.col-xs-8,
		.col-xs-9,
		.col-xs-10,
		.col-xs-11,
		.col-xs-12,
		.col-sm-1,
		.col-sm-2,
		.col-sm-3,
		.col-sm-4,
		.col-sm-5,
		.col-sm-6,
		.col-sm-7,
		.col-sm-8,
		.col-sm-9,
		.col-sm-10,
		.col-sm-11,
		.col-sm-12,
		.col-md-1,
		.col-md-2,
		.col-md-3,
		.col-md-4,
		.col-md-5,
		.col-md-6,
		.col-md-7,
		.col-md-8,
		.col-md-9,
		.col-md-10,
		.col-md-11,
		.col-md-12,
		.col-lg-1,
		.col-lg-2,
		.col-lg-3,
		.col-lg-4,
		.col-lg-5,
		.col-lg-6,
		.col-lg-7,
		.col-lg-8,
		.col-lg-9,
		.col-lg-10,
		.col-lg-11,
		.col-lg-12 {
		position: relative;
		min-height: 1px;
		padding-right: 15px;
		padding-left: 15px
		}

		.col-xs-1,
		.col-xs-2,
		.col-xs-3,
		.col-xs-4,
		.col-xs-5,
		.col-xs-6,
		.col-xs-7,
		.col-xs-8,
		.col-xs-9,
		.col-xs-10,
		.col-xs-11 {
		float: left
		}

		.col-xs-1 {
		width: 8.333333333333332%
		}

		.col-xs-2 {
		width: 16.666666666666664%
		}

		.col-xs-3 {
		width: 25%
		}

		.col-xs-4 {
		width: 33.33333333333333%
		}

		.col-xs-5 {
		width: 41.66666666666667%
		}

		.col-xs-6 {
		width: 50%
		}

		.col-xs-7 {
		width: 58.333333333333336%
		}

		.col-xs-8 {
		width: 66.66666666666666%
		}

		.col-xs-9 {
		width: 75%
		}

		.col-xs-10 {
		width: 83.33333333333334%
		}

		.col-xs-11 {
		width: 91.66666666666666%
		}

		.col-xs-12 {
		width: 100%
		}

		@media(min-width:768px) {
		.container {
		max-width: 750px
		}
		.col-sm-1,
		.col-sm-2,
		.col-sm-3,
		.col-sm-4,
		.col-sm-5,
		.col-sm-6,
		.col-sm-7,
		.col-sm-8,
		.col-sm-9,
		.col-sm-10,
		.col-sm-11 {
		float: left
		}
		.col-sm-1 {
		width: 8.333333333333332%
		}
		.col-sm-2 {
		width: 16.666666666666664%
		}
		.col-sm-3 {
		width: 25%
		}
		.col-sm-4 {
		width: 33.33333333333333%
		}
		.col-sm-5 {
		width: 41.66666666666667%
		}
		.col-sm-6 {
		width: 50%
		}
		.col-sm-7 {
		width: 58.333333333333336%
		}
		.col-sm-8 {
		width: 66.66666666666666%
		}
		.col-sm-9 {
		width: 75%
		}
		.col-sm-10 {
		width: 83.33333333333334%
		}
		.col-sm-11 {
		width: 91.66666666666666%
		}
		.col-sm-12 {
		width: 100%
		}
		.col-sm-push-1 {
		left: 8.333333333333332%
		}
		.col-sm-push-2 {
		left: 16.666666666666664%
		}
		.col-sm-push-3 {
		left: 25%
		}
		.col-sm-push-4 {
		left: 33.33333333333333%
		}
		.col-sm-push-5 {
		left: 41.66666666666667%
		}
		.col-sm-push-6 {
		left: 50%
		}
		.col-sm-push-7 {
		left: 58.333333333333336%
		}
		.col-sm-push-8 {
		left: 66.66666666666666%
		}
		.col-sm-push-9 {
		left: 75%
		}
		.col-sm-push-10 {
		left: 83.33333333333334%
		}
		.col-sm-push-11 {
		left: 91.66666666666666%
		}
		.col-sm-pull-1 {
		right: 8.333333333333332%
		}
		.col-sm-pull-2 {
		right: 16.666666666666664%
		}
		.col-sm-pull-3 {
		right: 25%
		}
		.col-sm-pull-4 {
		right: 33.33333333333333%
		}
		.col-sm-pull-5 {
		right: 41.66666666666667%
		}
		.col-sm-pull-6 {
		right: 50%
		}
		.col-sm-pull-7 {
		right: 58.333333333333336%
		}
		.col-sm-pull-8 {
		right: 66.66666666666666%
		}
		.col-sm-pull-9 {
		right: 75%
		}
		.col-sm-pull-10 {
		right: 83.33333333333334%
		}
		.col-sm-pull-11 {
		right: 91.66666666666666%
		}
		.col-sm-offset-1 {
		margin-left: 8.333333333333332%
		}
		.col-sm-offset-2 {
		margin-left: 16.666666666666664%
		}
		.col-sm-offset-3 {
		margin-left: 25%
		}
		.col-sm-offset-4 {
		margin-left: 33.33333333333333%
		}
		.col-sm-offset-5 {
		margin-left: 41.66666666666667%
		}
		.col-sm-offset-6 {
		margin-left: 50%
		}
		.col-sm-offset-7 {
		margin-left: 58.333333333333336%
		}
		.col-sm-offset-8 {
		margin-left: 66.66666666666666%
		}
		.col-sm-offset-9 {
		margin-left: 75%
		}
		.col-sm-offset-10 {
		margin-left: 83.33333333333334%
		}
		.col-sm-offset-11 {
		margin-left: 91.66666666666666%
		}
		}

		@media(min-width:992px) {
		.container {
		max-width: 970px
		}
		.col-md-1,
		.col-md-2,
		.col-md-3,
		.col-md-4,
		.col-md-5,
		.col-md-6,
		.col-md-7,
		.col-md-8,
		.col-md-9,
		.col-md-10,
		.col-md-11 {
		float: left
		}
		.col-md-1 {
		width: 8.333333333333332%
		}
		.col-md-2 {
		width: 16.666666666666664%
		}
		.col-md-3 {
		width: 25%
		}
		.col-md-4 {
		width: 33.33333333333333%
		}
		.col-md-5 {
		width: 41.66666666666667%
		}
		.col-md-6 {
		width: 50%
		}
		.col-md-7 {
		width: 58.333333333333336%
		}
		.col-md-8 {
		width: 66.66666666666666%
		}
		.col-md-9 {
		width: 75%
		}
		.col-md-10 {
		width: 83.33333333333334%
		}
		.col-md-11 {
		width: 91.66666666666666%
		}
		.col-md-12 {
		width: 100%
		}
		.col-md-push-0 {
		left: auto
		}
		.col-md-push-1 {
		left: 8.333333333333332%
		}
		.col-md-push-2 {
		left: 16.666666666666664%
		}
		.col-md-push-3 {
		left: 25%
		}
		.col-md-push-4 {
		left: 33.33333333333333%
		}
		.col-md-push-5 {
		left: 41.66666666666667%
		}
		.col-md-push-6 {
		left: 50%
		}
		.col-md-push-7 {
		left: 58.333333333333336%
		}
		.col-md-push-8 {
		left: 66.66666666666666%
		}
		.col-md-push-9 {
		left: 75%
		}
		.col-md-push-10 {
		left: 83.33333333333334%
		}
		.col-md-push-11 {
		left: 91.66666666666666%
		}
		.col-md-pull-0 {
		right: auto
		}
		.col-md-pull-1 {
		right: 8.333333333333332%
		}
		.col-md-pull-2 {
		right: 16.666666666666664%
		}
		.col-md-pull-3 {
		right: 25%
		}
		.col-md-pull-4 {
		right: 33.33333333333333%
		}
		.col-md-pull-5 {
		right: 41.66666666666667%
		}
		.col-md-pull-6 {
		right: 50%
		}
		.col-md-pull-7 {
		right: 58.333333333333336%
		}
		.col-md-pull-8 {
		right: 66.66666666666666%
		}
		.col-md-pull-9 {
		right: 75%
		}
		.col-md-pull-10 {
		right: 83.33333333333334%
		}
		.col-md-pull-11 {
		right: 91.66666666666666%
		}
		.col-md-offset-0 {
		margin-left: 0
		}
		.col-md-offset-1 {
		margin-left: 8.333333333333332%
		}
		.col-md-offset-2 {
		margin-left: 16.666666666666664%
		}
		.col-md-offset-3 {
		margin-left: 25%
		}
		.col-md-offset-4 {
		margin-left: 33.33333333333333%
		}
		.col-md-offset-5 {
		margin-left: 41.66666666666667%
		}
		.col-md-offset-6 {
		margin-left: 50%
		}
		.col-md-offset-7 {
		margin-left: 58.333333333333336%
		}
		.col-md-offset-8 {
		margin-left: 66.66666666666666%
		}
		.col-md-offset-9 {
		margin-left: 75%
		}
		.col-md-offset-10 {
		margin-left: 83.33333333333334%
		}
		.col-md-offset-11 {
		margin-left: 91.66666666666666%
		}
		}

		@media(min-width:1200px) {
		.container {
		max-width: 1170px
		}
		.col-lg-1,
		.col-lg-2,
		.col-lg-3,
		.col-lg-4,
		.col-lg-5,
		.col-lg-6,
		.col-lg-7,
		.col-lg-8,
		.col-lg-9,
		.col-lg-10,
		.col-lg-11 {
		float: left
		}
		.col-lg-1 {
		width: 8.333333333333332%
		}
		.col-lg-2 {
		width: 16.666666666666664%
		}
		.col-lg-3 {
		width: 25%
		}
		.col-lg-4 {
		width: 33.33333333333333%
		}
		.col-lg-5 {
		width: 41.66666666666667%
		}
		.col-lg-6 {
		width: 50%
		}
		.col-lg-7 {
		width: 58.333333333333336%
		}
		.col-lg-8 {
		width: 66.66666666666666%
		}
		.col-lg-9 {
		width: 75%
		}
		.col-lg-10 {
		width: 83.33333333333334%
		}
		.col-lg-11 {
		width: 91.66666666666666%
		}
		.col-lg-12 {
		width: 100%
		}
		.col-lg-push-0 {
		left: auto
		}
		.col-lg-push-1 {
		left: 8.333333333333332%
		}
		.col-lg-push-2 {
		left: 16.666666666666664%
		}
		.col-lg-push-3 {
		left: 25%
		}
		.col-lg-push-4 {
		left: 33.33333333333333%
		}
		.col-lg-push-5 {
		left: 41.66666666666667%
		}
		.col-lg-push-6 {
		left: 50%
		}
		.col-lg-push-7 {
		left: 58.333333333333336%
		}
		.col-lg-push-8 {
		left: 66.66666666666666%
		}
		.col-lg-push-9 {
		left: 75%
		}
		.col-lg-push-10 {
		left: 83.33333333333334%
		}
		.col-lg-push-11 {
		left: 91.66666666666666%
		}
		.col-lg-pull-0 {
		right: auto
		}
		.col-lg-pull-1 {
		right: 8.333333333333332%
		}
		.col-lg-pull-2 {
		right: 16.666666666666664%
		}
		.col-lg-pull-3 {
		right: 25%
		}
		.col-lg-pull-4 {
		right: 33.33333333333333%
		}
		.col-lg-pull-5 {
		right: 41.66666666666667%
		}
		.col-lg-pull-6 {
		right: 50%
		}
		.col-lg-pull-7 {
		right: 58.333333333333336%
		}
		.col-lg-pull-8 {
		right: 66.66666666666666%
		}
		.col-lg-pull-9 {
		right: 75%
		}
		.col-lg-pull-10 {
		right: 83.33333333333334%
		}
		.col-lg-pull-11 {
		right: 91.66666666666666%
		}
		.col-lg-offset-0 {
		margin-left: 0
		}
		.col-lg-offset-1 {
		margin-left: 8.333333333333332%
		}
		.col-lg-offset-2 {
		margin-left: 16.666666666666664%
		}
		.col-lg-offset-3 {
		margin-left: 25%
		}
		.col-lg-offset-4 {
		margin-left: 33.33333333333333%
		}
		.col-lg-offset-5 {
		margin-left: 41.66666666666667%
		}
		.col-lg-offset-6 {
		margin-left: 50%
		}
		.col-lg-offset-7 {
		margin-left: 58.333333333333336%
		}
		.col-lg-offset-8 {
		margin-left: 66.66666666666666%
		}
		.col-lg-offset-9 {
		margin-left: 75%
		}
		.col-lg-offset-10 {
		margin-left: 83.33333333333334%
		}
		.col-lg-offset-11 {
		margin-left: 91.66666666666666%
		}
		}

		table {
		max-width: 100%;
		background-color: transparent
		}

		th {
		text-align: left
		}

		.table {
		width: 100%;
		margin-bottom: 21px
		}

		.table thead>tr>th,
		.table tbody>tr>th,
		.table tfoot>tr>th,
		.table thead>tr>td,
		.table tbody>tr>td,
		.table tfoot>tr>td {
		padding: 8px;
		line-height: 1.428571429;
		vertical-align: top;
		border-top: 1px solid #ddd
		}

		.table thead>tr>th {
		vertical-align: bottom;
		border-bottom: 2px solid #ddd
		}

		.table caption+thead tr:first-child th,
		.table colgroup+thead tr:first-child th,
		.table thead:first-child tr:first-child th,
		.table caption+thead tr:first-child td,
		.table colgroup+thead tr:first-child td,
		.table thead:first-child tr:first-child td {
		border-top: 0
		}

		.table tbody+tbody {
		border-top: 2px solid #ddd
		}

		.table .table {
		background-color: #fff
		}

		.table-condensed thead>tr>th,
		.table-condensed tbody>tr>th,
		.table-condensed tfoot>tr>th,
		.table-condensed thead>tr>td,
		.table-condensed tbody>tr>td,
		.table-condensed tfoot>tr>td {
		padding: 5px
		}

		.table-bordered {
		border: 1px solid #ddd
		}

		.table-bordered>thead>tr>th,
		.table-bordered>tbody>tr>th,
		.table-bordered>tfoot>tr>th,
		.table-bordered>thead>tr>td,
		.table-bordered>tbody>tr>td,
		.table-bordered>tfoot>tr>td {
		border: 1px solid #ddd
		}

		.table-bordered>thead>tr>th,
		.table-bordered>thead>tr>td {
		border-bottom-width: 2px
		}

		.table-striped>tbody>tr:nth-child(odd)>td,
		.table-striped>tbody>tr:nth-child(odd)>th {
		background-color: #f9f9f9
		}

		.table-hover>tbody>tr:hover>td,
		.table-hover>tbody>tr:hover>th {
		background-color: #f5f5f5
		}

		table col[class*="col-"] {
		display: table-column;
		float: none
		}

		table td[class*="col-"],
		table th[class*="col-"] {
		display: table-cell;
		float: none
		}

		.table>thead>tr>td.active,
		.table>tbody>tr>td.active,
		.table>tfoot>tr>td.active,
		.table>thead>tr>th.active,
		.table>tbody>tr>th.active,
		.table>tfoot>tr>th.active,
		.table>thead>tr.active>td,
		.table>tbody>tr.active>td,
		.table>tfoot>tr.active>td,
		.table>thead>tr.active>th,
		.table>tbody>tr.active>th,
		.table>tfoot>tr.active>th {
		background-color: #f5f5f5
		}

		.table>thead>tr>td.success,
		.table>tbody>tr>td.success,
		.table>tfoot>tr>td.success,
		.table>thead>tr>th.success,
		.table>tbody>tr>th.success,
		.table>tfoot>tr>th.success,
		.table>thead>tr.success>td,
		.table>tbody>tr.success>td,
		.table>tfoot>tr.success>td,
		.table>thead>tr.success>th,
		.table>tbody>tr.success>th,
		.table>tfoot>tr.success>th {
		background-color: #dff0d8;
		border-color: #d6e9c6
		}

		.table-hover>tbody>tr>td.success:hover,
		.table-hover>tbody>tr>th.success:hover,
		.table-hover>tbody>tr.success:hover>td {
		background-color: #d0e9c6;
		border-color: #c9e2b3
		}

		.table>thead>tr>td.danger,
		.table>tbody>tr>td.danger,
		.table>tfoot>tr>td.danger,
		.table>thead>tr>th.danger,
		.table>tbody>tr>th.danger,
		.table>tfoot>tr>th.danger,
		.table>thead>tr.danger>td,
		.table>tbody>tr.danger>td,
		.table>tfoot>tr.danger>td,
		.table>thead>tr.danger>th,
		.table>tbody>tr.danger>th,
		.table>tfoot>tr.danger>th {
		background-color: #f2dede;
		border-color: #eed3d7
		}

		.table-hover>tbody>tr>td.danger:hover,
		.table-hover>tbody>tr>th.danger:hover,
		.table-hover>tbody>tr.danger:hover>td {
		background-color: #ebcccc;
		border-color: #e6c1c7
		}

		.table>thead>tr>td.warning,
		.table>tbody>tr>td.warning,
		.table>tfoot>tr>td.warning,
		.table>thead>tr>th.warning,
		.table>tbody>tr>th.warning,
		.table>tfoot>tr>th.warning,
		.table>thead>tr.warning>td,
		.table>tbody>tr.warning>td,
		.table>tfoot>tr.warning>td,
		.table>thead>tr.warning>th,
		.table>tbody>tr.warning>th,
		.table>tfoot>tr.warning>th {
		background-color: #fcf8e3;
		border-color: #fbeed5
		}

		.table-hover>tbody>tr>td.warning:hover,
		.table-hover>tbody>tr>th.warning:hover,
		.table-hover>tbody>tr.warning:hover>td {
		background-color: #faf2cc;
		border-color: #f8e5be
		}

		@media(max-width:768px) {
		.table-responsive {
		width: 100%;
		margin-bottom: 15px;
		overflow-x: scroll;
		overflow-y: hidden;
		border: 1px solid #ddd
		}
		.table-responsive>.table {
		margin-bottom: 0;
		background-color: #fff
		}
		.table-responsive>.table>thead>tr>th,
		.table-responsive>.table>tbody>tr>th,
		.table-responsive>.table>tfoot>tr>th,
		.table-responsive>.table>thead>tr>td,
		.table-responsive>.table>tbody>tr>td,
		.table-responsive>.table>tfoot>tr>td {
		white-space: nowrap
		}
		.table-responsive>.table-bordered {
		border: 0
		}
		.table-responsive>.table-bordered>thead>tr>th:first-child,
		.table-responsive>.table-bordered>tbody>tr>th:first-child,
		.table-responsive>.table-bordered>tfoot>tr>th:first-child,
		.table-responsive>.table-bordered>thead>tr>td:first-child,
		.table-responsive>.table-bordered>tbody>tr>td:first-child,
		.table-responsive>.table-bordered>tfoot>tr>td:first-child {
		border-left: 0
		}
		.table-responsive>.table-bordered>thead>tr>th:last-child,
		.table-responsive>.table-bordered>tbody>tr>th:last-child,
		.table-responsive>.table-bordered>tfoot>tr>th:last-child,
		.table-responsive>.table-bordered>thead>tr>td:last-child,
		.table-responsive>.table-bordered>tbody>tr>td:last-child,
		.table-responsive>.table-bordered>tfoot>tr>td:last-child {
		border-right: 0
		}
		.table-responsive>.table-bordered>thead>tr:last-child>th,
		.table-responsive>.table-bordered>tbody>tr:last-child>th,
		.table-responsive>.table-bordered>tfoot>tr:last-child>th,
		.table-responsive>.table-bordered>thead>tr:last-child>td,
		.table-responsive>.table-bordered>tbody>tr:last-child>td,
		.table-responsive>.table-bordered>tfoot>tr:last-child>td {
		border-bottom: 0
		}
		}

		fieldset {
		padding: 0;
		margin: 0;
		border: 0
		}

		legend {
		display: block;
		width: 100%;
		padding: 0;
		margin-bottom: 21px;
		font-size: 22.5px;
		line-height: inherit;
		color: #777;
		border: 0;
		border-bottom: 1px solid #e5e5e5
		}

		label {
		display: inline-block;
		margin-bottom: 5px;
		font-weight: bold
		}

		input[type="search"] {
		-webkit-box-sizing: border-box;
		-moz-box-sizing: border-box;
		box-sizing: border-box
		}

		input[type="radio"],
		input[type="checkbox"] {
		margin: 4px 0 0;
		margin-top: 1px \9;
		line-height: normal
		}

		input[type="file"] {
		display: block
		}

		select[multiple],
		select[size] {
		height: auto
		}

		select optgroup {
		font-family: inherit;
		font-size: inherit;
		font-style: inherit
		}

		input[type="file"]:focus,
		input[type="radio"]:focus,
		input[type="checkbox"]:focus {
		outline: thin dotted #333;
		outline: 5px auto -webkit-focus-ring-color;
		outline-offset: -2px
		}

		input[type="number"]::-webkit-outer-spin-button,
		input[type="number"]::-webkit-inner-spin-button {
		height: auto
		}

		.form-control:-moz-placeholder {
		color: #999
		}

		.form-control::-moz-placeholder {
		color: #999
		}

		.form-control:-ms-input-placeholder {
		color: #999
		}

		.form-control::-webkit-input-placeholder {
		color: #999
		}

		.form-control {
		display: block;
		width: 100%;
		height: 39px;
		padding: 8px 12px;
		font-size: 15px;
		line-height: 1.428571429;
		color: #777;
		vertical-align: middle;
		background-color: #fff;
		border: 1px solid #ccc;
		border-radius: 4px;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		-webkit-transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s;
		transition: border-color ease-in-out .15s, box-shadow ease-in-out .15s
		}

		.form-control:focus {
		border-color: #66afe9;
		outline: 0;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(102, 175, 233, 0.6)
		}

		.form-control[disabled],
		.form-control[readonly],
		fieldset[disabled] .form-control {
		cursor: not-allowed;
		background-color: #eee
		}

		textarea.form-control {
		height: auto
		}

		.form-group {
		margin-bottom: 15px
		}

		.radio,
		.checkbox {
		display: block;
		min-height: 21px;
		padding-left: 20px;
		margin-top: 10px;
		margin-bottom: 10px;
		vertical-align: middle
		}

		.radio label,
		.checkbox label {
		display: inline;
		margin-bottom: 0;
		font-weight: normal;
		cursor: pointer
		}

		.radio input[type="radio"],
		.radio-inline input[type="radio"],
		.checkbox input[type="checkbox"],
		.checkbox-inline input[type="checkbox"] {
		float: left;
		margin-left: -20px
		}

		.radio+.radio,
		.checkbox+.checkbox {
		margin-top: -5px
		}

		.radio-inline,
		.checkbox-inline {
		display: inline-block;
		padding-left: 20px;
		margin-bottom: 0;
		font-weight: normal;
		vertical-align: middle;
		cursor: pointer
		}

		.radio-inline+.radio-inline,
		.checkbox-inline+.checkbox-inline {
		margin-top: 0;
		margin-left: 10px
		}

		input[type="radio"][disabled],
		input[type="checkbox"][disabled],
		.radio[disabled],
		.radio-inline[disabled],
		.checkbox[disabled],
		.checkbox-inline[disabled],
		fieldset[disabled] input[type="radio"],
		fieldset[disabled] input[type="checkbox"],
		fieldset[disabled] .radio,
		fieldset[disabled] .radio-inline,
		fieldset[disabled] .checkbox,
		fieldset[disabled] .checkbox-inline {
		cursor: not-allowed
		}

		.input-sm {
		height: 31px;
		padding: 5px 10px;
		font-size: 13px;
		line-height: 1.5;
		border-radius: 3px
		}

		select.input-sm {
		height: 31px;
		line-height: 31px
		}

		textarea.input-sm {
		height: auto
		}

		.input-lg {
		height: 58px;
		padding: 14px 16px;
		font-size: 19px;
		line-height: 1.33;
		border-radius: 6px
		}

		select.input-lg {
		height: 58px;
		line-height: 58px
		}

		textarea.input-lg {
		height: auto
		}

		.has-warning .help-block,
		.has-warning .control-label {
		color: #c09853
		}

		.has-warning .form-control {
		border-color: #c09853;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075)
		}

		.has-warning .form-control:focus {
		border-color: #a47e3c;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #dbc59e;
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #dbc59e
		}

		.has-warning .input-group-addon {
		color: #c09853;
		background-color: #fcf8e3;
		border-color: #c09853
		}

		.has-error .help-block,
		.has-error .control-label {
		color: #b94a48
		}

		.has-error .form-control {
		border-color: #b94a48;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075)
		}

		.has-error .form-control:focus {
		border-color: #953b39;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #d59392;
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #d59392
		}

		.has-error .input-group-addon {
		color: #b94a48;
		background-color: #f2dede;
		border-color: #b94a48
		}

		.has-success .help-block,
		.has-success .control-label {
		color: #468847
		}

		.has-success .form-control {
		border-color: #468847;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075)
		}

		.has-success .form-control:focus {
		border-color: #356635;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #7aba7b;
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 6px #7aba7b
		}

		.has-success .input-group-addon {
		color: #468847;
		background-color: #dff0d8;
		border-color: #468847
		}

		.form-control-static {
		padding-top: 9px;
		margin-bottom: 0
		}

		.help-block {
		display: block;
		margin-top: 5px;
		margin-bottom: 10px;
		color: #b7b7b7
		}

		@media(min-width:768px) {
		.form-inline .form-group {
		display: inline-block;
		margin-bottom: 0;
		vertical-align: middle
		}
		.form-inline .form-control {
		display: inline-block
		}
		.form-inline .radio,
		.form-inline .checkbox {
		display: inline-block;
		padding-left: 0;
		margin-top: 0;
		margin-bottom: 0
		}
		.form-inline .radio input[type="radio"],
		.form-inline .checkbox input[type="checkbox"] {
		float: none;
		margin-left: 0
		}
		}

		.form-horizontal .control-label,
		.form-horizontal .radio,
		.form-horizontal .checkbox,
		.form-horizontal .radio-inline,
		.form-horizontal .checkbox-inline {
		padding-top: 9px;
		margin-top: 0;
		margin-bottom: 0
		}

		.form-horizontal .form-group {
		margin-right: -15px;
		margin-left: -15px
		}

		.form-horizontal .form-group:before,
		.form-horizontal .form-group:after {
		display: table;
		content: " "
		}

		.form-horizontal .form-group:after {
		clear: both
		}

		.form-horizontal .form-group:before,
		.form-horizontal .form-group:after {
		display: table;
		content: " "
		}

		.form-horizontal .form-group:after {
		clear: both
		}

		.form-horizontal .form-group:before,
		.form-horizontal .form-group:after {
		display: table;
		content: " "
		}

		.form-horizontal .form-group:after {
		clear: both
		}

		.form-horizontal .form-group:before,
		.form-horizontal .form-group:after {
		display: table;
		content: " "
		}

		.form-horizontal .form-group:after {
		clear: both
		}

		.form-horizontal .form-group:before,
		.form-horizontal .form-group:after {
		display: table;
		content: " "
		}

		.form-horizontal .form-group:after {
		clear: both
		}

		@media(min-width:768px) {
		.form-horizontal .control-label {
		text-align: right
		}
		}

		.btn {
		display: inline-block;
		padding: 8px 12px;
		margin-bottom: 0;
		font-size: 15px;
		font-weight: normal;
		line-height: 1.428571429;
		text-align: center;
		white-space: nowrap;
		vertical-align: middle;
		cursor: pointer;
		border: 1px solid transparent;
		border-radius: 4px;
		-webkit-user-select: none;
		-moz-user-select: none;
		-ms-user-select: none;
		-o-user-select: none;
		user-select: none
		}

		.btn:focus {
		outline: thin dotted #333;
		outline: 5px auto -webkit-focus-ring-color;
		outline-offset: -2px
		}

		.btn:hover,
		.btn:focus {
		color: #fff;
		text-decoration: none
		}

		.btn:active,
		.btn.active {
		background-image: none;
		outline: 0;
		-webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
		box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125)
		}

		.btn.disabled,
		.btn[disabled],
		fieldset[disabled] .btn {
		pointer-events: none;
		cursor: not-allowed;
		opacity: .65;
		filter: alpha(opacity=65);
		-webkit-box-shadow: none;
		box-shadow: none
		}

		.btn-default {
		color: #fff;
		background-color: #999;
		border-color: #999
		}

		.btn-default:hover,
		.btn-default:focus,
		.btn-default:active,
		.btn-default.active,
		.open .dropdown-toggle.btn-default {
		color: #fff;
		background-color: #858585;
		border-color: #7a7a7a
		}

		.btn-default:active,
		.btn-default.active,
		.open .dropdown-toggle.btn-default {
		background-image: none
		}

		.btn-default.disabled,
		.btn-default[disabled],
		fieldset[disabled] .btn-default,
		.btn-default.disabled:hover,
		.btn-default[disabled]:hover,
		fieldset[disabled] .btn-default:hover,
		.btn-default.disabled:focus,
		.btn-default[disabled]:focus,
		fieldset[disabled] .btn-default:focus,
		.btn-default.disabled:active,
		.btn-default[disabled]:active,
		fieldset[disabled] .btn-default:active,
		.btn-default.disabled.active,
		.btn-default[disabled].active,
		fieldset[disabled] .btn-default.active {
		background-color: #999;
		border-color: #999
		}

		.btn-primary {
		color: #fff;
		background-color: #eb6864;
		border-color: #eb6864
		}

		.btn-primary:hover,
		.btn-primary:focus,
		.btn-primary:active,
		.btn-primary.active,
		.open .dropdown-toggle.btn-primary {
		color: #fff;
		background-color: #e64540;
		border-color: #e4332e
		}

		.btn-primary:active,
		.btn-primary.active,
		.open .dropdown-toggle.btn-primary {
		background-image: none
		}

		.btn-primary.disabled,
		.btn-primary[disabled],
		fieldset[disabled] .btn-primary,
		.btn-primary.disabled:hover,
		.btn-primary[disabled]:hover,
		fieldset[disabled] .btn-primary:hover,
		.btn-primary.disabled:focus,
		.btn-primary[disabled]:focus,
		fieldset[disabled] .btn-primary:focus,
		.btn-primary.disabled:active,
		.btn-primary[disabled]:active,
		fieldset[disabled] .btn-primary:active,
		.btn-primary.disabled.active,
		.btn-primary[disabled].active,
		fieldset[disabled] .btn-primary.active {
		background-color: #eb6864;
		border-color: #eb6864
		}

		.btn-warning {
		color: #fff;
		background-color: #f5e625;
		border-color: #f5e625
		}

		.btn-warning:hover,
		.btn-warning:focus,
		.btn-warning:active,
		.btn-warning.active,
		.open .dropdown-toggle.btn-warning {
		color: #fff;
		background-color: #e7d70b;
		border-color: #d3c50a
		}

		.btn-warning:active,
		.btn-warning.active,
		.open .dropdown-toggle.btn-warning {
		background-image: none
		}

		.btn-warning.disabled,
		.btn-warning[disabled],
		fieldset[disabled] .btn-warning,
		.btn-warning.disabled:hover,
		.btn-warning[disabled]:hover,
		fieldset[disabled] .btn-warning:hover,
		.btn-warning.disabled:focus,
		.btn-warning[disabled]:focus,
		fieldset[disabled] .btn-warning:focus,
		.btn-warning.disabled:active,
		.btn-warning[disabled]:active,
		fieldset[disabled] .btn-warning:active,
		.btn-warning.disabled.active,
		.btn-warning[disabled].active,
		fieldset[disabled] .btn-warning.active {
		background-color: #f5e625;
		border-color: #f5e625
		}

		.btn-danger {
		color: #fff;
		background-color: #f57a00;
		border-color: #f57a00
		}

		.btn-danger:hover,
		.btn-danger:focus,
		.btn-danger:active,
		.btn-danger.active,
		.open .dropdown-toggle.btn-danger {
		color: #fff;
		background-color: #c60;
		border-color: #b85c00
		}

		.btn-danger:active,
		.btn-danger.active,
		.open .dropdown-toggle.btn-danger {
		background-image: none
		}

		.btn-danger.disabled,
		.btn-danger[disabled],
		fieldset[disabled] .btn-danger,
		.btn-danger.disabled:hover,
		.btn-danger[disabled]:hover,
		fieldset[disabled] .btn-danger:hover,
		.btn-danger.disabled:focus,
		.btn-danger[disabled]:focus,
		fieldset[disabled] .btn-danger:focus,
		.btn-danger.disabled:active,
		.btn-danger[disabled]:active,
		fieldset[disabled] .btn-danger:active,
		.btn-danger.disabled.active,
		.btn-danger[disabled].active,
		fieldset[disabled] .btn-danger.active {
		background-color: #f57a00;
		border-color: #f57a00
		}

		.btn-success {
		color: #fff;
		background-color: #22b24c;
		border-color: #22b24c
		}

		.btn-success:hover,
		.btn-success:focus,
		.btn-success:active,
		.btn-success.active,
		.open .dropdown-toggle.btn-success {
		color: #fff;
		background-color: #1b903d;
		border-color: #187f36
		}

		.btn-success:active,
		.btn-success.active,
		.open .dropdown-toggle.btn-success {
		background-image: none
		}

		.btn-success.disabled,
		.btn-success[disabled],
		fieldset[disabled] .btn-success,
		.btn-success.disabled:hover,
		.btn-success[disabled]:hover,
		fieldset[disabled] .btn-success:hover,
		.btn-success.disabled:focus,
		.btn-success[disabled]:focus,
		fieldset[disabled] .btn-success:focus,
		.btn-success.disabled:active,
		.btn-success[disabled]:active,
		fieldset[disabled] .btn-success:active,
		.btn-success.disabled.active,
		.btn-success[disabled].active,
		fieldset[disabled] .btn-success.active {
		background-color: #22b24c;
		border-color: #22b24c
		}

		.btn-info {
		color: #fff;
		background-color: #369;
		border-color: #369
		}

		.btn-info:hover,
		.btn-info:focus,
		.btn-info:active,
		.btn-info.active,
		.open .dropdown-toggle.btn-info {
		color: #fff;
		background-color: #29527a;
		border-color: #24476b
		}

		.btn-info:active,
		.btn-info.active,
		.open .dropdown-toggle.btn-info {
		background-image: none
		}

		.btn-info.disabled,
		.btn-info[disabled],
		fieldset[disabled] .btn-info,
		.btn-info.disabled:hover,
		.btn-info[disabled]:hover,
		fieldset[disabled] .btn-info:hover,
		.btn-info.disabled:focus,
		.btn-info[disabled]:focus,
		fieldset[disabled] .btn-info:focus,
		.btn-info.disabled:active,
		.btn-info[disabled]:active,
		fieldset[disabled] .btn-info:active,
		.btn-info.disabled.active,
		.btn-info[disabled].active,
		fieldset[disabled] .btn-info.active {
		background-color: #369;
		border-color: #369
		}

		.btn-link {
		font-weight: normal;
		color: #eb6864;
		cursor: pointer;
		border-radius: 0
		}

		.btn-link,
		.btn-link:active,
		.btn-link[disabled],
		fieldset[disabled] .btn-link {
		background-color: transparent;
		-webkit-box-shadow: none;
		box-shadow: none
		}

		.btn-link,
		.btn-link:hover,
		.btn-link:focus,
		.btn-link:active {
		border-color: transparent
		}

		.btn-link:hover,
		.btn-link:focus {
		color: #e22620;
		text-decoration: underline;
		background-color: transparent
		}

		.btn-link[disabled]:hover,
		fieldset[disabled] .btn-link:hover,
		.btn-link[disabled]:focus,
		fieldset[disabled] .btn-link:focus {
		color: #999;
		text-decoration: none
		}

		.btn-lg {
		padding: 14px 16px;
		font-size: 19px;
		line-height: 1.33;
		border-radius: 6px
		}

		.btn-sm,
		.btn-xs {
		padding: 5px 10px;
		font-size: 13px;
		line-height: 1.5;
		border-radius: 3px
		}

		.btn-xs {
		padding: 1px 5px
		}

		.btn-block {
		display: block;
		width: 100%;
		padding-right: 0;
		padding-left: 0
		}

		.btn-block+.btn-block {
		margin-top: 5px
		}

		input[type="submit"].btn-block,
		input[type="reset"].btn-block,
		input[type="button"].btn-block {
		width: 100%
		}

		.fade {
		opacity: 0;
		-webkit-transition: opacity .15s linear;
		transition: opacity .15s linear
		}

		.fade.in {
		opacity: 1
		}

		.collapse {
		display: none
		}

		.collapse.in {
		display: block
		}

		.collapsing {
		position: relative;
		height: 0;
		overflow: hidden;
		-webkit-transition: height .35s ease;
		transition: height .35s ease
		}

		@font-face {
		font-family: 'Glyphicons Halflings';
		src: url('../fonts/glyphicons-halflings-regular.eot');
		src: url('../fonts/glyphicons-halflings-regular.eot?#iefix') format('embedded-opentype'), url('../fonts/glyphicons-halflings-regular.woff') format('woff'), url('../fonts/glyphicons-halflings-regular.ttf') format('truetype'), url('../fonts/glyphicons-halflings-regular.svg#glyphicons-halflingsregular') format('svg')
		}

		.glyphicon {
		position: relative;
		top: 1px;
		display: inline-block;
		font-family: 'Glyphicons Halflings';
		-webkit-font-smoothing: antialiased;
		font-style: normal;
		font-weight: normal;
		line-height: 1
		}

		.glyphicon-asterisk:before {
		content: "\2a"
		}

		.glyphicon-plus:before {
		content: "\2b"
		}

		.glyphicon-euro:before {
		content: "\20ac"
		}

		.glyphicon-minus:before {
		content: "\2212"
		}

		.glyphicon-cloud:before {
		content: "\2601"
		}

		.glyphicon-envelope:before {
		content: "\2709"
		}

		.glyphicon-pencil:before {
		content: "\270f"
		}

		.glyphicon-glass:before {
		content: "\e001"
		}

		.glyphicon-music:before {
		content: "\e002"
		}

		.glyphicon-search:before {
		content: "\e003"
		}

		.glyphicon-heart:before {
		content: "\e005"
		}

		.glyphicon-star:before {
		content: "\e006"
		}

		.glyphicon-star-empty:before {
		content: "\e007"
		}

		.glyphicon-user:before {
		content: "\e008"
		}

		.glyphicon-film:before {
		content: "\e009"
		}

		.glyphicon-th-large:before {
		content: "\e010"
		}

		.glyphicon-th:before {
		content: "\e011"
		}

		.glyphicon-th-list:before {
		content: "\e012"
		}

		.glyphicon-ok:before {
		content: "\e013"
		}

		.glyphicon-remove:before {
		content: "\e014"
		}

		.glyphicon-zoom-in:before {
		content: "\e015"
		}

		.glyphicon-zoom-out:before {
		content: "\e016"
		}

		.glyphicon-off:before {
		content: "\e017"
		}

		.glyphicon-signal:before {
		content: "\e018"
		}

		.glyphicon-cog:before {
		content: "\e019"
		}

		.glyphicon-trash:before {
		content: "\e020"
		}

		.glyphicon-home:before {
		content: "\e021"
		}

		.glyphicon-file:before {
		content: "\e022"
		}

		.glyphicon-time:before {
		content: "\e023"
		}

		.glyphicon-road:before {
		content: "\e024"
		}

		.glyphicon-download-alt:before {
		content: "\e025"
		}

		.glyphicon-download:before {
		content: "\e026"
		}

		.glyphicon-upload:before {
		content: "\e027"
		}

		.glyphicon-inbox:before {
		content: "\e028"
		}

		.glyphicon-play-circle:before {
		content: "\e029"
		}

		.glyphicon-repeat:before {
		content: "\e030"
		}

		.glyphicon-refresh:before {
		content: "\e031"
		}

		.glyphicon-list-alt:before {
		content: "\e032"
		}

		.glyphicon-flag:before {
		content: "\e034"
		}

		.glyphicon-headphones:before {
		content: "\e035"
		}

		.glyphicon-volume-off:before {
		content: "\e036"
		}

		.glyphicon-volume-down:before {
		content: "\e037"
		}

		.glyphicon-volume-up:before {
		content: "\e038"
		}

		.glyphicon-qrcode:before {
		content: "\e039"
		}

		.glyphicon-barcode:before {
		content: "\e040"
		}

		.glyphicon-tag:before {
		content: "\e041"
		}

		.glyphicon-tags:before {
		content: "\e042"
		}

		.glyphicon-book:before {
		content: "\e043"
		}

		.glyphicon-print:before {
		content: "\e045"
		}

		.glyphicon-font:before {
		content: "\e047"
		}

		.glyphicon-bold:before {
		content: "\e048"
		}

		.glyphicon-italic:before {
		content: "\e049"
		}

		.glyphicon-text-height:before {
		content: "\e050"
		}

		.glyphicon-text-width:before {
		content: "\e051"
		}

		.glyphicon-align-left:before {
		content: "\e052"
		}

		.glyphicon-align-center:before {
		content: "\e053"
		}

		.glyphicon-align-right:before {
		content: "\e054"
		}

		.glyphicon-align-justify:before {
		content: "\e055"
		}

		.glyphicon-list:before {
		content: "\e056"
		}

		.glyphicon-indent-left:before {
		content: "\e057"
		}

		.glyphicon-indent-right:before {
		content: "\e058"
		}

		.glyphicon-facetime-video:before {
		content: "\e059"
		}

		.glyphicon-picture:before {
		content: "\e060"
		}

		.glyphicon-map-marker:before {
		content: "\e062"
		}

		.glyphicon-adjust:before {
		content: "\e063"
		}

		.glyphicon-tint:before {
		content: "\e064"
		}

		.glyphicon-edit:before {
		content: "\e065"
		}

		.glyphicon-share:before {
		content: "\e066"
		}

		.glyphicon-check:before {
		content: "\e067"
		}

		.glyphicon-move:before {
		content: "\e068"
		}

		.glyphicon-step-backward:before {
		content: "\e069"
		}

		.glyphicon-fast-backward:before {
		content: "\e070"
		}

		.glyphicon-backward:before {
		content: "\e071"
		}

		.glyphicon-play:before {
		content: "\e072"
		}

		.glyphicon-pause:before {
		content: "\e073"
		}

		.glyphicon-stop:before {
		content: "\e074"
		}

		.glyphicon-forward:before {
		content: "\e075"
		}

		.glyphicon-fast-forward:before {
		content: "\e076"
		}

		.glyphicon-step-forward:before {
		content: "\e077"
		}

		.glyphicon-eject:before {
		content: "\e078"
		}

		.glyphicon-chevron-left:before {
		content: "\e079"
		}

		.glyphicon-chevron-right:before {
		content: "\e080"
		}

		.glyphicon-plus-sign:before {
		content: "\e081"
		}

		.glyphicon-minus-sign:before {
		content: "\e082"
		}

		.glyphicon-remove-sign:before {
		content: "\e083"
		}

		.glyphicon-ok-sign:before {
		content: "\e084"
		}

		.glyphicon-question-sign:before {
		content: "\e085"
		}

		.glyphicon-info-sign:before {
		content: "\e086"
		}

		.glyphicon-screenshot:before {
		content: "\e087"
		}

		.glyphicon-remove-circle:before {
		content: "\e088"
		}

		.glyphicon-ok-circle:before {
		content: "\e089"
		}

		.glyphicon-ban-circle:before {
		content: "\e090"
		}

		.glyphicon-arrow-left:before {
		content: "\e091"
		}

		.glyphicon-arrow-right:before {
		content: "\e092"
		}

		.glyphicon-arrow-up:before {
		content: "\e093"
		}

		.glyphicon-arrow-down:before {
		content: "\e094"
		}

		.glyphicon-share-alt:before {
		content: "\e095"
		}

		.glyphicon-resize-full:before {
		content: "\e096"
		}

		.glyphicon-resize-small:before {
		content: "\e097"
		}

		.glyphicon-exclamation-sign:before {
		content: "\e101"
		}

		.glyphicon-gift:before {
		content: "\e102"
		}

		.glyphicon-leaf:before {
		content: "\e103"
		}

		.glyphicon-eye-open:before {
		content: "\e105"
		}

		.glyphicon-eye-close:before {
		content: "\e106"
		}

		.glyphicon-warning-sign:before {
		content: "\e107"
		}

		.glyphicon-plane:before {
		content: "\e108"
		}

		.glyphicon-random:before {
		content: "\e110"
		}

		.glyphicon-comment:before {
		content: "\e111"
		}

		.glyphicon-magnet:before {
		content: "\e112"
		}

		.glyphicon-chevron-up:before {
		content: "\e113"
		}

		.glyphicon-chevron-down:before {
		content: "\e114"
		}

		.glyphicon-retweet:before {
		content: "\e115"
		}

		.glyphicon-shopping-cart:before {
		content: "\e116"
		}

		.glyphicon-folder-close:before {
		content: "\e117"
		}

		.glyphicon-folder-open:before {
		content: "\e118"
		}

		.glyphicon-resize-vertical:before {
		content: "\e119"
		}

		.glyphicon-resize-horizontal:before {
		content: "\e120"
		}

		.glyphicon-hdd:before {
		content: "\e121"
		}

		.glyphicon-bullhorn:before {
		content: "\e122"
		}

		.glyphicon-certificate:before {
		content: "\e124"
		}

		.glyphicon-thumbs-up:before {
		content: "\e125"
		}

		.glyphicon-thumbs-down:before {
		content: "\e126"
		}

		.glyphicon-hand-right:before {
		content: "\e127"
		}

		.glyphicon-hand-left:before {
		content: "\e128"
		}

		.glyphicon-hand-up:before {
		content: "\e129"
		}

		.glyphicon-hand-down:before {
		content: "\e130"
		}

		.glyphicon-circle-arrow-right:before {
		content: "\e131"
		}

		.glyphicon-circle-arrow-left:before {
		content: "\e132"
		}

		.glyphicon-circle-arrow-up:before {
		content: "\e133"
		}

		.glyphicon-circle-arrow-down:before {
		content: "\e134"
		}

		.glyphicon-globe:before {
		content: "\e135"
		}

		.glyphicon-tasks:before {
		content: "\e137"
		}

		.glyphicon-filter:before {
		content: "\e138"
		}

		.glyphicon-fullscreen:before {
		content: "\e140"
		}

		.glyphicon-dashboard:before {
		content: "\e141"
		}

		.glyphicon-heart-empty:before {
		content: "\e143"
		}

		.glyphicon-link:before {
		content: "\e144"
		}

		.glyphicon-phone:before {
		content: "\e145"
		}

		.glyphicon-usd:before {
		content: "\e148"
		}

		.glyphicon-gbp:before {
		content: "\e149"
		}

		.glyphicon-sort:before {
		content: "\e150"
		}

		.glyphicon-sort-by-alphabet:before {
		content: "\e151"
		}

		.glyphicon-sort-by-alphabet-alt:before {
		content: "\e152"
		}

		.glyphicon-sort-by-order:before {
		content: "\e153"
		}

		.glyphicon-sort-by-order-alt:before {
		content: "\e154"
		}

		.glyphicon-sort-by-attributes:before {
		content: "\e155"
		}

		.glyphicon-sort-by-attributes-alt:before {
		content: "\e156"
		}

		.glyphicon-unchecked:before {
		content: "\e157"
		}

		.glyphicon-expand:before {
		content: "\e158"
		}

		.glyphicon-collapse-down:before {
		content: "\e159"
		}

		.glyphicon-collapse-up:before {
		content: "\e160"
		}

		.glyphicon-log-in:before {
		content: "\e161"
		}

		.glyphicon-flash:before {
		content: "\e162"
		}

		.glyphicon-log-out:before {
		content: "\e163"
		}

		.glyphicon-new-window:before {
		content: "\e164"
		}

		.glyphicon-record:before {
		content: "\e165"
		}

		.glyphicon-save:before {
		content: "\e166"
		}

		.glyphicon-open:before {
		content: "\e167"
		}

		.glyphicon-saved:before {
		content: "\e168"
		}

		.glyphicon-import:before {
		content: "\e169"
		}

		.glyphicon-export:before {
		content: "\e170"
		}

		.glyphicon-send:before {
		content: "\e171"
		}

		.glyphicon-floppy-disk:before {
		content: "\e172"
		}

		.glyphicon-floppy-saved:before {
		content: "\e173"
		}

		.glyphicon-floppy-remove:before {
		content: "\e174"
		}

		.glyphicon-floppy-save:before {
		content: "\e175"
		}

		.glyphicon-floppy-open:before {
		content: "\e176"
		}

		.glyphicon-credit-card:before {
		content: "\e177"
		}

		.glyphicon-transfer:before {
		content: "\e178"
		}

		.glyphicon-cutlery:before {
		content: "\e179"
		}

		.glyphicon-header:before {
		content: "\e180"
		}

		.glyphicon-compressed:before {
		content: "\e181"
		}

		.glyphicon-earphone:before {
		content: "\e182"
		}

		.glyphicon-phone-alt:before {
		content: "\e183"
		}

		.glyphicon-tower:before {
		content: "\e184"
		}

		.glyphicon-stats:before {
		content: "\e185"
		}

		.glyphicon-sd-video:before {
		content: "\e186"
		}

		.glyphicon-hd-video:before {
		content: "\e187"
		}

		.glyphicon-subtitles:before {
		content: "\e188"
		}

		.glyphicon-sound-stereo:before {
		content: "\e189"
		}

		.glyphicon-sound-dolby:before {
		content: "\e190"
		}

		.glyphicon-sound-5-1:before {
		content: "\e191"
		}

		.glyphicon-sound-6-1:before {
		content: "\e192"
		}

		.glyphicon-sound-7-1:before {
		content: "\e193"
		}

		.glyphicon-copyright-mark:before {
		content: "\e194"
		}

		.glyphicon-registration-mark:before {
		content: "\e195"
		}

		.glyphicon-cloud-download:before {
		content: "\e197"
		}

		.glyphicon-cloud-upload:before {
		content: "\e198"
		}

		.glyphicon-tree-conifer:before {
		content: "\e199"
		}

		.glyphicon-tree-deciduous:before {
		content: "\e200"
		}

		.glyphicon-briefcase:before {
		content: "\1f4bc"
		}

		.glyphicon-calendar:before {
		content: "\1f4c5"
		}

		.glyphicon-pushpin:before {
		content: "\1f4cc"
		}

		.glyphicon-paperclip:before {
		content: "\1f4ce"
		}

		.glyphicon-camera:before {
		content: "\1f4f7"
		}

		.glyphicon-lock:before {
		content: "\1f512"
		}

		.glyphicon-bell:before {
		content: "\1f514"
		}

		.glyphicon-bookmark:before {
		content: "\1f516"
		}

		.glyphicon-fire:before {
		content: "\1f525"
		}

		.glyphicon-wrench:before {
		content: "\1f527"
		}

		.caret {
		display: inline-block;
		width: 0;
		height: 0;
		margin-left: 2px;
		vertical-align: middle;
		border-top: 4px solid #000;
		border-right: 4px solid transparent;
		border-bottom: 0 dotted;
		border-left: 4px solid transparent;
		content: ""
		}

		.dropdown {
		position: relative
		}

		.dropdown-toggle:focus {
		outline: 0
		}

		.dropdown-menu {
		position: absolute;
		top: 100%;
		left: 0;
		z-index: 1000;
		display: none;
		float: left;
		min-width: 160px;
		padding: 5px 0;
		margin: 2px 0 0;
		font-size: 15px;
		list-style: none;
		background-color: #fff;
		border: 1px solid #ccc;
		border: 1px solid rgba(0, 0, 0, 0.15);
		border-radius: 4px;
		-webkit-box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
		box-shadow: 0 6px 12px rgba(0, 0, 0, 0.175);
		background-clip: padding-box
		}

		.dropdown-menu.pull-right {
		right: 0;
		left: auto
		}

		.dropdown-menu .divider {
		height: 1px;
		margin: 9.5px 0;
		overflow: hidden;
		background-color: #e5e5e5
		}

		.dropdown-menu>li>a {
		display: block;
		padding: 3px 20px;
		clear: both;
		font-weight: normal;
		line-height: 1.428571429;
		color: #333;
		white-space: nowrap
		}

		.dropdown-menu>li>a:hover,
		.dropdown-menu>li>a:focus {
		color: #fff;
		text-decoration: none;
		background-color: #eb6864
		}

		.dropdown-menu>.active>a,
		.dropdown-menu>.active>a:hover,
		.dropdown-menu>.active>a:focus {
		color: #fff;
		text-decoration: none;
		background-color: #eb6864;
		outline: 0
		}

		.dropdown-menu>.disabled>a,
		.dropdown-menu>.disabled>a:hover,
		.dropdown-menu>.disabled>a:focus {
		color: #999
		}

		.dropdown-menu>.disabled>a:hover,
		.dropdown-menu>.disabled>a:focus {
		text-decoration: none;
		cursor: not-allowed;
		background-color: transparent;
		background-image: none;
		filter: progid: DXImageTransform.Microsoft.gradient(enabled=false)
		}

		.open>.dropdown-menu {
		display: block
		}

		.open>a {
		outline: 0
		}

		.dropdown-header {
		display: block;
		padding: 3px 20px;
		font-size: 13px;
		line-height: 1.428571429;
		color: #999
		}

		.dropdown-backdrop {
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		z-index: 990
		}

		.pull-right>.dropdown-menu {
		right: 0;
		left: auto
		}

		.dropup .caret,
		.navbar-fixed-bottom .dropdown .caret {
		border-top: 0 dotted;
		border-bottom: 4px solid #000;
		content: ""
		}

		.dropup .dropdown-menu,
		.navbar-fixed-bottom .dropdown .dropdown-menu {
		top: auto;
		bottom: 100%;
		margin-bottom: 1px
		}

		@media(min-width:768px) {
		.navbar-right .dropdown-menu {
		right: 0;
		left: auto
		}
		}

		.btn-default .caret {
		border-top-color: #fff
		}

		.btn-primary .caret,
		.btn-success .caret,
		.btn-warning .caret,
		.btn-danger .caret,
		.btn-info .caret {
		border-top-color: #fff
		}

		.dropup .btn-default .caret {
		border-bottom-color: #fff
		}

		.dropup .btn-primary .caret,
		.dropup .btn-success .caret,
		.dropup .btn-warning .caret,
		.dropup .btn-danger .caret,
		.dropup .btn-info .caret {
		border-bottom-color: #fff
		}

		.btn-group,
		.btn-group-vertical {
		position: relative;
		display: inline-block;
		vertical-align: middle
		}

		.btn-group>.btn,
		.btn-group-vertical>.btn {
		position: relative;
		float: left
		}

		.btn-group>.btn:hover,
		.btn-group-vertical>.btn:hover,
		.btn-group>.btn:focus,
		.btn-group-vertical>.btn:focus,
		.btn-group>.btn:active,
		.btn-group-vertical>.btn:active,
		.btn-group>.btn.active,
		.btn-group-vertical>.btn.active {
		z-index: 2
		}

		.btn-group>.btn:focus,
		.btn-group-vertical>.btn:focus {
		outline: 0
		}

		.btn-group .btn+.btn,
		.btn-group .btn+.btn-group,
		.btn-group .btn-group+.btn,
		.btn-group .btn-group+.btn-group {
		margin-left: -1px
		}

		.btn-toolbar:before,
		.btn-toolbar:after {
		display: table;
		content: " "
		}

		.btn-toolbar:after {
		clear: both
		}

		.btn-toolbar:before,
		.btn-toolbar:after {
		display: table;
		content: " "
		}

		.btn-toolbar:after {
		clear: both
		}

		.btn-toolbar:before,
		.btn-toolbar:after {
		display: table;
		content: " "
		}

		.btn-toolbar:after {
		clear: both
		}

		.btn-toolbar:before,
		.btn-toolbar:after {
		display: table;
		content: " "
		}

		.btn-toolbar:after {
		clear: both
		}

		.btn-toolbar:before,
		.btn-toolbar:after {
		display: table;
		content: " "
		}

		.btn-toolbar:after {
		clear: both
		}

		.btn-toolbar .btn-group {
		float: left
		}

		.btn-toolbar>.btn+.btn,
		.btn-toolbar>.btn-group+.btn,
		.btn-toolbar>.btn+.btn-group,
		.btn-toolbar>.btn-group+.btn-group {
		margin-left: 5px
		}

		.btn-group>.btn:not(:first-child):not(:last-child):not(.dropdown-toggle) {
		border-radius: 0
		}

		.btn-group>.btn:first-child {
		margin-left: 0
		}

		.btn-group>.btn:first-child:not(:last-child):not(.dropdown-toggle) {
		border-top-right-radius: 0;
		border-bottom-right-radius: 0
		}

		.btn-group>.btn:last-child:not(:first-child),
		.btn-group>.dropdown-toggle:not(:first-child) {
		border-bottom-left-radius: 0;
		border-top-left-radius: 0
		}

		.btn-group>.btn-group {
		float: left
		}

		.btn-group>.btn-group:not(:first-child):not(:last-child)>.btn {
		border-radius: 0
		}

		.btn-group>.btn-group:first-child>.btn:last-child,
		.btn-group>.btn-group:first-child>.dropdown-toggle {
		border-top-right-radius: 0;
		border-bottom-right-radius: 0
		}

		.btn-group>.btn-group:last-child>.btn:first-child {
		border-bottom-left-radius: 0;
		border-top-left-radius: 0
		}

		.btn-group .dropdown-toggle:active,
		.btn-group.open .dropdown-toggle {
		outline: 0
		}

		.btn-group-xs>.btn {
		padding: 5px 10px;
		padding: 1px 5px;
		font-size: 13px;
		line-height: 1.5;
		border-radius: 3px
		}

		.btn-group-sm>.btn {
		padding: 5px 10px;
		font-size: 13px;
		line-height: 1.5;
		border-radius: 3px
		}

		.btn-group-lg>.btn {
		padding: 14px 16px;
		font-size: 19px;
		line-height: 1.33;
		border-radius: 6px
		}

		.btn-group>.btn+.dropdown-toggle {
		padding-right: 8px;
		padding-left: 8px
		}

		.btn-group>.btn-lg+.dropdown-toggle {
		padding-right: 12px;
		padding-left: 12px
		}

		.btn-group.open .dropdown-toggle {
		-webkit-box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125);
		box-shadow: inset 0 3px 5px rgba(0, 0, 0, 0.125)
		}

		.btn .caret {
		margin-left: 0
		}

		.btn-lg .caret {
		border-width: 5px 5px 0;
		border-bottom-width: 0
		}

		.dropup .btn-lg .caret {
		border-width: 0 5px 5px
		}

		.btn-group-vertical>.btn,
		.btn-group-vertical>.btn-group {
		display: block;
		float: none;
		width: 100%;
		max-width: 100%
		}

		.btn-group-vertical>.btn-group:before,
		.btn-group-vertical>.btn-group:after {
		display: table;
		content: " "
		}

		.btn-group-vertical>.btn-group:after {
		clear: both
		}

		.btn-group-vertical>.btn-group:before,
		.btn-group-vertical>.btn-group:after {
		display: table;
		content: " "
		}

		.btn-group-vertical>.btn-group:after {
		clear: both
		}

		.btn-group-vertical>.btn-group:before,
		.btn-group-vertical>.btn-group:after {
		display: table;
		content: " "
		}

		.btn-group-vertical>.btn-group:after {
		clear: both
		}

		.btn-group-vertical>.btn-group:before,
		.btn-group-vertical>.btn-group:after {
		display: table;
		content: " "
		}

		.btn-group-vertical>.btn-group:after {
		clear: both
		}

		.btn-group-vertical>.btn-group:before,
		.btn-group-vertical>.btn-group:after {
		display: table;
		content: " "
		}

		.btn-group-vertical>.btn-group:after {
		clear: both
		}

		.btn-group-vertical>.btn-group>.btn {
		float: none
		}

		.btn-group-vertical>.btn+.btn,
		.btn-group-vertical>.btn+.btn-group,
		.btn-group-vertical>.btn-group+.btn,
		.btn-group-vertical>.btn-group+.btn-group {
		margin-top: -1px;
		margin-left: 0
		}

		.btn-group-vertical>.btn:not(:first-child):not(:last-child) {
		border-radius: 0
		}

		.btn-group-vertical>.btn:first-child:not(:last-child) {
		border-top-right-radius: 4px;
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0
		}

		.btn-group-vertical>.btn:last-child:not(:first-child) {
		border-top-right-radius: 0;
		border-bottom-left-radius: 4px;
		border-top-left-radius: 0
		}

		.btn-group-vertical>.btn-group:not(:first-child):not(:last-child)>.btn {
		border-radius: 0
		}

		.btn-group-vertical>.btn-group:first-child>.btn:last-child,
		.btn-group-vertical>.btn-group:first-child>.dropdown-toggle {
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0
		}

		.btn-group-vertical>.btn-group:last-child>.btn:first-child {
		border-top-right-radius: 0;
		border-top-left-radius: 0
		}

		.btn-group-justified {
		display: table;
		width: 100%;
		border-collapse: separate;
		table-layout: fixed
		}

		.btn-group-justified .btn {
		display: table-cell;
		float: none;
		width: 1%
		}

		[data-toggle="buttons"]>.btn>input[type="radio"],
		[data-toggle="buttons"]>.btn>input[type="checkbox"] {
		display: none
		}

		.input-group {
		position: relative;
		display: table;
		border-collapse: separate
		}

		.input-group.col {
		float: none;
		padding-right: 0;
		padding-left: 0
		}

		.input-group .form-control {
		width: 100%;
		margin-bottom: 0
		}

		.input-group-lg>.form-control,
		.input-group-lg>.input-group-addon,
		.input-group-lg>.input-group-btn>.btn {
		height: 58px;
		padding: 14px 16px;
		font-size: 19px;
		line-height: 1.33;
		border-radius: 6px
		}

		select.input-group-lg>.form-control,
		select.input-group-lg>.input-group-addon,
		select.input-group-lg>.input-group-btn>.btn {
		height: 58px;
		line-height: 58px
		}

		textarea.input-group-lg>.form-control,
		textarea.input-group-lg>.input-group-addon,
		textarea.input-group-lg>.input-group-btn>.btn {
		height: auto
		}

		.input-group-sm>.form-control,
		.input-group-sm>.input-group-addon,
		.input-group-sm>.input-group-btn>.btn {
		height: 31px;
		padding: 5px 10px;
		font-size: 13px;
		line-height: 1.5;
		border-radius: 3px
		}

		select.input-group-sm>.form-control,
		select.input-group-sm>.input-group-addon,
		select.input-group-sm>.input-group-btn>.btn {
		height: 31px;
		line-height: 31px
		}

		textarea.input-group-sm>.form-control,
		textarea.input-group-sm>.input-group-addon,
		textarea.input-group-sm>.input-group-btn>.btn {
		height: auto
		}

		.input-group-addon,
		.input-group-btn,
		.input-group .form-control {
		display: table-cell
		}

		.input-group-addon:not(:first-child):not(:last-child),
		.input-group-btn:not(:first-child):not(:last-child),
		.input-group .form-control:not(:first-child):not(:last-child) {
		border-radius: 0
		}

		.input-group-addon,
		.input-group-btn {
		width: 1%;
		white-space: nowrap;
		vertical-align: middle
		}

		.input-group-addon {
		padding: 8px 12px;
		font-size: 15px;
		font-weight: normal;
		line-height: 1;
		text-align: center;
		background-color: #eee;
		border: 1px solid #ccc;
		border-radius: 4px
		}

		.input-group-addon.input-sm {
		padding: 5px 10px;
		font-size: 13px;
		border-radius: 3px
		}

		.input-group-addon.input-lg {
		padding: 14px 16px;
		font-size: 19px;
		border-radius: 6px
		}

		.input-group-addon input[type="radio"],
		.input-group-addon input[type="checkbox"] {
		margin-top: 0
		}

		.input-group .form-control:first-child,
		.input-group-addon:first-child,
		.input-group-btn:first-child>.btn,
		.input-group-btn:first-child>.dropdown-toggle,
		.input-group-btn:last-child>.btn:not(:last-child):not(.dropdown-toggle) {
		border-top-right-radius: 0;
		border-bottom-right-radius: 0
		}

		.input-group-addon:first-child {
		border-right: 0
		}

		.input-group .form-control:last-child,
		.input-group-addon:last-child,
		.input-group-btn:last-child>.btn,
		.input-group-btn:last-child>.dropdown-toggle,
		.input-group-btn:first-child>.btn:not(:first-child) {
		border-bottom-left-radius: 0;
		border-top-left-radius: 0
		}

		.input-group-addon:last-child {
		border-left: 0
		}

		.input-group-btn {
		position: relative;
		white-space: nowrap
		}

		.input-group-btn>.btn {
		position: relative
		}

		.input-group-btn>.btn+.btn {
		margin-left: -4px
		}

		.input-group-btn>.btn:hover,
		.input-group-btn>.btn:active {
		z-index: 2
		}

		.nav {
		padding-left: 0;
		margin-bottom: 0;
		list-style: none
		}

		.nav:before,
		.nav:after {
		display: table;
		content: " "
		}

		.nav:after {
		clear: both
		}

		.nav:before,
		.nav:after {
		display: table;
		content: " "
		}

		.nav:after {
		clear: both
		}

		.nav:before,
		.nav:after {
		display: table;
		content: " "
		}

		.nav:after {
		clear: both
		}

		.nav:before,
		.nav:after {
		display: table;
		content: " "
		}

		.nav:after {
		clear: both
		}

		.nav:before,
		.nav:after {
		display: table;
		content: " "
		}

		.nav:after {
		clear: both
		}

		.nav>li {
		position: relative;
		display: block
		}

		.nav>li>a {
		position: relative;
		display: block;
		padding: 10px 15px
		}

		.nav>li>a:hover,
		.nav>li>a:focus {
		text-decoration: none;
		background-color: #eee
		}

		.nav>li.disabled>a {
		color: #999
		}

		.nav>li.disabled>a:hover,
		.nav>li.disabled>a:focus {
		color: #999;
		text-decoration: none;
		cursor: not-allowed;
		background-color: transparent
		}

		.nav .open>a,
		.nav .open>a:hover,
		.nav .open>a:focus {
		background-color: #eee;
		border-color: #eb6864
		}

		.nav .nav-divider {
		height: 1px;
		margin: 9.5px 0;
		overflow: hidden;
		background-color: #e5e5e5
		}

		.nav>li>a>img {
		max-width: none
		}

		.nav-tabs {
		border-bottom: 1px solid #ddd
		}

		.nav-tabs>li {
		float: left;
		margin-bottom: -1px
		}

		.nav-tabs>li>a {
		margin-right: 2px;
		line-height: 1.428571429;
		border: 1px solid transparent;
		border-radius: 4px 4px 0 0
		}

		.nav-tabs>li>a:hover {
		border-color: #eee #eee #ddd
		}

		.nav-tabs>li.active>a,
		.nav-tabs>li.active>a:hover,
		.nav-tabs>li.active>a:focus {
		color: #777;
		cursor: default;
		background-color: #fff;
		border: 1px solid #ddd;
		border-bottom-color: transparent
		}

		.nav-tabs.nav-justified {
		width: 100%;
		border-bottom: 0
		}

		.nav-tabs.nav-justified>li {
		float: none
		}

		.nav-tabs.nav-justified>li>a {
		text-align: center
		}

		@media(min-width:768px) {
		.nav-tabs.nav-justified>li {
		display: table-cell;
		width: 1%
		}
		}

		.nav-tabs.nav-justified>li>a {
		margin-right: 0;
		border-bottom: 1px solid #ddd
		}

		.nav-tabs.nav-justified>.active>a {
		border-bottom-color: #fff
		}

		.nav-pills>li {
		float: left
		}

		.nav-pills>li>a {
		border-radius: 5px
		}

		.nav-pills>li+li {
		margin-left: 2px
		}

		.nav-pills>li.active>a,
		.nav-pills>li.active>a:hover,
		.nav-pills>li.active>a:focus {
		color: #fff;
		background-color: #eb6864
		}

		.nav-stacked>li {
		float: none
		}

		.nav-stacked>li+li {
		margin-top: 2px;
		margin-left: 0
		}

		.nav-justified {
		width: 100%
		}

		.nav-justified>li {
		float: none
		}

		.nav-justified>li>a {
		text-align: center
		}

		@media(min-width:768px) {
		.nav-justified>li {
		display: table-cell;
		width: 1%
		}
		}

		.nav-tabs-justified {
		border-bottom: 0
		}

		.nav-tabs-justified>li>a {
		margin-right: 0;
		border-bottom: 1px solid #ddd
		}

		.nav-tabs-justified>.active>a {
		border-bottom-color: #fff
		}

		.tabbable:before,
		.tabbable:after {
		display: table;
		content: " "
		}

		.tabbable:after {
		clear: both
		}

		.tabbable:before,
		.tabbable:after {
		display: table;
		content: " "
		}

		.tabbable:after {
		clear: both
		}

		.tabbable:before,
		.tabbable:after {
		display: table;
		content: " "
		}

		.tabbable:after {
		clear: both
		}

		.tabbable:before,
		.tabbable:after {
		display: table;
		content: " "
		}

		.tabbable:after {
		clear: both
		}

		.tabbable:before,
		.tabbable:after {
		display: table;
		content: " "
		}

		.tabbable:after {
		clear: both
		}

		.tab-content>.tab-pane,
		.pill-content>.pill-pane {
		display: none
		}

		.tab-content>.active,
		.pill-content>.active {
		display: block
		}

		.nav .caret {
		border-top-color: #eb6864;
		border-bottom-color: #eb6864
		}

		.nav a:hover .caret {
		border-top-color: #e22620;
		border-bottom-color: #e22620
		}

		.nav-tabs .dropdown-menu {
		margin-top: -1px;
		border-top-right-radius: 0;
		border-top-left-radius: 0
		}

		.navbar {
		position: relative;
		z-index: 1000;
		min-height: 60px;
		margin-bottom: 21px;
		border: 1px solid transparent
		}

		.navbar:before,
		.navbar:after {
		display: table;
		content: " "
		}

		.navbar:after {
		clear: both
		}

		.navbar:before,
		.navbar:after {
		display: table;
		content: " "
		}

		.navbar:after {
		clear: both
		}

		.navbar:before,
		.navbar:after {
		display: table;
		content: " "
		}

		.navbar:after {
		clear: both
		}

		.navbar:before,
		.navbar:after {
		display: table;
		content: " "
		}

		.navbar:after {
		clear: both
		}

		.navbar:before,
		.navbar:after {
		display: table;
		content: " "
		}

		.navbar:after {
		clear: both
		}

		@media(min-width:768px) {
		.navbar {
		border-radius: 4px
		}
		}

		.navbar-header:before,
		.navbar-header:after {
		display: table;
		content: " "
		}

		.navbar-header:after {
		clear: both
		}

		.navbar-header:before,
		.navbar-header:after {
		display: table;
		content: " "
		}

		.navbar-header:after {
		clear: both
		}

		.navbar-header:before,
		.navbar-header:after {
		display: table;
		content: " "
		}

		.navbar-header:after {
		clear: both
		}

		.navbar-header:before,
		.navbar-header:after {
		display: table;
		content: " "
		}

		.navbar-header:after {
		clear: both
		}

		.navbar-header:before,
		.navbar-header:after {
		display: table;
		content: " "
		}

		.navbar-header:after {
		clear: both
		}

		@media(min-width:768px) {
		.navbar-header {
		float: left
		}
		}

		.navbar-collapse {
		max-height: 340px;
		padding-right: 15px;
		padding-left: 15px;
		overflow-x: visible;
		border-top: 1px solid transparent;
		box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1);
		-webkit-overflow-scrolling: touch
		}

		.navbar-collapse:before,
		.navbar-collapse:after {
		display: table;
		content: " "
		}

		.navbar-collapse:after {
		clear: both
		}

		.navbar-collapse:before,
		.navbar-collapse:after {
		display: table;
		content: " "
		}

		.navbar-collapse:after {
		clear: both
		}

		.navbar-collapse:before,
		.navbar-collapse:after {
		display: table;
		content: " "
		}

		.navbar-collapse:after {
		clear: both
		}

		.navbar-collapse:before,
		.navbar-collapse:after {
		display: table;
		content: " "
		}

		.navbar-collapse:after {
		clear: both
		}

		.navbar-collapse:before,
		.navbar-collapse:after {
		display: table;
		content: " "
		}

		.navbar-collapse:after {
		clear: both
		}

		.navbar-collapse.in {
		overflow-y: auto
		}

		@media(min-width:768px) {
		.navbar-collapse {
		width: auto;
		border-top: 0;
		box-shadow: none
		}
		.navbar-collapse.collapse {
		display: block!important;
		height: auto!important;
		padding-bottom: 0;
		overflow: visible!important
		}
		.navbar-collapse.in {
		overflow-y: visible
		}
		.navbar-collapse .navbar-nav.navbar-left:first-child {
		margin-left: -15px
		}
		.navbar-collapse .navbar-nav.navbar-right:last-child {
		margin-right: -15px
		}
		.navbar-collapse .navbar-text:last-child {
		margin-right: 0
		}
		}

		.container>.navbar-header,
		.container>.navbar-collapse {
		margin-right: -15px;
		margin-left: -15px
		}

		@media(min-width:768px) {
		.container>.navbar-header,
		.container>.navbar-collapse {
		margin-right: 0;
		margin-left: 0
		}
		}

		.navbar-static-top {
		border-width: 0 0 1px
		}

		@media(min-width:768px) {
		.navbar-static-top {
		border-radius: 0
		}
		}

		.navbar-fixed-top,
		.navbar-fixed-bottom {
		position: fixed;
		right: 0;
		left: 0;
		border-width: 0 0 1px
		}

		@media(min-width:768px) {
		.navbar-fixed-top,
		.navbar-fixed-bottom {
		border-radius: 0
		}
		}

		.navbar-fixed-top {
		top: 0;
		z-index: 1030
		}

		.navbar-fixed-bottom {
		bottom: 0;
		margin-bottom: 0
		}

		.navbar-brand {
		float: left;
		padding: 19.5px 15px;
		font-size: 19px;
		line-height: 21px
		}

		.navbar-brand:hover,
		.navbar-brand:focus {
		text-decoration: none
		}

		@media(min-width:768px) {
		.navbar>.container .navbar-brand {
		margin-left: -15px
		}
		}

		.navbar-toggle {
		position: relative;
		float: right;
		padding: 9px 10px;
		margin-top: 13px;
		margin-right: 15px;
		margin-bottom: 13px;
		background-color: transparent;
		border: 1px solid transparent;
		border-radius: 4px
		}

		.navbar-toggle .icon-bar {
		display: block;
		width: 22px;
		height: 2px;
		border-radius: 1px
		}

		.navbar-toggle .icon-bar+.icon-bar {
		margin-top: 4px
		}

		@media(min-width:768px) {
		.navbar-toggle {
		display: none
		}
		}

		.navbar-nav {
		margin: 9.75px -15px
		}

		.navbar-nav>li>a {
		padding-top: 10px;
		padding-bottom: 10px;
		line-height: 21px
		}

		@media(max-width:767px) {
		.navbar-nav .open .dropdown-menu {
		position: static;
		float: none;
		width: auto;
		margin-top: 0;
		background-color: transparent;
		border: 0;
		box-shadow: none
		}
		.navbar-nav .open .dropdown-menu>li>a,
		.navbar-nav .open .dropdown-menu .dropdown-header {
		padding: 5px 15px 5px 25px
		}
		.navbar-nav .open .dropdown-menu>li>a {
		line-height: 21px
		}
		.navbar-nav .open .dropdown-menu>li>a:hover,
		.navbar-nav .open .dropdown-menu>li>a:focus {
		background-image: none
		}
		}

		@media(min-width:768px) {
		.navbar-nav {
		float: left;
		margin: 0
		}
		.navbar-nav>li {
		float: left
		}
		.navbar-nav>li>a {
		padding-top: 19.5px;
		padding-bottom: 19.5px
		}
		}

		@media(min-width:768px) {
		.navbar-left {
		float: left!important
		}
		.navbar-right {
		float: right!important
		}
		}

		.navbar-form {
		padding: 10px 15px;
		margin-top: 10.5px;
		margin-right: -15px;
		margin-bottom: 10.5px;
		margin-left: -15px;
		border-top: 1px solid transparent;
		border-bottom: 1px solid transparent;
		-webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1);
		box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.1), 0 1px 0 rgba(255, 255, 255, 0.1)
		}

		@media(min-width:768px) {
		.navbar-form .form-group {
		display: inline-block;
		margin-bottom: 0;
		vertical-align: middle
		}
		.navbar-form .form-control {
		display: inline-block
		}
		.navbar-form .radio,
		.navbar-form .checkbox {
		display: inline-block;
		padding-left: 0;
		margin-top: 0;
		margin-bottom: 0
		}
		.navbar-form .radio input[type="radio"],
		.navbar-form .checkbox input[type="checkbox"] {
		float: none;
		margin-left: 0
		}
		}

		@media(max-width:767px) {
		.navbar-form .form-group {
		margin-bottom: 5px
		}
		}

		@media(min-width:768px) {
		.navbar-form {
		width: auto;
		padding-top: 0;
		padding-bottom: 0;
		margin-right: 0;
		margin-left: 0;
		border: 0;
		-webkit-box-shadow: none;
		box-shadow: none
		}
		}

		.navbar-nav>li>.dropdown-menu {
		margin-top: 0;
		border-top-right-radius: 0;
		border-top-left-radius: 0
		}

		.navbar-fixed-bottom .navbar-nav>li>.dropdown-menu {
		border-bottom-right-radius: 0;
		border-bottom-left-radius: 0
		}

		.navbar-nav.pull-right>li>.dropdown-menu,
		.navbar-nav>li>.dropdown-menu.pull-right {
		right: 0;
		left: auto
		}

		.navbar-btn {
		margin-top: 10.5px;
		margin-bottom: 10.5px
		}

		.navbar-text {
		float: left;
		margin-top: 19.5px;
		margin-bottom: 19.5px
		}

		@media(min-width:768px) {
		.navbar-text {
		margin-right: 15px;
		margin-left: 15px
		}
		}

		.navbar-default {
		background-color: #fff;
		border-color: #eee
		}

		.navbar-default .navbar-brand {
		color: #000
		}

		.navbar-default .navbar-brand:hover,
		.navbar-default .navbar-brand:focus {
		color: #000;
		background-color: transparent
		}

		.navbar-default .navbar-text {
		color: #000
		}

		.navbar-default .navbar-nav>li>a {
		color: #000
		}

		.navbar-default .navbar-nav>li>a:hover,
		.navbar-default .navbar-nav>li>a:focus {
		color: #000;
		background-color: transparent
		}

		.navbar-default .navbar-nav>.active>a,
		.navbar-default .navbar-nav>.active>a:hover,
		.navbar-default .navbar-nav>.active>a:focus {
		color: #000;
		background-color: transparent
		}

		.navbar-default .navbar-nav>.disabled>a,
		.navbar-default .navbar-nav>.disabled>a:hover,
		.navbar-default .navbar-nav>.disabled>a:focus {
		color: #ccc;
		background-color: transparent
		}

		.navbar-default .navbar-toggle {
		border-color: #ddd
		}

		.navbar-default .navbar-toggle:hover,
		.navbar-default .navbar-toggle:focus {
		background-color: #ddd
		}

		.navbar-default .navbar-toggle .icon-bar {
		background-color: #ccc
		}

		.navbar-default .navbar-collapse,
		.navbar-default .navbar-form {
		border-color: #ededed
		}

		.navbar-default .navbar-nav>.dropdown>a:hover .caret,
		.navbar-default .navbar-nav>.dropdown>a:focus .caret {
		border-top-color: #000;
		border-bottom-color: #000
		}

		.navbar-default .navbar-nav>.open>a,
		.navbar-default .navbar-nav>.open>a:hover,
		.navbar-default .navbar-nav>.open>a:focus {
		color: #000;
		background-color: transparent
		}

		.navbar-default .navbar-nav>.open>a .caret,
		.navbar-default .navbar-nav>.open>a:hover .caret,
		.navbar-default .navbar-nav>.open>a:focus .caret {
		border-top-color: #000;
		border-bottom-color: #000
		}

		.navbar-default .navbar-nav>.dropdown>a .caret {
		border-top-color: #000;
		border-bottom-color: #000
		}

		@media(max-width:767px) {
		.navbar-default .navbar-nav .open .dropdown-menu>li>a {
		color: #000
		}
		.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover,
		.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus {
		color: #000;
		background-color: transparent
		}
		.navbar-default .navbar-nav .open .dropdown-menu>.active>a,
		.navbar-default .navbar-nav .open .dropdown-menu>.active>a:hover,
		.navbar-default .navbar-nav .open .dropdown-menu>.active>a:focus {
		color: #000;
		background-color: transparent
		}
		.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a,
		.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:hover,
		.navbar-default .navbar-nav .open .dropdown-menu>.disabled>a:focus {
		color: #ccc;
		background-color: transparent
		}
		}

		.navbar-default .navbar-link {
		color: #000
		}

		.navbar-default .navbar-link:hover {
		color: #000
		}

		.navbar-inverse {
		background-color: #eb6864;
		border-color: #e53c37
		}

		.navbar-inverse .navbar-brand {
		color: #fff
		}

		.navbar-inverse .navbar-brand:hover,
		.navbar-inverse .navbar-brand:focus {
		color: #fff;
		background-color: transparent
		}

		.navbar-inverse .navbar-text {
		color: #fff
		}

		.navbar-inverse .navbar-nav>li>a {
		color: #fff
		}

		.navbar-inverse .navbar-nav>li>a:hover,
		.navbar-inverse .navbar-nav>li>a:focus {
		color: #fff;
		background-color: transparent
		}

		.navbar-inverse .navbar-nav>.active>a,
		.navbar-inverse .navbar-nav>.active>a:hover,
		.navbar-inverse .navbar-nav>.active>a:focus {
		color: #fff;
		background-color: transparent
		}

		.navbar-inverse .navbar-nav>.disabled>a,
		.navbar-inverse .navbar-nav>.disabled>a:hover,
		.navbar-inverse .navbar-nav>.disabled>a:focus {
		color: #444;
		background-color: transparent
		}

		.navbar-inverse .navbar-toggle {
		border-color: #e53c37
		}

		.navbar-inverse .navbar-toggle:hover,
		.navbar-inverse .navbar-toggle:focus {
		background-color: #e53c37
		}

		.navbar-inverse .navbar-toggle .icon-bar {
		background-color: #fff
		}

		.navbar-inverse .navbar-collapse,
		.navbar-inverse .navbar-form {
		border-color: #e74944
		}

		.navbar-inverse .navbar-nav>.open>a,
		.navbar-inverse .navbar-nav>.open>a:hover,
		.navbar-inverse .navbar-nav>.open>a:focus {
		color: #fff;
		background-color: transparent
		}

		.navbar-inverse .navbar-nav>.dropdown>a:hover .caret {
		border-top-color: #fff;
		border-bottom-color: #fff
		}

		.navbar-inverse .navbar-nav>.dropdown>a .caret {
		border-top-color: #fff;
		border-bottom-color: #fff
		}

		.navbar-inverse .navbar-nav>.open>a .caret,
		.navbar-inverse .navbar-nav>.open>a:hover .caret,
		.navbar-inverse .navbar-nav>.open>a:focus .caret {
		border-top-color: #fff;
		border-bottom-color: #fff
		}

		@media(max-width:767px) {
		.navbar-inverse .navbar-nav .open .dropdown-menu>.dropdown-header {
		border-color: #e53c37
		}
		.navbar-inverse .navbar-nav .open .dropdown-menu>li>a {
		color: #fff
		}
		.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:hover,
		.navbar-inverse .navbar-nav .open .dropdown-menu>li>a:focus {
		color: #fff;
		background-color: transparent
		}
		.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a,
		.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:hover,
		.navbar-inverse .navbar-nav .open .dropdown-menu>.active>a:focus {
		color: #fff;
		background-color: transparent
		}
		.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a,
		.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:hover,
		.navbar-inverse .navbar-nav .open .dropdown-menu>.disabled>a:focus {
		color: #444;
		background-color: transparent
		}
		}

		.navbar-inverse .navbar-link {
		color: #fff
		}

		.navbar-inverse .navbar-link:hover {
		color: #fff
		}

		.breadcrumb {
		padding: 8px 15px;
		margin-bottom: 21px;
		list-style: none;
		background-color: #f5f5f5;
		border-radius: 4px
		}

		.breadcrumb>li {
		display: inline-block
		}

		.breadcrumb>li+li:before {
		padding: 0 5px;
		color: #ccc;
		content: "/\00a0"
		}

		.breadcrumb>.active {
		color: #999
		}

		.pagination {
		display: inline-block;
		padding-left: 0;
		margin: 21px 0;
		border-radius: 4px
		}

		.pagination>li {
		display: inline
		}

		.pagination>li>a,
		.pagination>li>span {
		position: relative;
		float: left;
		padding: 8px 12px;
		margin-left: -1px;
		line-height: 1.428571429;
		text-decoration: none;
		background-color: #fff;
		border: 1px solid #ddd
		}

		.pagination>li:first-child>a,
		.pagination>li:first-child>span {
		margin-left: 0;
		border-bottom-left-radius: 4px;
		border-top-left-radius: 4px
		}

		.pagination>li:last-child>a,
		.pagination>li:last-child>span {
		border-top-right-radius: 4px;
		border-bottom-right-radius: 4px
		}

		.pagination>li>a:hover,
		.pagination>li>span:hover,
		.pagination>li>a:focus,
		.pagination>li>span:focus {
		background-color: #eee
		}

		.pagination>.active>a,
		.pagination>.active>span,
		.pagination>.active>a:hover,
		.pagination>.active>span:hover,
		.pagination>.active>a:focus,
		.pagination>.active>span:focus {
		z-index: 2;
		color: #999;
		cursor: default;
		background-color: #f5f5f5;
		border-color: #f5f5f5
		}

		.pagination>.disabled>span,
		.pagination>.disabled>a,
		.pagination>.disabled>a:hover,
		.pagination>.disabled>a:focus {
		color: #999;
		cursor: not-allowed;
		background-color: #fff;
		border-color: #ddd
		}

		.pagination-lg>li>a,
		.pagination-lg>li>span {
		padding: 14px 16px;
		font-size: 19px
		}

		.pagination-lg>li:first-child>a,
		.pagination-lg>li:first-child>span {
		border-bottom-left-radius: 6px;
		border-top-left-radius: 6px
		}

		.pagination-lg>li:last-child>a,
		.pagination-lg>li:last-child>span {
		border-top-right-radius: 6px;
		border-bottom-right-radius: 6px
		}

		.pagination-sm>li>a,
		.pagination-sm>li>span {
		padding: 5px 10px;
		font-size: 13px
		}

		.pagination-sm>li:first-child>a,
		.pagination-sm>li:first-child>span {
		border-bottom-left-radius: 3px;
		border-top-left-radius: 3px
		}

		.pagination-sm>li:last-child>a,
		.pagination-sm>li:last-child>span {
		border-top-right-radius: 3px;
		border-bottom-right-radius: 3px
		}

		.pager {
		padding-left: 0;
		margin: 21px 0;
		text-align: center;
		list-style: none
		}

		.pager:before,
		.pager:after {
		display: table;
		content: " "
		}

		.pager:after {
		clear: both
		}

		.pager:before,
		.pager:after {
		display: table;
		content: " "
		}

		.pager:after {
		clear: both
		}

		.pager:before,
		.pager:after {
		display: table;
		content: " "
		}

		.pager:after {
		clear: both
		}

		.pager:before,
		.pager:after {
		display: table;
		content: " "
		}

		.pager:after {
		clear: both
		}

		.pager:before,
		.pager:after {
		display: table;
		content: " "
		}

		.pager:after {
		clear: both
		}

		.pager li {
		display: inline
		}

		.pager li>a,
		.pager li>span {
		display: inline-block;
		padding: 5px 14px;
		background-color: #fff;
		border: 1px solid #ddd;
		border-radius: 15px
		}

		.pager li>a:hover,
		.pager li>a:focus {
		text-decoration: none;
		background-color: #eee
		}

		.pager .next>a,
		.pager .next>span {
		float: right
		}

		.pager .previous>a,
		.pager .previous>span {
		float: left
		}

		.pager .disabled>a,
		.pager .disabled>a:hover,
		.pager .disabled>a:focus,
		.pager .disabled>span {
		color: #999;
		cursor: not-allowed;
		background-color: #fff
		}

		.label {
		display: inline;
		padding: .2em .6em .3em;
		font-size: 75%;
		font-weight: bold;
		line-height: 1;
		color: #fff;
		text-align: center;
		white-space: nowrap;
		vertical-align: baseline;
		border-radius: .25em
		}

		.label[href]:hover,
		.label[href]:focus {
		color: #fff;
		text-decoration: none;
		cursor: pointer
		}

		.label:empty {
		display: none
		}

		.label-default {
		background-color: #999
		}

		.label-default[href]:hover,
		.label-default[href]:focus {
		background-color: #808080
		}

		.label-primary {
		background-color: #eb6864
		}

		.label-primary[href]:hover,
		.label-primary[href]:focus {
		background-color: #e53c37
		}

		.label-success {
		background-color: #22b24c
		}

		.label-success[href]:hover,
		.label-success[href]:focus {
		background-color: #1a873a
		}

		.label-info {
		background-color: #369
		}

		.label-info[href]:hover,
		.label-info[href]:focus {
		background-color: #264c73
		}

		.label-warning {
		background-color: #f5e625
		}

		.label-warning[href]:hover,
		.label-warning[href]:focus {
		background-color: #ddce0a
		}

		.label-danger {
		background-color: #f57a00
		}

		.label-danger[href]:hover,
		.label-danger[href]:focus {
		background-color: #c26100
		}

		.badge {
		display: inline-block;
		min-width: 10px;
		padding: 3px 7px;
		font-size: 13px;
		font-weight: bold;
		line-height: 1;
		color: #fff;
		text-align: center;
		white-space: nowrap;
		vertical-align: baseline;
		background-color: #999;
		border-radius: 10px
		}

		.badge:empty {
		display: none
		}

		a.badge:hover,
		a.badge:focus {
		color: #fff;
		text-decoration: none;
		cursor: pointer
		}

		.btn .badge {
		position: relative;
		top: -1px
		}

		a.list-group-item.active>.badge,
		.nav-pills>.active>a>.badge {
		color: #eb6864;
		background-color: #fff
		}

		.nav-pills>li>a>.badge {
		margin-left: 3px
		}

		.jumbotron {
		padding: 30px;
		margin-bottom: 30px;
		font-size: 22.5px;
		font-weight: 200;
		line-height: 2.1428571435;
		color: inherit;
		background-color: #eee
		}

		.jumbotron h1 {
		line-height: 1;
		color: inherit
		}

		.jumbotron p {
		line-height: 1.4
		}

		.container .jumbotron {
		border-radius: 6px
		}

		@media screen and (min-width:768px) {
		.jumbotron {
		padding-top: 48px;
		padding-bottom: 48px
		}
		.container .jumbotron {
		padding-right: 60px;
		padding-left: 60px
		}
		.jumbotron h1 {
		font-size: 67.5px
		}
		}

		.thumbnail {
		display: inline-block;
		display: block;
		height: auto;
		max-width: 100%;
		padding: 4px;
		line-height: 1.428571429;
		background-color: #fff;
		border: 1px solid #ddd;
		border-radius: 4px;
		-webkit-transition: all .2s ease-in-out;
		transition: all .2s ease-in-out
		}

		.thumbnail>img {
		display: block;
		height: auto;
		max-width: 100%
		}

		a.thumbnail:hover,
		a.thumbnail:focus {
		border-color: #eb6864
		}

		.thumbnail>img {
		margin-right: auto;
		margin-left: auto
		}

		.thumbnail .caption {
		padding: 9px;
		color: #777
		}

		.alert {
		padding: 15px;
		margin-bottom: 21px;
		border: 1px solid transparent;
		border-radius: 4px
		}

		.alert h4 {
		margin-top: 0;
		color: inherit
		}

		.alert .alert-link {
		font-weight: bold
		}

		.alert>p,
		.alert>ul {
		margin-bottom: 0
		}

		.alert>p+p {
		margin-top: 5px
		}

		.alert-dismissable {
		padding-right: 35px
		}

		.alert-dismissable .close {
		position: relative;
		top: -2px;
		right: -21px;
		color: inherit
		}

		.alert-success {
		color: #468847;
		background-color: #dff0d8;
		border-color: #d6e9c6
		}

		.alert-success hr {
		border-top-color: #c9e2b3
		}

		.alert-success .alert-link {
		color: #356635
		}

		.alert-info {
		color: #3a87ad;
		background-color: #d9edf7;
		border-color: #bce8f1
		}

		.alert-info hr {
		border-top-color: #a6e1ec
		}

		.alert-info .alert-link {
		color: #2d6987
		}

		.alert-warning {
		color: #c09853;
		background-color: #fcf8e3;
		border-color: #fbeed5
		}

		.alert-warning hr {
		border-top-color: #f8e5be
		}

		.alert-warning .alert-link {
		color: #a47e3c
		}

		.alert-danger {
		color: #b94a48;
		background-color: #f2dede;
		border-color: #eed3d7
		}

		.alert-danger hr {
		border-top-color: #e6c1c7
		}

		.alert-danger .alert-link {
		color: #953b39
		}

		@-webkit-keyframes progress-bar-stripes {
		from {
		background-position: 40px 0
		}
		to {
		background-position: 0 0
		}
		}

		@-moz-keyframes progress-bar-stripes {
		from {
		background-position: 40px 0
		}
		to {
		background-position: 0 0
		}
		}

		@-o-keyframes progress-bar-stripes {
		from {
		background-position: 0 0
		}
		to {
		background-position: 40px 0
		}
		}

		@keyframes progress-bar-stripes {
		from {
		background-position: 40px 0
		}
		to {
		background-position: 0 0
		}
		}

		.progress {
		height: 21px;
		margin-bottom: 21px;
		overflow: hidden;
		background-color: #f5f5f5;
		border-radius: 4px;
		-webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
		box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1)
		}

		.progress-bar {
		float: left;
		width: 0;
		height: 100%;
		font-size: 13px;
		color: #fff;
		text-align: center;
		background-color: #eb6864;
		-webkit-box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
		box-shadow: inset 0 -1px 0 rgba(0, 0, 0, 0.15);
		-webkit-transition: width .6s ease;
		transition: width .6s ease
		}

		.progress-striped .progress-bar {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.15)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.15)), color-stop(0.75, rgba(255, 255, 255, 0.15)), color-stop(0.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-size: 40px 40px
		}

		.progress.active .progress-bar {
		-webkit-animation: progress-bar-stripes 2s linear infinite;
		-moz-animation: progress-bar-stripes 2s linear infinite;
		-ms-animation: progress-bar-stripes 2s linear infinite;
		-o-animation: progress-bar-stripes 2s linear infinite;
		animation: progress-bar-stripes 2s linear infinite
		}

		.progress-bar-success {
		background-color: #22b24c
		}

		.progress-striped .progress-bar-success {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.15)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.15)), color-stop(0.75, rgba(255, 255, 255, 0.15)), color-stop(0.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)
		}

		.progress-bar-info {
		background-color: #369
		}

		.progress-striped .progress-bar-info {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.15)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.15)), color-stop(0.75, rgba(255, 255, 255, 0.15)), color-stop(0.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)
		}

		.progress-bar-warning {
		background-color: #f5e625
		}

		.progress-striped .progress-bar-warning {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.15)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.15)), color-stop(0.75, rgba(255, 255, 255, 0.15)), color-stop(0.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)
		}

		.progress-bar-danger {
		background-color: #f57a00
		}

		.progress-striped .progress-bar-danger {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(0.25, rgba(255, 255, 255, 0.15)), color-stop(0.25, transparent), color-stop(0.5, transparent), color-stop(0.5, rgba(255, 255, 255, 0.15)), color-stop(0.75, rgba(255, 255, 255, 0.15)), color-stop(0.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent);
		background-image: linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)
		}

		.media,
		.media-body {
		overflow: hidden;
		zoom: 1
		}

		.media,
		.media .media {
		margin-top: 15px
		}

		.media:first-child {
		margin-top: 0
		}

		.media-object {
		display: block
		}

		.media-heading {
		margin: 0 0 5px
		}

		.media>.pull-left {
		margin-right: 10px
		}

		.media>.pull-right {
		margin-left: 10px
		}

		.media-list {
		padding-left: 0;
		list-style: none
		}

		.list-group {
		padding-left: 0;
		margin-bottom: 20px
		}

		.list-group-item {
		position: relative;
		display: block;
		padding: 10px 15px;
		margin-bottom: -1px;
		background-color: #fff;
		border: 1px solid #ddd
		}

		.list-group-item:first-child {
		border-top-right-radius: 4px;
		border-top-left-radius: 4px
		}

		.list-group-item:last-child {
		margin-bottom: 0;
		border-bottom-right-radius: 4px;
		border-bottom-left-radius: 4px
		}

		.list-group-item>.badge {
		float: right
		}

		.list-group-item>.badge+.badge {
		margin-right: 5px
		}

		a.list-group-item {
		color: #555
		}

		a.list-group-item .list-group-item-heading {
		color: #333
		}

		a.list-group-item:hover,
		a.list-group-item:focus {
		text-decoration: none;
		background-color: #f5f5f5
		}

		.list-group-item.active,
		.list-group-item.active:hover,
		.list-group-item.active:focus {
		z-index: 2;
		color: #fff;
		background-color: #eb6864;
		border-color: #eb6864
		}

		.list-group-item.active .list-group-item-heading,
		.list-group-item.active:hover .list-group-item-heading,
		.list-group-item.active:focus .list-group-item-heading {
		color: inherit
		}

		.list-group-item.active .list-group-item-text,
		.list-group-item.active:hover .list-group-item-text,
		.list-group-item.active:focus .list-group-item-text {
		color: #fff
		}

		.list-group-item-heading {
		margin-top: 0;
		margin-bottom: 5px
		}

		.list-group-item-text {
		margin-bottom: 0;
		line-height: 1.3
		}

		.panel {
		margin-bottom: 21px;
		background-color: #fff;
		border: 1px solid transparent;
		border-radius: 4px;
		-webkit-box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05);
		box-shadow: 0 1px 1px rgba(0, 0, 0, 0.05)
		}

		.panel-body {
		padding: 15px
		}

		.panel-body:before,
		.panel-body:after {
		display: table;
		content: " "
		}

		.panel-body:after {
		clear: both
		}

		.panel-body:before,
		.panel-body:after {
		display: table;
		content: " "
		}

		.panel-body:after {
		clear: both
		}

		.panel-body:before,
		.panel-body:after {
		display: table;
		content: " "
		}

		.panel-body:after {
		clear: both
		}

		.panel-body:before,
		.panel-body:after {
		display: table;
		content: " "
		}

		.panel-body:after {
		clear: both
		}

		.panel-body:before,
		.panel-body:after {
		display: table;
		content: " "
		}

		.panel-body:after {
		clear: both
		}

		.panel>.list-group {
		margin-bottom: 0
		}

		.panel>.list-group .list-group-item {
		border-width: 1px 0
		}

		.panel>.list-group .list-group-item:first-child {
		border-top-right-radius: 0;
		border-top-left-radius: 0
		}

		.panel>.list-group .list-group-item:last-child {
		border-bottom: 0
		}

		.panel-heading+.list-group .list-group-item:first-child {
		border-top-width: 0
		}

		.panel>.table {
		margin-bottom: 0
		}

		.panel>.panel-body+.table {
		border-top: 1px solid #ddd
		}

		.panel-heading {
		padding: 10px 15px;
		border-bottom: 1px solid transparent;
		border-top-right-radius: 3px;
		border-top-left-radius: 3px
		}

		.panel-title {
		margin-top: 0;
		margin-bottom: 0;
		font-size: 17px
		}

		.panel-title>a {
		color: inherit
		}

		.panel-footer {
		padding: 10px 15px;
		background-color: #f5f5f5;
		border-top: 1px solid #ddd;
		border-bottom-right-radius: 3px;
		border-bottom-left-radius: 3px
		}

		.panel-group .panel {
		margin-bottom: 0;
		overflow: hidden;
		border-radius: 4px
		}

		.panel-group .panel+.panel {
		margin-top: 5px
		}

		.panel-group .panel-heading {
		border-bottom: 0
		}

		.panel-group .panel-heading+.panel-collapse .panel-body {
		border-top: 1px solid #ddd
		}

		.panel-group .panel-footer {
		border-top: 0
		}

		.panel-group .panel-footer+.panel-collapse .panel-body {
		border-bottom: 1px solid #ddd
		}

		.panel-default {
		border-color: #ddd
		}

		.panel-default>.panel-heading {
		color: #333;
		background-color: #f5f5f5;
		border-color: #ddd
		}

		.panel-default>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #ddd
		}

		.panel-default>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #ddd
		}

		.panel-primary {
		border-color: #eb6864
		}

		.panel-primary>.panel-heading {
		color: #fff;
		background-color: #eb6864;
		border-color: #eb6864
		}

		.panel-primary>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #eb6864
		}

		.panel-primary>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #eb6864
		}

		.panel-success {
		border-color: #d6e9c6
		}

		.panel-success>.panel-heading {
		color: #468847;
		background-color: #dff0d8;
		border-color: #d6e9c6
		}

		.panel-success>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #d6e9c6
		}

		.panel-success>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #d6e9c6
		}

		.panel-warning {
		border-color: #fbeed5
		}

		.panel-warning>.panel-heading {
		color: #c09853;
		background-color: #fcf8e3;
		border-color: #fbeed5
		}

		.panel-warning>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #fbeed5
		}

		.panel-warning>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #fbeed5
		}

		.panel-danger {
		border-color: #eed3d7
		}

		.panel-danger>.panel-heading {
		color: #b94a48;
		background-color: #f2dede;
		border-color: #eed3d7
		}

		.panel-danger>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #eed3d7
		}

		.panel-danger>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #eed3d7
		}

		.panel-info {
		border-color: #bce8f1
		}

		.panel-info>.panel-heading {
		color: #3a87ad;
		background-color: #d9edf7;
		border-color: #bce8f1
		}

		.panel-info>.panel-heading+.panel-collapse .panel-body {
		border-top-color: #bce8f1
		}

		.panel-info>.panel-footer+.panel-collapse .panel-body {
		border-bottom-color: #bce8f1
		}

		.well {
		min-height: 20px;
		padding: 19px;
		margin-bottom: 20px;
		background-color: #f5f5f5;
		border: 1px solid #e3e3e3;
		border-radius: 4px;
		-webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05);
		box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.05)
		}

		.well blockquote {
		border-color: #ddd;
		border-color: rgba(0, 0, 0, 0.15)
		}

		.well-lg {
		padding: 24px;
		border-radius: 6px
		}

		.well-sm {
		padding: 9px;
		border-radius: 3px
		}

		.close {
		float: right;
		font-size: 22.5px;
		font-weight: bold;
		line-height: 1;
		color: #000;
		text-shadow: 0 1px 0 #fff;
		opacity: .2;
		filter: alpha(opacity=20)
		}

		.close:hover,
		.close:focus {
		color: #000;
		text-decoration: none;
		cursor: pointer;
		opacity: .5;
		filter: alpha(opacity=50)
		}

		button.close {
		padding: 0;
		cursor: pointer;
		background: transparent;
		border: 0;
		-webkit-appearance: none
		}

		.modal-open {
		overflow: hidden
		}

		body.modal-open,
		.modal-open .navbar-fixed-top,
		.modal-open .navbar-fixed-bottom {
		margin-right: 15px
		}

		.modal {
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		z-index: 1040;
		display: none;
		overflow: auto;
		overflow-y: scroll
		}

		.modal.fade .modal-dialog {
		-webkit-transform: translate(0, -25%);
		-ms-transform: translate(0, -25%);
		transform: translate(0, -25%);
		-webkit-transition: -webkit-transform .3s ease-out;
		-moz-transition: -moz-transform .3s ease-out;
		-o-transition: -o-transform .3s ease-out;
		transition: transform .3s ease-out
		}

		.modal.in .modal-dialog {
		-webkit-transform: translate(0, 0);
		-ms-transform: translate(0, 0);
		transform: translate(0, 0)
		}

		.modal-dialog {
		z-index: 1050;
		width: auto;
		padding: 10px;
		margin-right: auto;
		margin-left: auto
		}

		.modal-content {
		position: relative;
		background-color: #fff;
		border: 1px solid #999;
		border: 1px solid rgba(0, 0, 0, 0.2);
		border-radius: 6px;
		outline: 0;
		-webkit-box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
		box-shadow: 0 3px 9px rgba(0, 0, 0, 0.5);
		background-clip: padding-box
		}

		.modal-backdrop {
		position: fixed;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		z-index: 1030;
		background-color: #000
		}

		.modal-backdrop.fade {
		opacity: 0;
		filter: alpha(opacity=0)
		}

		.modal-backdrop.in {
		opacity: .5;
		filter: alpha(opacity=50)
		}

		.modal-header {
		min-height: 16.428571429px;
		padding: 15px;
		border-bottom: 1px solid #e5e5e5
		}

		.modal-header .close {
		margin-top: -2px
		}

		.modal-title {
		margin: 0;
		line-height: 1.428571429
		}

		.modal-body {
		position: relative;
		padding: 20px
		}

		.modal-footer {
		padding: 19px 20px 20px;
		margin-top: 15px;
		text-align: right;
		border-top: 1px solid #e5e5e5
		}

		.modal-footer:before,
		.modal-footer:after {
		display: table;
		content: " "
		}

		.modal-footer:after {
		clear: both
		}

		.modal-footer:before,
		.modal-footer:after {
		display: table;
		content: " "
		}

		.modal-footer:after {
		clear: both
		}

		.modal-footer:before,
		.modal-footer:after {
		display: table;
		content: " "
		}

		.modal-footer:after {
		clear: both
		}

		.modal-footer:before,
		.modal-footer:after {
		display: table;
		content: " "
		}

		.modal-footer:after {
		clear: both
		}

		.modal-footer:before,
		.modal-footer:after {
		display: table;
		content: " "
		}

		.modal-footer:after {
		clear: both
		}

		.modal-footer .btn+.btn {
		margin-bottom: 0;
		margin-left: 5px
		}

		.modal-footer .btn-group .btn+.btn {
		margin-left: -1px
		}

		.modal-footer .btn-block+.btn-block {
		margin-left: 0
		}

		@media screen and (min-width:768px) {
		.modal-dialog {
		right: auto;
		left: 50%;
		width: 600px;
		padding-top: 30px;
		padding-bottom: 30px
		}
		.modal-content {
		-webkit-box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5);
		box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5)
		}
		}

		.tooltip {
		position: absolute;
		z-index: 1030;
		display: block;
		font-size: 13px;
		line-height: 1.4;
		opacity: 0;
		filter: alpha(opacity=0);
		visibility: visible
		}

		.tooltip.in {
		opacity: .9;
		filter: alpha(opacity=90)
		}

		.tooltip.top {
		padding: 5px 0;
		margin-top: -3px
		}

		.tooltip.right {
		padding: 0 5px;
		margin-left: 3px
		}

		.tooltip.bottom {
		padding: 5px 0;
		margin-top: 3px
		}

		.tooltip.left {
		padding: 0 5px;
		margin-left: -3px
		}

		.tooltip-inner {
		max-width: 200px;
		padding: 3px 8px;
		color: #fff;
		text-align: center;
		text-decoration: none;
		background-color: rgba(0, 0, 0, 0.9);
		border-radius: 4px
		}

		.tooltip-arrow {
		position: absolute;
		width: 0;
		height: 0;
		border-color: transparent;
		border-style: solid
		}

		.tooltip.top .tooltip-arrow {
		bottom: 0;
		left: 50%;
		margin-left: -5px;
		border-top-color: rgba(0, 0, 0, 0.9);
		border-width: 5px 5px 0
		}

		.tooltip.top-left .tooltip-arrow {
		bottom: 0;
		left: 5px;
		border-top-color: rgba(0, 0, 0, 0.9);
		border-width: 5px 5px 0
		}

		.tooltip.top-right .tooltip-arrow {
		right: 5px;
		bottom: 0;
		border-top-color: rgba(0, 0, 0, 0.9);
		border-width: 5px 5px 0
		}

		.tooltip.right .tooltip-arrow {
		top: 50%;
		left: 0;
		margin-top: -5px;
		border-right-color: rgba(0, 0, 0, 0.9);
		border-width: 5px 5px 5px 0
		}

		.tooltip.left .tooltip-arrow {
		top: 50%;
		right: 0;
		margin-top: -5px;
		border-left-color: rgba(0, 0, 0, 0.9);
		border-width: 5px 0 5px 5px
		}

		.tooltip.bottom .tooltip-arrow {
		top: 0;
		left: 50%;
		margin-left: -5px;
		border-bottom-color: rgba(0, 0, 0, 0.9);
		border-width: 0 5px 5px
		}

		.tooltip.bottom-left .tooltip-arrow {
		top: 0;
		left: 5px;
		border-bottom-color: rgba(0, 0, 0, 0.9);
		border-width: 0 5px 5px
		}

		.tooltip.bottom-right .tooltip-arrow {
		top: 0;
		right: 5px;
		border-bottom-color: rgba(0, 0, 0, 0.9);
		border-width: 0 5px 5px
		}

		.popover {
		position: absolute;
		top: 0;
		left: 0;
		z-index: 1010;
		display: none;
		max-width: 276px;
		padding: 1px;
		text-align: left;
		white-space: normal;
		background-color: #fff;
		border: 1px solid #ccc;
		border: 1px solid rgba(0, 0, 0, 0.2);
		border-radius: 6px;
		-webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
		box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
		background-clip: padding-box
		}

		.popover.top {
		margin-top: -10px
		}

		.popover.right {
		margin-left: 10px
		}

		.popover.bottom {
		margin-top: 10px
		}

		.popover.left {
		margin-left: -10px
		}

		.popover-title {
		padding: 8px 14px;
		margin: 0;
		font-size: 15px;
		font-weight: normal;
		line-height: 18px;
		background-color: #f7f7f7;
		border-bottom: 1px solid #ebebeb;
		border-radius: 5px 5px 0 0
		}

		.popover-content {
		padding: 9px 14px
		}

		.popover .arrow,
		.popover .arrow:after {
		position: absolute;
		display: block;
		width: 0;
		height: 0;
		border-color: transparent;
		border-style: solid
		}

		.popover .arrow {
		border-width: 11px
		}

		.popover .arrow:after {
		border-width: 10px;
		content: ""
		}

		.popover.top .arrow {
		bottom: -11px;
		left: 50%;
		margin-left: -11px;
		border-top-color: #999;
		border-top-color: rgba(0, 0, 0, 0.25);
		border-bottom-width: 0
		}

		.popover.top .arrow:after {
		bottom: 1px;
		margin-left: -10px;
		border-top-color: #fff;
		border-bottom-width: 0;
		content: " "
		}

		.popover.right .arrow {
		top: 50%;
		left: -11px;
		margin-top: -11px;
		border-right-color: #999;
		border-right-color: rgba(0, 0, 0, 0.25);
		border-left-width: 0
		}

		.popover.right .arrow:after {
		bottom: -10px;
		left: 1px;
		border-right-color: #fff;
		border-left-width: 0;
		content: " "
		}

		.popover.bottom .arrow {
		top: -11px;
		left: 50%;
		margin-left: -11px;
		border-bottom-color: #999;
		border-bottom-color: rgba(0, 0, 0, 0.25);
		border-top-width: 0
		}

		.popover.bottom .arrow:after {
		top: 1px;
		margin-left: -10px;
		border-bottom-color: #fff;
		border-top-width: 0;
		content: " "
		}

		.popover.left .arrow {
		top: 50%;
		right: -11px;
		margin-top: -11px;
		border-left-color: #999;
		border-left-color: rgba(0, 0, 0, 0.25);
		border-right-width: 0
		}

		.popover.left .arrow:after {
		right: 1px;
		bottom: -10px;
		border-left-color: #fff;
		border-right-width: 0;
		content: " "
		}

		.carousel {
		position: relative
		}

		.carousel-inner {
		position: relative;
		width: 100%;
		overflow: hidden
		}

		.carousel-inner>.item {
		position: relative;
		display: none;
		-webkit-transition: .6s ease-in-out left;
		transition: .6s ease-in-out left
		}

		.carousel-inner>.item>img,
		.carousel-inner>.item>a>img {
		display: block;
		height: auto;
		max-width: 100%;
		line-height: 1
		}

		.carousel-inner>.active,
		.carousel-inner>.next,
		.carousel-inner>.prev {
		display: block
		}

		.carousel-inner>.active {
		left: 0
		}

		.carousel-inner>.next,
		.carousel-inner>.prev {
		position: absolute;
		top: 0;
		width: 100%
		}

		.carousel-inner>.next {
		left: 100%
		}

		.carousel-inner>.prev {
		left: -100%
		}

		.carousel-inner>.next.left,
		.carousel-inner>.prev.right {
		left: 0
		}

		.carousel-inner>.active.left {
		left: -100%
		}

		.carousel-inner>.active.right {
		left: 100%
		}

		.carousel-control {
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		width: 15%;
		font-size: 20px;
		color: #fff;
		text-align: center;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6);
		opacity: .5;
		filter: alpha(opacity=50)
		}

		.carousel-control.left {
		background-image: -webkit-gradient(linear, 0 top, 100% top, from(rgba(0, 0, 0, 0.5)), to(rgba(0, 0, 0, 0.0001)));
		background-image: -webkit-linear-gradient(left, color-stop(rgba(0, 0, 0, 0.5) 0), color-stop(rgba(0, 0, 0, 0.0001) 100%));
		background-image: -moz-linear-gradient(left, rgba(0, 0, 0, 0.5) 0, rgba(0, 0, 0, 0.0001) 100%);
		background-image: linear-gradient(to right, rgba(0, 0, 0, 0.5) 0, rgba(0, 0, 0, 0.0001) 100%);
		background-repeat: repeat-x;
		filter: progid: DXImageTransform.Microsoft.gradient(startColorstr='#80000000', endColorstr='#00000000', GradientType=1)
		}

		.carousel-control.right {
		right: 0;
		left: auto;
		background-image: -webkit-gradient(linear, 0 top, 100% top, from(rgba(0, 0, 0, 0.0001)), to(rgba(0, 0, 0, 0.5)));
		background-image: -webkit-linear-gradient(left, color-stop(rgba(0, 0, 0, 0.0001) 0), color-stop(rgba(0, 0, 0, 0.5) 100%));
		background-image: -moz-linear-gradient(left, rgba(0, 0, 0, 0.0001) 0, rgba(0, 0, 0, 0.5) 100%);
		background-image: linear-gradient(to right, rgba(0, 0, 0, 0.0001) 0, rgba(0, 0, 0, 0.5) 100%);
		background-repeat: repeat-x;
		filter: progid: DXImageTransform.Microsoft.gradient(startColorstr='#00000000', endColorstr='#80000000', GradientType=1)
		}

		.carousel-control:hover,
		.carousel-control:focus {
		color: #fff;
		text-decoration: none;
		opacity: .9;
		filter: alpha(opacity=90)
		}

		.carousel-control .icon-prev,
		.carousel-control .icon-next,
		.carousel-control .glyphicon-chevron-left,
		.carousel-control .glyphicon-chevron-right {
		position: absolute;
		top: 50%;
		left: 50%;
		z-index: 5;
		display: inline-block
		}

		.carousel-control .icon-prev,
		.carousel-control .icon-next {
		width: 20px;
		height: 20px;
		margin-top: -10px;
		margin-left: -10px;
		font-family: serif
		}

		.carousel-control .icon-prev:before {
		content: '\2039'
		}

		.carousel-control .icon-next:before {
		content: '\203a'
		}

		.carousel-indicators {
		position: absolute;
		bottom: 10px;
		left: 50%;
		z-index: 15;
		width: 60%;
		padding-left: 0;
		margin-left: -30%;
		text-align: center;
		list-style: none
		}

		.carousel-indicators li {
		display: inline-block;
		width: 10px;
		height: 10px;
		margin: 1px;
		text-indent: -999px;
		cursor: pointer;
		border: 1px solid #fff;
		border-radius: 10px
		}

		.carousel-indicators .active {
		width: 12px;
		height: 12px;
		margin: 0;
		background-color: #fff
		}

		.carousel-caption {
		position: absolute;
		right: 15%;
		bottom: 20px;
		left: 15%;
		z-index: 10;
		padding-top: 20px;
		padding-bottom: 20px;
		color: #fff;
		text-align: center;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.6)
		}

		.carousel-caption .btn {
		text-shadow: none
		}

		@media screen and (min-width:768px) {
		.carousel-control .icon-prev,
		.carousel-control .icon-next {
		width: 30px;
		height: 30px;
		margin-top: -15px;
		margin-left: -15px;
		font-size: 30px
		}
		.carousel-caption {
		right: 20%;
		left: 20%;
		padding-bottom: 30px
		}
		.carousel-indicators {
		bottom: 20px
		}
		}

		.clearfix:before,
		.clearfix:after {
		display: table;
		content: " "
		}

		.clearfix:after {
		clear: both
		}

		.clearfix:before,
		.clearfix:after {
		display: table;
		content: " "
		}

		.clearfix:after {
		clear: both
		}

		.pull-right {
		float: right!important
		}

		.pull-left {
		float: left!important
		}

		.hide {
		display: none!important
		}

		.show {
		display: block!important
		}

		.invisible {
		visibility: hidden
		}

		.text-hide {
		font: 0/0 a;
		color: transparent;
		text-shadow: none;
		background-color: transparent;
		border: 0
		}

		.affix {
		position: fixed
		}

		@-ms-viewport {
		width: device-width
		}

		@media screen and (max-width:400px) {
		@-ms-viewport {
		width: 320px
		}
		}

		.hidden {
		display: none!important;
		visibility: hidden!important
		}

		.visible-xs {
		display: none!important
		}

		tr.visible-xs {
		display: none!important
		}

		th.visible-xs,
		td.visible-xs {
		display: none!important
		}

		@media(max-width:767px) {
		.visible-xs {
		display: block!important
		}
		tr.visible-xs {
		display: table-row!important
		}
		th.visible-xs,
		td.visible-xs {
		display: table-cell!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.visible-xs.visible-sm {
		display: block!important
		}
		tr.visible-xs.visible-sm {
		display: table-row!important
		}
		th.visible-xs.visible-sm,
		td.visible-xs.visible-sm {
		display: table-cell!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.visible-xs.visible-md {
		display: block!important
		}
		tr.visible-xs.visible-md {
		display: table-row!important
		}
		th.visible-xs.visible-md,
		td.visible-xs.visible-md {
		display: table-cell!important
		}
		}

		@media(min-width:1200px) {
		.visible-xs.visible-lg {
		display: block!important
		}
		tr.visible-xs.visible-lg {
		display: table-row!important
		}
		th.visible-xs.visible-lg,
		td.visible-xs.visible-lg {
		display: table-cell!important
		}
		}

		.visible-sm {
		display: none!important
		}

		tr.visible-sm {
		display: none!important
		}

		th.visible-sm,
		td.visible-sm {
		display: none!important
		}

		@media(max-width:767px) {
		.visible-sm.visible-xs {
		display: block!important
		}
		tr.visible-sm.visible-xs {
		display: table-row!important
		}
		th.visible-sm.visible-xs,
		td.visible-sm.visible-xs {
		display: table-cell!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.visible-sm {
		display: block!important
		}
		tr.visible-sm {
		display: table-row!important
		}
		th.visible-sm,
		td.visible-sm {
		display: table-cell!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.visible-sm.visible-md {
		display: block!important
		}
		tr.visible-sm.visible-md {
		display: table-row!important
		}
		th.visible-sm.visible-md,
		td.visible-sm.visible-md {
		display: table-cell!important
		}
		}

		@media(min-width:1200px) {
		.visible-sm.visible-lg {
		display: block!important
		}
		tr.visible-sm.visible-lg {
		display: table-row!important
		}
		th.visible-sm.visible-lg,
		td.visible-sm.visible-lg {
		display: table-cell!important
		}
		}

		.visible-md {
		display: none!important
		}

		tr.visible-md {
		display: none!important
		}

		th.visible-md,
		td.visible-md {
		display: none!important
		}

		@media(max-width:767px) {
		.visible-md.visible-xs {
		display: block!important
		}
		tr.visible-md.visible-xs {
		display: table-row!important
		}
		th.visible-md.visible-xs,
		td.visible-md.visible-xs {
		display: table-cell!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.visible-md.visible-sm {
		display: block!important
		}
		tr.visible-md.visible-sm {
		display: table-row!important
		}
		th.visible-md.visible-sm,
		td.visible-md.visible-sm {
		display: table-cell!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.visible-md {
		display: block!important
		}
		tr.visible-md {
		display: table-row!important
		}
		th.visible-md,
		td.visible-md {
		display: table-cell!important
		}
		}

		@media(min-width:1200px) {
		.visible-md.visible-lg {
		display: block!important
		}
		tr.visible-md.visible-lg {
		display: table-row!important
		}
		th.visible-md.visible-lg,
		td.visible-md.visible-lg {
		display: table-cell!important
		}
		}

		.visible-lg {
		display: none!important
		}

		tr.visible-lg {
		display: none!important
		}

		th.visible-lg,
		td.visible-lg {
		display: none!important
		}

		@media(max-width:767px) {
		.visible-lg.visible-xs {
		display: block!important
		}
		tr.visible-lg.visible-xs {
		display: table-row!important
		}
		th.visible-lg.visible-xs,
		td.visible-lg.visible-xs {
		display: table-cell!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.visible-lg.visible-sm {
		display: block!important
		}
		tr.visible-lg.visible-sm {
		display: table-row!important
		}
		th.visible-lg.visible-sm,
		td.visible-lg.visible-sm {
		display: table-cell!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.visible-lg.visible-md {
		display: block!important
		}
		tr.visible-lg.visible-md {
		display: table-row!important
		}
		th.visible-lg.visible-md,
		td.visible-lg.visible-md {
		display: table-cell!important
		}
		}

		@media(min-width:1200px) {
		.visible-lg {
		display: block!important
		}
		tr.visible-lg {
		display: table-row!important
		}
		th.visible-lg,
		td.visible-lg {
		display: table-cell!important
		}
		}

		.hidden-xs {
		display: block!important
		}

		tr.hidden-xs {
		display: table-row!important
		}

		th.hidden-xs,
		td.hidden-xs {
		display: table-cell!important
		}

		@media(max-width:767px) {
		.hidden-xs {
		display: none!important
		}
		tr.hidden-xs {
		display: none!important
		}
		th.hidden-xs,
		td.hidden-xs {
		display: none!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.hidden-xs.hidden-sm {
		display: none!important
		}
		tr.hidden-xs.hidden-sm {
		display: none!important
		}
		th.hidden-xs.hidden-sm,
		td.hidden-xs.hidden-sm {
		display: none!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.hidden-xs.hidden-md {
		display: none!important
		}
		tr.hidden-xs.hidden-md {
		display: none!important
		}
		th.hidden-xs.hidden-md,
		td.hidden-xs.hidden-md {
		display: none!important
		}
		}

		@media(min-width:1200px) {
		.hidden-xs.hidden-lg {
		display: none!important
		}
		tr.hidden-xs.hidden-lg {
		display: none!important
		}
		th.hidden-xs.hidden-lg,
		td.hidden-xs.hidden-lg {
		display: none!important
		}
		}

		.hidden-sm {
		display: block!important
		}

		tr.hidden-sm {
		display: table-row!important
		}

		th.hidden-sm,
		td.hidden-sm {
		display: table-cell!important
		}

		@media(max-width:767px) {
		.hidden-sm.hidden-xs {
		display: none!important
		}
		tr.hidden-sm.hidden-xs {
		display: none!important
		}
		th.hidden-sm.hidden-xs,
		td.hidden-sm.hidden-xs {
		display: none!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.hidden-sm {
		display: none!important
		}
		tr.hidden-sm {
		display: none!important
		}
		th.hidden-sm,
		td.hidden-sm {
		display: none!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.hidden-sm.hidden-md {
		display: none!important
		}
		tr.hidden-sm.hidden-md {
		display: none!important
		}
		th.hidden-sm.hidden-md,
		td.hidden-sm.hidden-md {
		display: none!important
		}
		}

		@media(min-width:1200px) {
		.hidden-sm.hidden-lg {
		display: none!important
		}
		tr.hidden-sm.hidden-lg {
		display: none!important
		}
		th.hidden-sm.hidden-lg,
		td.hidden-sm.hidden-lg {
		display: none!important
		}
		}

		.hidden-md {
		display: block!important
		}

		tr.hidden-md {
		display: table-row!important
		}

		th.hidden-md,
		td.hidden-md {
		display: table-cell!important
		}

		@media(max-width:767px) {
		.hidden-md.hidden-xs {
		display: none!important
		}
		tr.hidden-md.hidden-xs {
		display: none!important
		}
		th.hidden-md.hidden-xs,
		td.hidden-md.hidden-xs {
		display: none!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.hidden-md.hidden-sm {
		display: none!important
		}
		tr.hidden-md.hidden-sm {
		display: none!important
		}
		th.hidden-md.hidden-sm,
		td.hidden-md.hidden-sm {
		display: none!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.hidden-md {
		display: none!important
		}
		tr.hidden-md {
		display: none!important
		}
		th.hidden-md,
		td.hidden-md {
		display: none!important
		}
		}

		@media(min-width:1200px) {
		.hidden-md.hidden-lg {
		display: none!important
		}
		tr.hidden-md.hidden-lg {
		display: none!important
		}
		th.hidden-md.hidden-lg,
		td.hidden-md.hidden-lg {
		display: none!important
		}
		}

		.hidden-lg {
		display: block!important
		}

		tr.hidden-lg {
		display: table-row!important
		}

		th.hidden-lg,
		td.hidden-lg {
		display: table-cell!important
		}

		@media(max-width:767px) {
		.hidden-lg.hidden-xs {
		display: none!important
		}
		tr.hidden-lg.hidden-xs {
		display: none!important
		}
		th.hidden-lg.hidden-xs,
		td.hidden-lg.hidden-xs {
		display: none!important
		}
		}

		@media(min-width:768px) and (max-width:991px) {
		.hidden-lg.hidden-sm {
		display: none!important
		}
		tr.hidden-lg.hidden-sm {
		display: none!important
		}
		th.hidden-lg.hidden-sm,
		td.hidden-lg.hidden-sm {
		display: none!important
		}
		}

		@media(min-width:992px) and (max-width:1199px) {
		.hidden-lg.hidden-md {
		display: none!important
		}
		tr.hidden-lg.hidden-md {
		display: none!important
		}
		th.hidden-lg.hidden-md,
		td.hidden-lg.hidden-md {
		display: none!important
		}
		}

		@media(min-width:1200px) {
		.hidden-lg {
		display: none!important
		}
		tr.hidden-lg {
		display: none!important
		}
		th.hidden-lg,
		td.hidden-lg {
		display: none!important
		}
		}

		.visible-print {
		display: none!important
		}

		tr.visible-print {
		display: none!important
		}

		th.visible-print,
		td.visible-print {
		display: none!important
		}

		@media print {
		.visible-print {
		display: block!important
		}
		tr.visible-print {
		display: table-row!important
		}
		th.visible-print,
		td.visible-print {
		display: table-cell!important
		}
		.hidden-print {
		display: none!important
		}
		tr.hidden-print {
		display: none!important
		}
		th.hidden-print,
		td.hidden-print {
		display: none!important
		}
		}

		.navbar {
		font-family: "News Cycle", "Arial Narrow Bold", sans-serif;
		font-size: 18px;
		font-weight: bold;
		color: #000;
		border-bottom: 2px solid #eee
		}

		.navbar-brand {
		font-size: 18px;
		font-weight: bold;
		text-transform: uppercase
		}

		h1,
		h2,
		h3,
		h4,
		h5,
		h6 {
		font-family: "News Cycle", "Arial Narrow Bold", sans-serif;
		font-weight: bold;
		color: #000
		}

		.has-warning .help-block,
		.has-warning .control-label {
		color: #f57a00
		}

		.has-warning .form-control,
		.has-warning .form-control:focus {
		border-color: #f57a00
		}

		.has-error .help-block,
		.has-error .control-label {
		color: #eb6864
		}

		.has-error .form-control,
		.has-error .form-control:focus {
		border-color: #eb6864
		}

		.has-success .help-block,
		.has-success .control-label {
		color: #22b24c
		}

		.has-success .form-control,
		.has-success .form-control:focus {
		border-color: #22b24c
		}

		.pagination .active>a,
		.pagination .active>a:hover {
		border-color: #ddd
		}

		.jumbotron h1,
		.jumbotron h2,
		.jumbotron h3,
		.jumbotron h4,
		.jumbotron h5,
		.jumbotron h6 {
		font-family: "News Cycle", "Arial Narrow Bold", sans-serif;
		font-weight: bold;
		color: #000
		}

		.clearfix:before,
		.clearfix:after {
		display: table;
		content: " "
		}

		.clearfix:after {
		clear: both
		}

		.clearfix:before,
		.clearfix:after {
		display: table;
		content: " "
		}

		.clearfix:after {
		clear: both
		}

		.pull-right {
		float: right!important
		}

		.pull-left {
		float: left!important
		}

		.hide {
		display: none!important
		}

		.show {
		display: block!important
		}

		.invisible {
		visibility: hidden
		}

		.text-hide {
		font: 0/0 a;
		color: transparent;
		text-shadow: none;
		background-color: transparent;
		border: 0
		}

		.affix {
		position: fixed
		}
	</style>
	<script type="text/javascript">
        function UpdateTable() {
            $("#jqGrid")
                .jqGrid({
                    url: 'http://' + location.hostname + ':9981/progress.json',
                    mtype: "GET",
                    ajaxSubgridOptions: {
                        async: false
                    },
                    styleUI: 'Bootstrap',
                    datatype: "json",
                    colModel: [{
                        label: '#',
                        name: 'Id',
                        key: true,
                        width: 5
                    }, {
                        label: 'File Name',
                        name: 'FileName',
                        width: 15
                    }, {
                        label: 'Size',
                        name: 'Size',
                        width: 20,
                        formatter: FormatByte
                    }, {
                        label: 'Downloaded',
                        name: 'Downloaded',
                        width: 20,
                        formatter: FormatByte
                    }, {
                        label: '%',
                        name: 'Progress',
                        width: 5
                    }, {
                        label: 'Speed',
                        name: 'Speed',
                        width: 15,
                        formatter: FormatSpeedByte
                    }, {
                        label: 'Progress',
                        name: 'Progress',
                        formatter: FormatProgressBar
                    }],
                    viewrecords: true,
                    rowNum: 20,
                    pager: "#jqGridPager"
                });
        }

        function FixTable() {
            $.extend($.jgrid.ajaxOptions, {
                async: false
            })
            $("#jqGrid")
                .setGridWidth($(window)
                    .width() - 5)
            $("#jqGrid")
                .setGridHeight($(window)
                    .height())
            $(window)
                .bind('resize', function() {
                    $("#jqGrid")
                        .setGridWidth($(window)
                            .width() - 5);
                    $("#jqGrid")
                        .setGridHeight($(window)
                            .height())
                })
        }

        function UpdateData() {
            var grid = $("#jqGrid");
            var rowKey = grid.jqGrid('getGridParam', "selrow");
            $("#jqGrid").trigger("reloadGrid");
            if (rowKey) {
                $('#jqGrid').jqGrid("resetSelection")
                $('#jqGrid').jqGrid('setSelection', rowKey);
            }
        }

        function FormatProgressBar(cellValue, options, rowObject) {
            var intVal = parseInt(cellValue);

            var cellHtml = '<div class="progress"><div class="progress-bar" style="width: ' + intVal + '%;"></div></div>'

            return cellHtml;
        }

        function FormatByte(cellValue, options, rowObject) {
            var intVal = parseInt(cellValue);
            var ras = " B."
            if (intVal > 1024) {
                intVal /= 1024
                ras = " KB."
            }
            if (intVal > 1024) {
                intVal /= 1024
                ras = " MB."
            }
            if (intVal > 1024) {
                intVal /= 1024
                ras = " GB."
            }

            if (intVal > 1024) {
                intVal /= 1024
                ras = " TB."
            }
            var cellHtml = (intVal).toFixed(1) + ras;
            return cellHtml;
        }

        function FormatSpeedByte(cellValue, options, rowObject) {
            var intVal = parseInt(cellValue);
            var ras = " B/sec."
            if (intVal > 1024) {
                intVal /= 1024
                ras = " KB/sec."
            }
            if (intVal > 1024) {
                intVal /= 1024
                ras = " MB/sec."
            }
            if (intVal > 1024) {
                intVal /= 1024
                ras = " GB/sec"
            }

            if (intVal > 1024) {
                intVal /= 1024
                ras = " TB."
            }
            var cellHtml = (intVal).toFixed(1) + ras;
            return cellHtml;
        }

        function OnLoad() {

            UpdateTable()
            FixTable()
            setInterval(UpdateData, 500);
        }

        function AddDownload() {
            var req = {
                PartCount: parseInt($("#part_count_id").val()),
                FilePath: $("#save_path_id").val(),
                Url: $("#url_id").val()
            };
            $.ajax({
                    url: "/add_task",
                    type: "POST",
                    data: JSON.stringify(req),
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }

        function RemoveDownload() {
            var grid = $("#jqGrid");
            var rowKey = parseInt(grid.jqGrid('getGridParam', "selrow"));
            var req = rowKey;
            $.ajax({
                    url: "/remove_task",
                    type: "POST",
                    data: JSON.stringify(req),
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }

        function StartDownload() {
            var grid = $("#jqGrid");
            var rowKey = parseInt(grid.jqGrid('getGridParam', "selrow"));
            var req = rowKey;
            $.ajax({
                    url: "/start_task",
                    type: "POST",
                    data: JSON.stringify(req),
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }

        function StopDownload() {
            var grid = $("#jqGrid");
            var rowKey = parseInt(grid.jqGrid('getGridParam', "selrow"));
            var req = rowKey;
            $.ajax({
                    url: "/stop_task",
                    type: "POST",
                    data: JSON.stringify(req),
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }

        function StartAllDownload() {
            $.ajax({
                    url: "/start_all_task",
                    type: "POST",
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }

        function StopAllDownload() {
            $.ajax({
                    url: "/stop_all_task",
                    type: "POST",
                    dataType: "text"
                })
                .error(function(jsonData) {
                    console.log(jsonData)
                })
        }


        function OnChangeUrl() {
            var filename = $("#url_id").val().split('/').pop()
            $("#save_path_id").val(filename)
        }
    </script>
</head>

<body onload="OnLoad()">
<div class="navbar navbar-inverse navbar-fixed-top">
	<div class="container">
		<div class="navbar-header">
			<button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
				<span class="icon-bar"></span><span class="icon-bar"></span><span class="icon-bar"></span>
			</button>
			<a class="navbar-brand" href="#">GO Downloader</a>
		</div>
		<div class="navbar-collapse collapse">
			<ul class="nav navbar-nav">
				<li class="dropdown">
					<a href="#" class="dropdown-toggle" data-toggle="dropdown">File <b class="caret"></b></a>
					<ul class="dropdown-menu">
						<li>
							<a data-toggle="modal" data-target="#myModal">Add download</a>
						</li>
						<li onclick="RemoveDownload()">
							<a href="#">Delete download</a>
						</li>
					</ul>
				</li>
				<li class="dropdown">
					<a href="#" class="dropdown-toggle" data-toggle="dropdown">Action <b class="caret"></b></a>
					<ul class="dropdown-menu">
						<li onclick="StartDownload()">
							<a href="#">Start</a>
						</li>
						<li onclick="StopDownload()">
							<a href="#">Stop</a>
						</li>
						<li class="divider"></li>
						<li onclick="StartAllDownload()">
							<a href="#">Start all</a>
						</li>
						<li onclick="StopAllDownload()">
							<a href="#">Stop all</a>
						</li>
					</ul>
				</li>
				<li>
					<a href="#about">About</a>
				</li>
			</ul>
		</div>
		<!--/.navbar-collapse -->
	</div>
</div>
</P>
<table id="jqGrid"></table>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog">
	<div class="modal-dialog">

		<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">Enter Url</h4>
			</div>
			<div class="modal-body">
				<div class="form-group">
					<label class="control-label">Url</label>

					<div class="controls">
						<input type="text" onchange="OnChangeUrl()" id="url_id" class="form-control" value="http://mirror.yandex.ru/ubuntu-cdimage/releases/15.10/alpha-2/source/wily-src-1.iso">
					</div>
					<label class="control-label">Save path</label>

					<div class="controls">
						<input type="text" id="save_path_id" class="form-control" value="wily-src-1.iso">
					</div>
					<label class="control-label">Parts count</label>
					<select class="form-control" id="part_count_id">
						<option>1</option>
						<option>2</option>
						<option>4</option>
						<option>8</option>
						<option>16</option>
					</select>

					<div class="modal-footer">
						<a class="btn btn-primary" onclick="AddDownload()" data-dismiss="modal">Start download</a>
					</div>
				</div>
			</div>
		</div>

	</div>
</div>
</body>

</html>s"

func (srv *DServ) index(rwr http.ResponseWriter, req *http.Request) {
	defer req.Body.Close()
	rwr.Header().Set("Content-Type: text/html", "*")
	content, err := ioutil.ReadFile("index.html")
	if err != nil {
		log.Println("warning: start page not found, return included page")
		val, _ := base64.StdEncoding.DecodeString(htmlData)
		rwr.Write(val)
		return
	}
	rwr.Write(content)
}

func (srv *DServ) addTask(rwr http.ResponseWriter, req *http.Request) {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
		req.Body.Close()
	}()
	bodyData, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	var nj NewJob
	if err := json.Unmarshal(bodyData, &nj); err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	dl, err := httpclient.CreateDownloader(nj.Url, nj.FilePath, nj.PartCount)
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	srv.dls = append(srv.dls, dl)
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) startTask(rwr http.ResponseWriter, req *http.Request) {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
		req.Body.Close()
	}()
	bodyData, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	var ind int
	if err := json.Unmarshal(bodyData, &ind); err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	if !(len(srv.dls) > ind) {
		http.Error(rwr, "error: id is out of jobs list", http.StatusInternalServerError)
		return
	}

	if errs := srv.dls[ind].StartAll(); len(errs) > 0 {
		http.Error(rwr, "error: can't start all part", http.StatusInternalServerError)
		return
	}
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) stopTask(rwr http.ResponseWriter, req *http.Request) {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
		req.Body.Close()
	}()
	bodyData, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	var ind int
	if err := json.Unmarshal(bodyData, &ind); err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	if !(len(srv.dls) > ind) {
		http.Error(rwr, "error: id is out of jobs list", http.StatusInternalServerError)
		return
	}

	srv.dls[ind].StopAll()
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) startAllTask(rwr http.ResponseWriter, req *http.Request) {
	defer func() {
		req.Body.Close()
	}()
	_, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	srv.StartAllTask()
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) StopAllTask() {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
	}()
	for _, e := range srv.dls {
		log.Println("info stopall result:", e.StopAll())
	}
}

func (srv *DServ) StartAllTask() {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
	}()
	for _, e := range srv.dls {
		log.Println("info start all result:", e.StartAll())
	}
}
func (srv *DServ) stopAllTask(rwr http.ResponseWriter, req *http.Request) {
	defer func() {
		req.Body.Close()
	}()
	_, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	srv.StopAllTask()
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) removeTask(rwr http.ResponseWriter, req *http.Request) {
	srv.oplock.Lock()
	defer func() {
		srv.oplock.Unlock()
		req.Body.Close()
	}()
	bodyData, err := ioutil.ReadAll(req.Body)
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	var ind int
	if err := json.Unmarshal(bodyData, &ind); err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		log.Println(err)
		return
	}
	if !(len(srv.dls) > ind) {
		http.Error(rwr, "error: id is out of jobs list", http.StatusInternalServerError)
		return
	}

	log.Printf("try stop segment download %v", srv.dls[ind].StopAll())
	srv.dls = append(srv.dls[:ind], srv.dls[ind+1:]...)
	js, _ := json.Marshal("ok")
	rwr.Write(js)
}

func (srv *DServ) progressJson(rwr http.ResponseWriter, req *http.Request) {
	defer req.Body.Close()
	rwr.Header().Set("Access-Control-Allow-Origin", "*")
	jbs := make([]DJob, 0, len(srv.dls))
	for ind, i := range srv.dls {
		prs := i.GetProgress()
		var d int64
		var s int64
		for _, p := range prs {
			d = d + (p.Pos - p.From)
			s += p.Speed
		}
		j := DJob{
			Id:         ind,
			FileName:   i.Fi.FileName,
			Size:       i.Fi.Size,
			Progress:   (d * 100 / i.Fi.Size),
			Downloaded: d,
			Speed:      s,
		}
		jbs = append(jbs, j)
	}
	js, err := json.Marshal(jbs)
	if err != nil {
		http.Error(rwr, err.Error(), http.StatusInternalServerError)
		return
	}
	rwr.Write(js)

}
func (service *DServ) Redirect(responseWriter http.ResponseWriter, request *http.Request) {
	defer request.Body.Close()
	http.Redirect(responseWriter, request, "/index.html", 301)
}
